/* USER CODE BEGIN Header */
/**
 ******************************************************************************
 * @file           : main.c
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * <h2><center>&copy; Copyright (c) 2020 STMicroelectronics.
 * All rights reserved.</center></h2>
 *
 * This software component is licensed by ST under BSD 3-Clause license,
 * the "License"; You may not use this file except in compliance with the
 * License. You may obtain a copy of the License at:
 *                        opensource.org/licenses/BSD-3-Clause
 *
 ******************************************************************************
 */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include <stdio.h>
#include <string.h>
#include <stdlib.h>

#include "debug.h"

#include "analog.h"

#include "buttons.h"

#include "gfx.h"
#include "ssd1306.h"

#include "leds.h"

#include "mcp4018.h"

/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
#define INFO_TEXT_SIZE Font_7x10
#define ERROR_TEXT_SIZE Font_11x18
#define REFRESH_INTERVAL 2500	// 2500 / (84Î•6 / 8400) = 0.25s
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
ADC_HandleTypeDef hadc1;

I2C_HandleTypeDef hi2c1;

TIM_HandleTypeDef htim10;

UART_HandleTypeDef huart2;

/* USER CODE BEGIN PV */
struct Stats psuStats;
uint8_t swIntFlag = RESET;
uint16_t timerVal = 0;
uint8_t timerFlag = RESET;
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_ADC1_Init(void);
static void MX_I2C1_Init(void);
static void MX_USART2_UART_Init(void);
static void MX_TIM10_Init(void);
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
	/* USER CODE BEGIN 1 */

	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();

	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();

	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
	MX_ADC1_Init();
	MX_I2C1_Init();
	MX_USART2_UART_Init();
	MX_TIM10_Init();
	/* USER CODE BEGIN 2 */

	//check for i2c devices
	uint8_t i2cScanRet = i2cScan();
	if (!i2cScanRet) {
		errorLEDs(i2cScanRet);
	}
	printMsg("no I2C errors\n\n");

	//initialize entire system
	initPSU();
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {

		//get all info from ADCs
		double Vin = readVin();

		double Vout = readVout();

		double Iout = readIOut();

		//update display only when enough time has passed
		if (__HAL_TIM_GET_COUNTER(&htim10) - timerVal >= REFRESH_INTERVAL) {
			if (__HAL_TIM_GET_COUNTER(&htim10) - timerVal >= 1000){
				psuStats.OE = 5;
			}
			timerFlag = SET;
			displayVoltageCurrent(Vin, Vout, Iout);
			timerVal = __HAL_TIM_GET_COUNTER(&htim10);
		}

		//only handle buttons if interrupt was flagged
		if (swIntFlag == SET) {
			buttonsHandler(whichBtn());
			swIntFlag = RESET;
		}

		//check for current surpassing set limit
		if (Iout > psuStats.iSet) {
			psuStats.iLim = I_LIM_SET;
		} else {
			psuStats.iLim = I_LIM_NSET;
		}

		//set LEDs according to setup/errors
		setLeds(psuStats);
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
	}
	/* USER CODE END 3 */
}

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
	RCC_OscInitStruct.PLL.PLLM = 8;
	RCC_OscInitStruct.PLL.PLLN = 84;
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
	RCC_OscInitStruct.PLL.PLLQ = 4;
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
		Error_Handler();
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
		Error_Handler();
	}
}

/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };

	/* USER CODE BEGIN ADC1_Init 1 */

	/* USER CODE END ADC1_Init 1 */
	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc1.Instance = ADC1;
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
	hadc1.Init.ScanConvMode = ENABLE;
	hadc1.Init.ContinuousConvMode = ENABLE;
	hadc1.Init.DiscontinuousConvMode = DISABLE;
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
	hadc1.Init.NbrOfConversion = 3;
	hadc1.Init.DMAContinuousRequests = DISABLE;
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
		Error_Handler();
	}
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_0;
	sConfig.Rank = 1;
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
		Error_Handler();
	}
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_1;
	sConfig.Rank = 2;
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
		Error_Handler();
	}
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_13;
	sConfig.Rank = 3;
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
		Error_Handler();
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}

/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {

	/* USER CODE BEGIN I2C1_Init 0 */

	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
	hi2c1.Init.ClockSpeed = 400000;
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
	hi2c1.Init.OwnAddress1 = 0;
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
	hi2c1.Init.OwnAddress2 = 0;
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
		Error_Handler();
	}
	/* USER CODE BEGIN I2C1_Init 2 */
	/* USER CODE END I2C1_Init 2 */

}

/**
 * @brief TIM10 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM10_Init(void) {

	/* USER CODE BEGIN TIM10_Init 0 */

	/* USER CODE END TIM10_Init 0 */

	/* USER CODE BEGIN TIM10_Init 1 */

	/* USER CODE END TIM10_Init 1 */
	htim10.Instance = TIM10;
	htim10.Init.Prescaler = 8400 - 1;
	htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
	htim10.Init.Period = 65535;
	htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
	htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
	if (HAL_TIM_Base_Init(&htim10) != HAL_OK) {
		Error_Handler();
	}
	/* USER CODE BEGIN TIM10_Init 2 */

	/* USER CODE END TIM10_Init 2 */

}

/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {

	/* USER CODE BEGIN USART2_Init 0 */

	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
	huart2.Init.BaudRate = 115200;
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
	huart2.Init.StopBits = UART_STOPBITS_1;
	huart2.Init.Parity = UART_PARITY_NONE;
	huart2.Init.Mode = UART_MODE_TX_RX;
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
	if (HAL_UART_Init(&huart2) != HAL_OK) {
		Error_Handler();
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}

/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
	__HAL_RCC_GPIOA_CLK_ENABLE();
	__HAL_RCC_GPIOD_CLK_ENABLE();
	__HAL_RCC_GPIOB_CLK_ENABLE();

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, REG_EN_Pin | CC_LED_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5 | VI_LED_Pin | OE_LED_Pin,
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, nSW_UP_Pin | OLED_RST_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pins : REG_EN_Pin CC_LED_Pin */
	GPIO_InitStruct.Pin = REG_EN_Pin | CC_LED_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

	/*Configure GPIO pins : PA5 VI_LED_Pin OE_LED_Pin */
	GPIO_InitStruct.Pin = GPIO_PIN_5 | VI_LED_Pin | OE_LED_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

	/*Configure GPIO pin : nSW_INT_Pin */
	GPIO_InitStruct.Pin = nSW_INT_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	HAL_GPIO_Init(nSW_INT_GPIO_Port, &GPIO_InitStruct);

	/*Configure GPIO pin : nSW_VI_Pin */
	GPIO_InitStruct.Pin = nSW_VI_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	HAL_GPIO_Init(nSW_VI_GPIO_Port, &GPIO_InitStruct);

	/*Configure GPIO pin : nSW_DW_Pin */
	GPIO_InitStruct.Pin = nSW_DW_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	HAL_GPIO_Init(nSW_DW_GPIO_Port, &GPIO_InitStruct);

	/*Configure GPIO pins : nSW_UP_Pin OLED_RST_Pin */
	GPIO_InitStruct.Pin = nSW_UP_Pin | OLED_RST_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

	/*Configure GPIO pin : nSW_OE_Pin */
	GPIO_InitStruct.Pin = nSW_OE_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	HAL_GPIO_Init(nSW_OE_GPIO_Port, &GPIO_InitStruct);

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 0);
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);

}

/* USER CODE BEGIN 4 */
void initPSU(void) {
	//init struct for PSU
	psuStats.vSet = V_DEFAULT;
	psuStats.iSet = I_DEFAULT;
	psuStats.iLim = I_LIM_DEFAULT;
	psuStats.VI = VI_DEFAULT;
	psuStats.OE = OE_DEFAULT;

	//show current settings on LEDs
	setLeds(psuStats);

	//init and show logo on OLED
	ssd1306_Init();
	ssd1306_Fill(SSD1306_BLACK);
	showStartup();
	HAL_StatusTypeDef adcRet = HAL_ADC_Start(&hadc1);
	if (adcRet != HAL_OK) {
		ssd1306_WriteErrorMsg(2, 12, "ADC start failed");
	}

	//set pot value for Vout (half)
	MCP4018_WriteVal(psuStats.vSet);

	//initialize screen update timer
	HAL_TIM_Base_Start(&htim10);
	timerVal = __HAL_TIM_GET_COUNTER(&htim10);
}

void showStartup(void) {
	//show logo
	ssd1306_DrawBitMap(0, 0, BOOTSCREEN, 128, 32, SSD1306_WHITE);
	HAL_Delay(2000);
}

void displayVoltageCurrent(double Vin, double V, double I) {
	//clear screen
	ssd1306_Fill(SSD1306_BLACK);

	char buff[10] = { };

	//Display voltage in
	ssd1306_SetCursor(INFO_X, VIN_Y);
	ssd1306_WriteString("Vin = ", INFO_TEXT_SIZE, SSD1306_WHITE);
	if (Vin > 1000) {
		sprintf(buff, "%4.2f", Vin / 1000);
		ssd1306_WriteString(buff, INFO_TEXT_SIZE, SSD1306_WHITE);
		ssd1306_WriteString("V", INFO_TEXT_SIZE, SSD1306_WHITE);
	} else {
		sprintf(buff, "%4.2f", Vin);
		ssd1306_WriteString(buff, INFO_TEXT_SIZE, SSD1306_WHITE);
		ssd1306_WriteString("mV", INFO_TEXT_SIZE, SSD1306_WHITE);
	}

	//display whether PSU output is enabled
	ssd1306_SetCursor(ON_OFF_X, VIN_Y);
	if (psuStats.OE == OE_ENABLED)
		ssd1306_WriteString("ON", INFO_TEXT_SIZE, SSD1306_WHITE);
	else
		ssd1306_WriteString("OFF", INFO_TEXT_SIZE, SSD1306_WHITE);

	//display set voltage
	ssd1306_SetCursor(INFO_X, VSET_Y);
	ssd1306_WriteString("Vset = ", INFO_TEXT_SIZE, SSD1306_WHITE);
	if (vSetCalc() >= 1000) {
		sprintf(buff, "%4.2f", (double) vSetCalc() / 1000.0);
		ssd1306_WriteString(buff, INFO_TEXT_SIZE, SSD1306_WHITE);
		if (psuStats.VI == VI_V_SEL)
			ssd1306_WriteString("V <<", INFO_TEXT_SIZE, SSD1306_WHITE);
		else
			ssd1306_WriteString("V", INFO_TEXT_SIZE, SSD1306_WHITE);
	} else {
		sprintf(buff, "%4.2f", (double) psuStats.vSet);
		ssd1306_WriteString(buff, INFO_TEXT_SIZE, SSD1306_WHITE);
		if (psuStats.VI == VI_V_SEL)
			ssd1306_WriteString("mV <<", INFO_TEXT_SIZE, SSD1306_WHITE);
		else
			ssd1306_WriteString("mV", INFO_TEXT_SIZE, SSD1306_WHITE);
	}

	//display output voltage
	ssd1306_SetCursor(INFO_X, VOUT_Y);
	ssd1306_WriteString("Vout = ", INFO_TEXT_SIZE, SSD1306_WHITE);
	if (V >= 1000) {
		sprintf(buff, "%4.2f", V / 1000.0);
		ssd1306_WriteString(buff, INFO_TEXT_SIZE, SSD1306_WHITE);
		ssd1306_WriteString("V", INFO_TEXT_SIZE, SSD1306_WHITE);
	} else {
		sprintf(buff, "%4.2f", V);
		ssd1306_WriteString(buff, INFO_TEXT_SIZE, SSD1306_WHITE);
		ssd1306_WriteString("mV", INFO_TEXT_SIZE, SSD1306_WHITE);
	}

	//display set current
	ssd1306_SetCursor(INFO_X, ISET_Y);
	ssd1306_WriteString("Iset = ", INFO_TEXT_SIZE, SSD1306_WHITE);
	if (psuStats.iSet >= 1000) {
		sprintf(buff, "%4.2f", (double) psuStats.iSet / 1000.0);
		ssd1306_WriteString(buff, INFO_TEXT_SIZE, SSD1306_WHITE);
		if (psuStats.VI == VI_I_SEL)
			ssd1306_WriteString("A <<", INFO_TEXT_SIZE, SSD1306_WHITE);
		else
			ssd1306_WriteString("A", INFO_TEXT_SIZE, SSD1306_WHITE);
	} else {
		sprintf(buff, "%4.2f", (double) psuStats.iSet);
		ssd1306_WriteString(buff, INFO_TEXT_SIZE, SSD1306_WHITE);
		if (psuStats.VI == VI_I_SEL)
			ssd1306_WriteString("mA <<", INFO_TEXT_SIZE, SSD1306_WHITE);
		else
			ssd1306_WriteString("mA", INFO_TEXT_SIZE, SSD1306_WHITE);
	}

	//display output current
	ssd1306_SetCursor(INFO_X, IOUT_Y);
	ssd1306_WriteString("Iout = ", INFO_TEXT_SIZE, SSD1306_WHITE);
	if (I >= 1000) {
		sprintf(buff, "%4.2f", I / 1000.0);
		ssd1306_WriteString(buff, INFO_TEXT_SIZE, SSD1306_WHITE);
		ssd1306_WriteString("A", INFO_TEXT_SIZE, SSD1306_WHITE);
	} else {
		sprintf(buff, "%4.2f", I);
		ssd1306_WriteString(buff, INFO_TEXT_SIZE, SSD1306_WHITE);
		ssd1306_WriteString("mA", INFO_TEXT_SIZE, SSD1306_WHITE);
	}

	ssd1306_UpdateScreen();
}

void enableOutput(void) {
	HAL_GPIO_WritePin(REG_EN_GPIO_Port, REG_EN_Pin, GPIO_PIN_RESET);
}

void disableOutput(void) {
	HAL_GPIO_WritePin(REG_EN_GPIO_Port, REG_EN_Pin, GPIO_PIN_SET);
}

void buttonsHandler(uint8_t buttons) {
	if (buttons & VI_BTN) {
		if (psuStats.VI == VI_V_SEL) {
			psuStats.VI = VI_I_SEL;
		} else if (psuStats.VI == VI_I_SEL) {
			psuStats.VI = VI_V_SEL;
		} else { //something went wrong, reinit psu
			fatalErrorScreen();
			initPSU();
		}
	}

	if (buttons & UP_BTN) {
		if (psuStats.VI & VI_V_SEL) {
			psuStats.vSet++;
			MCP4018_WriteVal(psuStats.vSet);
		} else if (psuStats.VI & VI_I_SEL) {
			psuStats.iSet++;
		} else { //something went wrong, reinit psu
			fatalErrorScreen
			initPSU();
		}
	}

	if (buttons & DW_BTN) {
		if (psuStats.VI & VI_V_SEL) {
			psuStats.vSet--;
			MCP4018_WriteVal(psuStats.vSet);
		} else if (psuStats.VI & VI_I_SEL) {
			psuStats.iSet--;
		} else { //something went wrong, reinit psu
			fatalErrorScreen
			initPSU();
		}
	}

	if (buttons & OE_BTN) {
		if (psuStats.OE == OE_ENABLED) {
			psuStats.OE = OE_DISABLED;
			disableOutput();
		} else if (psuStats.OE == OE_DISABLED) {
			psuStats.OE = OE_ENABLED;
			enableOutput();
		} else { //something went wrong, reinit psu
			fatalErrorScreen
			initPSU();
		}
	}
}

uint32_t vSetCalc(void) {
	return (psuStats.vSet - 0) * (12000 - 0) / (0x7F - 0) + 0;
}

void fatalErrorScreen(void) {
	disableOutput();
	//clear screen
	ssd1306_Fill(SSD1306_BLACK);

	ssd1306_SetCursor(2, 0);
	ssd1306_WriteString("FATAL", ERROR_TEXT_SIZE, SSD1306_WHITE);
	ssd1306_SetCursor(2, 20);
	ssd1306_WriteString("ERROR!", ERROR_TEXT_SIZE, SSD1306_WHITE);
	ssd1306_SetCursor(2, 40);
	ssd1306_WriteString("Reinit!...", INFO_TEXT_SIZE, SSD1306_WHITE);
	ssd1306_UpdateScreen();
	HAL_Delay(5000);
}
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
	if (GPIO_Pin == nSW_INT_Pin) // If The INT Source Is EXTI Line9 (A9 Pin)
	{
		swIntFlag = SET;
		printMsg("Int\n");
		buttonsHandler(OE_BTN | VI_BTN);
	}
}

/* USER CODE END 4 */

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
	}
	/* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */

/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
