
PSU_FW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006814  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ca8  080069b8  080069b8  000169b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007660  08007660  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  08007660  08007660  00017660  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007668  08007668  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007668  08007668  00017668  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800766c  0800766c  0001766c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  08007670  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000514  200001e4  08007854  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200006f8  08007854  000206f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d526  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001ea9  00000000  00000000  0002d73a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000b20  00000000  00000000  0002f5e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000a38  00000000  00000000  00030108  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00017295  00000000  00000000  00030b40  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000a551  00000000  00000000  00047dd5  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008cc6c  00000000  00000000  00052326  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000def92  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000377c  00000000  00000000  000df010  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e4 	.word	0x200001e4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800699c 	.word	0x0800699c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e8 	.word	0x200001e8
 80001dc:	0800699c 	.word	0x0800699c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ce:	f1a4 0401 	sub.w	r4, r4, #1
 80003d2:	d1e9      	bne.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bcc:	f000 b972 	b.w	8000eb4 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9e08      	ldr	r6, [sp, #32]
 8000bee:	4604      	mov	r4, r0
 8000bf0:	4688      	mov	r8, r1
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d14b      	bne.n	8000c8e <__udivmoddi4+0xa6>
 8000bf6:	428a      	cmp	r2, r1
 8000bf8:	4615      	mov	r5, r2
 8000bfa:	d967      	bls.n	8000ccc <__udivmoddi4+0xe4>
 8000bfc:	fab2 f282 	clz	r2, r2
 8000c00:	b14a      	cbz	r2, 8000c16 <__udivmoddi4+0x2e>
 8000c02:	f1c2 0720 	rsb	r7, r2, #32
 8000c06:	fa01 f302 	lsl.w	r3, r1, r2
 8000c0a:	fa20 f707 	lsr.w	r7, r0, r7
 8000c0e:	4095      	lsls	r5, r2
 8000c10:	ea47 0803 	orr.w	r8, r7, r3
 8000c14:	4094      	lsls	r4, r2
 8000c16:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c1a:	0c23      	lsrs	r3, r4, #16
 8000c1c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c20:	fa1f fc85 	uxth.w	ip, r5
 8000c24:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c28:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c2c:	fb07 f10c 	mul.w	r1, r7, ip
 8000c30:	4299      	cmp	r1, r3
 8000c32:	d909      	bls.n	8000c48 <__udivmoddi4+0x60>
 8000c34:	18eb      	adds	r3, r5, r3
 8000c36:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000c3a:	f080 811b 	bcs.w	8000e74 <__udivmoddi4+0x28c>
 8000c3e:	4299      	cmp	r1, r3
 8000c40:	f240 8118 	bls.w	8000e74 <__udivmoddi4+0x28c>
 8000c44:	3f02      	subs	r7, #2
 8000c46:	442b      	add	r3, r5
 8000c48:	1a5b      	subs	r3, r3, r1
 8000c4a:	b2a4      	uxth	r4, r4
 8000c4c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c50:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c58:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c5c:	45a4      	cmp	ip, r4
 8000c5e:	d909      	bls.n	8000c74 <__udivmoddi4+0x8c>
 8000c60:	192c      	adds	r4, r5, r4
 8000c62:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c66:	f080 8107 	bcs.w	8000e78 <__udivmoddi4+0x290>
 8000c6a:	45a4      	cmp	ip, r4
 8000c6c:	f240 8104 	bls.w	8000e78 <__udivmoddi4+0x290>
 8000c70:	3802      	subs	r0, #2
 8000c72:	442c      	add	r4, r5
 8000c74:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c78:	eba4 040c 	sub.w	r4, r4, ip
 8000c7c:	2700      	movs	r7, #0
 8000c7e:	b11e      	cbz	r6, 8000c88 <__udivmoddi4+0xa0>
 8000c80:	40d4      	lsrs	r4, r2
 8000c82:	2300      	movs	r3, #0
 8000c84:	e9c6 4300 	strd	r4, r3, [r6]
 8000c88:	4639      	mov	r1, r7
 8000c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8e:	428b      	cmp	r3, r1
 8000c90:	d909      	bls.n	8000ca6 <__udivmoddi4+0xbe>
 8000c92:	2e00      	cmp	r6, #0
 8000c94:	f000 80eb 	beq.w	8000e6e <__udivmoddi4+0x286>
 8000c98:	2700      	movs	r7, #0
 8000c9a:	e9c6 0100 	strd	r0, r1, [r6]
 8000c9e:	4638      	mov	r0, r7
 8000ca0:	4639      	mov	r1, r7
 8000ca2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca6:	fab3 f783 	clz	r7, r3
 8000caa:	2f00      	cmp	r7, #0
 8000cac:	d147      	bne.n	8000d3e <__udivmoddi4+0x156>
 8000cae:	428b      	cmp	r3, r1
 8000cb0:	d302      	bcc.n	8000cb8 <__udivmoddi4+0xd0>
 8000cb2:	4282      	cmp	r2, r0
 8000cb4:	f200 80fa 	bhi.w	8000eac <__udivmoddi4+0x2c4>
 8000cb8:	1a84      	subs	r4, r0, r2
 8000cba:	eb61 0303 	sbc.w	r3, r1, r3
 8000cbe:	2001      	movs	r0, #1
 8000cc0:	4698      	mov	r8, r3
 8000cc2:	2e00      	cmp	r6, #0
 8000cc4:	d0e0      	beq.n	8000c88 <__udivmoddi4+0xa0>
 8000cc6:	e9c6 4800 	strd	r4, r8, [r6]
 8000cca:	e7dd      	b.n	8000c88 <__udivmoddi4+0xa0>
 8000ccc:	b902      	cbnz	r2, 8000cd0 <__udivmoddi4+0xe8>
 8000cce:	deff      	udf	#255	; 0xff
 8000cd0:	fab2 f282 	clz	r2, r2
 8000cd4:	2a00      	cmp	r2, #0
 8000cd6:	f040 808f 	bne.w	8000df8 <__udivmoddi4+0x210>
 8000cda:	1b49      	subs	r1, r1, r5
 8000cdc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ce0:	fa1f f885 	uxth.w	r8, r5
 8000ce4:	2701      	movs	r7, #1
 8000ce6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000cea:	0c23      	lsrs	r3, r4, #16
 8000cec:	fb0e 111c 	mls	r1, lr, ip, r1
 8000cf0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cf4:	fb08 f10c 	mul.w	r1, r8, ip
 8000cf8:	4299      	cmp	r1, r3
 8000cfa:	d907      	bls.n	8000d0c <__udivmoddi4+0x124>
 8000cfc:	18eb      	adds	r3, r5, r3
 8000cfe:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000d02:	d202      	bcs.n	8000d0a <__udivmoddi4+0x122>
 8000d04:	4299      	cmp	r1, r3
 8000d06:	f200 80cd 	bhi.w	8000ea4 <__udivmoddi4+0x2bc>
 8000d0a:	4684      	mov	ip, r0
 8000d0c:	1a59      	subs	r1, r3, r1
 8000d0e:	b2a3      	uxth	r3, r4
 8000d10:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d14:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d18:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d1c:	fb08 f800 	mul.w	r8, r8, r0
 8000d20:	45a0      	cmp	r8, r4
 8000d22:	d907      	bls.n	8000d34 <__udivmoddi4+0x14c>
 8000d24:	192c      	adds	r4, r5, r4
 8000d26:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0x14a>
 8000d2c:	45a0      	cmp	r8, r4
 8000d2e:	f200 80b6 	bhi.w	8000e9e <__udivmoddi4+0x2b6>
 8000d32:	4618      	mov	r0, r3
 8000d34:	eba4 0408 	sub.w	r4, r4, r8
 8000d38:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d3c:	e79f      	b.n	8000c7e <__udivmoddi4+0x96>
 8000d3e:	f1c7 0c20 	rsb	ip, r7, #32
 8000d42:	40bb      	lsls	r3, r7
 8000d44:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d48:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d4c:	fa01 f407 	lsl.w	r4, r1, r7
 8000d50:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d54:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d58:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d5c:	4325      	orrs	r5, r4
 8000d5e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d62:	0c2c      	lsrs	r4, r5, #16
 8000d64:	fb08 3319 	mls	r3, r8, r9, r3
 8000d68:	fa1f fa8e 	uxth.w	sl, lr
 8000d6c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d70:	fb09 f40a 	mul.w	r4, r9, sl
 8000d74:	429c      	cmp	r4, r3
 8000d76:	fa02 f207 	lsl.w	r2, r2, r7
 8000d7a:	fa00 f107 	lsl.w	r1, r0, r7
 8000d7e:	d90b      	bls.n	8000d98 <__udivmoddi4+0x1b0>
 8000d80:	eb1e 0303 	adds.w	r3, lr, r3
 8000d84:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000d88:	f080 8087 	bcs.w	8000e9a <__udivmoddi4+0x2b2>
 8000d8c:	429c      	cmp	r4, r3
 8000d8e:	f240 8084 	bls.w	8000e9a <__udivmoddi4+0x2b2>
 8000d92:	f1a9 0902 	sub.w	r9, r9, #2
 8000d96:	4473      	add	r3, lr
 8000d98:	1b1b      	subs	r3, r3, r4
 8000d9a:	b2ad      	uxth	r5, r5
 8000d9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000da0:	fb08 3310 	mls	r3, r8, r0, r3
 8000da4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000da8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000dac:	45a2      	cmp	sl, r4
 8000dae:	d908      	bls.n	8000dc2 <__udivmoddi4+0x1da>
 8000db0:	eb1e 0404 	adds.w	r4, lr, r4
 8000db4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000db8:	d26b      	bcs.n	8000e92 <__udivmoddi4+0x2aa>
 8000dba:	45a2      	cmp	sl, r4
 8000dbc:	d969      	bls.n	8000e92 <__udivmoddi4+0x2aa>
 8000dbe:	3802      	subs	r0, #2
 8000dc0:	4474      	add	r4, lr
 8000dc2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000dc6:	fba0 8902 	umull	r8, r9, r0, r2
 8000dca:	eba4 040a 	sub.w	r4, r4, sl
 8000dce:	454c      	cmp	r4, r9
 8000dd0:	46c2      	mov	sl, r8
 8000dd2:	464b      	mov	r3, r9
 8000dd4:	d354      	bcc.n	8000e80 <__udivmoddi4+0x298>
 8000dd6:	d051      	beq.n	8000e7c <__udivmoddi4+0x294>
 8000dd8:	2e00      	cmp	r6, #0
 8000dda:	d069      	beq.n	8000eb0 <__udivmoddi4+0x2c8>
 8000ddc:	ebb1 050a 	subs.w	r5, r1, sl
 8000de0:	eb64 0403 	sbc.w	r4, r4, r3
 8000de4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000de8:	40fd      	lsrs	r5, r7
 8000dea:	40fc      	lsrs	r4, r7
 8000dec:	ea4c 0505 	orr.w	r5, ip, r5
 8000df0:	e9c6 5400 	strd	r5, r4, [r6]
 8000df4:	2700      	movs	r7, #0
 8000df6:	e747      	b.n	8000c88 <__udivmoddi4+0xa0>
 8000df8:	f1c2 0320 	rsb	r3, r2, #32
 8000dfc:	fa20 f703 	lsr.w	r7, r0, r3
 8000e00:	4095      	lsls	r5, r2
 8000e02:	fa01 f002 	lsl.w	r0, r1, r2
 8000e06:	fa21 f303 	lsr.w	r3, r1, r3
 8000e0a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e0e:	4338      	orrs	r0, r7
 8000e10:	0c01      	lsrs	r1, r0, #16
 8000e12:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e16:	fa1f f885 	uxth.w	r8, r5
 8000e1a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e1e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e22:	fb07 f308 	mul.w	r3, r7, r8
 8000e26:	428b      	cmp	r3, r1
 8000e28:	fa04 f402 	lsl.w	r4, r4, r2
 8000e2c:	d907      	bls.n	8000e3e <__udivmoddi4+0x256>
 8000e2e:	1869      	adds	r1, r5, r1
 8000e30:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000e34:	d22f      	bcs.n	8000e96 <__udivmoddi4+0x2ae>
 8000e36:	428b      	cmp	r3, r1
 8000e38:	d92d      	bls.n	8000e96 <__udivmoddi4+0x2ae>
 8000e3a:	3f02      	subs	r7, #2
 8000e3c:	4429      	add	r1, r5
 8000e3e:	1acb      	subs	r3, r1, r3
 8000e40:	b281      	uxth	r1, r0
 8000e42:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e46:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e4a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e4e:	fb00 f308 	mul.w	r3, r0, r8
 8000e52:	428b      	cmp	r3, r1
 8000e54:	d907      	bls.n	8000e66 <__udivmoddi4+0x27e>
 8000e56:	1869      	adds	r1, r5, r1
 8000e58:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000e5c:	d217      	bcs.n	8000e8e <__udivmoddi4+0x2a6>
 8000e5e:	428b      	cmp	r3, r1
 8000e60:	d915      	bls.n	8000e8e <__udivmoddi4+0x2a6>
 8000e62:	3802      	subs	r0, #2
 8000e64:	4429      	add	r1, r5
 8000e66:	1ac9      	subs	r1, r1, r3
 8000e68:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e6c:	e73b      	b.n	8000ce6 <__udivmoddi4+0xfe>
 8000e6e:	4637      	mov	r7, r6
 8000e70:	4630      	mov	r0, r6
 8000e72:	e709      	b.n	8000c88 <__udivmoddi4+0xa0>
 8000e74:	4607      	mov	r7, r0
 8000e76:	e6e7      	b.n	8000c48 <__udivmoddi4+0x60>
 8000e78:	4618      	mov	r0, r3
 8000e7a:	e6fb      	b.n	8000c74 <__udivmoddi4+0x8c>
 8000e7c:	4541      	cmp	r1, r8
 8000e7e:	d2ab      	bcs.n	8000dd8 <__udivmoddi4+0x1f0>
 8000e80:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e84:	eb69 020e 	sbc.w	r2, r9, lr
 8000e88:	3801      	subs	r0, #1
 8000e8a:	4613      	mov	r3, r2
 8000e8c:	e7a4      	b.n	8000dd8 <__udivmoddi4+0x1f0>
 8000e8e:	4660      	mov	r0, ip
 8000e90:	e7e9      	b.n	8000e66 <__udivmoddi4+0x27e>
 8000e92:	4618      	mov	r0, r3
 8000e94:	e795      	b.n	8000dc2 <__udivmoddi4+0x1da>
 8000e96:	4667      	mov	r7, ip
 8000e98:	e7d1      	b.n	8000e3e <__udivmoddi4+0x256>
 8000e9a:	4681      	mov	r9, r0
 8000e9c:	e77c      	b.n	8000d98 <__udivmoddi4+0x1b0>
 8000e9e:	3802      	subs	r0, #2
 8000ea0:	442c      	add	r4, r5
 8000ea2:	e747      	b.n	8000d34 <__udivmoddi4+0x14c>
 8000ea4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ea8:	442b      	add	r3, r5
 8000eaa:	e72f      	b.n	8000d0c <__udivmoddi4+0x124>
 8000eac:	4638      	mov	r0, r7
 8000eae:	e708      	b.n	8000cc2 <__udivmoddi4+0xda>
 8000eb0:	4637      	mov	r7, r6
 8000eb2:	e6e9      	b.n	8000c88 <__udivmoddi4+0xa0>

08000eb4 <__aeabi_idiv0>:
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop

08000eb8 <printMsg>:
#include "stm32f4xx_hal.h"
#include "stm32f4xx_hal_gpio.h"
#include "leds.h"

void printMsg(char *format, ...)
{
 8000eb8:	b40f      	push	{r0, r1, r2, r3}
 8000eba:	b580      	push	{r7, lr}
 8000ebc:	b096      	sub	sp, #88	; 0x58
 8000ebe:	af00      	add	r7, sp, #0
	char str[80];

	/*Extract the the argument list using VA apis */
	va_list args;
	va_start(args, format);
 8000ec0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000ec4:	607b      	str	r3, [r7, #4]
	vsprintf(str, format, args);
 8000ec6:	f107 0308 	add.w	r3, r7, #8
 8000eca:	687a      	ldr	r2, [r7, #4]
 8000ecc:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f004 f9bc 	bl	800524c <vsiprintf>
	HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen(str), HAL_MAX_DELAY);
 8000ed4:	f107 0308 	add.w	r3, r7, #8
 8000ed8:	4618      	mov	r0, r3
 8000eda:	f7ff f981 	bl	80001e0 <strlen>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	b29a      	uxth	r2, r3
 8000ee2:	f107 0108 	add.w	r1, r7, #8
 8000ee6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000eea:	4805      	ldr	r0, [pc, #20]	; (8000f00 <printMsg+0x48>)
 8000eec:	f003 f867 	bl	8003fbe <HAL_UART_Transmit>
	va_end(args);
}
 8000ef0:	bf00      	nop
 8000ef2:	3758      	adds	r7, #88	; 0x58
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000efa:	b004      	add	sp, #16
 8000efc:	4770      	bx	lr
 8000efe:	bf00      	nop
 8000f00:	200006b0 	.word	0x200006b0

08000f04 <i2cScan>:

uint8_t i2cScan(void)
{
 8000f04:	b5b0      	push	{r4, r5, r7, lr}
 8000f06:	b088      	sub	sp, #32
 8000f08:	af00      	add	r7, sp, #0
	char info[] = "Scanning I2C bus...\r\n";
 8000f0a:	4b31      	ldr	r3, [pc, #196]	; (8000fd0 <i2cScan+0xcc>)
 8000f0c:	1d3c      	adds	r4, r7, #4
 8000f0e:	461d      	mov	r5, r3
 8000f10:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f12:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f14:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000f18:	6020      	str	r0, [r4, #0]
 8000f1a:	3404      	adds	r4, #4
 8000f1c:	8021      	strh	r1, [r4, #0]
	printMsg(info);
 8000f1e:	1d3b      	adds	r3, r7, #4
 8000f20:	4618      	mov	r0, r3
 8000f22:	f7ff ffc9 	bl	8000eb8 <printMsg>

	uint8_t devices = 0;
 8000f26:	2300      	movs	r3, #0
 8000f28:	77fb      	strb	r3, [r7, #31]

	HAL_StatusTypeDef res;

	for (uint16_t i = 0; i < 128; i++)
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	83bb      	strh	r3, [r7, #28]
 8000f2e:	e042      	b.n	8000fb6 <i2cScan+0xb2>
	{
		res = HAL_I2C_IsDeviceReady(&hi2c1, i << 1, 1, 10);
 8000f30:	8bbb      	ldrh	r3, [r7, #28]
 8000f32:	005b      	lsls	r3, r3, #1
 8000f34:	b299      	uxth	r1, r3
 8000f36:	230a      	movs	r3, #10
 8000f38:	2201      	movs	r2, #1
 8000f3a:	4826      	ldr	r0, [pc, #152]	; (8000fd4 <i2cScan+0xd0>)
 8000f3c:	f002 f86a 	bl	8003014 <HAL_I2C_IsDeviceReady>
 8000f40:	4603      	mov	r3, r0
 8000f42:	76fb      	strb	r3, [r7, #27]
		if (res == HAL_OK && (i << 1) == SSD1306_I2C_ADDR)
 8000f44:	7efb      	ldrb	r3, [r7, #27]
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d10d      	bne.n	8000f66 <i2cScan+0x62>
 8000f4a:	8bbb      	ldrh	r3, [r7, #28]
 8000f4c:	005b      	lsls	r3, r3, #1
 8000f4e:	2b78      	cmp	r3, #120	; 0x78
 8000f50:	d109      	bne.n	8000f66 <i2cScan+0x62>
		{
			devices |= OLED_FOUND;
 8000f52:	7ffb      	ldrb	r3, [r7, #31]
 8000f54:	f043 0301 	orr.w	r3, r3, #1
 8000f58:	77fb      	strb	r3, [r7, #31]
			printMsg("OLED found at 0x%02X\n", i);
 8000f5a:	8bbb      	ldrh	r3, [r7, #28]
 8000f5c:	4619      	mov	r1, r3
 8000f5e:	481e      	ldr	r0, [pc, #120]	; (8000fd8 <i2cScan+0xd4>)
 8000f60:	f7ff ffaa 	bl	8000eb8 <printMsg>
 8000f64:	e024      	b.n	8000fb0 <i2cScan+0xac>
		}
		else if (res == HAL_OK && (i << 1) == MCP4018_ADDR)
 8000f66:	7efb      	ldrb	r3, [r7, #27]
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d10d      	bne.n	8000f88 <i2cScan+0x84>
 8000f6c:	8bbb      	ldrh	r3, [r7, #28]
 8000f6e:	005b      	lsls	r3, r3, #1
 8000f70:	2b5e      	cmp	r3, #94	; 0x5e
 8000f72:	d109      	bne.n	8000f88 <i2cScan+0x84>
		{
			devices |= POT_FOUND;
 8000f74:	7ffb      	ldrb	r3, [r7, #31]
 8000f76:	f043 0302 	orr.w	r3, r3, #2
 8000f7a:	77fb      	strb	r3, [r7, #31]
			printMsg("MCP4018 found at 0x%02X\n", i);
 8000f7c:	8bbb      	ldrh	r3, [r7, #28]
 8000f7e:	4619      	mov	r1, r3
 8000f80:	4816      	ldr	r0, [pc, #88]	; (8000fdc <i2cScan+0xd8>)
 8000f82:	f7ff ff99 	bl	8000eb8 <printMsg>
 8000f86:	e013      	b.n	8000fb0 <i2cScan+0xac>
		}
		else if (res == HAL_OK)
 8000f88:	7efb      	ldrb	r3, [r7, #27]
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d105      	bne.n	8000f9a <i2cScan+0x96>
		{
			printMsg("Unknown device found at 0x%02X\n", i);
 8000f8e:	8bbb      	ldrh	r3, [r7, #28]
 8000f90:	4619      	mov	r1, r3
 8000f92:	4813      	ldr	r0, [pc, #76]	; (8000fe0 <i2cScan+0xdc>)
 8000f94:	f7ff ff90 	bl	8000eb8 <printMsg>
 8000f98:	e00a      	b.n	8000fb0 <i2cScan+0xac>
		}
		else if (res == HAL_OK)
 8000f9a:	7efb      	ldrb	r3, [r7, #27]
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d107      	bne.n	8000fb0 <i2cScan+0xac>
		{
			printMsg("Unknown device found at 0x%02X\n", i);
 8000fa0:	8bbb      	ldrh	r3, [r7, #28]
 8000fa2:	4619      	mov	r1, r3
 8000fa4:	480e      	ldr	r0, [pc, #56]	; (8000fe0 <i2cScan+0xdc>)
 8000fa6:	f7ff ff87 	bl	8000eb8 <printMsg>
			HAL_Delay(10);
 8000faa:	200a      	movs	r0, #10
 8000fac:	f001 f890 	bl	80020d0 <HAL_Delay>
	for (uint16_t i = 0; i < 128; i++)
 8000fb0:	8bbb      	ldrh	r3, [r7, #28]
 8000fb2:	3301      	adds	r3, #1
 8000fb4:	83bb      	strh	r3, [r7, #28]
 8000fb6:	8bbb      	ldrh	r3, [r7, #28]
 8000fb8:	2b7f      	cmp	r3, #127	; 0x7f
 8000fba:	d9b9      	bls.n	8000f30 <i2cScan+0x2c>
		}
	}
	printMsg("returning from scan %02X\n", devices);
 8000fbc:	7ffb      	ldrb	r3, [r7, #31]
 8000fbe:	4619      	mov	r1, r3
 8000fc0:	4808      	ldr	r0, [pc, #32]	; (8000fe4 <i2cScan+0xe0>)
 8000fc2:	f7ff ff79 	bl	8000eb8 <printMsg>
	return devices;
 8000fc6:	7ffb      	ldrb	r3, [r7, #31]
}
 8000fc8:	4618      	mov	r0, r3
 8000fca:	3720      	adds	r7, #32
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bdb0      	pop	{r4, r5, r7, pc}
 8000fd0:	08006a28 	.word	0x08006a28
 8000fd4:	20000614 	.word	0x20000614
 8000fd8:	080069b8 	.word	0x080069b8
 8000fdc:	080069d0 	.word	0x080069d0
 8000fe0:	080069ec 	.word	0x080069ec
 8000fe4:	08006a0c 	.word	0x08006a0c

08000fe8 <errorLEDs>:
 */

#include "leds.h"

void errorLEDs(uint8_t error)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b082      	sub	sp, #8
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	4603      	mov	r3, r0
 8000ff0:	71fb      	strb	r3, [r7, #7]
    while (1)
    {
        if (error == OLED_FOUND)
 8000ff2:	79fb      	ldrb	r3, [r7, #7]
 8000ff4:	2b01      	cmp	r3, #1
 8000ff6:	d114      	bne.n	8001022 <errorLEDs+0x3a>
        {
            HAL_GPIO_TogglePin(CC_LED_PORT, CC_LED_PIN);
 8000ff8:	2120      	movs	r1, #32
 8000ffa:	4826      	ldr	r0, [pc, #152]	; (8001094 <errorLEDs+0xac>)
 8000ffc:	f001 fd99 	bl	8002b32 <HAL_GPIO_TogglePin>
            HAL_Delay(FLASH_FREQ);
 8001000:	2064      	movs	r0, #100	; 0x64
 8001002:	f001 f865 	bl	80020d0 <HAL_Delay>
            HAL_GPIO_TogglePin(OE_LED_PORT, OE_LED_PIN);
 8001006:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800100a:	4822      	ldr	r0, [pc, #136]	; (8001094 <errorLEDs+0xac>)
 800100c:	f001 fd91 	bl	8002b32 <HAL_GPIO_TogglePin>
            HAL_Delay(FLASH_FREQ >> 1);
 8001010:	2032      	movs	r0, #50	; 0x32
 8001012:	f001 f85d 	bl	80020d0 <HAL_Delay>
            HAL_GPIO_TogglePin(OE_LED_PORT, OE_LED_PIN);
 8001016:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800101a:	481e      	ldr	r0, [pc, #120]	; (8001094 <errorLEDs+0xac>)
 800101c:	f001 fd89 	bl	8002b32 <HAL_GPIO_TogglePin>
 8001020:	e7e7      	b.n	8000ff2 <errorLEDs+0xa>
        }
        else if (error == POT_FOUND)
 8001022:	79fb      	ldrb	r3, [r7, #7]
 8001024:	2b02      	cmp	r3, #2
 8001026:	d113      	bne.n	8001050 <errorLEDs+0x68>
        {
            HAL_GPIO_TogglePin(OE_LED_PORT, OE_LED_PIN);
 8001028:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800102c:	4819      	ldr	r0, [pc, #100]	; (8001094 <errorLEDs+0xac>)
 800102e:	f001 fd80 	bl	8002b32 <HAL_GPIO_TogglePin>
            HAL_Delay(FLASH_FREQ);
 8001032:	2064      	movs	r0, #100	; 0x64
 8001034:	f001 f84c 	bl	80020d0 <HAL_Delay>
            HAL_GPIO_TogglePin(CC_LED_PORT, CC_LED_PIN);
 8001038:	2120      	movs	r1, #32
 800103a:	4816      	ldr	r0, [pc, #88]	; (8001094 <errorLEDs+0xac>)
 800103c:	f001 fd79 	bl	8002b32 <HAL_GPIO_TogglePin>
            HAL_Delay(FLASH_FREQ >> 1);
 8001040:	2032      	movs	r0, #50	; 0x32
 8001042:	f001 f845 	bl	80020d0 <HAL_Delay>
            HAL_GPIO_TogglePin(CC_LED_PORT, CC_LED_PIN);
 8001046:	2120      	movs	r1, #32
 8001048:	4812      	ldr	r0, [pc, #72]	; (8001094 <errorLEDs+0xac>)
 800104a:	f001 fd72 	bl	8002b32 <HAL_GPIO_TogglePin>
 800104e:	e7d0      	b.n	8000ff2 <errorLEDs+0xa>
        }
        else if (error == 0)
 8001050:	79fb      	ldrb	r3, [r7, #7]
 8001052:	2b00      	cmp	r3, #0
 8001054:	d118      	bne.n	8001088 <errorLEDs+0xa0>
        {
            HAL_GPIO_TogglePin(OE_LED_PORT, OE_LED_PIN);
 8001056:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800105a:	480e      	ldr	r0, [pc, #56]	; (8001094 <errorLEDs+0xac>)
 800105c:	f001 fd69 	bl	8002b32 <HAL_GPIO_TogglePin>
            HAL_GPIO_TogglePin(CC_LED_PORT, CC_LED_PIN);
 8001060:	2120      	movs	r1, #32
 8001062:	480c      	ldr	r0, [pc, #48]	; (8001094 <errorLEDs+0xac>)
 8001064:	f001 fd65 	bl	8002b32 <HAL_GPIO_TogglePin>
            HAL_Delay(FLASH_FREQ >> 1);
 8001068:	2032      	movs	r0, #50	; 0x32
 800106a:	f001 f831 	bl	80020d0 <HAL_Delay>
            HAL_GPIO_TogglePin(OE_LED_PORT, OE_LED_PIN);
 800106e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001072:	4808      	ldr	r0, [pc, #32]	; (8001094 <errorLEDs+0xac>)
 8001074:	f001 fd5d 	bl	8002b32 <HAL_GPIO_TogglePin>
            HAL_GPIO_TogglePin(CC_LED_PORT, CC_LED_PIN);
 8001078:	2120      	movs	r1, #32
 800107a:	4806      	ldr	r0, [pc, #24]	; (8001094 <errorLEDs+0xac>)
 800107c:	f001 fd59 	bl	8002b32 <HAL_GPIO_TogglePin>
            HAL_Delay(FLASH_FREQ >> 1);
 8001080:	2032      	movs	r0, #50	; 0x32
 8001082:	f001 f825 	bl	80020d0 <HAL_Delay>
        if (error == OLED_FOUND)
 8001086:	e7b4      	b.n	8000ff2 <errorLEDs+0xa>
        }
        else
        {
            break;
 8001088:	bf00      	nop
        }
    }
}
 800108a:	bf00      	nop
 800108c:	3708      	adds	r7, #8
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	40020000 	.word	0x40020000

08001098 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800109e:	f000 ffa5 	bl	8001fec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010a2:	f000 f837 	bl	8001114 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010a6:	f000 f93f 	bl	8001328 <MX_GPIO_Init>
  MX_ADC1_Init();
 80010aa:	f000 f893 	bl	80011d4 <MX_ADC1_Init>
  MX_I2C1_Init();
 80010ae:	f000 f8e3 	bl	8001278 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 80010b2:	f000 f90f 	bl	80012d4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  uint8_t i2cScanRet = i2cScan();
 80010b6:	f7ff ff25 	bl	8000f04 <i2cScan>
 80010ba:	4603      	mov	r3, r0
 80010bc:	71fb      	strb	r3, [r7, #7]
  if (!i2cScanRet)
 80010be:	79fb      	ldrb	r3, [r7, #7]
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d103      	bne.n	80010cc <main+0x34>
  {
    errorLEDs(i2cScanRet);
 80010c4:	79fb      	ldrb	r3, [r7, #7]
 80010c6:	4618      	mov	r0, r3
 80010c8:	f7ff ff8e 	bl	8000fe8 <errorLEDs>
  }
  printMsg("no I2C errors\n\n");
 80010cc:	4810      	ldr	r0, [pc, #64]	; (8001110 <main+0x78>)
 80010ce:	f7ff fef3 	bl	8000eb8 <printMsg>
  ssd1306_Init();
 80010d2:	f000 fb55 	bl	8001780 <ssd1306_Init>
  ssd1306_Fill(SSD1306_BLACK);
 80010d6:	2000      	movs	r0, #0
 80010d8:	f000 fbbc 	bl	8001854 <ssd1306_Fill>
  showStartup();
 80010dc:	f000 f9ee 	bl	80014bc <showStartup>
  displayVoltageCurrent(1100, 2.32, 3.43);
 80010e0:	ed9f 2b05 	vldr	d2, [pc, #20]	; 80010f8 <main+0x60>
 80010e4:	ed9f 1b06 	vldr	d1, [pc, #24]	; 8001100 <main+0x68>
 80010e8:	ed9f 0b07 	vldr	d0, [pc, #28]	; 8001108 <main+0x70>
 80010ec:	f000 f9fc 	bl	80014e8 <displayVoltageCurrent>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80010f0:	e7fe      	b.n	80010f0 <main+0x58>
 80010f2:	bf00      	nop
 80010f4:	f3af 8000 	nop.w
 80010f8:	d70a3d71 	.word	0xd70a3d71
 80010fc:	400b70a3 	.word	0x400b70a3
 8001100:	28f5c28f 	.word	0x28f5c28f
 8001104:	40028f5c 	.word	0x40028f5c
 8001108:	00000000 	.word	0x00000000
 800110c:	40913000 	.word	0x40913000
 8001110:	08006a40 	.word	0x08006a40

08001114 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b094      	sub	sp, #80	; 0x50
 8001118:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800111a:	f107 0320 	add.w	r3, r7, #32
 800111e:	2230      	movs	r2, #48	; 0x30
 8001120:	2100      	movs	r1, #0
 8001122:	4618      	mov	r0, r3
 8001124:	f003 fbf8 	bl	8004918 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001128:	f107 030c 	add.w	r3, r7, #12
 800112c:	2200      	movs	r2, #0
 800112e:	601a      	str	r2, [r3, #0]
 8001130:	605a      	str	r2, [r3, #4]
 8001132:	609a      	str	r2, [r3, #8]
 8001134:	60da      	str	r2, [r3, #12]
 8001136:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001138:	2300      	movs	r3, #0
 800113a:	60bb      	str	r3, [r7, #8]
 800113c:	4b23      	ldr	r3, [pc, #140]	; (80011cc <SystemClock_Config+0xb8>)
 800113e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001140:	4a22      	ldr	r2, [pc, #136]	; (80011cc <SystemClock_Config+0xb8>)
 8001142:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001146:	6413      	str	r3, [r2, #64]	; 0x40
 8001148:	4b20      	ldr	r3, [pc, #128]	; (80011cc <SystemClock_Config+0xb8>)
 800114a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800114c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001150:	60bb      	str	r3, [r7, #8]
 8001152:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001154:	2300      	movs	r3, #0
 8001156:	607b      	str	r3, [r7, #4]
 8001158:	4b1d      	ldr	r3, [pc, #116]	; (80011d0 <SystemClock_Config+0xbc>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001160:	4a1b      	ldr	r2, [pc, #108]	; (80011d0 <SystemClock_Config+0xbc>)
 8001162:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001166:	6013      	str	r3, [r2, #0]
 8001168:	4b19      	ldr	r3, [pc, #100]	; (80011d0 <SystemClock_Config+0xbc>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001170:	607b      	str	r3, [r7, #4]
 8001172:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001174:	2302      	movs	r3, #2
 8001176:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001178:	2301      	movs	r3, #1
 800117a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800117c:	2310      	movs	r3, #16
 800117e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001180:	2300      	movs	r3, #0
 8001182:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001184:	f107 0320 	add.w	r3, r7, #32
 8001188:	4618      	mov	r0, r3
 800118a:	f002 fa8f 	bl	80036ac <HAL_RCC_OscConfig>
 800118e:	4603      	mov	r3, r0
 8001190:	2b00      	cmp	r3, #0
 8001192:	d001      	beq.n	8001198 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8001194:	f000 faa6 	bl	80016e4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001198:	230f      	movs	r3, #15
 800119a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800119c:	2300      	movs	r3, #0
 800119e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011a0:	2300      	movs	r3, #0
 80011a2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80011a4:	2300      	movs	r3, #0
 80011a6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011a8:	2300      	movs	r3, #0
 80011aa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80011ac:	f107 030c 	add.w	r3, r7, #12
 80011b0:	2100      	movs	r1, #0
 80011b2:	4618      	mov	r0, r3
 80011b4:	f002 fcea 	bl	8003b8c <HAL_RCC_ClockConfig>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d001      	beq.n	80011c2 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80011be:	f000 fa91 	bl	80016e4 <Error_Handler>
  }
}
 80011c2:	bf00      	nop
 80011c4:	3750      	adds	r7, #80	; 0x50
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	40023800 	.word	0x40023800
 80011d0:	40007000 	.word	0x40007000

080011d4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b084      	sub	sp, #16
 80011d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80011da:	463b      	mov	r3, r7
 80011dc:	2200      	movs	r2, #0
 80011de:	601a      	str	r2, [r3, #0]
 80011e0:	605a      	str	r2, [r3, #4]
 80011e2:	609a      	str	r2, [r3, #8]
 80011e4:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80011e6:	4b21      	ldr	r3, [pc, #132]	; (800126c <MX_ADC1_Init+0x98>)
 80011e8:	4a21      	ldr	r2, [pc, #132]	; (8001270 <MX_ADC1_Init+0x9c>)
 80011ea:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80011ec:	4b1f      	ldr	r3, [pc, #124]	; (800126c <MX_ADC1_Init+0x98>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80011f2:	4b1e      	ldr	r3, [pc, #120]	; (800126c <MX_ADC1_Init+0x98>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80011f8:	4b1c      	ldr	r3, [pc, #112]	; (800126c <MX_ADC1_Init+0x98>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80011fe:	4b1b      	ldr	r3, [pc, #108]	; (800126c <MX_ADC1_Init+0x98>)
 8001200:	2200      	movs	r2, #0
 8001202:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001204:	4b19      	ldr	r3, [pc, #100]	; (800126c <MX_ADC1_Init+0x98>)
 8001206:	2200      	movs	r2, #0
 8001208:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800120c:	4b17      	ldr	r3, [pc, #92]	; (800126c <MX_ADC1_Init+0x98>)
 800120e:	2200      	movs	r2, #0
 8001210:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001212:	4b16      	ldr	r3, [pc, #88]	; (800126c <MX_ADC1_Init+0x98>)
 8001214:	4a17      	ldr	r2, [pc, #92]	; (8001274 <MX_ADC1_Init+0xa0>)
 8001216:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001218:	4b14      	ldr	r3, [pc, #80]	; (800126c <MX_ADC1_Init+0x98>)
 800121a:	2200      	movs	r2, #0
 800121c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800121e:	4b13      	ldr	r3, [pc, #76]	; (800126c <MX_ADC1_Init+0x98>)
 8001220:	2201      	movs	r2, #1
 8001222:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001224:	4b11      	ldr	r3, [pc, #68]	; (800126c <MX_ADC1_Init+0x98>)
 8001226:	2200      	movs	r2, #0
 8001228:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800122c:	4b0f      	ldr	r3, [pc, #60]	; (800126c <MX_ADC1_Init+0x98>)
 800122e:	2201      	movs	r2, #1
 8001230:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001232:	480e      	ldr	r0, [pc, #56]	; (800126c <MX_ADC1_Init+0x98>)
 8001234:	f000 ff6e 	bl	8002114 <HAL_ADC_Init>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d001      	beq.n	8001242 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800123e:	f000 fa51 	bl	80016e4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8001242:	230d      	movs	r3, #13
 8001244:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001246:	2301      	movs	r3, #1
 8001248:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800124a:	2300      	movs	r3, #0
 800124c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800124e:	463b      	mov	r3, r7
 8001250:	4619      	mov	r1, r3
 8001252:	4806      	ldr	r0, [pc, #24]	; (800126c <MX_ADC1_Init+0x98>)
 8001254:	f000 ffa2 	bl	800219c <HAL_ADC_ConfigChannel>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d001      	beq.n	8001262 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800125e:	f000 fa41 	bl	80016e4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */
}
 8001262:	bf00      	nop
 8001264:	3710      	adds	r7, #16
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	20000668 	.word	0x20000668
 8001270:	40012000 	.word	0x40012000
 8001274:	0f000001 	.word	0x0f000001

08001278 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800127c:	4b12      	ldr	r3, [pc, #72]	; (80012c8 <MX_I2C1_Init+0x50>)
 800127e:	4a13      	ldr	r2, [pc, #76]	; (80012cc <MX_I2C1_Init+0x54>)
 8001280:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001282:	4b11      	ldr	r3, [pc, #68]	; (80012c8 <MX_I2C1_Init+0x50>)
 8001284:	4a12      	ldr	r2, [pc, #72]	; (80012d0 <MX_I2C1_Init+0x58>)
 8001286:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001288:	4b0f      	ldr	r3, [pc, #60]	; (80012c8 <MX_I2C1_Init+0x50>)
 800128a:	2200      	movs	r2, #0
 800128c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800128e:	4b0e      	ldr	r3, [pc, #56]	; (80012c8 <MX_I2C1_Init+0x50>)
 8001290:	2200      	movs	r2, #0
 8001292:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001294:	4b0c      	ldr	r3, [pc, #48]	; (80012c8 <MX_I2C1_Init+0x50>)
 8001296:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800129a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800129c:	4b0a      	ldr	r3, [pc, #40]	; (80012c8 <MX_I2C1_Init+0x50>)
 800129e:	2200      	movs	r2, #0
 80012a0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80012a2:	4b09      	ldr	r3, [pc, #36]	; (80012c8 <MX_I2C1_Init+0x50>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012a8:	4b07      	ldr	r3, [pc, #28]	; (80012c8 <MX_I2C1_Init+0x50>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012ae:	4b06      	ldr	r3, [pc, #24]	; (80012c8 <MX_I2C1_Init+0x50>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80012b4:	4804      	ldr	r0, [pc, #16]	; (80012c8 <MX_I2C1_Init+0x50>)
 80012b6:	f001 fc7b 	bl	8002bb0 <HAL_I2C_Init>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d001      	beq.n	80012c4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80012c0:	f000 fa10 	bl	80016e4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */
  /* USER CODE END I2C1_Init 2 */
}
 80012c4:	bf00      	nop
 80012c6:	bd80      	pop	{r7, pc}
 80012c8:	20000614 	.word	0x20000614
 80012cc:	40005400 	.word	0x40005400
 80012d0:	00061a80 	.word	0x00061a80

080012d4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80012d8:	4b11      	ldr	r3, [pc, #68]	; (8001320 <MX_USART2_UART_Init+0x4c>)
 80012da:	4a12      	ldr	r2, [pc, #72]	; (8001324 <MX_USART2_UART_Init+0x50>)
 80012dc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80012de:	4b10      	ldr	r3, [pc, #64]	; (8001320 <MX_USART2_UART_Init+0x4c>)
 80012e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80012e4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80012e6:	4b0e      	ldr	r3, [pc, #56]	; (8001320 <MX_USART2_UART_Init+0x4c>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80012ec:	4b0c      	ldr	r3, [pc, #48]	; (8001320 <MX_USART2_UART_Init+0x4c>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80012f2:	4b0b      	ldr	r3, [pc, #44]	; (8001320 <MX_USART2_UART_Init+0x4c>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80012f8:	4b09      	ldr	r3, [pc, #36]	; (8001320 <MX_USART2_UART_Init+0x4c>)
 80012fa:	220c      	movs	r2, #12
 80012fc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012fe:	4b08      	ldr	r3, [pc, #32]	; (8001320 <MX_USART2_UART_Init+0x4c>)
 8001300:	2200      	movs	r2, #0
 8001302:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001304:	4b06      	ldr	r3, [pc, #24]	; (8001320 <MX_USART2_UART_Init+0x4c>)
 8001306:	2200      	movs	r2, #0
 8001308:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800130a:	4805      	ldr	r0, [pc, #20]	; (8001320 <MX_USART2_UART_Init+0x4c>)
 800130c:	f002 fe0a 	bl	8003f24 <HAL_UART_Init>
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	d001      	beq.n	800131a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001316:	f000 f9e5 	bl	80016e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */
}
 800131a:	bf00      	nop
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	200006b0 	.word	0x200006b0
 8001324:	40004400 	.word	0x40004400

08001328 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b08a      	sub	sp, #40	; 0x28
 800132c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800132e:	f107 0314 	add.w	r3, r7, #20
 8001332:	2200      	movs	r2, #0
 8001334:	601a      	str	r2, [r3, #0]
 8001336:	605a      	str	r2, [r3, #4]
 8001338:	609a      	str	r2, [r3, #8]
 800133a:	60da      	str	r2, [r3, #12]
 800133c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800133e:	2300      	movs	r3, #0
 8001340:	613b      	str	r3, [r7, #16]
 8001342:	4b58      	ldr	r3, [pc, #352]	; (80014a4 <MX_GPIO_Init+0x17c>)
 8001344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001346:	4a57      	ldr	r2, [pc, #348]	; (80014a4 <MX_GPIO_Init+0x17c>)
 8001348:	f043 0304 	orr.w	r3, r3, #4
 800134c:	6313      	str	r3, [r2, #48]	; 0x30
 800134e:	4b55      	ldr	r3, [pc, #340]	; (80014a4 <MX_GPIO_Init+0x17c>)
 8001350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001352:	f003 0304 	and.w	r3, r3, #4
 8001356:	613b      	str	r3, [r7, #16]
 8001358:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800135a:	2300      	movs	r3, #0
 800135c:	60fb      	str	r3, [r7, #12]
 800135e:	4b51      	ldr	r3, [pc, #324]	; (80014a4 <MX_GPIO_Init+0x17c>)
 8001360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001362:	4a50      	ldr	r2, [pc, #320]	; (80014a4 <MX_GPIO_Init+0x17c>)
 8001364:	f043 0301 	orr.w	r3, r3, #1
 8001368:	6313      	str	r3, [r2, #48]	; 0x30
 800136a:	4b4e      	ldr	r3, [pc, #312]	; (80014a4 <MX_GPIO_Init+0x17c>)
 800136c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800136e:	f003 0301 	and.w	r3, r3, #1
 8001372:	60fb      	str	r3, [r7, #12]
 8001374:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001376:	2300      	movs	r3, #0
 8001378:	60bb      	str	r3, [r7, #8]
 800137a:	4b4a      	ldr	r3, [pc, #296]	; (80014a4 <MX_GPIO_Init+0x17c>)
 800137c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800137e:	4a49      	ldr	r2, [pc, #292]	; (80014a4 <MX_GPIO_Init+0x17c>)
 8001380:	f043 0308 	orr.w	r3, r3, #8
 8001384:	6313      	str	r3, [r2, #48]	; 0x30
 8001386:	4b47      	ldr	r3, [pc, #284]	; (80014a4 <MX_GPIO_Init+0x17c>)
 8001388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800138a:	f003 0308 	and.w	r3, r3, #8
 800138e:	60bb      	str	r3, [r7, #8]
 8001390:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001392:	2300      	movs	r3, #0
 8001394:	607b      	str	r3, [r7, #4]
 8001396:	4b43      	ldr	r3, [pc, #268]	; (80014a4 <MX_GPIO_Init+0x17c>)
 8001398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800139a:	4a42      	ldr	r2, [pc, #264]	; (80014a4 <MX_GPIO_Init+0x17c>)
 800139c:	f043 0302 	orr.w	r3, r3, #2
 80013a0:	6313      	str	r3, [r2, #48]	; 0x30
 80013a2:	4b40      	ldr	r3, [pc, #256]	; (80014a4 <MX_GPIO_Init+0x17c>)
 80013a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a6:	f003 0302 	and.w	r3, r3, #2
 80013aa:	607b      	str	r3, [r7, #4]
 80013ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, REG_EN_Pin | CC_LED_Pin, GPIO_PIN_RESET);
 80013ae:	2200      	movs	r2, #0
 80013b0:	f240 4102 	movw	r1, #1026	; 0x402
 80013b4:	483c      	ldr	r0, [pc, #240]	; (80014a8 <MX_GPIO_Init+0x180>)
 80013b6:	f001 fba3 	bl	8002b00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5 | OE_LED_Pin, GPIO_PIN_RESET);
 80013ba:	2200      	movs	r2, #0
 80013bc:	f248 0120 	movw	r1, #32800	; 0x8020
 80013c0:	483a      	ldr	r0, [pc, #232]	; (80014ac <MX_GPIO_Init+0x184>)
 80013c2:	f001 fb9d 	bl	8002b00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(nSW_UP_GPIO_Port, nSW_UP_Pin, GPIO_PIN_RESET);
 80013c6:	2200      	movs	r2, #0
 80013c8:	2110      	movs	r1, #16
 80013ca:	4839      	ldr	r0, [pc, #228]	; (80014b0 <MX_GPIO_Init+0x188>)
 80013cc:	f001 fb98 	bl	8002b00 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : REG_EN_Pin CC_LED_Pin */
  GPIO_InitStruct.Pin = REG_EN_Pin | CC_LED_Pin;
 80013d0:	f240 4302 	movw	r3, #1026	; 0x402
 80013d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013d6:	2301      	movs	r3, #1
 80013d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013da:	2300      	movs	r3, #0
 80013dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013de:	2300      	movs	r3, #0
 80013e0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013e2:	f107 0314 	add.w	r3, r7, #20
 80013e6:	4619      	mov	r1, r3
 80013e8:	482f      	ldr	r0, [pc, #188]	; (80014a8 <MX_GPIO_Init+0x180>)
 80013ea:	f001 fa07 	bl	80027fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 OE_LED_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_5 | OE_LED_Pin;
 80013ee:	f248 0320 	movw	r3, #32800	; 0x8020
 80013f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013f4:	2301      	movs	r3, #1
 80013f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f8:	2300      	movs	r3, #0
 80013fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013fc:	2300      	movs	r3, #0
 80013fe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001400:	f107 0314 	add.w	r3, r7, #20
 8001404:	4619      	mov	r1, r3
 8001406:	4829      	ldr	r0, [pc, #164]	; (80014ac <MX_GPIO_Init+0x184>)
 8001408:	f001 f9f8 	bl	80027fc <HAL_GPIO_Init>

  /*Configure GPIO pin : nSW_INT_Pin */
  GPIO_InitStruct.Pin = nSW_INT_Pin;
 800140c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001410:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001412:	4b28      	ldr	r3, [pc, #160]	; (80014b4 <MX_GPIO_Init+0x18c>)
 8001414:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001416:	2300      	movs	r3, #0
 8001418:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(nSW_INT_GPIO_Port, &GPIO_InitStruct);
 800141a:	f107 0314 	add.w	r3, r7, #20
 800141e:	4619      	mov	r1, r3
 8001420:	4821      	ldr	r0, [pc, #132]	; (80014a8 <MX_GPIO_Init+0x180>)
 8001422:	f001 f9eb 	bl	80027fc <HAL_GPIO_Init>

  /*Configure GPIO pin : nSW_VI_Pin */
  GPIO_InitStruct.Pin = nSW_VI_Pin;
 8001426:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800142a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800142c:	2300      	movs	r3, #0
 800142e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001430:	2300      	movs	r3, #0
 8001432:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(nSW_VI_GPIO_Port, &GPIO_InitStruct);
 8001434:	f107 0314 	add.w	r3, r7, #20
 8001438:	4619      	mov	r1, r3
 800143a:	481b      	ldr	r0, [pc, #108]	; (80014a8 <MX_GPIO_Init+0x180>)
 800143c:	f001 f9de 	bl	80027fc <HAL_GPIO_Init>

  /*Configure GPIO pin : nSW_DW_Pin */
  GPIO_InitStruct.Pin = nSW_DW_Pin;
 8001440:	2304      	movs	r3, #4
 8001442:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001444:	2300      	movs	r3, #0
 8001446:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001448:	2300      	movs	r3, #0
 800144a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(nSW_DW_GPIO_Port, &GPIO_InitStruct);
 800144c:	f107 0314 	add.w	r3, r7, #20
 8001450:	4619      	mov	r1, r3
 8001452:	4819      	ldr	r0, [pc, #100]	; (80014b8 <MX_GPIO_Init+0x190>)
 8001454:	f001 f9d2 	bl	80027fc <HAL_GPIO_Init>

  /*Configure GPIO pin : nSW_UP_Pin */
  GPIO_InitStruct.Pin = nSW_UP_Pin;
 8001458:	2310      	movs	r3, #16
 800145a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800145c:	2301      	movs	r3, #1
 800145e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001460:	2300      	movs	r3, #0
 8001462:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001464:	2300      	movs	r3, #0
 8001466:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(nSW_UP_GPIO_Port, &GPIO_InitStruct);
 8001468:	f107 0314 	add.w	r3, r7, #20
 800146c:	4619      	mov	r1, r3
 800146e:	4810      	ldr	r0, [pc, #64]	; (80014b0 <MX_GPIO_Init+0x188>)
 8001470:	f001 f9c4 	bl	80027fc <HAL_GPIO_Init>

  /*Configure GPIO pin : nSW_OE_Pin */
  GPIO_InitStruct.Pin = nSW_OE_Pin;
 8001474:	2320      	movs	r3, #32
 8001476:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001478:	2300      	movs	r3, #0
 800147a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800147c:	2300      	movs	r3, #0
 800147e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(nSW_OE_GPIO_Port, &GPIO_InitStruct);
 8001480:	f107 0314 	add.w	r3, r7, #20
 8001484:	4619      	mov	r1, r3
 8001486:	480a      	ldr	r0, [pc, #40]	; (80014b0 <MX_GPIO_Init+0x188>)
 8001488:	f001 f9b8 	bl	80027fc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800148c:	2200      	movs	r2, #0
 800148e:	2100      	movs	r1, #0
 8001490:	2028      	movs	r0, #40	; 0x28
 8001492:	f001 f97c 	bl	800278e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001496:	2028      	movs	r0, #40	; 0x28
 8001498:	f001 f995 	bl	80027c6 <HAL_NVIC_EnableIRQ>
}
 800149c:	bf00      	nop
 800149e:	3728      	adds	r7, #40	; 0x28
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bd80      	pop	{r7, pc}
 80014a4:	40023800 	.word	0x40023800
 80014a8:	40020800 	.word	0x40020800
 80014ac:	40020000 	.word	0x40020000
 80014b0:	40020400 	.word	0x40020400
 80014b4:	10210000 	.word	0x10210000
 80014b8:	40020c00 	.word	0x40020c00

080014bc <showStartup>:

/* USER CODE BEGIN 4 */
void showStartup(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b082      	sub	sp, #8
 80014c0:	af02      	add	r7, sp, #8
  ssd1306_DrawBitMap(0, 0, BOOTSCREEN, 128, 32, SSD1306_WHITE);
 80014c2:	2301      	movs	r3, #1
 80014c4:	9301      	str	r3, [sp, #4]
 80014c6:	2320      	movs	r3, #32
 80014c8:	9300      	str	r3, [sp, #0]
 80014ca:	2380      	movs	r3, #128	; 0x80
 80014cc:	4a05      	ldr	r2, [pc, #20]	; (80014e4 <showStartup+0x28>)
 80014ce:	2100      	movs	r1, #0
 80014d0:	2000      	movs	r0, #0
 80014d2:	f000 fb5f 	bl	8001b94 <ssd1306_DrawBitMap>
  HAL_Delay(2000);
 80014d6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80014da:	f000 fdf9 	bl	80020d0 <HAL_Delay>
}
 80014de:	bf00      	nop
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bd80      	pop	{r7, pc}
 80014e4:	08006a80 	.word	0x08006a80

080014e8 <displayVoltageCurrent>:

void displayVoltageCurrent(double Vin, double V, double I)
{
 80014e8:	b590      	push	{r4, r7, lr}
 80014ea:	b08b      	sub	sp, #44	; 0x2c
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	ed87 0b04 	vstr	d0, [r7, #16]
 80014f2:	ed87 1b02 	vstr	d1, [r7, #8]
 80014f6:	ed87 2b00 	vstr	d2, [r7]
  ssd1306_Fill(SSD1306_BLACK);
 80014fa:	2000      	movs	r0, #0
 80014fc:	f000 f9aa 	bl	8001854 <ssd1306_Fill>
  ssd1306_SetCursor(2, 12);
 8001500:	210c      	movs	r1, #12
 8001502:	2002      	movs	r0, #2
 8001504:	f000 fafc 	bl	8001b00 <ssd1306_SetCursor>
  char buff[10] = {};
 8001508:	f107 031c 	add.w	r3, r7, #28
 800150c:	2200      	movs	r2, #0
 800150e:	601a      	str	r2, [r3, #0]
 8001510:	605a      	str	r2, [r3, #4]
 8001512:	811a      	strh	r2, [r3, #8]

  ssd1306_WriteString("Vin = ", INFO_TEXT_SIZE, SSD1306_WHITE);
 8001514:	4a69      	ldr	r2, [pc, #420]	; (80016bc <displayVoltageCurrent+0x1d4>)
 8001516:	2301      	movs	r3, #1
 8001518:	ca06      	ldmia	r2, {r1, r2}
 800151a:	4869      	ldr	r0, [pc, #420]	; (80016c0 <displayVoltageCurrent+0x1d8>)
 800151c:	f000 faca 	bl	8001ab4 <ssd1306_WriteString>
  if (Vin > 1000)
 8001520:	f04f 0200 	mov.w	r2, #0
 8001524:	4b67      	ldr	r3, [pc, #412]	; (80016c4 <displayVoltageCurrent+0x1dc>)
 8001526:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800152a:	f7ff fafd 	bl	8000b28 <__aeabi_dcmpgt>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	d01d      	beq.n	8001570 <displayVoltageCurrent+0x88>
  {
    sprintf(buff, "%4.2f", Vin / 1000);
 8001534:	f04f 0200 	mov.w	r2, #0
 8001538:	4b62      	ldr	r3, [pc, #392]	; (80016c4 <displayVoltageCurrent+0x1dc>)
 800153a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800153e:	f7ff f98d 	bl	800085c <__aeabi_ddiv>
 8001542:	4603      	mov	r3, r0
 8001544:	460c      	mov	r4, r1
 8001546:	f107 001c 	add.w	r0, r7, #28
 800154a:	461a      	mov	r2, r3
 800154c:	4623      	mov	r3, r4
 800154e:	495e      	ldr	r1, [pc, #376]	; (80016c8 <displayVoltageCurrent+0x1e0>)
 8001550:	f003 fe46 	bl	80051e0 <siprintf>
    ssd1306_WriteString(buff, INFO_TEXT_SIZE, SSD1306_WHITE);
 8001554:	4a59      	ldr	r2, [pc, #356]	; (80016bc <displayVoltageCurrent+0x1d4>)
 8001556:	f107 001c 	add.w	r0, r7, #28
 800155a:	2301      	movs	r3, #1
 800155c:	ca06      	ldmia	r2, {r1, r2}
 800155e:	f000 faa9 	bl	8001ab4 <ssd1306_WriteString>
    ssd1306_WriteString("V", INFO_TEXT_SIZE, SSD1306_WHITE);
 8001562:	4a56      	ldr	r2, [pc, #344]	; (80016bc <displayVoltageCurrent+0x1d4>)
 8001564:	2301      	movs	r3, #1
 8001566:	ca06      	ldmia	r2, {r1, r2}
 8001568:	4858      	ldr	r0, [pc, #352]	; (80016cc <displayVoltageCurrent+0x1e4>)
 800156a:	f000 faa3 	bl	8001ab4 <ssd1306_WriteString>
 800156e:	e013      	b.n	8001598 <displayVoltageCurrent+0xb0>
  }
  else
  {
    sprintf(buff, "%4.2f", Vin);
 8001570:	f107 001c 	add.w	r0, r7, #28
 8001574:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001578:	4953      	ldr	r1, [pc, #332]	; (80016c8 <displayVoltageCurrent+0x1e0>)
 800157a:	f003 fe31 	bl	80051e0 <siprintf>
    ssd1306_WriteString(buff, INFO_TEXT_SIZE, SSD1306_WHITE);
 800157e:	4a4f      	ldr	r2, [pc, #316]	; (80016bc <displayVoltageCurrent+0x1d4>)
 8001580:	f107 001c 	add.w	r0, r7, #28
 8001584:	2301      	movs	r3, #1
 8001586:	ca06      	ldmia	r2, {r1, r2}
 8001588:	f000 fa94 	bl	8001ab4 <ssd1306_WriteString>
    ssd1306_WriteString("mV", INFO_TEXT_SIZE, SSD1306_WHITE);
 800158c:	4a4b      	ldr	r2, [pc, #300]	; (80016bc <displayVoltageCurrent+0x1d4>)
 800158e:	2301      	movs	r3, #1
 8001590:	ca06      	ldmia	r2, {r1, r2}
 8001592:	484f      	ldr	r0, [pc, #316]	; (80016d0 <displayVoltageCurrent+0x1e8>)
 8001594:	f000 fa8e 	bl	8001ab4 <ssd1306_WriteString>
  }

  ssd1306_SetCursor(2, 24);
 8001598:	2118      	movs	r1, #24
 800159a:	2002      	movs	r0, #2
 800159c:	f000 fab0 	bl	8001b00 <ssd1306_SetCursor>
  ssd1306_WriteString("Vout = ", INFO_TEXT_SIZE, SSD1306_WHITE);
 80015a0:	4a46      	ldr	r2, [pc, #280]	; (80016bc <displayVoltageCurrent+0x1d4>)
 80015a2:	2301      	movs	r3, #1
 80015a4:	ca06      	ldmia	r2, {r1, r2}
 80015a6:	484b      	ldr	r0, [pc, #300]	; (80016d4 <displayVoltageCurrent+0x1ec>)
 80015a8:	f000 fa84 	bl	8001ab4 <ssd1306_WriteString>
  if (V > 1000)
 80015ac:	f04f 0200 	mov.w	r2, #0
 80015b0:	4b44      	ldr	r3, [pc, #272]	; (80016c4 <displayVoltageCurrent+0x1dc>)
 80015b2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80015b6:	f7ff fab7 	bl	8000b28 <__aeabi_dcmpgt>
 80015ba:	4603      	mov	r3, r0
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d01d      	beq.n	80015fc <displayVoltageCurrent+0x114>
  {
    sprintf(buff, "%4.2f", V / 1000);
 80015c0:	f04f 0200 	mov.w	r2, #0
 80015c4:	4b3f      	ldr	r3, [pc, #252]	; (80016c4 <displayVoltageCurrent+0x1dc>)
 80015c6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80015ca:	f7ff f947 	bl	800085c <__aeabi_ddiv>
 80015ce:	4603      	mov	r3, r0
 80015d0:	460c      	mov	r4, r1
 80015d2:	f107 001c 	add.w	r0, r7, #28
 80015d6:	461a      	mov	r2, r3
 80015d8:	4623      	mov	r3, r4
 80015da:	493b      	ldr	r1, [pc, #236]	; (80016c8 <displayVoltageCurrent+0x1e0>)
 80015dc:	f003 fe00 	bl	80051e0 <siprintf>
    ssd1306_WriteString(buff, INFO_TEXT_SIZE, SSD1306_WHITE);
 80015e0:	4a36      	ldr	r2, [pc, #216]	; (80016bc <displayVoltageCurrent+0x1d4>)
 80015e2:	f107 001c 	add.w	r0, r7, #28
 80015e6:	2301      	movs	r3, #1
 80015e8:	ca06      	ldmia	r2, {r1, r2}
 80015ea:	f000 fa63 	bl	8001ab4 <ssd1306_WriteString>
    ssd1306_WriteString("V", INFO_TEXT_SIZE, SSD1306_WHITE);
 80015ee:	4a33      	ldr	r2, [pc, #204]	; (80016bc <displayVoltageCurrent+0x1d4>)
 80015f0:	2301      	movs	r3, #1
 80015f2:	ca06      	ldmia	r2, {r1, r2}
 80015f4:	4835      	ldr	r0, [pc, #212]	; (80016cc <displayVoltageCurrent+0x1e4>)
 80015f6:	f000 fa5d 	bl	8001ab4 <ssd1306_WriteString>
 80015fa:	e013      	b.n	8001624 <displayVoltageCurrent+0x13c>
  }
  else
  {
    sprintf(buff, "%4.2f", V);
 80015fc:	f107 001c 	add.w	r0, r7, #28
 8001600:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001604:	4930      	ldr	r1, [pc, #192]	; (80016c8 <displayVoltageCurrent+0x1e0>)
 8001606:	f003 fdeb 	bl	80051e0 <siprintf>
    ssd1306_WriteString(buff, INFO_TEXT_SIZE, SSD1306_WHITE);
 800160a:	4a2c      	ldr	r2, [pc, #176]	; (80016bc <displayVoltageCurrent+0x1d4>)
 800160c:	f107 001c 	add.w	r0, r7, #28
 8001610:	2301      	movs	r3, #1
 8001612:	ca06      	ldmia	r2, {r1, r2}
 8001614:	f000 fa4e 	bl	8001ab4 <ssd1306_WriteString>
    ssd1306_WriteString("mV", INFO_TEXT_SIZE, SSD1306_WHITE);
 8001618:	4a28      	ldr	r2, [pc, #160]	; (80016bc <displayVoltageCurrent+0x1d4>)
 800161a:	2301      	movs	r3, #1
 800161c:	ca06      	ldmia	r2, {r1, r2}
 800161e:	482c      	ldr	r0, [pc, #176]	; (80016d0 <displayVoltageCurrent+0x1e8>)
 8001620:	f000 fa48 	bl	8001ab4 <ssd1306_WriteString>
  }

  ssd1306_SetCursor(2, 36);
 8001624:	2124      	movs	r1, #36	; 0x24
 8001626:	2002      	movs	r0, #2
 8001628:	f000 fa6a 	bl	8001b00 <ssd1306_SetCursor>
  ssd1306_WriteString("Iout = ", INFO_TEXT_SIZE, SSD1306_WHITE);
 800162c:	4a23      	ldr	r2, [pc, #140]	; (80016bc <displayVoltageCurrent+0x1d4>)
 800162e:	2301      	movs	r3, #1
 8001630:	ca06      	ldmia	r2, {r1, r2}
 8001632:	4829      	ldr	r0, [pc, #164]	; (80016d8 <displayVoltageCurrent+0x1f0>)
 8001634:	f000 fa3e 	bl	8001ab4 <ssd1306_WriteString>
  if (I > 1000)
 8001638:	f04f 0200 	mov.w	r2, #0
 800163c:	4b21      	ldr	r3, [pc, #132]	; (80016c4 <displayVoltageCurrent+0x1dc>)
 800163e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001642:	f7ff fa71 	bl	8000b28 <__aeabi_dcmpgt>
 8001646:	4603      	mov	r3, r0
 8001648:	2b00      	cmp	r3, #0
 800164a:	d01d      	beq.n	8001688 <displayVoltageCurrent+0x1a0>
  {
    sprintf(buff, "%4.2f", I / 1000);
 800164c:	f04f 0200 	mov.w	r2, #0
 8001650:	4b1c      	ldr	r3, [pc, #112]	; (80016c4 <displayVoltageCurrent+0x1dc>)
 8001652:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001656:	f7ff f901 	bl	800085c <__aeabi_ddiv>
 800165a:	4603      	mov	r3, r0
 800165c:	460c      	mov	r4, r1
 800165e:	f107 001c 	add.w	r0, r7, #28
 8001662:	461a      	mov	r2, r3
 8001664:	4623      	mov	r3, r4
 8001666:	4918      	ldr	r1, [pc, #96]	; (80016c8 <displayVoltageCurrent+0x1e0>)
 8001668:	f003 fdba 	bl	80051e0 <siprintf>
    ssd1306_WriteString(buff, INFO_TEXT_SIZE, SSD1306_WHITE);
 800166c:	4a13      	ldr	r2, [pc, #76]	; (80016bc <displayVoltageCurrent+0x1d4>)
 800166e:	f107 001c 	add.w	r0, r7, #28
 8001672:	2301      	movs	r3, #1
 8001674:	ca06      	ldmia	r2, {r1, r2}
 8001676:	f000 fa1d 	bl	8001ab4 <ssd1306_WriteString>
    ssd1306_WriteString("A", INFO_TEXT_SIZE, SSD1306_WHITE);
 800167a:	4a10      	ldr	r2, [pc, #64]	; (80016bc <displayVoltageCurrent+0x1d4>)
 800167c:	2301      	movs	r3, #1
 800167e:	ca06      	ldmia	r2, {r1, r2}
 8001680:	4816      	ldr	r0, [pc, #88]	; (80016dc <displayVoltageCurrent+0x1f4>)
 8001682:	f000 fa17 	bl	8001ab4 <ssd1306_WriteString>
 8001686:	e013      	b.n	80016b0 <displayVoltageCurrent+0x1c8>
  }
  else
  {
    sprintf(buff, "%4.2f", I);
 8001688:	f107 001c 	add.w	r0, r7, #28
 800168c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001690:	490d      	ldr	r1, [pc, #52]	; (80016c8 <displayVoltageCurrent+0x1e0>)
 8001692:	f003 fda5 	bl	80051e0 <siprintf>
    ssd1306_WriteString(buff, INFO_TEXT_SIZE, SSD1306_WHITE);
 8001696:	4a09      	ldr	r2, [pc, #36]	; (80016bc <displayVoltageCurrent+0x1d4>)
 8001698:	f107 001c 	add.w	r0, r7, #28
 800169c:	2301      	movs	r3, #1
 800169e:	ca06      	ldmia	r2, {r1, r2}
 80016a0:	f000 fa08 	bl	8001ab4 <ssd1306_WriteString>
    ssd1306_WriteString("mA", INFO_TEXT_SIZE, SSD1306_WHITE);
 80016a4:	4a05      	ldr	r2, [pc, #20]	; (80016bc <displayVoltageCurrent+0x1d4>)
 80016a6:	2301      	movs	r3, #1
 80016a8:	ca06      	ldmia	r2, {r1, r2}
 80016aa:	480d      	ldr	r0, [pc, #52]	; (80016e0 <displayVoltageCurrent+0x1f8>)
 80016ac:	f000 fa02 	bl	8001ab4 <ssd1306_WriteString>
  }

  ssd1306_UpdateScreen();
 80016b0:	f000 f8f2 	bl	8001898 <ssd1306_UpdateScreen>
}
 80016b4:	bf00      	nop
 80016b6:	372c      	adds	r7, #44	; 0x2c
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd90      	pop	{r4, r7, pc}
 80016bc:	20000000 	.word	0x20000000
 80016c0:	08006a50 	.word	0x08006a50
 80016c4:	408f4000 	.word	0x408f4000
 80016c8:	08006a58 	.word	0x08006a58
 80016cc:	08006a60 	.word	0x08006a60
 80016d0:	08006a64 	.word	0x08006a64
 80016d4:	08006a68 	.word	0x08006a68
 80016d8:	08006a70 	.word	0x08006a70
 80016dc:	08006a78 	.word	0x08006a78
 80016e0:	08006a7c 	.word	0x08006a7c

080016e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016e4:	b480      	push	{r7}
 80016e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016e8:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016ea:	e7fe      	b.n	80016ea <Error_Handler+0x6>

080016ec <ssd1306_Reset>:
#include <math.h>
#include <stdlib.h>
#include <string.h> // For memcpy

void ssd1306_Reset(void)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(SSD1306_Reset_Port, SSD1306_Reset_Pin, GPIO_PIN_RESET);
 80016f0:	2200      	movs	r2, #0
 80016f2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016f6:	4808      	ldr	r0, [pc, #32]	; (8001718 <ssd1306_Reset+0x2c>)
 80016f8:	f001 fa02 	bl	8002b00 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 80016fc:	200a      	movs	r0, #10
 80016fe:	f000 fce7 	bl	80020d0 <HAL_Delay>
    HAL_GPIO_WritePin(SSD1306_Reset_Port, SSD1306_Reset_Pin, GPIO_PIN_SET);
 8001702:	2201      	movs	r2, #1
 8001704:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001708:	4803      	ldr	r0, [pc, #12]	; (8001718 <ssd1306_Reset+0x2c>)
 800170a:	f001 f9f9 	bl	8002b00 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 800170e:	200a      	movs	r0, #10
 8001710:	f000 fcde 	bl	80020d0 <HAL_Delay>
}
 8001714:	bf00      	nop
 8001716:	bd80      	pop	{r7, pc}
 8001718:	40020400 	.word	0x40020400

0800171c <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b086      	sub	sp, #24
 8001720:	af04      	add	r7, sp, #16
 8001722:	4603      	mov	r3, r0
 8001724:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8001726:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800172a:	9302      	str	r3, [sp, #8]
 800172c:	2301      	movs	r3, #1
 800172e:	9301      	str	r3, [sp, #4]
 8001730:	1dfb      	adds	r3, r7, #7
 8001732:	9300      	str	r3, [sp, #0]
 8001734:	2301      	movs	r3, #1
 8001736:	2200      	movs	r2, #0
 8001738:	2178      	movs	r1, #120	; 0x78
 800173a:	4803      	ldr	r0, [pc, #12]	; (8001748 <ssd1306_WriteCommand+0x2c>)
 800173c:	f001 fb70 	bl	8002e20 <HAL_I2C_Mem_Write>
}
 8001740:	bf00      	nop
 8001742:	3708      	adds	r7, #8
 8001744:	46bd      	mov	sp, r7
 8001746:	bd80      	pop	{r7, pc}
 8001748:	20000614 	.word	0x20000614

0800174c <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t *buffer, size_t buff_size)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b086      	sub	sp, #24
 8001750:	af04      	add	r7, sp, #16
 8001752:	6078      	str	r0, [r7, #4]
 8001754:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	b29b      	uxth	r3, r3
 800175a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800175e:	9202      	str	r2, [sp, #8]
 8001760:	9301      	str	r3, [sp, #4]
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	9300      	str	r3, [sp, #0]
 8001766:	2301      	movs	r3, #1
 8001768:	2240      	movs	r2, #64	; 0x40
 800176a:	2178      	movs	r1, #120	; 0x78
 800176c:	4803      	ldr	r0, [pc, #12]	; (800177c <ssd1306_WriteData+0x30>)
 800176e:	f001 fb57 	bl	8002e20 <HAL_I2C_Mem_Write>
}
 8001772:	bf00      	nop
 8001774:	3708      	adds	r7, #8
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	20000614 	.word	0x20000614

08001780 <ssd1306_Init>:
    return ret;
}

// Initialize the oled screen
void ssd1306_Init(void)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8001784:	f7ff ffb2 	bl	80016ec <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8001788:	2064      	movs	r0, #100	; 0x64
 800178a:	f000 fca1 	bl	80020d0 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 800178e:	2000      	movs	r0, #0
 8001790:	f000 f9e2 	bl	8001b58 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8001794:	2020      	movs	r0, #32
 8001796:	f7ff ffc1 	bl	800171c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 800179a:	2000      	movs	r0, #0
 800179c:	f7ff ffbe 	bl	800171c <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80017a0:	20b0      	movs	r0, #176	; 0xb0
 80017a2:	f7ff ffbb 	bl	800171c <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 80017a6:	20c8      	movs	r0, #200	; 0xc8
 80017a8:	f7ff ffb8 	bl	800171c <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 80017ac:	2000      	movs	r0, #0
 80017ae:	f7ff ffb5 	bl	800171c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 80017b2:	2010      	movs	r0, #16
 80017b4:	f7ff ffb2 	bl	800171c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 80017b8:	2040      	movs	r0, #64	; 0x40
 80017ba:	f7ff ffaf 	bl	800171c <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 80017be:	20ff      	movs	r0, #255	; 0xff
 80017c0:	f000 f9b6 	bl	8001b30 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 80017c4:	20a1      	movs	r0, #161	; 0xa1
 80017c6:	f7ff ffa9 	bl	800171c <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 80017ca:	20a6      	movs	r0, #166	; 0xa6
 80017cc:	f7ff ffa6 	bl	800171c <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 80017d0:	20a8      	movs	r0, #168	; 0xa8
 80017d2:	f7ff ffa3 	bl	800171c <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 80017d6:	203f      	movs	r0, #63	; 0x3f
 80017d8:	f7ff ffa0 	bl	800171c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80017dc:	20a4      	movs	r0, #164	; 0xa4
 80017de:	f7ff ff9d 	bl	800171c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 80017e2:	20d3      	movs	r0, #211	; 0xd3
 80017e4:	f7ff ff9a 	bl	800171c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 80017e8:	2000      	movs	r0, #0
 80017ea:	f7ff ff97 	bl	800171c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 80017ee:	20d5      	movs	r0, #213	; 0xd5
 80017f0:	f7ff ff94 	bl	800171c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 80017f4:	20f0      	movs	r0, #240	; 0xf0
 80017f6:	f7ff ff91 	bl	800171c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 80017fa:	20d9      	movs	r0, #217	; 0xd9
 80017fc:	f7ff ff8e 	bl	800171c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8001800:	2022      	movs	r0, #34	; 0x22
 8001802:	f7ff ff8b 	bl	800171c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8001806:	20da      	movs	r0, #218	; 0xda
 8001808:	f7ff ff88 	bl	800171c <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 800180c:	2012      	movs	r0, #18
 800180e:	f7ff ff85 	bl	800171c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8001812:	20db      	movs	r0, #219	; 0xdb
 8001814:	f7ff ff82 	bl	800171c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8001818:	2020      	movs	r0, #32
 800181a:	f7ff ff7f 	bl	800171c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 800181e:	208d      	movs	r0, #141	; 0x8d
 8001820:	f7ff ff7c 	bl	800171c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8001824:	2014      	movs	r0, #20
 8001826:	f7ff ff79 	bl	800171c <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1);    //--turn on SSD1306 panel
 800182a:	2001      	movs	r0, #1
 800182c:	f000 f994 	bl	8001b58 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(SSD1306_BLACK);
 8001830:	2000      	movs	r0, #0
 8001832:	f000 f80f 	bl	8001854 <ssd1306_Fill>

    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8001836:	f000 f82f 	bl	8001898 <ssd1306_UpdateScreen>

    // Set default values for screen object
    SSD1306.CurrentX = 0;
 800183a:	4b05      	ldr	r3, [pc, #20]	; (8001850 <ssd1306_Init+0xd0>)
 800183c:	2200      	movs	r2, #0
 800183e:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8001840:	4b03      	ldr	r3, [pc, #12]	; (8001850 <ssd1306_Init+0xd0>)
 8001842:	2200      	movs	r2, #0
 8001844:	805a      	strh	r2, [r3, #2]

    SSD1306.Initialized = 1;
 8001846:	4b02      	ldr	r3, [pc, #8]	; (8001850 <ssd1306_Init+0xd0>)
 8001848:	2201      	movs	r2, #1
 800184a:	715a      	strb	r2, [r3, #5]
}
 800184c:	bf00      	nop
 800184e:	bd80      	pop	{r7, pc}
 8001850:	20000600 	.word	0x20000600

08001854 <ssd1306_Fill>:

// Fill the whole screen with the given color
void ssd1306_Fill(SSD1306_COLOR color)
{
 8001854:	b480      	push	{r7}
 8001856:	b085      	sub	sp, #20
 8001858:	af00      	add	r7, sp, #0
 800185a:	4603      	mov	r3, r0
 800185c:	71fb      	strb	r3, [r7, #7]
    /* Set memory */
    uint32_t i;

    for (i = 0; i < sizeof(SSD1306_Buffer); i++)
 800185e:	2300      	movs	r3, #0
 8001860:	60fb      	str	r3, [r7, #12]
 8001862:	e00d      	b.n	8001880 <ssd1306_Fill+0x2c>
    {
        SSD1306_Buffer[i] = (color == SSD1306_BLACK) ? 0x00 : 0xFF;
 8001864:	79fb      	ldrb	r3, [r7, #7]
 8001866:	2b00      	cmp	r3, #0
 8001868:	d101      	bne.n	800186e <ssd1306_Fill+0x1a>
 800186a:	2100      	movs	r1, #0
 800186c:	e000      	b.n	8001870 <ssd1306_Fill+0x1c>
 800186e:	21ff      	movs	r1, #255	; 0xff
 8001870:	4a08      	ldr	r2, [pc, #32]	; (8001894 <ssd1306_Fill+0x40>)
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	4413      	add	r3, r2
 8001876:	460a      	mov	r2, r1
 8001878:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < sizeof(SSD1306_Buffer); i++)
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	3301      	adds	r3, #1
 800187e:	60fb      	str	r3, [r7, #12]
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001886:	d3ed      	bcc.n	8001864 <ssd1306_Fill+0x10>
    }
}
 8001888:	bf00      	nop
 800188a:	3714      	adds	r7, #20
 800188c:	46bd      	mov	sp, r7
 800188e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001892:	4770      	bx	lr
 8001894:	20000200 	.word	0x20000200

08001898 <ssd1306_UpdateScreen>:

// Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen(void)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b082      	sub	sp, #8
 800189c:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for (uint8_t i = 0; i < SSD1306_HEIGHT / 8; i++)
 800189e:	2300      	movs	r3, #0
 80018a0:	71fb      	strb	r3, [r7, #7]
 80018a2:	e016      	b.n	80018d2 <ssd1306_UpdateScreen+0x3a>
    {
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 80018a4:	79fb      	ldrb	r3, [r7, #7]
 80018a6:	3b50      	subs	r3, #80	; 0x50
 80018a8:	b2db      	uxtb	r3, r3
 80018aa:	4618      	mov	r0, r3
 80018ac:	f7ff ff36 	bl	800171c <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00);
 80018b0:	2000      	movs	r0, #0
 80018b2:	f7ff ff33 	bl	800171c <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10);
 80018b6:	2010      	movs	r0, #16
 80018b8:	f7ff ff30 	bl	800171c <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH * i], SSD1306_WIDTH);
 80018bc:	79fb      	ldrb	r3, [r7, #7]
 80018be:	01db      	lsls	r3, r3, #7
 80018c0:	4a07      	ldr	r2, [pc, #28]	; (80018e0 <ssd1306_UpdateScreen+0x48>)
 80018c2:	4413      	add	r3, r2
 80018c4:	2180      	movs	r1, #128	; 0x80
 80018c6:	4618      	mov	r0, r3
 80018c8:	f7ff ff40 	bl	800174c <ssd1306_WriteData>
    for (uint8_t i = 0; i < SSD1306_HEIGHT / 8; i++)
 80018cc:	79fb      	ldrb	r3, [r7, #7]
 80018ce:	3301      	adds	r3, #1
 80018d0:	71fb      	strb	r3, [r7, #7]
 80018d2:	79fb      	ldrb	r3, [r7, #7]
 80018d4:	2b07      	cmp	r3, #7
 80018d6:	d9e5      	bls.n	80018a4 <ssd1306_UpdateScreen+0xc>
    }
}
 80018d8:	bf00      	nop
 80018da:	3708      	adds	r7, #8
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd80      	pop	{r7, pc}
 80018e0:	20000200 	.word	0x20000200

080018e4 <ssd1306_DrawPixel>:
//    Draw one pixel in the screenbuffer
//    X => X Coordinate
//    Y => Y Coordinate
//    color => Pixel color
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color)
{
 80018e4:	b480      	push	{r7}
 80018e6:	b083      	sub	sp, #12
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	4603      	mov	r3, r0
 80018ec:	71fb      	strb	r3, [r7, #7]
 80018ee:	460b      	mov	r3, r1
 80018f0:	71bb      	strb	r3, [r7, #6]
 80018f2:	4613      	mov	r3, r2
 80018f4:	717b      	strb	r3, [r7, #5]
    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT)
 80018f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	db48      	blt.n	8001990 <ssd1306_DrawPixel+0xac>
 80018fe:	79bb      	ldrb	r3, [r7, #6]
 8001900:	2b3f      	cmp	r3, #63	; 0x3f
 8001902:	d845      	bhi.n	8001990 <ssd1306_DrawPixel+0xac>
        // Don't write outside the buffer
        return;
    }

    // Check if pixel should be inverted
    if (SSD1306.Inverted)
 8001904:	4b25      	ldr	r3, [pc, #148]	; (800199c <ssd1306_DrawPixel+0xb8>)
 8001906:	791b      	ldrb	r3, [r3, #4]
 8001908:	2b00      	cmp	r3, #0
 800190a:	d006      	beq.n	800191a <ssd1306_DrawPixel+0x36>
    {
        color = (SSD1306_COLOR)!color;
 800190c:	797b      	ldrb	r3, [r7, #5]
 800190e:	2b00      	cmp	r3, #0
 8001910:	bf0c      	ite	eq
 8001912:	2301      	moveq	r3, #1
 8001914:	2300      	movne	r3, #0
 8001916:	b2db      	uxtb	r3, r3
 8001918:	717b      	strb	r3, [r7, #5]
    }

    // Draw in the right color
    if (color == SSD1306_WHITE)
 800191a:	797b      	ldrb	r3, [r7, #5]
 800191c:	2b01      	cmp	r3, #1
 800191e:	d11a      	bne.n	8001956 <ssd1306_DrawPixel+0x72>
    {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001920:	79fa      	ldrb	r2, [r7, #7]
 8001922:	79bb      	ldrb	r3, [r7, #6]
 8001924:	08db      	lsrs	r3, r3, #3
 8001926:	b2d8      	uxtb	r0, r3
 8001928:	4603      	mov	r3, r0
 800192a:	01db      	lsls	r3, r3, #7
 800192c:	4413      	add	r3, r2
 800192e:	4a1c      	ldr	r2, [pc, #112]	; (80019a0 <ssd1306_DrawPixel+0xbc>)
 8001930:	5cd3      	ldrb	r3, [r2, r3]
 8001932:	b25a      	sxtb	r2, r3
 8001934:	79bb      	ldrb	r3, [r7, #6]
 8001936:	f003 0307 	and.w	r3, r3, #7
 800193a:	2101      	movs	r1, #1
 800193c:	fa01 f303 	lsl.w	r3, r1, r3
 8001940:	b25b      	sxtb	r3, r3
 8001942:	4313      	orrs	r3, r2
 8001944:	b259      	sxtb	r1, r3
 8001946:	79fa      	ldrb	r2, [r7, #7]
 8001948:	4603      	mov	r3, r0
 800194a:	01db      	lsls	r3, r3, #7
 800194c:	4413      	add	r3, r2
 800194e:	b2c9      	uxtb	r1, r1
 8001950:	4a13      	ldr	r2, [pc, #76]	; (80019a0 <ssd1306_DrawPixel+0xbc>)
 8001952:	54d1      	strb	r1, [r2, r3]
 8001954:	e01d      	b.n	8001992 <ssd1306_DrawPixel+0xae>
    }
    else
    {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001956:	79fa      	ldrb	r2, [r7, #7]
 8001958:	79bb      	ldrb	r3, [r7, #6]
 800195a:	08db      	lsrs	r3, r3, #3
 800195c:	b2d8      	uxtb	r0, r3
 800195e:	4603      	mov	r3, r0
 8001960:	01db      	lsls	r3, r3, #7
 8001962:	4413      	add	r3, r2
 8001964:	4a0e      	ldr	r2, [pc, #56]	; (80019a0 <ssd1306_DrawPixel+0xbc>)
 8001966:	5cd3      	ldrb	r3, [r2, r3]
 8001968:	b25a      	sxtb	r2, r3
 800196a:	79bb      	ldrb	r3, [r7, #6]
 800196c:	f003 0307 	and.w	r3, r3, #7
 8001970:	2101      	movs	r1, #1
 8001972:	fa01 f303 	lsl.w	r3, r1, r3
 8001976:	b25b      	sxtb	r3, r3
 8001978:	43db      	mvns	r3, r3
 800197a:	b25b      	sxtb	r3, r3
 800197c:	4013      	ands	r3, r2
 800197e:	b259      	sxtb	r1, r3
 8001980:	79fa      	ldrb	r2, [r7, #7]
 8001982:	4603      	mov	r3, r0
 8001984:	01db      	lsls	r3, r3, #7
 8001986:	4413      	add	r3, r2
 8001988:	b2c9      	uxtb	r1, r1
 800198a:	4a05      	ldr	r2, [pc, #20]	; (80019a0 <ssd1306_DrawPixel+0xbc>)
 800198c:	54d1      	strb	r1, [r2, r3]
 800198e:	e000      	b.n	8001992 <ssd1306_DrawPixel+0xae>
        return;
 8001990:	bf00      	nop
    }
}
 8001992:	370c      	adds	r7, #12
 8001994:	46bd      	mov	sp, r7
 8001996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199a:	4770      	bx	lr
 800199c:	20000600 	.word	0x20000600
 80019a0:	20000200 	.word	0x20000200

080019a4 <ssd1306_WriteChar>:
// Draw 1 char to the screen buffer
// ch       => char om weg te schrijven
// Font     => Font waarmee we gaan schrijven
// color    => SSD1306_BLACK or SSD1306_WHITE
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color)
{
 80019a4:	b590      	push	{r4, r7, lr}
 80019a6:	b089      	sub	sp, #36	; 0x24
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	4604      	mov	r4, r0
 80019ac:	1d38      	adds	r0, r7, #4
 80019ae:	e880 0006 	stmia.w	r0, {r1, r2}
 80019b2:	461a      	mov	r2, r3
 80019b4:	4623      	mov	r3, r4
 80019b6:	73fb      	strb	r3, [r7, #15]
 80019b8:	4613      	mov	r3, r2
 80019ba:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;

    // Check if character is valid
    if (ch < 32 || ch > 126)
 80019bc:	7bfb      	ldrb	r3, [r7, #15]
 80019be:	2b1f      	cmp	r3, #31
 80019c0:	d902      	bls.n	80019c8 <ssd1306_WriteChar+0x24>
 80019c2:	7bfb      	ldrb	r3, [r7, #15]
 80019c4:	2b7e      	cmp	r3, #126	; 0x7e
 80019c6:	d901      	bls.n	80019cc <ssd1306_WriteChar+0x28>
        return 0;
 80019c8:	2300      	movs	r3, #0
 80019ca:	e06d      	b.n	8001aa8 <ssd1306_WriteChar+0x104>

    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 80019cc:	4b38      	ldr	r3, [pc, #224]	; (8001ab0 <ssd1306_WriteChar+0x10c>)
 80019ce:	881b      	ldrh	r3, [r3, #0]
 80019d0:	461a      	mov	r2, r3
 80019d2:	793b      	ldrb	r3, [r7, #4]
 80019d4:	4413      	add	r3, r2
 80019d6:	2b80      	cmp	r3, #128	; 0x80
 80019d8:	dc06      	bgt.n	80019e8 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 80019da:	4b35      	ldr	r3, [pc, #212]	; (8001ab0 <ssd1306_WriteChar+0x10c>)
 80019dc:	885b      	ldrh	r3, [r3, #2]
 80019de:	461a      	mov	r2, r3
 80019e0:	797b      	ldrb	r3, [r7, #5]
 80019e2:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 80019e4:	2b40      	cmp	r3, #64	; 0x40
 80019e6:	dd01      	ble.n	80019ec <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 80019e8:	2300      	movs	r3, #0
 80019ea:	e05d      	b.n	8001aa8 <ssd1306_WriteChar+0x104>
    }

    // Use the font to write
    for (i = 0; i < Font.FontHeight; i++)
 80019ec:	2300      	movs	r3, #0
 80019ee:	61fb      	str	r3, [r7, #28]
 80019f0:	e04c      	b.n	8001a8c <ssd1306_WriteChar+0xe8>
    {
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 80019f2:	68ba      	ldr	r2, [r7, #8]
 80019f4:	7bfb      	ldrb	r3, [r7, #15]
 80019f6:	3b20      	subs	r3, #32
 80019f8:	7979      	ldrb	r1, [r7, #5]
 80019fa:	fb01 f303 	mul.w	r3, r1, r3
 80019fe:	4619      	mov	r1, r3
 8001a00:	69fb      	ldr	r3, [r7, #28]
 8001a02:	440b      	add	r3, r1
 8001a04:	005b      	lsls	r3, r3, #1
 8001a06:	4413      	add	r3, r2
 8001a08:	881b      	ldrh	r3, [r3, #0]
 8001a0a:	617b      	str	r3, [r7, #20]
        for (j = 0; j < Font.FontWidth; j++)
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	61bb      	str	r3, [r7, #24]
 8001a10:	e034      	b.n	8001a7c <ssd1306_WriteChar+0xd8>
        {
            if ((b << j) & 0x8000)
 8001a12:	697a      	ldr	r2, [r7, #20]
 8001a14:	69bb      	ldr	r3, [r7, #24]
 8001a16:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d012      	beq.n	8001a48 <ssd1306_WriteChar+0xa4>
            {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)color);
 8001a22:	4b23      	ldr	r3, [pc, #140]	; (8001ab0 <ssd1306_WriteChar+0x10c>)
 8001a24:	881b      	ldrh	r3, [r3, #0]
 8001a26:	b2da      	uxtb	r2, r3
 8001a28:	69bb      	ldr	r3, [r7, #24]
 8001a2a:	b2db      	uxtb	r3, r3
 8001a2c:	4413      	add	r3, r2
 8001a2e:	b2d8      	uxtb	r0, r3
 8001a30:	4b1f      	ldr	r3, [pc, #124]	; (8001ab0 <ssd1306_WriteChar+0x10c>)
 8001a32:	885b      	ldrh	r3, [r3, #2]
 8001a34:	b2da      	uxtb	r2, r3
 8001a36:	69fb      	ldr	r3, [r7, #28]
 8001a38:	b2db      	uxtb	r3, r3
 8001a3a:	4413      	add	r3, r2
 8001a3c:	b2db      	uxtb	r3, r3
 8001a3e:	7bba      	ldrb	r2, [r7, #14]
 8001a40:	4619      	mov	r1, r3
 8001a42:	f7ff ff4f 	bl	80018e4 <ssd1306_DrawPixel>
 8001a46:	e016      	b.n	8001a76 <ssd1306_WriteChar+0xd2>
            }
            else
            {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8001a48:	4b19      	ldr	r3, [pc, #100]	; (8001ab0 <ssd1306_WriteChar+0x10c>)
 8001a4a:	881b      	ldrh	r3, [r3, #0]
 8001a4c:	b2da      	uxtb	r2, r3
 8001a4e:	69bb      	ldr	r3, [r7, #24]
 8001a50:	b2db      	uxtb	r3, r3
 8001a52:	4413      	add	r3, r2
 8001a54:	b2d8      	uxtb	r0, r3
 8001a56:	4b16      	ldr	r3, [pc, #88]	; (8001ab0 <ssd1306_WriteChar+0x10c>)
 8001a58:	885b      	ldrh	r3, [r3, #2]
 8001a5a:	b2da      	uxtb	r2, r3
 8001a5c:	69fb      	ldr	r3, [r7, #28]
 8001a5e:	b2db      	uxtb	r3, r3
 8001a60:	4413      	add	r3, r2
 8001a62:	b2d9      	uxtb	r1, r3
 8001a64:	7bbb      	ldrb	r3, [r7, #14]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	bf0c      	ite	eq
 8001a6a:	2301      	moveq	r3, #1
 8001a6c:	2300      	movne	r3, #0
 8001a6e:	b2db      	uxtb	r3, r3
 8001a70:	461a      	mov	r2, r3
 8001a72:	f7ff ff37 	bl	80018e4 <ssd1306_DrawPixel>
        for (j = 0; j < Font.FontWidth; j++)
 8001a76:	69bb      	ldr	r3, [r7, #24]
 8001a78:	3301      	adds	r3, #1
 8001a7a:	61bb      	str	r3, [r7, #24]
 8001a7c:	793b      	ldrb	r3, [r7, #4]
 8001a7e:	461a      	mov	r2, r3
 8001a80:	69bb      	ldr	r3, [r7, #24]
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d3c5      	bcc.n	8001a12 <ssd1306_WriteChar+0x6e>
    for (i = 0; i < Font.FontHeight; i++)
 8001a86:	69fb      	ldr	r3, [r7, #28]
 8001a88:	3301      	adds	r3, #1
 8001a8a:	61fb      	str	r3, [r7, #28]
 8001a8c:	797b      	ldrb	r3, [r7, #5]
 8001a8e:	461a      	mov	r2, r3
 8001a90:	69fb      	ldr	r3, [r7, #28]
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d3ad      	bcc.n	80019f2 <ssd1306_WriteChar+0x4e>
            }
        }
    }

    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8001a96:	4b06      	ldr	r3, [pc, #24]	; (8001ab0 <ssd1306_WriteChar+0x10c>)
 8001a98:	881a      	ldrh	r2, [r3, #0]
 8001a9a:	793b      	ldrb	r3, [r7, #4]
 8001a9c:	b29b      	uxth	r3, r3
 8001a9e:	4413      	add	r3, r2
 8001aa0:	b29a      	uxth	r2, r3
 8001aa2:	4b03      	ldr	r3, [pc, #12]	; (8001ab0 <ssd1306_WriteChar+0x10c>)
 8001aa4:	801a      	strh	r2, [r3, #0]

    // Return written char for validation
    return ch;
 8001aa6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	3724      	adds	r7, #36	; 0x24
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bd90      	pop	{r4, r7, pc}
 8001ab0:	20000600 	.word	0x20000600

08001ab4 <ssd1306_WriteString>:

// Write full string to screenbuffer
char ssd1306_WriteString(char *str, FontDef Font, SSD1306_COLOR color)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b084      	sub	sp, #16
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	60f8      	str	r0, [r7, #12]
 8001abc:	1d38      	adds	r0, r7, #4
 8001abe:	e880 0006 	stmia.w	r0, {r1, r2}
 8001ac2:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str)
 8001ac4:	e012      	b.n	8001aec <ssd1306_WriteString+0x38>
    {
        if (ssd1306_WriteChar(*str, Font, color) != *str)
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	7818      	ldrb	r0, [r3, #0]
 8001aca:	78fb      	ldrb	r3, [r7, #3]
 8001acc:	1d3a      	adds	r2, r7, #4
 8001ace:	ca06      	ldmia	r2, {r1, r2}
 8001ad0:	f7ff ff68 	bl	80019a4 <ssd1306_WriteChar>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	461a      	mov	r2, r3
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	781b      	ldrb	r3, [r3, #0]
 8001adc:	429a      	cmp	r2, r3
 8001ade:	d002      	beq.n	8001ae6 <ssd1306_WriteString+0x32>
        {
            // Char could not be written
            return *str;
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	781b      	ldrb	r3, [r3, #0]
 8001ae4:	e008      	b.n	8001af8 <ssd1306_WriteString+0x44>
        }

        // Next char
        str++;
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	3301      	adds	r3, #1
 8001aea:	60fb      	str	r3, [r7, #12]
    while (*str)
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	781b      	ldrb	r3, [r3, #0]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d1e8      	bne.n	8001ac6 <ssd1306_WriteString+0x12>
    }

    // Everything ok
    return *str;
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	781b      	ldrb	r3, [r3, #0]
}
 8001af8:	4618      	mov	r0, r3
 8001afa:	3710      	adds	r7, #16
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bd80      	pop	{r7, pc}

08001b00 <ssd1306_SetCursor>:

// Position the cursor
void ssd1306_SetCursor(uint8_t x, uint8_t y)
{
 8001b00:	b480      	push	{r7}
 8001b02:	b083      	sub	sp, #12
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	4603      	mov	r3, r0
 8001b08:	460a      	mov	r2, r1
 8001b0a:	71fb      	strb	r3, [r7, #7]
 8001b0c:	4613      	mov	r3, r2
 8001b0e:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8001b10:	79fb      	ldrb	r3, [r7, #7]
 8001b12:	b29a      	uxth	r2, r3
 8001b14:	4b05      	ldr	r3, [pc, #20]	; (8001b2c <ssd1306_SetCursor+0x2c>)
 8001b16:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8001b18:	79bb      	ldrb	r3, [r7, #6]
 8001b1a:	b29a      	uxth	r2, r3
 8001b1c:	4b03      	ldr	r3, [pc, #12]	; (8001b2c <ssd1306_SetCursor+0x2c>)
 8001b1e:	805a      	strh	r2, [r3, #2]
}
 8001b20:	bf00      	nop
 8001b22:	370c      	adds	r7, #12
 8001b24:	46bd      	mov	sp, r7
 8001b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2a:	4770      	bx	lr
 8001b2c:	20000600 	.word	0x20000600

08001b30 <ssd1306_SetContrast>:

    return;
}

void ssd1306_SetContrast(const uint8_t value)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b084      	sub	sp, #16
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	4603      	mov	r3, r0
 8001b38:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8001b3a:	2381      	movs	r3, #129	; 0x81
 8001b3c:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8001b3e:	7bfb      	ldrb	r3, [r7, #15]
 8001b40:	4618      	mov	r0, r3
 8001b42:	f7ff fdeb 	bl	800171c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8001b46:	79fb      	ldrb	r3, [r7, #7]
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f7ff fde7 	bl	800171c <ssd1306_WriteCommand>
}
 8001b4e:	bf00      	nop
 8001b50:	3710      	adds	r7, #16
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}
	...

08001b58 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b084      	sub	sp, #16
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	4603      	mov	r3, r0
 8001b60:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on)
 8001b62:	79fb      	ldrb	r3, [r7, #7]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d005      	beq.n	8001b74 <ssd1306_SetDisplayOn+0x1c>
    {
        value = 0xAF; // Display on
 8001b68:	23af      	movs	r3, #175	; 0xaf
 8001b6a:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8001b6c:	4b08      	ldr	r3, [pc, #32]	; (8001b90 <ssd1306_SetDisplayOn+0x38>)
 8001b6e:	2201      	movs	r2, #1
 8001b70:	719a      	strb	r2, [r3, #6]
 8001b72:	e004      	b.n	8001b7e <ssd1306_SetDisplayOn+0x26>
    }
    else
    {
        value = 0xAE; // Display off
 8001b74:	23ae      	movs	r3, #174	; 0xae
 8001b76:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8001b78:	4b05      	ldr	r3, [pc, #20]	; (8001b90 <ssd1306_SetDisplayOn+0x38>)
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	719a      	strb	r2, [r3, #6]
    }
    ssd1306_WriteCommand(value);
 8001b7e:	7bfb      	ldrb	r3, [r7, #15]
 8001b80:	4618      	mov	r0, r3
 8001b82:	f7ff fdcb 	bl	800171c <ssd1306_WriteCommand>
}
 8001b86:	bf00      	nop
 8001b88:	3710      	adds	r7, #16
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}
 8001b8e:	bf00      	nop
 8001b90:	20000600 	.word	0x20000600

08001b94 <ssd1306_DrawBitMap>:
uint8_t ssd1306_GetDisplayOn()
{
    return SSD1306.DisplayOn;
}

void ssd1306_DrawBitMap(int16_t x, int16_t y, const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color){
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b086      	sub	sp, #24
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	60ba      	str	r2, [r7, #8]
 8001b9c:	461a      	mov	r2, r3
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	81fb      	strh	r3, [r7, #14]
 8001ba2:	460b      	mov	r3, r1
 8001ba4:	81bb      	strh	r3, [r7, #12]
 8001ba6:	4613      	mov	r3, r2
 8001ba8:	80fb      	strh	r3, [r7, #6]
	int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 8001baa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001bae:	3307      	adds	r3, #7
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	da00      	bge.n	8001bb6 <ssd1306_DrawBitMap+0x22>
 8001bb4:	3307      	adds	r3, #7
 8001bb6:	10db      	asrs	r3, r3, #3
 8001bb8:	823b      	strh	r3, [r7, #16]
	uint8_t byte = 0;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	75fb      	strb	r3, [r7, #23]

	for (int16_t j = 0; j < h; j++, y++) {
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	82bb      	strh	r3, [r7, #20]
 8001bc2:	e047      	b.n	8001c54 <ssd1306_DrawBitMap+0xc0>
		for (int16_t i = 0; i < w; i++) {
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	827b      	strh	r3, [r7, #18]
 8001bc8:	e032      	b.n	8001c30 <ssd1306_DrawBitMap+0x9c>
			if (i & 7)
 8001bca:	8a7b      	ldrh	r3, [r7, #18]
 8001bcc:	f003 0307 	and.w	r3, r3, #7
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d003      	beq.n	8001bdc <ssd1306_DrawBitMap+0x48>
				byte <<= 1;
 8001bd4:	7dfb      	ldrb	r3, [r7, #23]
 8001bd6:	005b      	lsls	r3, r3, #1
 8001bd8:	75fb      	strb	r3, [r7, #23]
 8001bda:	e012      	b.n	8001c02 <ssd1306_DrawBitMap+0x6e>
			else
				byte = bitmap[j * byteWidth + i / 8];
 8001bdc:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001be0:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8001be4:	fb02 f203 	mul.w	r2, r2, r3
 8001be8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	da00      	bge.n	8001bf2 <ssd1306_DrawBitMap+0x5e>
 8001bf0:	3307      	adds	r3, #7
 8001bf2:	10db      	asrs	r3, r3, #3
 8001bf4:	b21b      	sxth	r3, r3
 8001bf6:	4413      	add	r3, r2
 8001bf8:	461a      	mov	r2, r3
 8001bfa:	68bb      	ldr	r3, [r7, #8]
 8001bfc:	4413      	add	r3, r2
 8001bfe:	781b      	ldrb	r3, [r3, #0]
 8001c00:	75fb      	strb	r3, [r7, #23]
			if (byte & 0x80)
 8001c02:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	da0c      	bge.n	8001c24 <ssd1306_DrawBitMap+0x90>
				ssd1306_DrawPixel(x + i, y, color);
 8001c0a:	89fb      	ldrh	r3, [r7, #14]
 8001c0c:	b2da      	uxtb	r2, r3
 8001c0e:	8a7b      	ldrh	r3, [r7, #18]
 8001c10:	b2db      	uxtb	r3, r3
 8001c12:	4413      	add	r3, r2
 8001c14:	b2db      	uxtb	r3, r3
 8001c16:	89ba      	ldrh	r2, [r7, #12]
 8001c18:	b2d1      	uxtb	r1, r2
 8001c1a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001c1c:	b2d2      	uxtb	r2, r2
 8001c1e:	4618      	mov	r0, r3
 8001c20:	f7ff fe60 	bl	80018e4 <ssd1306_DrawPixel>
		for (int16_t i = 0; i < w; i++) {
 8001c24:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001c28:	b29b      	uxth	r3, r3
 8001c2a:	3301      	adds	r3, #1
 8001c2c:	b29b      	uxth	r3, r3
 8001c2e:	827b      	strh	r3, [r7, #18]
 8001c30:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001c34:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c38:	429a      	cmp	r2, r3
 8001c3a:	dbc6      	blt.n	8001bca <ssd1306_DrawBitMap+0x36>
	for (int16_t j = 0; j < h; j++, y++) {
 8001c3c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001c40:	b29b      	uxth	r3, r3
 8001c42:	3301      	adds	r3, #1
 8001c44:	b29b      	uxth	r3, r3
 8001c46:	82bb      	strh	r3, [r7, #20]
 8001c48:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001c4c:	b29b      	uxth	r3, r3
 8001c4e:	3301      	adds	r3, #1
 8001c50:	b29b      	uxth	r3, r3
 8001c52:	81bb      	strh	r3, [r7, #12]
 8001c54:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8001c58:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8001c5c:	429a      	cmp	r2, r3
 8001c5e:	dbb1      	blt.n	8001bc4 <ssd1306_DrawBitMap+0x30>
		}
	}
	ssd1306_UpdateScreen();
 8001c60:	f7ff fe1a 	bl	8001898 <ssd1306_UpdateScreen>
}
 8001c64:	bf00      	nop
 8001c66:	3718      	adds	r7, #24
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bd80      	pop	{r7, pc}

08001c6c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b083      	sub	sp, #12
 8001c70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c72:	2300      	movs	r3, #0
 8001c74:	607b      	str	r3, [r7, #4]
 8001c76:	4b10      	ldr	r3, [pc, #64]	; (8001cb8 <HAL_MspInit+0x4c>)
 8001c78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c7a:	4a0f      	ldr	r2, [pc, #60]	; (8001cb8 <HAL_MspInit+0x4c>)
 8001c7c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c80:	6453      	str	r3, [r2, #68]	; 0x44
 8001c82:	4b0d      	ldr	r3, [pc, #52]	; (8001cb8 <HAL_MspInit+0x4c>)
 8001c84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c8a:	607b      	str	r3, [r7, #4]
 8001c8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c8e:	2300      	movs	r3, #0
 8001c90:	603b      	str	r3, [r7, #0]
 8001c92:	4b09      	ldr	r3, [pc, #36]	; (8001cb8 <HAL_MspInit+0x4c>)
 8001c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c96:	4a08      	ldr	r2, [pc, #32]	; (8001cb8 <HAL_MspInit+0x4c>)
 8001c98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c9c:	6413      	str	r3, [r2, #64]	; 0x40
 8001c9e:	4b06      	ldr	r3, [pc, #24]	; (8001cb8 <HAL_MspInit+0x4c>)
 8001ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ca2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ca6:	603b      	str	r3, [r7, #0]
 8001ca8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001caa:	bf00      	nop
 8001cac:	370c      	adds	r7, #12
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb4:	4770      	bx	lr
 8001cb6:	bf00      	nop
 8001cb8:	40023800 	.word	0x40023800

08001cbc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b08a      	sub	sp, #40	; 0x28
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cc4:	f107 0314 	add.w	r3, r7, #20
 8001cc8:	2200      	movs	r2, #0
 8001cca:	601a      	str	r2, [r3, #0]
 8001ccc:	605a      	str	r2, [r3, #4]
 8001cce:	609a      	str	r2, [r3, #8]
 8001cd0:	60da      	str	r2, [r3, #12]
 8001cd2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4a24      	ldr	r2, [pc, #144]	; (8001d6c <HAL_ADC_MspInit+0xb0>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d141      	bne.n	8001d62 <HAL_ADC_MspInit+0xa6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001cde:	2300      	movs	r3, #0
 8001ce0:	613b      	str	r3, [r7, #16]
 8001ce2:	4b23      	ldr	r3, [pc, #140]	; (8001d70 <HAL_ADC_MspInit+0xb4>)
 8001ce4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ce6:	4a22      	ldr	r2, [pc, #136]	; (8001d70 <HAL_ADC_MspInit+0xb4>)
 8001ce8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cec:	6453      	str	r3, [r2, #68]	; 0x44
 8001cee:	4b20      	ldr	r3, [pc, #128]	; (8001d70 <HAL_ADC_MspInit+0xb4>)
 8001cf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cf2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cf6:	613b      	str	r3, [r7, #16]
 8001cf8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	60fb      	str	r3, [r7, #12]
 8001cfe:	4b1c      	ldr	r3, [pc, #112]	; (8001d70 <HAL_ADC_MspInit+0xb4>)
 8001d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d02:	4a1b      	ldr	r2, [pc, #108]	; (8001d70 <HAL_ADC_MspInit+0xb4>)
 8001d04:	f043 0304 	orr.w	r3, r3, #4
 8001d08:	6313      	str	r3, [r2, #48]	; 0x30
 8001d0a:	4b19      	ldr	r3, [pc, #100]	; (8001d70 <HAL_ADC_MspInit+0xb4>)
 8001d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d0e:	f003 0304 	and.w	r3, r3, #4
 8001d12:	60fb      	str	r3, [r7, #12]
 8001d14:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d16:	2300      	movs	r3, #0
 8001d18:	60bb      	str	r3, [r7, #8]
 8001d1a:	4b15      	ldr	r3, [pc, #84]	; (8001d70 <HAL_ADC_MspInit+0xb4>)
 8001d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d1e:	4a14      	ldr	r2, [pc, #80]	; (8001d70 <HAL_ADC_MspInit+0xb4>)
 8001d20:	f043 0301 	orr.w	r3, r3, #1
 8001d24:	6313      	str	r3, [r2, #48]	; 0x30
 8001d26:	4b12      	ldr	r3, [pc, #72]	; (8001d70 <HAL_ADC_MspInit+0xb4>)
 8001d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d2a:	f003 0301 	and.w	r3, r3, #1
 8001d2e:	60bb      	str	r3, [r7, #8]
 8001d30:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC3     ------> ADC1_IN13
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = I_SENSE_Pin;
 8001d32:	2308      	movs	r3, #8
 8001d34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d36:	2303      	movs	r3, #3
 8001d38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(I_SENSE_GPIO_Port, &GPIO_InitStruct);
 8001d3e:	f107 0314 	add.w	r3, r7, #20
 8001d42:	4619      	mov	r1, r3
 8001d44:	480b      	ldr	r0, [pc, #44]	; (8001d74 <HAL_ADC_MspInit+0xb8>)
 8001d46:	f000 fd59 	bl	80027fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VO_SENSE_Pin|VI_SENSE_Pin;
 8001d4a:	2303      	movs	r3, #3
 8001d4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d4e:	2303      	movs	r3, #3
 8001d50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d52:	2300      	movs	r3, #0
 8001d54:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d56:	f107 0314 	add.w	r3, r7, #20
 8001d5a:	4619      	mov	r1, r3
 8001d5c:	4806      	ldr	r0, [pc, #24]	; (8001d78 <HAL_ADC_MspInit+0xbc>)
 8001d5e:	f000 fd4d 	bl	80027fc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001d62:	bf00      	nop
 8001d64:	3728      	adds	r7, #40	; 0x28
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}
 8001d6a:	bf00      	nop
 8001d6c:	40012000 	.word	0x40012000
 8001d70:	40023800 	.word	0x40023800
 8001d74:	40020800 	.word	0x40020800
 8001d78:	40020000 	.word	0x40020000

08001d7c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b08a      	sub	sp, #40	; 0x28
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d84:	f107 0314 	add.w	r3, r7, #20
 8001d88:	2200      	movs	r2, #0
 8001d8a:	601a      	str	r2, [r3, #0]
 8001d8c:	605a      	str	r2, [r3, #4]
 8001d8e:	609a      	str	r2, [r3, #8]
 8001d90:	60da      	str	r2, [r3, #12]
 8001d92:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4a19      	ldr	r2, [pc, #100]	; (8001e00 <HAL_I2C_MspInit+0x84>)
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d12b      	bne.n	8001df6 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d9e:	2300      	movs	r3, #0
 8001da0:	613b      	str	r3, [r7, #16]
 8001da2:	4b18      	ldr	r3, [pc, #96]	; (8001e04 <HAL_I2C_MspInit+0x88>)
 8001da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001da6:	4a17      	ldr	r2, [pc, #92]	; (8001e04 <HAL_I2C_MspInit+0x88>)
 8001da8:	f043 0302 	orr.w	r3, r3, #2
 8001dac:	6313      	str	r3, [r2, #48]	; 0x30
 8001dae:	4b15      	ldr	r3, [pc, #84]	; (8001e04 <HAL_I2C_MspInit+0x88>)
 8001db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001db2:	f003 0302 	and.w	r3, r3, #2
 8001db6:	613b      	str	r3, [r7, #16]
 8001db8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001dba:	23c0      	movs	r3, #192	; 0xc0
 8001dbc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001dbe:	2312      	movs	r3, #18
 8001dc0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dc6:	2303      	movs	r3, #3
 8001dc8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001dca:	2304      	movs	r3, #4
 8001dcc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dce:	f107 0314 	add.w	r3, r7, #20
 8001dd2:	4619      	mov	r1, r3
 8001dd4:	480c      	ldr	r0, [pc, #48]	; (8001e08 <HAL_I2C_MspInit+0x8c>)
 8001dd6:	f000 fd11 	bl	80027fc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001dda:	2300      	movs	r3, #0
 8001ddc:	60fb      	str	r3, [r7, #12]
 8001dde:	4b09      	ldr	r3, [pc, #36]	; (8001e04 <HAL_I2C_MspInit+0x88>)
 8001de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001de2:	4a08      	ldr	r2, [pc, #32]	; (8001e04 <HAL_I2C_MspInit+0x88>)
 8001de4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001de8:	6413      	str	r3, [r2, #64]	; 0x40
 8001dea:	4b06      	ldr	r3, [pc, #24]	; (8001e04 <HAL_I2C_MspInit+0x88>)
 8001dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001df2:	60fb      	str	r3, [r7, #12]
 8001df4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001df6:	bf00      	nop
 8001df8:	3728      	adds	r7, #40	; 0x28
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}
 8001dfe:	bf00      	nop
 8001e00:	40005400 	.word	0x40005400
 8001e04:	40023800 	.word	0x40023800
 8001e08:	40020400 	.word	0x40020400

08001e0c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b08a      	sub	sp, #40	; 0x28
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e14:	f107 0314 	add.w	r3, r7, #20
 8001e18:	2200      	movs	r2, #0
 8001e1a:	601a      	str	r2, [r3, #0]
 8001e1c:	605a      	str	r2, [r3, #4]
 8001e1e:	609a      	str	r2, [r3, #8]
 8001e20:	60da      	str	r2, [r3, #12]
 8001e22:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4a19      	ldr	r2, [pc, #100]	; (8001e90 <HAL_UART_MspInit+0x84>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d12b      	bne.n	8001e86 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001e2e:	2300      	movs	r3, #0
 8001e30:	613b      	str	r3, [r7, #16]
 8001e32:	4b18      	ldr	r3, [pc, #96]	; (8001e94 <HAL_UART_MspInit+0x88>)
 8001e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e36:	4a17      	ldr	r2, [pc, #92]	; (8001e94 <HAL_UART_MspInit+0x88>)
 8001e38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e3c:	6413      	str	r3, [r2, #64]	; 0x40
 8001e3e:	4b15      	ldr	r3, [pc, #84]	; (8001e94 <HAL_UART_MspInit+0x88>)
 8001e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e46:	613b      	str	r3, [r7, #16]
 8001e48:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	60fb      	str	r3, [r7, #12]
 8001e4e:	4b11      	ldr	r3, [pc, #68]	; (8001e94 <HAL_UART_MspInit+0x88>)
 8001e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e52:	4a10      	ldr	r2, [pc, #64]	; (8001e94 <HAL_UART_MspInit+0x88>)
 8001e54:	f043 0301 	orr.w	r3, r3, #1
 8001e58:	6313      	str	r3, [r2, #48]	; 0x30
 8001e5a:	4b0e      	ldr	r3, [pc, #56]	; (8001e94 <HAL_UART_MspInit+0x88>)
 8001e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e5e:	f003 0301 	and.w	r3, r3, #1
 8001e62:	60fb      	str	r3, [r7, #12]
 8001e64:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001e66:	230c      	movs	r3, #12
 8001e68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e6a:	2302      	movs	r3, #2
 8001e6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e72:	2303      	movs	r3, #3
 8001e74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001e76:	2307      	movs	r3, #7
 8001e78:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e7a:	f107 0314 	add.w	r3, r7, #20
 8001e7e:	4619      	mov	r1, r3
 8001e80:	4805      	ldr	r0, [pc, #20]	; (8001e98 <HAL_UART_MspInit+0x8c>)
 8001e82:	f000 fcbb 	bl	80027fc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001e86:	bf00      	nop
 8001e88:	3728      	adds	r7, #40	; 0x28
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}
 8001e8e:	bf00      	nop
 8001e90:	40004400 	.word	0x40004400
 8001e94:	40023800 	.word	0x40023800
 8001e98:	40020000 	.word	0x40020000

08001e9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ea0:	e7fe      	b.n	8001ea0 <NMI_Handler+0x4>

08001ea2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ea2:	b480      	push	{r7}
 8001ea4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ea6:	e7fe      	b.n	8001ea6 <HardFault_Handler+0x4>

08001ea8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001eac:	e7fe      	b.n	8001eac <MemManage_Handler+0x4>

08001eae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001eae:	b480      	push	{r7}
 8001eb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001eb2:	e7fe      	b.n	8001eb2 <BusFault_Handler+0x4>

08001eb4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001eb8:	e7fe      	b.n	8001eb8 <UsageFault_Handler+0x4>

08001eba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001eba:	b480      	push	{r7}
 8001ebc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ebe:	bf00      	nop
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec6:	4770      	bx	lr

08001ec8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ecc:	bf00      	nop
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed4:	4770      	bx	lr

08001ed6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ed6:	b480      	push	{r7}
 8001ed8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001eda:	bf00      	nop
 8001edc:	46bd      	mov	sp, r7
 8001ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee2:	4770      	bx	lr

08001ee4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ee8:	f000 f8d2 	bl	8002090 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001eec:	bf00      	nop
 8001eee:	bd80      	pop	{r7, pc}

08001ef0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8001ef4:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001ef8:	f000 fe36 	bl	8002b68 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001efc:	bf00      	nop
 8001efe:	bd80      	pop	{r7, pc}

08001f00 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b086      	sub	sp, #24
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f08:	4a14      	ldr	r2, [pc, #80]	; (8001f5c <_sbrk+0x5c>)
 8001f0a:	4b15      	ldr	r3, [pc, #84]	; (8001f60 <_sbrk+0x60>)
 8001f0c:	1ad3      	subs	r3, r2, r3
 8001f0e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f10:	697b      	ldr	r3, [r7, #20]
 8001f12:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f14:	4b13      	ldr	r3, [pc, #76]	; (8001f64 <_sbrk+0x64>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d102      	bne.n	8001f22 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f1c:	4b11      	ldr	r3, [pc, #68]	; (8001f64 <_sbrk+0x64>)
 8001f1e:	4a12      	ldr	r2, [pc, #72]	; (8001f68 <_sbrk+0x68>)
 8001f20:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f22:	4b10      	ldr	r3, [pc, #64]	; (8001f64 <_sbrk+0x64>)
 8001f24:	681a      	ldr	r2, [r3, #0]
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	4413      	add	r3, r2
 8001f2a:	693a      	ldr	r2, [r7, #16]
 8001f2c:	429a      	cmp	r2, r3
 8001f2e:	d207      	bcs.n	8001f40 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f30:	f002 fca4 	bl	800487c <__errno>
 8001f34:	4602      	mov	r2, r0
 8001f36:	230c      	movs	r3, #12
 8001f38:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001f3a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001f3e:	e009      	b.n	8001f54 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f40:	4b08      	ldr	r3, [pc, #32]	; (8001f64 <_sbrk+0x64>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f46:	4b07      	ldr	r3, [pc, #28]	; (8001f64 <_sbrk+0x64>)
 8001f48:	681a      	ldr	r2, [r3, #0]
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	4413      	add	r3, r2
 8001f4e:	4a05      	ldr	r2, [pc, #20]	; (8001f64 <_sbrk+0x64>)
 8001f50:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f52:	68fb      	ldr	r3, [r7, #12]
}
 8001f54:	4618      	mov	r0, r3
 8001f56:	3718      	adds	r7, #24
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bd80      	pop	{r7, pc}
 8001f5c:	20018000 	.word	0x20018000
 8001f60:	00000400 	.word	0x00000400
 8001f64:	20000608 	.word	0x20000608
 8001f68:	200006f8 	.word	0x200006f8

08001f6c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f70:	4b08      	ldr	r3, [pc, #32]	; (8001f94 <SystemInit+0x28>)
 8001f72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f76:	4a07      	ldr	r2, [pc, #28]	; (8001f94 <SystemInit+0x28>)
 8001f78:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f7c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001f80:	4b04      	ldr	r3, [pc, #16]	; (8001f94 <SystemInit+0x28>)
 8001f82:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001f86:	609a      	str	r2, [r3, #8]
#endif
}
 8001f88:	bf00      	nop
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f90:	4770      	bx	lr
 8001f92:	bf00      	nop
 8001f94:	e000ed00 	.word	0xe000ed00

08001f98 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001f98:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001fd0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001f9c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001f9e:	e003      	b.n	8001fa8 <LoopCopyDataInit>

08001fa0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001fa0:	4b0c      	ldr	r3, [pc, #48]	; (8001fd4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001fa2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001fa4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001fa6:	3104      	adds	r1, #4

08001fa8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001fa8:	480b      	ldr	r0, [pc, #44]	; (8001fd8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001faa:	4b0c      	ldr	r3, [pc, #48]	; (8001fdc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001fac:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001fae:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001fb0:	d3f6      	bcc.n	8001fa0 <CopyDataInit>
  ldr  r2, =_sbss
 8001fb2:	4a0b      	ldr	r2, [pc, #44]	; (8001fe0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001fb4:	e002      	b.n	8001fbc <LoopFillZerobss>

08001fb6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001fb6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001fb8:	f842 3b04 	str.w	r3, [r2], #4

08001fbc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001fbc:	4b09      	ldr	r3, [pc, #36]	; (8001fe4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001fbe:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001fc0:	d3f9      	bcc.n	8001fb6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001fc2:	f7ff ffd3 	bl	8001f6c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001fc6:	f002 fc5f 	bl	8004888 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001fca:	f7ff f865 	bl	8001098 <main>
  bx  lr    
 8001fce:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001fd0:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 8001fd4:	08007670 	.word	0x08007670
  ldr  r0, =_sdata
 8001fd8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001fdc:	200001e4 	.word	0x200001e4
  ldr  r2, =_sbss
 8001fe0:	200001e4 	.word	0x200001e4
  ldr  r3, = _ebss
 8001fe4:	200006f8 	.word	0x200006f8

08001fe8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001fe8:	e7fe      	b.n	8001fe8 <ADC_IRQHandler>
	...

08001fec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001ff0:	4b0e      	ldr	r3, [pc, #56]	; (800202c <HAL_Init+0x40>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4a0d      	ldr	r2, [pc, #52]	; (800202c <HAL_Init+0x40>)
 8001ff6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ffa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001ffc:	4b0b      	ldr	r3, [pc, #44]	; (800202c <HAL_Init+0x40>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4a0a      	ldr	r2, [pc, #40]	; (800202c <HAL_Init+0x40>)
 8002002:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002006:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002008:	4b08      	ldr	r3, [pc, #32]	; (800202c <HAL_Init+0x40>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4a07      	ldr	r2, [pc, #28]	; (800202c <HAL_Init+0x40>)
 800200e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002012:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002014:	2003      	movs	r0, #3
 8002016:	f000 fbaf 	bl	8002778 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800201a:	2000      	movs	r0, #0
 800201c:	f000 f808 	bl	8002030 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002020:	f7ff fe24 	bl	8001c6c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002024:	2300      	movs	r3, #0
}
 8002026:	4618      	mov	r0, r3
 8002028:	bd80      	pop	{r7, pc}
 800202a:	bf00      	nop
 800202c:	40023c00 	.word	0x40023c00

08002030 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b082      	sub	sp, #8
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002038:	4b12      	ldr	r3, [pc, #72]	; (8002084 <HAL_InitTick+0x54>)
 800203a:	681a      	ldr	r2, [r3, #0]
 800203c:	4b12      	ldr	r3, [pc, #72]	; (8002088 <HAL_InitTick+0x58>)
 800203e:	781b      	ldrb	r3, [r3, #0]
 8002040:	4619      	mov	r1, r3
 8002042:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002046:	fbb3 f3f1 	udiv	r3, r3, r1
 800204a:	fbb2 f3f3 	udiv	r3, r2, r3
 800204e:	4618      	mov	r0, r3
 8002050:	f000 fbc7 	bl	80027e2 <HAL_SYSTICK_Config>
 8002054:	4603      	mov	r3, r0
 8002056:	2b00      	cmp	r3, #0
 8002058:	d001      	beq.n	800205e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800205a:	2301      	movs	r3, #1
 800205c:	e00e      	b.n	800207c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	2b0f      	cmp	r3, #15
 8002062:	d80a      	bhi.n	800207a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002064:	2200      	movs	r2, #0
 8002066:	6879      	ldr	r1, [r7, #4]
 8002068:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800206c:	f000 fb8f 	bl	800278e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002070:	4a06      	ldr	r2, [pc, #24]	; (800208c <HAL_InitTick+0x5c>)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002076:	2300      	movs	r3, #0
 8002078:	e000      	b.n	800207c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800207a:	2301      	movs	r3, #1
}
 800207c:	4618      	mov	r0, r3
 800207e:	3708      	adds	r7, #8
 8002080:	46bd      	mov	sp, r7
 8002082:	bd80      	pop	{r7, pc}
 8002084:	20000008 	.word	0x20000008
 8002088:	20000010 	.word	0x20000010
 800208c:	2000000c 	.word	0x2000000c

08002090 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002090:	b480      	push	{r7}
 8002092:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002094:	4b06      	ldr	r3, [pc, #24]	; (80020b0 <HAL_IncTick+0x20>)
 8002096:	781b      	ldrb	r3, [r3, #0]
 8002098:	461a      	mov	r2, r3
 800209a:	4b06      	ldr	r3, [pc, #24]	; (80020b4 <HAL_IncTick+0x24>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4413      	add	r3, r2
 80020a0:	4a04      	ldr	r2, [pc, #16]	; (80020b4 <HAL_IncTick+0x24>)
 80020a2:	6013      	str	r3, [r2, #0]
}
 80020a4:	bf00      	nop
 80020a6:	46bd      	mov	sp, r7
 80020a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ac:	4770      	bx	lr
 80020ae:	bf00      	nop
 80020b0:	20000010 	.word	0x20000010
 80020b4:	200006f0 	.word	0x200006f0

080020b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020b8:	b480      	push	{r7}
 80020ba:	af00      	add	r7, sp, #0
  return uwTick;
 80020bc:	4b03      	ldr	r3, [pc, #12]	; (80020cc <HAL_GetTick+0x14>)
 80020be:	681b      	ldr	r3, [r3, #0]
}
 80020c0:	4618      	mov	r0, r3
 80020c2:	46bd      	mov	sp, r7
 80020c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c8:	4770      	bx	lr
 80020ca:	bf00      	nop
 80020cc:	200006f0 	.word	0x200006f0

080020d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b084      	sub	sp, #16
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80020d8:	f7ff ffee 	bl	80020b8 <HAL_GetTick>
 80020dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80020e8:	d005      	beq.n	80020f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80020ea:	4b09      	ldr	r3, [pc, #36]	; (8002110 <HAL_Delay+0x40>)
 80020ec:	781b      	ldrb	r3, [r3, #0]
 80020ee:	461a      	mov	r2, r3
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	4413      	add	r3, r2
 80020f4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80020f6:	bf00      	nop
 80020f8:	f7ff ffde 	bl	80020b8 <HAL_GetTick>
 80020fc:	4602      	mov	r2, r0
 80020fe:	68bb      	ldr	r3, [r7, #8]
 8002100:	1ad3      	subs	r3, r2, r3
 8002102:	68fa      	ldr	r2, [r7, #12]
 8002104:	429a      	cmp	r2, r3
 8002106:	d8f7      	bhi.n	80020f8 <HAL_Delay+0x28>
  {
  }
}
 8002108:	bf00      	nop
 800210a:	3710      	adds	r7, #16
 800210c:	46bd      	mov	sp, r7
 800210e:	bd80      	pop	{r7, pc}
 8002110:	20000010 	.word	0x20000010

08002114 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b084      	sub	sp, #16
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800211c:	2300      	movs	r3, #0
 800211e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2b00      	cmp	r3, #0
 8002124:	d101      	bne.n	800212a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002126:	2301      	movs	r3, #1
 8002128:	e033      	b.n	8002192 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800212e:	2b00      	cmp	r3, #0
 8002130:	d109      	bne.n	8002146 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002132:	6878      	ldr	r0, [r7, #4]
 8002134:	f7ff fdc2 	bl	8001cbc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2200      	movs	r2, #0
 800213c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	2200      	movs	r2, #0
 8002142:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800214a:	f003 0310 	and.w	r3, r3, #16
 800214e:	2b00      	cmp	r3, #0
 8002150:	d118      	bne.n	8002184 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002156:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800215a:	f023 0302 	bic.w	r3, r3, #2
 800215e:	f043 0202 	orr.w	r2, r3, #2
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002166:	6878      	ldr	r0, [r7, #4]
 8002168:	f000 f93a 	bl	80023e0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2200      	movs	r2, #0
 8002170:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002176:	f023 0303 	bic.w	r3, r3, #3
 800217a:	f043 0201 	orr.w	r2, r3, #1
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	641a      	str	r2, [r3, #64]	; 0x40
 8002182:	e001      	b.n	8002188 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002184:	2301      	movs	r3, #1
 8002186:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2200      	movs	r2, #0
 800218c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002190:	7bfb      	ldrb	r3, [r7, #15]
}
 8002192:	4618      	mov	r0, r3
 8002194:	3710      	adds	r7, #16
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}
	...

0800219c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800219c:	b480      	push	{r7}
 800219e:	b085      	sub	sp, #20
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
 80021a4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80021a6:	2300      	movs	r3, #0
 80021a8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80021b0:	2b01      	cmp	r3, #1
 80021b2:	d101      	bne.n	80021b8 <HAL_ADC_ConfigChannel+0x1c>
 80021b4:	2302      	movs	r3, #2
 80021b6:	e105      	b.n	80023c4 <HAL_ADC_ConfigChannel+0x228>
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2201      	movs	r2, #1
 80021bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	2b09      	cmp	r3, #9
 80021c6:	d925      	bls.n	8002214 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	68d9      	ldr	r1, [r3, #12]
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	b29b      	uxth	r3, r3
 80021d4:	461a      	mov	r2, r3
 80021d6:	4613      	mov	r3, r2
 80021d8:	005b      	lsls	r3, r3, #1
 80021da:	4413      	add	r3, r2
 80021dc:	3b1e      	subs	r3, #30
 80021de:	2207      	movs	r2, #7
 80021e0:	fa02 f303 	lsl.w	r3, r2, r3
 80021e4:	43da      	mvns	r2, r3
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	400a      	ands	r2, r1
 80021ec:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	68d9      	ldr	r1, [r3, #12]
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	689a      	ldr	r2, [r3, #8]
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	b29b      	uxth	r3, r3
 80021fe:	4618      	mov	r0, r3
 8002200:	4603      	mov	r3, r0
 8002202:	005b      	lsls	r3, r3, #1
 8002204:	4403      	add	r3, r0
 8002206:	3b1e      	subs	r3, #30
 8002208:	409a      	lsls	r2, r3
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	430a      	orrs	r2, r1
 8002210:	60da      	str	r2, [r3, #12]
 8002212:	e022      	b.n	800225a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	6919      	ldr	r1, [r3, #16]
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	b29b      	uxth	r3, r3
 8002220:	461a      	mov	r2, r3
 8002222:	4613      	mov	r3, r2
 8002224:	005b      	lsls	r3, r3, #1
 8002226:	4413      	add	r3, r2
 8002228:	2207      	movs	r2, #7
 800222a:	fa02 f303 	lsl.w	r3, r2, r3
 800222e:	43da      	mvns	r2, r3
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	400a      	ands	r2, r1
 8002236:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	6919      	ldr	r1, [r3, #16]
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	689a      	ldr	r2, [r3, #8]
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	b29b      	uxth	r3, r3
 8002248:	4618      	mov	r0, r3
 800224a:	4603      	mov	r3, r0
 800224c:	005b      	lsls	r3, r3, #1
 800224e:	4403      	add	r3, r0
 8002250:	409a      	lsls	r2, r3
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	430a      	orrs	r2, r1
 8002258:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	2b06      	cmp	r3, #6
 8002260:	d824      	bhi.n	80022ac <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	685a      	ldr	r2, [r3, #4]
 800226c:	4613      	mov	r3, r2
 800226e:	009b      	lsls	r3, r3, #2
 8002270:	4413      	add	r3, r2
 8002272:	3b05      	subs	r3, #5
 8002274:	221f      	movs	r2, #31
 8002276:	fa02 f303 	lsl.w	r3, r2, r3
 800227a:	43da      	mvns	r2, r3
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	400a      	ands	r2, r1
 8002282:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	b29b      	uxth	r3, r3
 8002290:	4618      	mov	r0, r3
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	685a      	ldr	r2, [r3, #4]
 8002296:	4613      	mov	r3, r2
 8002298:	009b      	lsls	r3, r3, #2
 800229a:	4413      	add	r3, r2
 800229c:	3b05      	subs	r3, #5
 800229e:	fa00 f203 	lsl.w	r2, r0, r3
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	430a      	orrs	r2, r1
 80022a8:	635a      	str	r2, [r3, #52]	; 0x34
 80022aa:	e04c      	b.n	8002346 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	2b0c      	cmp	r3, #12
 80022b2:	d824      	bhi.n	80022fe <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	685a      	ldr	r2, [r3, #4]
 80022be:	4613      	mov	r3, r2
 80022c0:	009b      	lsls	r3, r3, #2
 80022c2:	4413      	add	r3, r2
 80022c4:	3b23      	subs	r3, #35	; 0x23
 80022c6:	221f      	movs	r2, #31
 80022c8:	fa02 f303 	lsl.w	r3, r2, r3
 80022cc:	43da      	mvns	r2, r3
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	400a      	ands	r2, r1
 80022d4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	b29b      	uxth	r3, r3
 80022e2:	4618      	mov	r0, r3
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	685a      	ldr	r2, [r3, #4]
 80022e8:	4613      	mov	r3, r2
 80022ea:	009b      	lsls	r3, r3, #2
 80022ec:	4413      	add	r3, r2
 80022ee:	3b23      	subs	r3, #35	; 0x23
 80022f0:	fa00 f203 	lsl.w	r2, r0, r3
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	430a      	orrs	r2, r1
 80022fa:	631a      	str	r2, [r3, #48]	; 0x30
 80022fc:	e023      	b.n	8002346 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	685a      	ldr	r2, [r3, #4]
 8002308:	4613      	mov	r3, r2
 800230a:	009b      	lsls	r3, r3, #2
 800230c:	4413      	add	r3, r2
 800230e:	3b41      	subs	r3, #65	; 0x41
 8002310:	221f      	movs	r2, #31
 8002312:	fa02 f303 	lsl.w	r3, r2, r3
 8002316:	43da      	mvns	r2, r3
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	400a      	ands	r2, r1
 800231e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	b29b      	uxth	r3, r3
 800232c:	4618      	mov	r0, r3
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	685a      	ldr	r2, [r3, #4]
 8002332:	4613      	mov	r3, r2
 8002334:	009b      	lsls	r3, r3, #2
 8002336:	4413      	add	r3, r2
 8002338:	3b41      	subs	r3, #65	; 0x41
 800233a:	fa00 f203 	lsl.w	r2, r0, r3
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	430a      	orrs	r2, r1
 8002344:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002346:	4b22      	ldr	r3, [pc, #136]	; (80023d0 <HAL_ADC_ConfigChannel+0x234>)
 8002348:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4a21      	ldr	r2, [pc, #132]	; (80023d4 <HAL_ADC_ConfigChannel+0x238>)
 8002350:	4293      	cmp	r3, r2
 8002352:	d109      	bne.n	8002368 <HAL_ADC_ConfigChannel+0x1cc>
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	2b12      	cmp	r3, #18
 800235a:	d105      	bne.n	8002368 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4a19      	ldr	r2, [pc, #100]	; (80023d4 <HAL_ADC_ConfigChannel+0x238>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d123      	bne.n	80023ba <HAL_ADC_ConfigChannel+0x21e>
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	2b10      	cmp	r3, #16
 8002378:	d003      	beq.n	8002382 <HAL_ADC_ConfigChannel+0x1e6>
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	2b11      	cmp	r3, #17
 8002380:	d11b      	bne.n	80023ba <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	2b10      	cmp	r3, #16
 8002394:	d111      	bne.n	80023ba <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002396:	4b10      	ldr	r3, [pc, #64]	; (80023d8 <HAL_ADC_ConfigChannel+0x23c>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	4a10      	ldr	r2, [pc, #64]	; (80023dc <HAL_ADC_ConfigChannel+0x240>)
 800239c:	fba2 2303 	umull	r2, r3, r2, r3
 80023a0:	0c9a      	lsrs	r2, r3, #18
 80023a2:	4613      	mov	r3, r2
 80023a4:	009b      	lsls	r3, r3, #2
 80023a6:	4413      	add	r3, r2
 80023a8:	005b      	lsls	r3, r3, #1
 80023aa:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80023ac:	e002      	b.n	80023b4 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80023ae:	68bb      	ldr	r3, [r7, #8]
 80023b0:	3b01      	subs	r3, #1
 80023b2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80023b4:	68bb      	ldr	r3, [r7, #8]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d1f9      	bne.n	80023ae <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2200      	movs	r2, #0
 80023be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80023c2:	2300      	movs	r3, #0
}
 80023c4:	4618      	mov	r0, r3
 80023c6:	3714      	adds	r7, #20
 80023c8:	46bd      	mov	sp, r7
 80023ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ce:	4770      	bx	lr
 80023d0:	40012300 	.word	0x40012300
 80023d4:	40012000 	.word	0x40012000
 80023d8:	20000008 	.word	0x20000008
 80023dc:	431bde83 	.word	0x431bde83

080023e0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80023e0:	b480      	push	{r7}
 80023e2:	b085      	sub	sp, #20
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80023e8:	4b79      	ldr	r3, [pc, #484]	; (80025d0 <ADC_Init+0x1f0>)
 80023ea:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	685a      	ldr	r2, [r3, #4]
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	431a      	orrs	r2, r3
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	685a      	ldr	r2, [r3, #4]
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002414:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	6859      	ldr	r1, [r3, #4]
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	691b      	ldr	r3, [r3, #16]
 8002420:	021a      	lsls	r2, r3, #8
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	430a      	orrs	r2, r1
 8002428:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	685a      	ldr	r2, [r3, #4]
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002438:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	6859      	ldr	r1, [r3, #4]
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	689a      	ldr	r2, [r3, #8]
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	430a      	orrs	r2, r1
 800244a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	689a      	ldr	r2, [r3, #8]
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800245a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	6899      	ldr	r1, [r3, #8]
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	68da      	ldr	r2, [r3, #12]
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	430a      	orrs	r2, r1
 800246c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002472:	4a58      	ldr	r2, [pc, #352]	; (80025d4 <ADC_Init+0x1f4>)
 8002474:	4293      	cmp	r3, r2
 8002476:	d022      	beq.n	80024be <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	689a      	ldr	r2, [r3, #8]
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002486:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	6899      	ldr	r1, [r3, #8]
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	430a      	orrs	r2, r1
 8002498:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	689a      	ldr	r2, [r3, #8]
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80024a8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	6899      	ldr	r1, [r3, #8]
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	430a      	orrs	r2, r1
 80024ba:	609a      	str	r2, [r3, #8]
 80024bc:	e00f      	b.n	80024de <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	689a      	ldr	r2, [r3, #8]
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80024cc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	689a      	ldr	r2, [r3, #8]
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80024dc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	689a      	ldr	r2, [r3, #8]
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f022 0202 	bic.w	r2, r2, #2
 80024ec:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	6899      	ldr	r1, [r3, #8]
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	7e1b      	ldrb	r3, [r3, #24]
 80024f8:	005a      	lsls	r2, r3, #1
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	430a      	orrs	r2, r1
 8002500:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d01b      	beq.n	8002544 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	685a      	ldr	r2, [r3, #4]
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800251a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	685a      	ldr	r2, [r3, #4]
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800252a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	6859      	ldr	r1, [r3, #4]
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002536:	3b01      	subs	r3, #1
 8002538:	035a      	lsls	r2, r3, #13
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	430a      	orrs	r2, r1
 8002540:	605a      	str	r2, [r3, #4]
 8002542:	e007      	b.n	8002554 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	685a      	ldr	r2, [r3, #4]
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002552:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002562:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	69db      	ldr	r3, [r3, #28]
 800256e:	3b01      	subs	r3, #1
 8002570:	051a      	lsls	r2, r3, #20
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	430a      	orrs	r2, r1
 8002578:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	689a      	ldr	r2, [r3, #8]
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002588:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	6899      	ldr	r1, [r3, #8]
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002596:	025a      	lsls	r2, r3, #9
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	430a      	orrs	r2, r1
 800259e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	689a      	ldr	r2, [r3, #8]
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80025ae:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	6899      	ldr	r1, [r3, #8]
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	695b      	ldr	r3, [r3, #20]
 80025ba:	029a      	lsls	r2, r3, #10
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	430a      	orrs	r2, r1
 80025c2:	609a      	str	r2, [r3, #8]
}
 80025c4:	bf00      	nop
 80025c6:	3714      	adds	r7, #20
 80025c8:	46bd      	mov	sp, r7
 80025ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ce:	4770      	bx	lr
 80025d0:	40012300 	.word	0x40012300
 80025d4:	0f000001 	.word	0x0f000001

080025d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025d8:	b480      	push	{r7}
 80025da:	b085      	sub	sp, #20
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	f003 0307 	and.w	r3, r3, #7
 80025e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025e8:	4b0c      	ldr	r3, [pc, #48]	; (800261c <__NVIC_SetPriorityGrouping+0x44>)
 80025ea:	68db      	ldr	r3, [r3, #12]
 80025ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80025ee:	68ba      	ldr	r2, [r7, #8]
 80025f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80025f4:	4013      	ands	r3, r2
 80025f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80025fc:	68bb      	ldr	r3, [r7, #8]
 80025fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002600:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002604:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002608:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800260a:	4a04      	ldr	r2, [pc, #16]	; (800261c <__NVIC_SetPriorityGrouping+0x44>)
 800260c:	68bb      	ldr	r3, [r7, #8]
 800260e:	60d3      	str	r3, [r2, #12]
}
 8002610:	bf00      	nop
 8002612:	3714      	adds	r7, #20
 8002614:	46bd      	mov	sp, r7
 8002616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261a:	4770      	bx	lr
 800261c:	e000ed00 	.word	0xe000ed00

08002620 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002620:	b480      	push	{r7}
 8002622:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002624:	4b04      	ldr	r3, [pc, #16]	; (8002638 <__NVIC_GetPriorityGrouping+0x18>)
 8002626:	68db      	ldr	r3, [r3, #12]
 8002628:	0a1b      	lsrs	r3, r3, #8
 800262a:	f003 0307 	and.w	r3, r3, #7
}
 800262e:	4618      	mov	r0, r3
 8002630:	46bd      	mov	sp, r7
 8002632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002636:	4770      	bx	lr
 8002638:	e000ed00 	.word	0xe000ed00

0800263c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800263c:	b480      	push	{r7}
 800263e:	b083      	sub	sp, #12
 8002640:	af00      	add	r7, sp, #0
 8002642:	4603      	mov	r3, r0
 8002644:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002646:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800264a:	2b00      	cmp	r3, #0
 800264c:	db0b      	blt.n	8002666 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800264e:	79fb      	ldrb	r3, [r7, #7]
 8002650:	f003 021f 	and.w	r2, r3, #31
 8002654:	4907      	ldr	r1, [pc, #28]	; (8002674 <__NVIC_EnableIRQ+0x38>)
 8002656:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800265a:	095b      	lsrs	r3, r3, #5
 800265c:	2001      	movs	r0, #1
 800265e:	fa00 f202 	lsl.w	r2, r0, r2
 8002662:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002666:	bf00      	nop
 8002668:	370c      	adds	r7, #12
 800266a:	46bd      	mov	sp, r7
 800266c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002670:	4770      	bx	lr
 8002672:	bf00      	nop
 8002674:	e000e100 	.word	0xe000e100

08002678 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002678:	b480      	push	{r7}
 800267a:	b083      	sub	sp, #12
 800267c:	af00      	add	r7, sp, #0
 800267e:	4603      	mov	r3, r0
 8002680:	6039      	str	r1, [r7, #0]
 8002682:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002684:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002688:	2b00      	cmp	r3, #0
 800268a:	db0a      	blt.n	80026a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	b2da      	uxtb	r2, r3
 8002690:	490c      	ldr	r1, [pc, #48]	; (80026c4 <__NVIC_SetPriority+0x4c>)
 8002692:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002696:	0112      	lsls	r2, r2, #4
 8002698:	b2d2      	uxtb	r2, r2
 800269a:	440b      	add	r3, r1
 800269c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80026a0:	e00a      	b.n	80026b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	b2da      	uxtb	r2, r3
 80026a6:	4908      	ldr	r1, [pc, #32]	; (80026c8 <__NVIC_SetPriority+0x50>)
 80026a8:	79fb      	ldrb	r3, [r7, #7]
 80026aa:	f003 030f 	and.w	r3, r3, #15
 80026ae:	3b04      	subs	r3, #4
 80026b0:	0112      	lsls	r2, r2, #4
 80026b2:	b2d2      	uxtb	r2, r2
 80026b4:	440b      	add	r3, r1
 80026b6:	761a      	strb	r2, [r3, #24]
}
 80026b8:	bf00      	nop
 80026ba:	370c      	adds	r7, #12
 80026bc:	46bd      	mov	sp, r7
 80026be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c2:	4770      	bx	lr
 80026c4:	e000e100 	.word	0xe000e100
 80026c8:	e000ed00 	.word	0xe000ed00

080026cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026cc:	b480      	push	{r7}
 80026ce:	b089      	sub	sp, #36	; 0x24
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	60f8      	str	r0, [r7, #12]
 80026d4:	60b9      	str	r1, [r7, #8]
 80026d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	f003 0307 	and.w	r3, r3, #7
 80026de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026e0:	69fb      	ldr	r3, [r7, #28]
 80026e2:	f1c3 0307 	rsb	r3, r3, #7
 80026e6:	2b04      	cmp	r3, #4
 80026e8:	bf28      	it	cs
 80026ea:	2304      	movcs	r3, #4
 80026ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026ee:	69fb      	ldr	r3, [r7, #28]
 80026f0:	3304      	adds	r3, #4
 80026f2:	2b06      	cmp	r3, #6
 80026f4:	d902      	bls.n	80026fc <NVIC_EncodePriority+0x30>
 80026f6:	69fb      	ldr	r3, [r7, #28]
 80026f8:	3b03      	subs	r3, #3
 80026fa:	e000      	b.n	80026fe <NVIC_EncodePriority+0x32>
 80026fc:	2300      	movs	r3, #0
 80026fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002700:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002704:	69bb      	ldr	r3, [r7, #24]
 8002706:	fa02 f303 	lsl.w	r3, r2, r3
 800270a:	43da      	mvns	r2, r3
 800270c:	68bb      	ldr	r3, [r7, #8]
 800270e:	401a      	ands	r2, r3
 8002710:	697b      	ldr	r3, [r7, #20]
 8002712:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002714:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002718:	697b      	ldr	r3, [r7, #20]
 800271a:	fa01 f303 	lsl.w	r3, r1, r3
 800271e:	43d9      	mvns	r1, r3
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002724:	4313      	orrs	r3, r2
         );
}
 8002726:	4618      	mov	r0, r3
 8002728:	3724      	adds	r7, #36	; 0x24
 800272a:	46bd      	mov	sp, r7
 800272c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002730:	4770      	bx	lr
	...

08002734 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b082      	sub	sp, #8
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	3b01      	subs	r3, #1
 8002740:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002744:	d301      	bcc.n	800274a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002746:	2301      	movs	r3, #1
 8002748:	e00f      	b.n	800276a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800274a:	4a0a      	ldr	r2, [pc, #40]	; (8002774 <SysTick_Config+0x40>)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	3b01      	subs	r3, #1
 8002750:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002752:	210f      	movs	r1, #15
 8002754:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002758:	f7ff ff8e 	bl	8002678 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800275c:	4b05      	ldr	r3, [pc, #20]	; (8002774 <SysTick_Config+0x40>)
 800275e:	2200      	movs	r2, #0
 8002760:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002762:	4b04      	ldr	r3, [pc, #16]	; (8002774 <SysTick_Config+0x40>)
 8002764:	2207      	movs	r2, #7
 8002766:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002768:	2300      	movs	r3, #0
}
 800276a:	4618      	mov	r0, r3
 800276c:	3708      	adds	r7, #8
 800276e:	46bd      	mov	sp, r7
 8002770:	bd80      	pop	{r7, pc}
 8002772:	bf00      	nop
 8002774:	e000e010 	.word	0xe000e010

08002778 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b082      	sub	sp, #8
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002780:	6878      	ldr	r0, [r7, #4]
 8002782:	f7ff ff29 	bl	80025d8 <__NVIC_SetPriorityGrouping>
}
 8002786:	bf00      	nop
 8002788:	3708      	adds	r7, #8
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}

0800278e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800278e:	b580      	push	{r7, lr}
 8002790:	b086      	sub	sp, #24
 8002792:	af00      	add	r7, sp, #0
 8002794:	4603      	mov	r3, r0
 8002796:	60b9      	str	r1, [r7, #8]
 8002798:	607a      	str	r2, [r7, #4]
 800279a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800279c:	2300      	movs	r3, #0
 800279e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80027a0:	f7ff ff3e 	bl	8002620 <__NVIC_GetPriorityGrouping>
 80027a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80027a6:	687a      	ldr	r2, [r7, #4]
 80027a8:	68b9      	ldr	r1, [r7, #8]
 80027aa:	6978      	ldr	r0, [r7, #20]
 80027ac:	f7ff ff8e 	bl	80026cc <NVIC_EncodePriority>
 80027b0:	4602      	mov	r2, r0
 80027b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027b6:	4611      	mov	r1, r2
 80027b8:	4618      	mov	r0, r3
 80027ba:	f7ff ff5d 	bl	8002678 <__NVIC_SetPriority>
}
 80027be:	bf00      	nop
 80027c0:	3718      	adds	r7, #24
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bd80      	pop	{r7, pc}

080027c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027c6:	b580      	push	{r7, lr}
 80027c8:	b082      	sub	sp, #8
 80027ca:	af00      	add	r7, sp, #0
 80027cc:	4603      	mov	r3, r0
 80027ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80027d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027d4:	4618      	mov	r0, r3
 80027d6:	f7ff ff31 	bl	800263c <__NVIC_EnableIRQ>
}
 80027da:	bf00      	nop
 80027dc:	3708      	adds	r7, #8
 80027de:	46bd      	mov	sp, r7
 80027e0:	bd80      	pop	{r7, pc}

080027e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80027e2:	b580      	push	{r7, lr}
 80027e4:	b082      	sub	sp, #8
 80027e6:	af00      	add	r7, sp, #0
 80027e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80027ea:	6878      	ldr	r0, [r7, #4]
 80027ec:	f7ff ffa2 	bl	8002734 <SysTick_Config>
 80027f0:	4603      	mov	r3, r0
}
 80027f2:	4618      	mov	r0, r3
 80027f4:	3708      	adds	r7, #8
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bd80      	pop	{r7, pc}
	...

080027fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027fc:	b480      	push	{r7}
 80027fe:	b089      	sub	sp, #36	; 0x24
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
 8002804:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002806:	2300      	movs	r3, #0
 8002808:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800280a:	2300      	movs	r3, #0
 800280c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800280e:	2300      	movs	r3, #0
 8002810:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002812:	2300      	movs	r3, #0
 8002814:	61fb      	str	r3, [r7, #28]
 8002816:	e159      	b.n	8002acc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002818:	2201      	movs	r2, #1
 800281a:	69fb      	ldr	r3, [r7, #28]
 800281c:	fa02 f303 	lsl.w	r3, r2, r3
 8002820:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	697a      	ldr	r2, [r7, #20]
 8002828:	4013      	ands	r3, r2
 800282a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800282c:	693a      	ldr	r2, [r7, #16]
 800282e:	697b      	ldr	r3, [r7, #20]
 8002830:	429a      	cmp	r2, r3
 8002832:	f040 8148 	bne.w	8002ac6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	2b01      	cmp	r3, #1
 800283c:	d00b      	beq.n	8002856 <HAL_GPIO_Init+0x5a>
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	2b02      	cmp	r3, #2
 8002844:	d007      	beq.n	8002856 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800284a:	2b11      	cmp	r3, #17
 800284c:	d003      	beq.n	8002856 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	2b12      	cmp	r3, #18
 8002854:	d130      	bne.n	80028b8 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	689b      	ldr	r3, [r3, #8]
 800285a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800285c:	69fb      	ldr	r3, [r7, #28]
 800285e:	005b      	lsls	r3, r3, #1
 8002860:	2203      	movs	r2, #3
 8002862:	fa02 f303 	lsl.w	r3, r2, r3
 8002866:	43db      	mvns	r3, r3
 8002868:	69ba      	ldr	r2, [r7, #24]
 800286a:	4013      	ands	r3, r2
 800286c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	68da      	ldr	r2, [r3, #12]
 8002872:	69fb      	ldr	r3, [r7, #28]
 8002874:	005b      	lsls	r3, r3, #1
 8002876:	fa02 f303 	lsl.w	r3, r2, r3
 800287a:	69ba      	ldr	r2, [r7, #24]
 800287c:	4313      	orrs	r3, r2
 800287e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	69ba      	ldr	r2, [r7, #24]
 8002884:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800288c:	2201      	movs	r2, #1
 800288e:	69fb      	ldr	r3, [r7, #28]
 8002890:	fa02 f303 	lsl.w	r3, r2, r3
 8002894:	43db      	mvns	r3, r3
 8002896:	69ba      	ldr	r2, [r7, #24]
 8002898:	4013      	ands	r3, r2
 800289a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	091b      	lsrs	r3, r3, #4
 80028a2:	f003 0201 	and.w	r2, r3, #1
 80028a6:	69fb      	ldr	r3, [r7, #28]
 80028a8:	fa02 f303 	lsl.w	r3, r2, r3
 80028ac:	69ba      	ldr	r2, [r7, #24]
 80028ae:	4313      	orrs	r3, r2
 80028b0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	69ba      	ldr	r2, [r7, #24]
 80028b6:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	68db      	ldr	r3, [r3, #12]
 80028bc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80028be:	69fb      	ldr	r3, [r7, #28]
 80028c0:	005b      	lsls	r3, r3, #1
 80028c2:	2203      	movs	r2, #3
 80028c4:	fa02 f303 	lsl.w	r3, r2, r3
 80028c8:	43db      	mvns	r3, r3
 80028ca:	69ba      	ldr	r2, [r7, #24]
 80028cc:	4013      	ands	r3, r2
 80028ce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	689a      	ldr	r2, [r3, #8]
 80028d4:	69fb      	ldr	r3, [r7, #28]
 80028d6:	005b      	lsls	r3, r3, #1
 80028d8:	fa02 f303 	lsl.w	r3, r2, r3
 80028dc:	69ba      	ldr	r2, [r7, #24]
 80028de:	4313      	orrs	r3, r2
 80028e0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	69ba      	ldr	r2, [r7, #24]
 80028e6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	2b02      	cmp	r3, #2
 80028ee:	d003      	beq.n	80028f8 <HAL_GPIO_Init+0xfc>
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	2b12      	cmp	r3, #18
 80028f6:	d123      	bne.n	8002940 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80028f8:	69fb      	ldr	r3, [r7, #28]
 80028fa:	08da      	lsrs	r2, r3, #3
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	3208      	adds	r2, #8
 8002900:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002904:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002906:	69fb      	ldr	r3, [r7, #28]
 8002908:	f003 0307 	and.w	r3, r3, #7
 800290c:	009b      	lsls	r3, r3, #2
 800290e:	220f      	movs	r2, #15
 8002910:	fa02 f303 	lsl.w	r3, r2, r3
 8002914:	43db      	mvns	r3, r3
 8002916:	69ba      	ldr	r2, [r7, #24]
 8002918:	4013      	ands	r3, r2
 800291a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	691a      	ldr	r2, [r3, #16]
 8002920:	69fb      	ldr	r3, [r7, #28]
 8002922:	f003 0307 	and.w	r3, r3, #7
 8002926:	009b      	lsls	r3, r3, #2
 8002928:	fa02 f303 	lsl.w	r3, r2, r3
 800292c:	69ba      	ldr	r2, [r7, #24]
 800292e:	4313      	orrs	r3, r2
 8002930:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002932:	69fb      	ldr	r3, [r7, #28]
 8002934:	08da      	lsrs	r2, r3, #3
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	3208      	adds	r2, #8
 800293a:	69b9      	ldr	r1, [r7, #24]
 800293c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002946:	69fb      	ldr	r3, [r7, #28]
 8002948:	005b      	lsls	r3, r3, #1
 800294a:	2203      	movs	r2, #3
 800294c:	fa02 f303 	lsl.w	r3, r2, r3
 8002950:	43db      	mvns	r3, r3
 8002952:	69ba      	ldr	r2, [r7, #24]
 8002954:	4013      	ands	r3, r2
 8002956:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	f003 0203 	and.w	r2, r3, #3
 8002960:	69fb      	ldr	r3, [r7, #28]
 8002962:	005b      	lsls	r3, r3, #1
 8002964:	fa02 f303 	lsl.w	r3, r2, r3
 8002968:	69ba      	ldr	r2, [r7, #24]
 800296a:	4313      	orrs	r3, r2
 800296c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	69ba      	ldr	r2, [r7, #24]
 8002972:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800297c:	2b00      	cmp	r3, #0
 800297e:	f000 80a2 	beq.w	8002ac6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002982:	2300      	movs	r3, #0
 8002984:	60fb      	str	r3, [r7, #12]
 8002986:	4b56      	ldr	r3, [pc, #344]	; (8002ae0 <HAL_GPIO_Init+0x2e4>)
 8002988:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800298a:	4a55      	ldr	r2, [pc, #340]	; (8002ae0 <HAL_GPIO_Init+0x2e4>)
 800298c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002990:	6453      	str	r3, [r2, #68]	; 0x44
 8002992:	4b53      	ldr	r3, [pc, #332]	; (8002ae0 <HAL_GPIO_Init+0x2e4>)
 8002994:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002996:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800299a:	60fb      	str	r3, [r7, #12]
 800299c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800299e:	4a51      	ldr	r2, [pc, #324]	; (8002ae4 <HAL_GPIO_Init+0x2e8>)
 80029a0:	69fb      	ldr	r3, [r7, #28]
 80029a2:	089b      	lsrs	r3, r3, #2
 80029a4:	3302      	adds	r3, #2
 80029a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80029ac:	69fb      	ldr	r3, [r7, #28]
 80029ae:	f003 0303 	and.w	r3, r3, #3
 80029b2:	009b      	lsls	r3, r3, #2
 80029b4:	220f      	movs	r2, #15
 80029b6:	fa02 f303 	lsl.w	r3, r2, r3
 80029ba:	43db      	mvns	r3, r3
 80029bc:	69ba      	ldr	r2, [r7, #24]
 80029be:	4013      	ands	r3, r2
 80029c0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	4a48      	ldr	r2, [pc, #288]	; (8002ae8 <HAL_GPIO_Init+0x2ec>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d019      	beq.n	80029fe <HAL_GPIO_Init+0x202>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	4a47      	ldr	r2, [pc, #284]	; (8002aec <HAL_GPIO_Init+0x2f0>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d013      	beq.n	80029fa <HAL_GPIO_Init+0x1fe>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	4a46      	ldr	r2, [pc, #280]	; (8002af0 <HAL_GPIO_Init+0x2f4>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d00d      	beq.n	80029f6 <HAL_GPIO_Init+0x1fa>
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	4a45      	ldr	r2, [pc, #276]	; (8002af4 <HAL_GPIO_Init+0x2f8>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	d007      	beq.n	80029f2 <HAL_GPIO_Init+0x1f6>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	4a44      	ldr	r2, [pc, #272]	; (8002af8 <HAL_GPIO_Init+0x2fc>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d101      	bne.n	80029ee <HAL_GPIO_Init+0x1f2>
 80029ea:	2304      	movs	r3, #4
 80029ec:	e008      	b.n	8002a00 <HAL_GPIO_Init+0x204>
 80029ee:	2307      	movs	r3, #7
 80029f0:	e006      	b.n	8002a00 <HAL_GPIO_Init+0x204>
 80029f2:	2303      	movs	r3, #3
 80029f4:	e004      	b.n	8002a00 <HAL_GPIO_Init+0x204>
 80029f6:	2302      	movs	r3, #2
 80029f8:	e002      	b.n	8002a00 <HAL_GPIO_Init+0x204>
 80029fa:	2301      	movs	r3, #1
 80029fc:	e000      	b.n	8002a00 <HAL_GPIO_Init+0x204>
 80029fe:	2300      	movs	r3, #0
 8002a00:	69fa      	ldr	r2, [r7, #28]
 8002a02:	f002 0203 	and.w	r2, r2, #3
 8002a06:	0092      	lsls	r2, r2, #2
 8002a08:	4093      	lsls	r3, r2
 8002a0a:	69ba      	ldr	r2, [r7, #24]
 8002a0c:	4313      	orrs	r3, r2
 8002a0e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002a10:	4934      	ldr	r1, [pc, #208]	; (8002ae4 <HAL_GPIO_Init+0x2e8>)
 8002a12:	69fb      	ldr	r3, [r7, #28]
 8002a14:	089b      	lsrs	r3, r3, #2
 8002a16:	3302      	adds	r3, #2
 8002a18:	69ba      	ldr	r2, [r7, #24]
 8002a1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a1e:	4b37      	ldr	r3, [pc, #220]	; (8002afc <HAL_GPIO_Init+0x300>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a24:	693b      	ldr	r3, [r7, #16]
 8002a26:	43db      	mvns	r3, r3
 8002a28:	69ba      	ldr	r2, [r7, #24]
 8002a2a:	4013      	ands	r3, r2
 8002a2c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d003      	beq.n	8002a42 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002a3a:	69ba      	ldr	r2, [r7, #24]
 8002a3c:	693b      	ldr	r3, [r7, #16]
 8002a3e:	4313      	orrs	r3, r2
 8002a40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002a42:	4a2e      	ldr	r2, [pc, #184]	; (8002afc <HAL_GPIO_Init+0x300>)
 8002a44:	69bb      	ldr	r3, [r7, #24]
 8002a46:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002a48:	4b2c      	ldr	r3, [pc, #176]	; (8002afc <HAL_GPIO_Init+0x300>)
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a4e:	693b      	ldr	r3, [r7, #16]
 8002a50:	43db      	mvns	r3, r3
 8002a52:	69ba      	ldr	r2, [r7, #24]
 8002a54:	4013      	ands	r3, r2
 8002a56:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d003      	beq.n	8002a6c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002a64:	69ba      	ldr	r2, [r7, #24]
 8002a66:	693b      	ldr	r3, [r7, #16]
 8002a68:	4313      	orrs	r3, r2
 8002a6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002a6c:	4a23      	ldr	r2, [pc, #140]	; (8002afc <HAL_GPIO_Init+0x300>)
 8002a6e:	69bb      	ldr	r3, [r7, #24]
 8002a70:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a72:	4b22      	ldr	r3, [pc, #136]	; (8002afc <HAL_GPIO_Init+0x300>)
 8002a74:	689b      	ldr	r3, [r3, #8]
 8002a76:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a78:	693b      	ldr	r3, [r7, #16]
 8002a7a:	43db      	mvns	r3, r3
 8002a7c:	69ba      	ldr	r2, [r7, #24]
 8002a7e:	4013      	ands	r3, r2
 8002a80:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d003      	beq.n	8002a96 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002a8e:	69ba      	ldr	r2, [r7, #24]
 8002a90:	693b      	ldr	r3, [r7, #16]
 8002a92:	4313      	orrs	r3, r2
 8002a94:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002a96:	4a19      	ldr	r2, [pc, #100]	; (8002afc <HAL_GPIO_Init+0x300>)
 8002a98:	69bb      	ldr	r3, [r7, #24]
 8002a9a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002a9c:	4b17      	ldr	r3, [pc, #92]	; (8002afc <HAL_GPIO_Init+0x300>)
 8002a9e:	68db      	ldr	r3, [r3, #12]
 8002aa0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002aa2:	693b      	ldr	r3, [r7, #16]
 8002aa4:	43db      	mvns	r3, r3
 8002aa6:	69ba      	ldr	r2, [r7, #24]
 8002aa8:	4013      	ands	r3, r2
 8002aaa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d003      	beq.n	8002ac0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002ab8:	69ba      	ldr	r2, [r7, #24]
 8002aba:	693b      	ldr	r3, [r7, #16]
 8002abc:	4313      	orrs	r3, r2
 8002abe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002ac0:	4a0e      	ldr	r2, [pc, #56]	; (8002afc <HAL_GPIO_Init+0x300>)
 8002ac2:	69bb      	ldr	r3, [r7, #24]
 8002ac4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ac6:	69fb      	ldr	r3, [r7, #28]
 8002ac8:	3301      	adds	r3, #1
 8002aca:	61fb      	str	r3, [r7, #28]
 8002acc:	69fb      	ldr	r3, [r7, #28]
 8002ace:	2b0f      	cmp	r3, #15
 8002ad0:	f67f aea2 	bls.w	8002818 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002ad4:	bf00      	nop
 8002ad6:	3724      	adds	r7, #36	; 0x24
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ade:	4770      	bx	lr
 8002ae0:	40023800 	.word	0x40023800
 8002ae4:	40013800 	.word	0x40013800
 8002ae8:	40020000 	.word	0x40020000
 8002aec:	40020400 	.word	0x40020400
 8002af0:	40020800 	.word	0x40020800
 8002af4:	40020c00 	.word	0x40020c00
 8002af8:	40021000 	.word	0x40021000
 8002afc:	40013c00 	.word	0x40013c00

08002b00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b00:	b480      	push	{r7}
 8002b02:	b083      	sub	sp, #12
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
 8002b08:	460b      	mov	r3, r1
 8002b0a:	807b      	strh	r3, [r7, #2]
 8002b0c:	4613      	mov	r3, r2
 8002b0e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b10:	787b      	ldrb	r3, [r7, #1]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d003      	beq.n	8002b1e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b16:	887a      	ldrh	r2, [r7, #2]
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002b1c:	e003      	b.n	8002b26 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002b1e:	887b      	ldrh	r3, [r7, #2]
 8002b20:	041a      	lsls	r2, r3, #16
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	619a      	str	r2, [r3, #24]
}
 8002b26:	bf00      	nop
 8002b28:	370c      	adds	r7, #12
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b30:	4770      	bx	lr

08002b32 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002b32:	b480      	push	{r7}
 8002b34:	b083      	sub	sp, #12
 8002b36:	af00      	add	r7, sp, #0
 8002b38:	6078      	str	r0, [r7, #4]
 8002b3a:	460b      	mov	r3, r1
 8002b3c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	695a      	ldr	r2, [r3, #20]
 8002b42:	887b      	ldrh	r3, [r7, #2]
 8002b44:	401a      	ands	r2, r3
 8002b46:	887b      	ldrh	r3, [r7, #2]
 8002b48:	429a      	cmp	r2, r3
 8002b4a:	d104      	bne.n	8002b56 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002b4c:	887b      	ldrh	r3, [r7, #2]
 8002b4e:	041a      	lsls	r2, r3, #16
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8002b54:	e002      	b.n	8002b5c <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8002b56:	887a      	ldrh	r2, [r7, #2]
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	619a      	str	r2, [r3, #24]
}
 8002b5c:	bf00      	nop
 8002b5e:	370c      	adds	r7, #12
 8002b60:	46bd      	mov	sp, r7
 8002b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b66:	4770      	bx	lr

08002b68 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b082      	sub	sp, #8
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	4603      	mov	r3, r0
 8002b70:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002b72:	4b08      	ldr	r3, [pc, #32]	; (8002b94 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002b74:	695a      	ldr	r2, [r3, #20]
 8002b76:	88fb      	ldrh	r3, [r7, #6]
 8002b78:	4013      	ands	r3, r2
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d006      	beq.n	8002b8c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002b7e:	4a05      	ldr	r2, [pc, #20]	; (8002b94 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002b80:	88fb      	ldrh	r3, [r7, #6]
 8002b82:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002b84:	88fb      	ldrh	r3, [r7, #6]
 8002b86:	4618      	mov	r0, r3
 8002b88:	f000 f806 	bl	8002b98 <HAL_GPIO_EXTI_Callback>
  }
}
 8002b8c:	bf00      	nop
 8002b8e:	3708      	adds	r7, #8
 8002b90:	46bd      	mov	sp, r7
 8002b92:	bd80      	pop	{r7, pc}
 8002b94:	40013c00 	.word	0x40013c00

08002b98 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	b083      	sub	sp, #12
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002ba2:	bf00      	nop
 8002ba4:	370c      	adds	r7, #12
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bac:	4770      	bx	lr
	...

08002bb0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b084      	sub	sp, #16
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d101      	bne.n	8002bc2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	e11f      	b.n	8002e02 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bc8:	b2db      	uxtb	r3, r3
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d106      	bne.n	8002bdc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002bd6:	6878      	ldr	r0, [r7, #4]
 8002bd8:	f7ff f8d0 	bl	8001d7c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2224      	movs	r2, #36	; 0x24
 8002be0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	681a      	ldr	r2, [r3, #0]
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f022 0201 	bic.w	r2, r2, #1
 8002bf2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	681a      	ldr	r2, [r3, #0]
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002c02:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	681a      	ldr	r2, [r3, #0]
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002c12:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002c14:	f001 f95e 	bl	8003ed4 <HAL_RCC_GetPCLK1Freq>
 8002c18:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	4a7b      	ldr	r2, [pc, #492]	; (8002e0c <HAL_I2C_Init+0x25c>)
 8002c20:	4293      	cmp	r3, r2
 8002c22:	d807      	bhi.n	8002c34 <HAL_I2C_Init+0x84>
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	4a7a      	ldr	r2, [pc, #488]	; (8002e10 <HAL_I2C_Init+0x260>)
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	bf94      	ite	ls
 8002c2c:	2301      	movls	r3, #1
 8002c2e:	2300      	movhi	r3, #0
 8002c30:	b2db      	uxtb	r3, r3
 8002c32:	e006      	b.n	8002c42 <HAL_I2C_Init+0x92>
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	4a77      	ldr	r2, [pc, #476]	; (8002e14 <HAL_I2C_Init+0x264>)
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	bf94      	ite	ls
 8002c3c:	2301      	movls	r3, #1
 8002c3e:	2300      	movhi	r3, #0
 8002c40:	b2db      	uxtb	r3, r3
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d001      	beq.n	8002c4a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002c46:	2301      	movs	r3, #1
 8002c48:	e0db      	b.n	8002e02 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	4a72      	ldr	r2, [pc, #456]	; (8002e18 <HAL_I2C_Init+0x268>)
 8002c4e:	fba2 2303 	umull	r2, r3, r2, r3
 8002c52:	0c9b      	lsrs	r3, r3, #18
 8002c54:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	68ba      	ldr	r2, [r7, #8]
 8002c66:	430a      	orrs	r2, r1
 8002c68:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	6a1b      	ldr	r3, [r3, #32]
 8002c70:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	4a64      	ldr	r2, [pc, #400]	; (8002e0c <HAL_I2C_Init+0x25c>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d802      	bhi.n	8002c84 <HAL_I2C_Init+0xd4>
 8002c7e:	68bb      	ldr	r3, [r7, #8]
 8002c80:	3301      	adds	r3, #1
 8002c82:	e009      	b.n	8002c98 <HAL_I2C_Init+0xe8>
 8002c84:	68bb      	ldr	r3, [r7, #8]
 8002c86:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002c8a:	fb02 f303 	mul.w	r3, r2, r3
 8002c8e:	4a63      	ldr	r2, [pc, #396]	; (8002e1c <HAL_I2C_Init+0x26c>)
 8002c90:	fba2 2303 	umull	r2, r3, r2, r3
 8002c94:	099b      	lsrs	r3, r3, #6
 8002c96:	3301      	adds	r3, #1
 8002c98:	687a      	ldr	r2, [r7, #4]
 8002c9a:	6812      	ldr	r2, [r2, #0]
 8002c9c:	430b      	orrs	r3, r1
 8002c9e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	69db      	ldr	r3, [r3, #28]
 8002ca6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002caa:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	4956      	ldr	r1, [pc, #344]	; (8002e0c <HAL_I2C_Init+0x25c>)
 8002cb4:	428b      	cmp	r3, r1
 8002cb6:	d80d      	bhi.n	8002cd4 <HAL_I2C_Init+0x124>
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	1e59      	subs	r1, r3, #1
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	005b      	lsls	r3, r3, #1
 8002cc2:	fbb1 f3f3 	udiv	r3, r1, r3
 8002cc6:	3301      	adds	r3, #1
 8002cc8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ccc:	2b04      	cmp	r3, #4
 8002cce:	bf38      	it	cc
 8002cd0:	2304      	movcc	r3, #4
 8002cd2:	e04f      	b.n	8002d74 <HAL_I2C_Init+0x1c4>
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	689b      	ldr	r3, [r3, #8]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d111      	bne.n	8002d00 <HAL_I2C_Init+0x150>
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	1e58      	subs	r0, r3, #1
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6859      	ldr	r1, [r3, #4]
 8002ce4:	460b      	mov	r3, r1
 8002ce6:	005b      	lsls	r3, r3, #1
 8002ce8:	440b      	add	r3, r1
 8002cea:	fbb0 f3f3 	udiv	r3, r0, r3
 8002cee:	3301      	adds	r3, #1
 8002cf0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	bf0c      	ite	eq
 8002cf8:	2301      	moveq	r3, #1
 8002cfa:	2300      	movne	r3, #0
 8002cfc:	b2db      	uxtb	r3, r3
 8002cfe:	e012      	b.n	8002d26 <HAL_I2C_Init+0x176>
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	1e58      	subs	r0, r3, #1
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6859      	ldr	r1, [r3, #4]
 8002d08:	460b      	mov	r3, r1
 8002d0a:	009b      	lsls	r3, r3, #2
 8002d0c:	440b      	add	r3, r1
 8002d0e:	0099      	lsls	r1, r3, #2
 8002d10:	440b      	add	r3, r1
 8002d12:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d16:	3301      	adds	r3, #1
 8002d18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	bf0c      	ite	eq
 8002d20:	2301      	moveq	r3, #1
 8002d22:	2300      	movne	r3, #0
 8002d24:	b2db      	uxtb	r3, r3
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d001      	beq.n	8002d2e <HAL_I2C_Init+0x17e>
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	e022      	b.n	8002d74 <HAL_I2C_Init+0x1c4>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	689b      	ldr	r3, [r3, #8]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d10e      	bne.n	8002d54 <HAL_I2C_Init+0x1a4>
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	1e58      	subs	r0, r3, #1
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6859      	ldr	r1, [r3, #4]
 8002d3e:	460b      	mov	r3, r1
 8002d40:	005b      	lsls	r3, r3, #1
 8002d42:	440b      	add	r3, r1
 8002d44:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d48:	3301      	adds	r3, #1
 8002d4a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d52:	e00f      	b.n	8002d74 <HAL_I2C_Init+0x1c4>
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	1e58      	subs	r0, r3, #1
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6859      	ldr	r1, [r3, #4]
 8002d5c:	460b      	mov	r3, r1
 8002d5e:	009b      	lsls	r3, r3, #2
 8002d60:	440b      	add	r3, r1
 8002d62:	0099      	lsls	r1, r3, #2
 8002d64:	440b      	add	r3, r1
 8002d66:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d6a:	3301      	adds	r3, #1
 8002d6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d70:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002d74:	6879      	ldr	r1, [r7, #4]
 8002d76:	6809      	ldr	r1, [r1, #0]
 8002d78:	4313      	orrs	r3, r2
 8002d7a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	69da      	ldr	r2, [r3, #28]
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6a1b      	ldr	r3, [r3, #32]
 8002d8e:	431a      	orrs	r2, r3
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	430a      	orrs	r2, r1
 8002d96:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	689b      	ldr	r3, [r3, #8]
 8002d9e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002da2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002da6:	687a      	ldr	r2, [r7, #4]
 8002da8:	6911      	ldr	r1, [r2, #16]
 8002daa:	687a      	ldr	r2, [r7, #4]
 8002dac:	68d2      	ldr	r2, [r2, #12]
 8002dae:	4311      	orrs	r1, r2
 8002db0:	687a      	ldr	r2, [r7, #4]
 8002db2:	6812      	ldr	r2, [r2, #0]
 8002db4:	430b      	orrs	r3, r1
 8002db6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	68db      	ldr	r3, [r3, #12]
 8002dbe:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	695a      	ldr	r2, [r3, #20]
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	699b      	ldr	r3, [r3, #24]
 8002dca:	431a      	orrs	r2, r3
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	430a      	orrs	r2, r1
 8002dd2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	681a      	ldr	r2, [r3, #0]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f042 0201 	orr.w	r2, r2, #1
 8002de2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2200      	movs	r2, #0
 8002de8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2220      	movs	r2, #32
 8002dee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2200      	movs	r2, #0
 8002df6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002e00:	2300      	movs	r3, #0
}
 8002e02:	4618      	mov	r0, r3
 8002e04:	3710      	adds	r7, #16
 8002e06:	46bd      	mov	sp, r7
 8002e08:	bd80      	pop	{r7, pc}
 8002e0a:	bf00      	nop
 8002e0c:	000186a0 	.word	0x000186a0
 8002e10:	001e847f 	.word	0x001e847f
 8002e14:	003d08ff 	.word	0x003d08ff
 8002e18:	431bde83 	.word	0x431bde83
 8002e1c:	10624dd3 	.word	0x10624dd3

08002e20 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b088      	sub	sp, #32
 8002e24:	af02      	add	r7, sp, #8
 8002e26:	60f8      	str	r0, [r7, #12]
 8002e28:	4608      	mov	r0, r1
 8002e2a:	4611      	mov	r1, r2
 8002e2c:	461a      	mov	r2, r3
 8002e2e:	4603      	mov	r3, r0
 8002e30:	817b      	strh	r3, [r7, #10]
 8002e32:	460b      	mov	r3, r1
 8002e34:	813b      	strh	r3, [r7, #8]
 8002e36:	4613      	mov	r3, r2
 8002e38:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002e3a:	f7ff f93d 	bl	80020b8 <HAL_GetTick>
 8002e3e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e46:	b2db      	uxtb	r3, r3
 8002e48:	2b20      	cmp	r3, #32
 8002e4a:	f040 80d9 	bne.w	8003000 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002e4e:	697b      	ldr	r3, [r7, #20]
 8002e50:	9300      	str	r3, [sp, #0]
 8002e52:	2319      	movs	r3, #25
 8002e54:	2201      	movs	r2, #1
 8002e56:	496d      	ldr	r1, [pc, #436]	; (800300c <HAL_I2C_Mem_Write+0x1ec>)
 8002e58:	68f8      	ldr	r0, [r7, #12]
 8002e5a:	f000 fa9f 	bl	800339c <I2C_WaitOnFlagUntilTimeout>
 8002e5e:	4603      	mov	r3, r0
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d001      	beq.n	8002e68 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002e64:	2302      	movs	r3, #2
 8002e66:	e0cc      	b.n	8003002 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e6e:	2b01      	cmp	r3, #1
 8002e70:	d101      	bne.n	8002e76 <HAL_I2C_Mem_Write+0x56>
 8002e72:	2302      	movs	r3, #2
 8002e74:	e0c5      	b.n	8003002 <HAL_I2C_Mem_Write+0x1e2>
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	2201      	movs	r2, #1
 8002e7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f003 0301 	and.w	r3, r3, #1
 8002e88:	2b01      	cmp	r3, #1
 8002e8a:	d007      	beq.n	8002e9c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	681a      	ldr	r2, [r3, #0]
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f042 0201 	orr.w	r2, r2, #1
 8002e9a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	681a      	ldr	r2, [r3, #0]
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002eaa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	2221      	movs	r2, #33	; 0x21
 8002eb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	2240      	movs	r2, #64	; 0x40
 8002eb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	6a3a      	ldr	r2, [r7, #32]
 8002ec6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002ecc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ed2:	b29a      	uxth	r2, r3
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	4a4d      	ldr	r2, [pc, #308]	; (8003010 <HAL_I2C_Mem_Write+0x1f0>)
 8002edc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002ede:	88f8      	ldrh	r0, [r7, #6]
 8002ee0:	893a      	ldrh	r2, [r7, #8]
 8002ee2:	8979      	ldrh	r1, [r7, #10]
 8002ee4:	697b      	ldr	r3, [r7, #20]
 8002ee6:	9301      	str	r3, [sp, #4]
 8002ee8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002eea:	9300      	str	r3, [sp, #0]
 8002eec:	4603      	mov	r3, r0
 8002eee:	68f8      	ldr	r0, [r7, #12]
 8002ef0:	f000 f9be 	bl	8003270 <I2C_RequestMemoryWrite>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d052      	beq.n	8002fa0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002efa:	2301      	movs	r3, #1
 8002efc:	e081      	b.n	8003002 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002efe:	697a      	ldr	r2, [r7, #20]
 8002f00:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002f02:	68f8      	ldr	r0, [r7, #12]
 8002f04:	f000 fb20 	bl	8003548 <I2C_WaitOnTXEFlagUntilTimeout>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d00d      	beq.n	8002f2a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f12:	2b04      	cmp	r3, #4
 8002f14:	d107      	bne.n	8002f26 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	681a      	ldr	r2, [r3, #0]
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f24:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002f26:	2301      	movs	r3, #1
 8002f28:	e06b      	b.n	8003002 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f2e:	781a      	ldrb	r2, [r3, #0]
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f3a:	1c5a      	adds	r2, r3, #1
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f44:	3b01      	subs	r3, #1
 8002f46:	b29a      	uxth	r2, r3
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f50:	b29b      	uxth	r3, r3
 8002f52:	3b01      	subs	r3, #1
 8002f54:	b29a      	uxth	r2, r3
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	695b      	ldr	r3, [r3, #20]
 8002f60:	f003 0304 	and.w	r3, r3, #4
 8002f64:	2b04      	cmp	r3, #4
 8002f66:	d11b      	bne.n	8002fa0 <HAL_I2C_Mem_Write+0x180>
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d017      	beq.n	8002fa0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f74:	781a      	ldrb	r2, [r3, #0]
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f80:	1c5a      	adds	r2, r3, #1
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f8a:	3b01      	subs	r3, #1
 8002f8c:	b29a      	uxth	r2, r3
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f96:	b29b      	uxth	r3, r3
 8002f98:	3b01      	subs	r3, #1
 8002f9a:	b29a      	uxth	r2, r3
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d1aa      	bne.n	8002efe <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002fa8:	697a      	ldr	r2, [r7, #20]
 8002faa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002fac:	68f8      	ldr	r0, [r7, #12]
 8002fae:	f000 fb0c 	bl	80035ca <I2C_WaitOnBTFFlagUntilTimeout>
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d00d      	beq.n	8002fd4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fbc:	2b04      	cmp	r3, #4
 8002fbe:	d107      	bne.n	8002fd0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	681a      	ldr	r2, [r3, #0]
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fce:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	e016      	b.n	8003002 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	681a      	ldr	r2, [r3, #0]
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fe2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	2220      	movs	r2, #32
 8002fe8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	2200      	movs	r2, #0
 8002ff0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	e000      	b.n	8003002 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003000:	2302      	movs	r3, #2
  }
}
 8003002:	4618      	mov	r0, r3
 8003004:	3718      	adds	r7, #24
 8003006:	46bd      	mov	sp, r7
 8003008:	bd80      	pop	{r7, pc}
 800300a:	bf00      	nop
 800300c:	00100002 	.word	0x00100002
 8003010:	ffff0000 	.word	0xffff0000

08003014 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b08a      	sub	sp, #40	; 0x28
 8003018:	af02      	add	r7, sp, #8
 800301a:	60f8      	str	r0, [r7, #12]
 800301c:	607a      	str	r2, [r7, #4]
 800301e:	603b      	str	r3, [r7, #0]
 8003020:	460b      	mov	r3, r1
 8003022:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003024:	f7ff f848 	bl	80020b8 <HAL_GetTick>
 8003028:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 800302a:	2301      	movs	r3, #1
 800302c:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003034:	b2db      	uxtb	r3, r3
 8003036:	2b20      	cmp	r3, #32
 8003038:	f040 8111 	bne.w	800325e <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800303c:	69fb      	ldr	r3, [r7, #28]
 800303e:	9300      	str	r3, [sp, #0]
 8003040:	2319      	movs	r3, #25
 8003042:	2201      	movs	r2, #1
 8003044:	4988      	ldr	r1, [pc, #544]	; (8003268 <HAL_I2C_IsDeviceReady+0x254>)
 8003046:	68f8      	ldr	r0, [r7, #12]
 8003048:	f000 f9a8 	bl	800339c <I2C_WaitOnFlagUntilTimeout>
 800304c:	4603      	mov	r3, r0
 800304e:	2b00      	cmp	r3, #0
 8003050:	d001      	beq.n	8003056 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8003052:	2302      	movs	r3, #2
 8003054:	e104      	b.n	8003260 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800305c:	2b01      	cmp	r3, #1
 800305e:	d101      	bne.n	8003064 <HAL_I2C_IsDeviceReady+0x50>
 8003060:	2302      	movs	r3, #2
 8003062:	e0fd      	b.n	8003260 <HAL_I2C_IsDeviceReady+0x24c>
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	2201      	movs	r2, #1
 8003068:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f003 0301 	and.w	r3, r3, #1
 8003076:	2b01      	cmp	r3, #1
 8003078:	d007      	beq.n	800308a <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	681a      	ldr	r2, [r3, #0]
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f042 0201 	orr.w	r2, r2, #1
 8003088:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	681a      	ldr	r2, [r3, #0]
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003098:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	2224      	movs	r2, #36	; 0x24
 800309e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	2200      	movs	r2, #0
 80030a6:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	4a70      	ldr	r2, [pc, #448]	; (800326c <HAL_I2C_IsDeviceReady+0x258>)
 80030ac:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	681a      	ldr	r2, [r3, #0]
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80030bc:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80030be:	69fb      	ldr	r3, [r7, #28]
 80030c0:	9300      	str	r3, [sp, #0]
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	2200      	movs	r2, #0
 80030c6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80030ca:	68f8      	ldr	r0, [r7, #12]
 80030cc:	f000 f966 	bl	800339c <I2C_WaitOnFlagUntilTimeout>
 80030d0:	4603      	mov	r3, r0
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d00d      	beq.n	80030f2 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80030e4:	d103      	bne.n	80030ee <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80030ec:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 80030ee:	2303      	movs	r3, #3
 80030f0:	e0b6      	b.n	8003260 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80030f2:	897b      	ldrh	r3, [r7, #10]
 80030f4:	b2db      	uxtb	r3, r3
 80030f6:	461a      	mov	r2, r3
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003100:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8003102:	f7fe ffd9 	bl	80020b8 <HAL_GetTick>
 8003106:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	695b      	ldr	r3, [r3, #20]
 800310e:	f003 0302 	and.w	r3, r3, #2
 8003112:	2b02      	cmp	r3, #2
 8003114:	bf0c      	ite	eq
 8003116:	2301      	moveq	r3, #1
 8003118:	2300      	movne	r3, #0
 800311a:	b2db      	uxtb	r3, r3
 800311c:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	695b      	ldr	r3, [r3, #20]
 8003124:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003128:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800312c:	bf0c      	ite	eq
 800312e:	2301      	moveq	r3, #1
 8003130:	2300      	movne	r3, #0
 8003132:	b2db      	uxtb	r3, r3
 8003134:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003136:	e025      	b.n	8003184 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003138:	f7fe ffbe 	bl	80020b8 <HAL_GetTick>
 800313c:	4602      	mov	r2, r0
 800313e:	69fb      	ldr	r3, [r7, #28]
 8003140:	1ad3      	subs	r3, r2, r3
 8003142:	683a      	ldr	r2, [r7, #0]
 8003144:	429a      	cmp	r2, r3
 8003146:	d302      	bcc.n	800314e <HAL_I2C_IsDeviceReady+0x13a>
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d103      	bne.n	8003156 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	22a0      	movs	r2, #160	; 0xa0
 8003152:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	695b      	ldr	r3, [r3, #20]
 800315c:	f003 0302 	and.w	r3, r3, #2
 8003160:	2b02      	cmp	r3, #2
 8003162:	bf0c      	ite	eq
 8003164:	2301      	moveq	r3, #1
 8003166:	2300      	movne	r3, #0
 8003168:	b2db      	uxtb	r3, r3
 800316a:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	695b      	ldr	r3, [r3, #20]
 8003172:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003176:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800317a:	bf0c      	ite	eq
 800317c:	2301      	moveq	r3, #1
 800317e:	2300      	movne	r3, #0
 8003180:	b2db      	uxtb	r3, r3
 8003182:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800318a:	b2db      	uxtb	r3, r3
 800318c:	2ba0      	cmp	r3, #160	; 0xa0
 800318e:	d005      	beq.n	800319c <HAL_I2C_IsDeviceReady+0x188>
 8003190:	7dfb      	ldrb	r3, [r7, #23]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d102      	bne.n	800319c <HAL_I2C_IsDeviceReady+0x188>
 8003196:	7dbb      	ldrb	r3, [r7, #22]
 8003198:	2b00      	cmp	r3, #0
 800319a:	d0cd      	beq.n	8003138 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	2220      	movs	r2, #32
 80031a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	695b      	ldr	r3, [r3, #20]
 80031aa:	f003 0302 	and.w	r3, r3, #2
 80031ae:	2b02      	cmp	r3, #2
 80031b0:	d129      	bne.n	8003206 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	681a      	ldr	r2, [r3, #0]
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031c0:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031c2:	2300      	movs	r3, #0
 80031c4:	613b      	str	r3, [r7, #16]
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	695b      	ldr	r3, [r3, #20]
 80031cc:	613b      	str	r3, [r7, #16]
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	699b      	ldr	r3, [r3, #24]
 80031d4:	613b      	str	r3, [r7, #16]
 80031d6:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80031d8:	69fb      	ldr	r3, [r7, #28]
 80031da:	9300      	str	r3, [sp, #0]
 80031dc:	2319      	movs	r3, #25
 80031de:	2201      	movs	r2, #1
 80031e0:	4921      	ldr	r1, [pc, #132]	; (8003268 <HAL_I2C_IsDeviceReady+0x254>)
 80031e2:	68f8      	ldr	r0, [r7, #12]
 80031e4:	f000 f8da 	bl	800339c <I2C_WaitOnFlagUntilTimeout>
 80031e8:	4603      	mov	r3, r0
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d001      	beq.n	80031f2 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80031ee:	2301      	movs	r3, #1
 80031f0:	e036      	b.n	8003260 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	2220      	movs	r2, #32
 80031f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	2200      	movs	r2, #0
 80031fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8003202:	2300      	movs	r3, #0
 8003204:	e02c      	b.n	8003260 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	681a      	ldr	r2, [r3, #0]
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003214:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800321e:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003220:	69fb      	ldr	r3, [r7, #28]
 8003222:	9300      	str	r3, [sp, #0]
 8003224:	2319      	movs	r3, #25
 8003226:	2201      	movs	r2, #1
 8003228:	490f      	ldr	r1, [pc, #60]	; (8003268 <HAL_I2C_IsDeviceReady+0x254>)
 800322a:	68f8      	ldr	r0, [r7, #12]
 800322c:	f000 f8b6 	bl	800339c <I2C_WaitOnFlagUntilTimeout>
 8003230:	4603      	mov	r3, r0
 8003232:	2b00      	cmp	r3, #0
 8003234:	d001      	beq.n	800323a <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8003236:	2301      	movs	r3, #1
 8003238:	e012      	b.n	8003260 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800323a:	69bb      	ldr	r3, [r7, #24]
 800323c:	3301      	adds	r3, #1
 800323e:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003240:	69ba      	ldr	r2, [r7, #24]
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	429a      	cmp	r2, r3
 8003246:	f4ff af32 	bcc.w	80030ae <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	2220      	movs	r2, #32
 800324e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	2200      	movs	r2, #0
 8003256:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800325a:	2301      	movs	r3, #1
 800325c:	e000      	b.n	8003260 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800325e:	2302      	movs	r3, #2
  }
}
 8003260:	4618      	mov	r0, r3
 8003262:	3720      	adds	r7, #32
 8003264:	46bd      	mov	sp, r7
 8003266:	bd80      	pop	{r7, pc}
 8003268:	00100002 	.word	0x00100002
 800326c:	ffff0000 	.word	0xffff0000

08003270 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b088      	sub	sp, #32
 8003274:	af02      	add	r7, sp, #8
 8003276:	60f8      	str	r0, [r7, #12]
 8003278:	4608      	mov	r0, r1
 800327a:	4611      	mov	r1, r2
 800327c:	461a      	mov	r2, r3
 800327e:	4603      	mov	r3, r0
 8003280:	817b      	strh	r3, [r7, #10]
 8003282:	460b      	mov	r3, r1
 8003284:	813b      	strh	r3, [r7, #8]
 8003286:	4613      	mov	r3, r2
 8003288:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	681a      	ldr	r2, [r3, #0]
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003298:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800329a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800329c:	9300      	str	r3, [sp, #0]
 800329e:	6a3b      	ldr	r3, [r7, #32]
 80032a0:	2200      	movs	r2, #0
 80032a2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80032a6:	68f8      	ldr	r0, [r7, #12]
 80032a8:	f000 f878 	bl	800339c <I2C_WaitOnFlagUntilTimeout>
 80032ac:	4603      	mov	r3, r0
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d00d      	beq.n	80032ce <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80032c0:	d103      	bne.n	80032ca <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80032c8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80032ca:	2303      	movs	r3, #3
 80032cc:	e05f      	b.n	800338e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80032ce:	897b      	ldrh	r3, [r7, #10]
 80032d0:	b2db      	uxtb	r3, r3
 80032d2:	461a      	mov	r2, r3
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80032dc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80032de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032e0:	6a3a      	ldr	r2, [r7, #32]
 80032e2:	492d      	ldr	r1, [pc, #180]	; (8003398 <I2C_RequestMemoryWrite+0x128>)
 80032e4:	68f8      	ldr	r0, [r7, #12]
 80032e6:	f000 f8b0 	bl	800344a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80032ea:	4603      	mov	r3, r0
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d001      	beq.n	80032f4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80032f0:	2301      	movs	r3, #1
 80032f2:	e04c      	b.n	800338e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032f4:	2300      	movs	r3, #0
 80032f6:	617b      	str	r3, [r7, #20]
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	695b      	ldr	r3, [r3, #20]
 80032fe:	617b      	str	r3, [r7, #20]
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	699b      	ldr	r3, [r3, #24]
 8003306:	617b      	str	r3, [r7, #20]
 8003308:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800330a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800330c:	6a39      	ldr	r1, [r7, #32]
 800330e:	68f8      	ldr	r0, [r7, #12]
 8003310:	f000 f91a 	bl	8003548 <I2C_WaitOnTXEFlagUntilTimeout>
 8003314:	4603      	mov	r3, r0
 8003316:	2b00      	cmp	r3, #0
 8003318:	d00d      	beq.n	8003336 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800331e:	2b04      	cmp	r3, #4
 8003320:	d107      	bne.n	8003332 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	681a      	ldr	r2, [r3, #0]
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003330:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003332:	2301      	movs	r3, #1
 8003334:	e02b      	b.n	800338e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003336:	88fb      	ldrh	r3, [r7, #6]
 8003338:	2b01      	cmp	r3, #1
 800333a:	d105      	bne.n	8003348 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800333c:	893b      	ldrh	r3, [r7, #8]
 800333e:	b2da      	uxtb	r2, r3
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	611a      	str	r2, [r3, #16]
 8003346:	e021      	b.n	800338c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003348:	893b      	ldrh	r3, [r7, #8]
 800334a:	0a1b      	lsrs	r3, r3, #8
 800334c:	b29b      	uxth	r3, r3
 800334e:	b2da      	uxtb	r2, r3
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003356:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003358:	6a39      	ldr	r1, [r7, #32]
 800335a:	68f8      	ldr	r0, [r7, #12]
 800335c:	f000 f8f4 	bl	8003548 <I2C_WaitOnTXEFlagUntilTimeout>
 8003360:	4603      	mov	r3, r0
 8003362:	2b00      	cmp	r3, #0
 8003364:	d00d      	beq.n	8003382 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800336a:	2b04      	cmp	r3, #4
 800336c:	d107      	bne.n	800337e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	681a      	ldr	r2, [r3, #0]
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800337c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800337e:	2301      	movs	r3, #1
 8003380:	e005      	b.n	800338e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003382:	893b      	ldrh	r3, [r7, #8]
 8003384:	b2da      	uxtb	r2, r3
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800338c:	2300      	movs	r3, #0
}
 800338e:	4618      	mov	r0, r3
 8003390:	3718      	adds	r7, #24
 8003392:	46bd      	mov	sp, r7
 8003394:	bd80      	pop	{r7, pc}
 8003396:	bf00      	nop
 8003398:	00010002 	.word	0x00010002

0800339c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b084      	sub	sp, #16
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	60f8      	str	r0, [r7, #12]
 80033a4:	60b9      	str	r1, [r7, #8]
 80033a6:	603b      	str	r3, [r7, #0]
 80033a8:	4613      	mov	r3, r2
 80033aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80033ac:	e025      	b.n	80033fa <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80033b4:	d021      	beq.n	80033fa <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033b6:	f7fe fe7f 	bl	80020b8 <HAL_GetTick>
 80033ba:	4602      	mov	r2, r0
 80033bc:	69bb      	ldr	r3, [r7, #24]
 80033be:	1ad3      	subs	r3, r2, r3
 80033c0:	683a      	ldr	r2, [r7, #0]
 80033c2:	429a      	cmp	r2, r3
 80033c4:	d302      	bcc.n	80033cc <I2C_WaitOnFlagUntilTimeout+0x30>
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d116      	bne.n	80033fa <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	2200      	movs	r2, #0
 80033d0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	2220      	movs	r2, #32
 80033d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	2200      	movs	r2, #0
 80033de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033e6:	f043 0220 	orr.w	r2, r3, #32
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	2200      	movs	r2, #0
 80033f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80033f6:	2301      	movs	r3, #1
 80033f8:	e023      	b.n	8003442 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80033fa:	68bb      	ldr	r3, [r7, #8]
 80033fc:	0c1b      	lsrs	r3, r3, #16
 80033fe:	b2db      	uxtb	r3, r3
 8003400:	2b01      	cmp	r3, #1
 8003402:	d10d      	bne.n	8003420 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	695b      	ldr	r3, [r3, #20]
 800340a:	43da      	mvns	r2, r3
 800340c:	68bb      	ldr	r3, [r7, #8]
 800340e:	4013      	ands	r3, r2
 8003410:	b29b      	uxth	r3, r3
 8003412:	2b00      	cmp	r3, #0
 8003414:	bf0c      	ite	eq
 8003416:	2301      	moveq	r3, #1
 8003418:	2300      	movne	r3, #0
 800341a:	b2db      	uxtb	r3, r3
 800341c:	461a      	mov	r2, r3
 800341e:	e00c      	b.n	800343a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	699b      	ldr	r3, [r3, #24]
 8003426:	43da      	mvns	r2, r3
 8003428:	68bb      	ldr	r3, [r7, #8]
 800342a:	4013      	ands	r3, r2
 800342c:	b29b      	uxth	r3, r3
 800342e:	2b00      	cmp	r3, #0
 8003430:	bf0c      	ite	eq
 8003432:	2301      	moveq	r3, #1
 8003434:	2300      	movne	r3, #0
 8003436:	b2db      	uxtb	r3, r3
 8003438:	461a      	mov	r2, r3
 800343a:	79fb      	ldrb	r3, [r7, #7]
 800343c:	429a      	cmp	r2, r3
 800343e:	d0b6      	beq.n	80033ae <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003440:	2300      	movs	r3, #0
}
 8003442:	4618      	mov	r0, r3
 8003444:	3710      	adds	r7, #16
 8003446:	46bd      	mov	sp, r7
 8003448:	bd80      	pop	{r7, pc}

0800344a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800344a:	b580      	push	{r7, lr}
 800344c:	b084      	sub	sp, #16
 800344e:	af00      	add	r7, sp, #0
 8003450:	60f8      	str	r0, [r7, #12]
 8003452:	60b9      	str	r1, [r7, #8]
 8003454:	607a      	str	r2, [r7, #4]
 8003456:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003458:	e051      	b.n	80034fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	695b      	ldr	r3, [r3, #20]
 8003460:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003464:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003468:	d123      	bne.n	80034b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	681a      	ldr	r2, [r3, #0]
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003478:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003482:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	2200      	movs	r2, #0
 8003488:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	2220      	movs	r2, #32
 800348e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	2200      	movs	r2, #0
 8003496:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800349e:	f043 0204 	orr.w	r2, r3, #4
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	2200      	movs	r2, #0
 80034aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80034ae:	2301      	movs	r3, #1
 80034b0:	e046      	b.n	8003540 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80034b8:	d021      	beq.n	80034fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034ba:	f7fe fdfd 	bl	80020b8 <HAL_GetTick>
 80034be:	4602      	mov	r2, r0
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	1ad3      	subs	r3, r2, r3
 80034c4:	687a      	ldr	r2, [r7, #4]
 80034c6:	429a      	cmp	r2, r3
 80034c8:	d302      	bcc.n	80034d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d116      	bne.n	80034fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	2200      	movs	r2, #0
 80034d4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	2220      	movs	r2, #32
 80034da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	2200      	movs	r2, #0
 80034e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ea:	f043 0220 	orr.w	r2, r3, #32
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	2200      	movs	r2, #0
 80034f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80034fa:	2301      	movs	r3, #1
 80034fc:	e020      	b.n	8003540 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80034fe:	68bb      	ldr	r3, [r7, #8]
 8003500:	0c1b      	lsrs	r3, r3, #16
 8003502:	b2db      	uxtb	r3, r3
 8003504:	2b01      	cmp	r3, #1
 8003506:	d10c      	bne.n	8003522 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	695b      	ldr	r3, [r3, #20]
 800350e:	43da      	mvns	r2, r3
 8003510:	68bb      	ldr	r3, [r7, #8]
 8003512:	4013      	ands	r3, r2
 8003514:	b29b      	uxth	r3, r3
 8003516:	2b00      	cmp	r3, #0
 8003518:	bf14      	ite	ne
 800351a:	2301      	movne	r3, #1
 800351c:	2300      	moveq	r3, #0
 800351e:	b2db      	uxtb	r3, r3
 8003520:	e00b      	b.n	800353a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	699b      	ldr	r3, [r3, #24]
 8003528:	43da      	mvns	r2, r3
 800352a:	68bb      	ldr	r3, [r7, #8]
 800352c:	4013      	ands	r3, r2
 800352e:	b29b      	uxth	r3, r3
 8003530:	2b00      	cmp	r3, #0
 8003532:	bf14      	ite	ne
 8003534:	2301      	movne	r3, #1
 8003536:	2300      	moveq	r3, #0
 8003538:	b2db      	uxtb	r3, r3
 800353a:	2b00      	cmp	r3, #0
 800353c:	d18d      	bne.n	800345a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800353e:	2300      	movs	r3, #0
}
 8003540:	4618      	mov	r0, r3
 8003542:	3710      	adds	r7, #16
 8003544:	46bd      	mov	sp, r7
 8003546:	bd80      	pop	{r7, pc}

08003548 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b084      	sub	sp, #16
 800354c:	af00      	add	r7, sp, #0
 800354e:	60f8      	str	r0, [r7, #12]
 8003550:	60b9      	str	r1, [r7, #8]
 8003552:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003554:	e02d      	b.n	80035b2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003556:	68f8      	ldr	r0, [r7, #12]
 8003558:	f000 f878 	bl	800364c <I2C_IsAcknowledgeFailed>
 800355c:	4603      	mov	r3, r0
 800355e:	2b00      	cmp	r3, #0
 8003560:	d001      	beq.n	8003566 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003562:	2301      	movs	r3, #1
 8003564:	e02d      	b.n	80035c2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003566:	68bb      	ldr	r3, [r7, #8]
 8003568:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800356c:	d021      	beq.n	80035b2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800356e:	f7fe fda3 	bl	80020b8 <HAL_GetTick>
 8003572:	4602      	mov	r2, r0
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	1ad3      	subs	r3, r2, r3
 8003578:	68ba      	ldr	r2, [r7, #8]
 800357a:	429a      	cmp	r2, r3
 800357c:	d302      	bcc.n	8003584 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800357e:	68bb      	ldr	r3, [r7, #8]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d116      	bne.n	80035b2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	2200      	movs	r2, #0
 8003588:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	2220      	movs	r2, #32
 800358e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	2200      	movs	r2, #0
 8003596:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800359e:	f043 0220 	orr.w	r2, r3, #32
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	2200      	movs	r2, #0
 80035aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80035ae:	2301      	movs	r3, #1
 80035b0:	e007      	b.n	80035c2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	695b      	ldr	r3, [r3, #20]
 80035b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035bc:	2b80      	cmp	r3, #128	; 0x80
 80035be:	d1ca      	bne.n	8003556 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80035c0:	2300      	movs	r3, #0
}
 80035c2:	4618      	mov	r0, r3
 80035c4:	3710      	adds	r7, #16
 80035c6:	46bd      	mov	sp, r7
 80035c8:	bd80      	pop	{r7, pc}

080035ca <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80035ca:	b580      	push	{r7, lr}
 80035cc:	b084      	sub	sp, #16
 80035ce:	af00      	add	r7, sp, #0
 80035d0:	60f8      	str	r0, [r7, #12]
 80035d2:	60b9      	str	r1, [r7, #8]
 80035d4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80035d6:	e02d      	b.n	8003634 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80035d8:	68f8      	ldr	r0, [r7, #12]
 80035da:	f000 f837 	bl	800364c <I2C_IsAcknowledgeFailed>
 80035de:	4603      	mov	r3, r0
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d001      	beq.n	80035e8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80035e4:	2301      	movs	r3, #1
 80035e6:	e02d      	b.n	8003644 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035e8:	68bb      	ldr	r3, [r7, #8]
 80035ea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80035ee:	d021      	beq.n	8003634 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035f0:	f7fe fd62 	bl	80020b8 <HAL_GetTick>
 80035f4:	4602      	mov	r2, r0
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	1ad3      	subs	r3, r2, r3
 80035fa:	68ba      	ldr	r2, [r7, #8]
 80035fc:	429a      	cmp	r2, r3
 80035fe:	d302      	bcc.n	8003606 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003600:	68bb      	ldr	r3, [r7, #8]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d116      	bne.n	8003634 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	2200      	movs	r2, #0
 800360a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	2220      	movs	r2, #32
 8003610:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	2200      	movs	r2, #0
 8003618:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003620:	f043 0220 	orr.w	r2, r3, #32
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	2200      	movs	r2, #0
 800362c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003630:	2301      	movs	r3, #1
 8003632:	e007      	b.n	8003644 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	695b      	ldr	r3, [r3, #20]
 800363a:	f003 0304 	and.w	r3, r3, #4
 800363e:	2b04      	cmp	r3, #4
 8003640:	d1ca      	bne.n	80035d8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003642:	2300      	movs	r3, #0
}
 8003644:	4618      	mov	r0, r3
 8003646:	3710      	adds	r7, #16
 8003648:	46bd      	mov	sp, r7
 800364a:	bd80      	pop	{r7, pc}

0800364c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800364c:	b480      	push	{r7}
 800364e:	b083      	sub	sp, #12
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	695b      	ldr	r3, [r3, #20]
 800365a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800365e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003662:	d11b      	bne.n	800369c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800366c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2200      	movs	r2, #0
 8003672:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2220      	movs	r2, #32
 8003678:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2200      	movs	r2, #0
 8003680:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003688:	f043 0204 	orr.w	r2, r3, #4
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2200      	movs	r2, #0
 8003694:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003698:	2301      	movs	r3, #1
 800369a:	e000      	b.n	800369e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800369c:	2300      	movs	r3, #0
}
 800369e:	4618      	mov	r0, r3
 80036a0:	370c      	adds	r7, #12
 80036a2:	46bd      	mov	sp, r7
 80036a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a8:	4770      	bx	lr
	...

080036ac <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b086      	sub	sp, #24
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d101      	bne.n	80036be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80036ba:	2301      	movs	r3, #1
 80036bc:	e25b      	b.n	8003b76 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f003 0301 	and.w	r3, r3, #1
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d075      	beq.n	80037b6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80036ca:	4ba3      	ldr	r3, [pc, #652]	; (8003958 <HAL_RCC_OscConfig+0x2ac>)
 80036cc:	689b      	ldr	r3, [r3, #8]
 80036ce:	f003 030c 	and.w	r3, r3, #12
 80036d2:	2b04      	cmp	r3, #4
 80036d4:	d00c      	beq.n	80036f0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80036d6:	4ba0      	ldr	r3, [pc, #640]	; (8003958 <HAL_RCC_OscConfig+0x2ac>)
 80036d8:	689b      	ldr	r3, [r3, #8]
 80036da:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80036de:	2b08      	cmp	r3, #8
 80036e0:	d112      	bne.n	8003708 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80036e2:	4b9d      	ldr	r3, [pc, #628]	; (8003958 <HAL_RCC_OscConfig+0x2ac>)
 80036e4:	685b      	ldr	r3, [r3, #4]
 80036e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80036ee:	d10b      	bne.n	8003708 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036f0:	4b99      	ldr	r3, [pc, #612]	; (8003958 <HAL_RCC_OscConfig+0x2ac>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d05b      	beq.n	80037b4 <HAL_RCC_OscConfig+0x108>
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	685b      	ldr	r3, [r3, #4]
 8003700:	2b00      	cmp	r3, #0
 8003702:	d157      	bne.n	80037b4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003704:	2301      	movs	r3, #1
 8003706:	e236      	b.n	8003b76 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	685b      	ldr	r3, [r3, #4]
 800370c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003710:	d106      	bne.n	8003720 <HAL_RCC_OscConfig+0x74>
 8003712:	4b91      	ldr	r3, [pc, #580]	; (8003958 <HAL_RCC_OscConfig+0x2ac>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	4a90      	ldr	r2, [pc, #576]	; (8003958 <HAL_RCC_OscConfig+0x2ac>)
 8003718:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800371c:	6013      	str	r3, [r2, #0]
 800371e:	e01d      	b.n	800375c <HAL_RCC_OscConfig+0xb0>
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003728:	d10c      	bne.n	8003744 <HAL_RCC_OscConfig+0x98>
 800372a:	4b8b      	ldr	r3, [pc, #556]	; (8003958 <HAL_RCC_OscConfig+0x2ac>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4a8a      	ldr	r2, [pc, #552]	; (8003958 <HAL_RCC_OscConfig+0x2ac>)
 8003730:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003734:	6013      	str	r3, [r2, #0]
 8003736:	4b88      	ldr	r3, [pc, #544]	; (8003958 <HAL_RCC_OscConfig+0x2ac>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	4a87      	ldr	r2, [pc, #540]	; (8003958 <HAL_RCC_OscConfig+0x2ac>)
 800373c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003740:	6013      	str	r3, [r2, #0]
 8003742:	e00b      	b.n	800375c <HAL_RCC_OscConfig+0xb0>
 8003744:	4b84      	ldr	r3, [pc, #528]	; (8003958 <HAL_RCC_OscConfig+0x2ac>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4a83      	ldr	r2, [pc, #524]	; (8003958 <HAL_RCC_OscConfig+0x2ac>)
 800374a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800374e:	6013      	str	r3, [r2, #0]
 8003750:	4b81      	ldr	r3, [pc, #516]	; (8003958 <HAL_RCC_OscConfig+0x2ac>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	4a80      	ldr	r2, [pc, #512]	; (8003958 <HAL_RCC_OscConfig+0x2ac>)
 8003756:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800375a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	685b      	ldr	r3, [r3, #4]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d013      	beq.n	800378c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003764:	f7fe fca8 	bl	80020b8 <HAL_GetTick>
 8003768:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800376a:	e008      	b.n	800377e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800376c:	f7fe fca4 	bl	80020b8 <HAL_GetTick>
 8003770:	4602      	mov	r2, r0
 8003772:	693b      	ldr	r3, [r7, #16]
 8003774:	1ad3      	subs	r3, r2, r3
 8003776:	2b64      	cmp	r3, #100	; 0x64
 8003778:	d901      	bls.n	800377e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800377a:	2303      	movs	r3, #3
 800377c:	e1fb      	b.n	8003b76 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800377e:	4b76      	ldr	r3, [pc, #472]	; (8003958 <HAL_RCC_OscConfig+0x2ac>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003786:	2b00      	cmp	r3, #0
 8003788:	d0f0      	beq.n	800376c <HAL_RCC_OscConfig+0xc0>
 800378a:	e014      	b.n	80037b6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800378c:	f7fe fc94 	bl	80020b8 <HAL_GetTick>
 8003790:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003792:	e008      	b.n	80037a6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003794:	f7fe fc90 	bl	80020b8 <HAL_GetTick>
 8003798:	4602      	mov	r2, r0
 800379a:	693b      	ldr	r3, [r7, #16]
 800379c:	1ad3      	subs	r3, r2, r3
 800379e:	2b64      	cmp	r3, #100	; 0x64
 80037a0:	d901      	bls.n	80037a6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80037a2:	2303      	movs	r3, #3
 80037a4:	e1e7      	b.n	8003b76 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037a6:	4b6c      	ldr	r3, [pc, #432]	; (8003958 <HAL_RCC_OscConfig+0x2ac>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d1f0      	bne.n	8003794 <HAL_RCC_OscConfig+0xe8>
 80037b2:	e000      	b.n	80037b6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f003 0302 	and.w	r3, r3, #2
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d063      	beq.n	800388a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80037c2:	4b65      	ldr	r3, [pc, #404]	; (8003958 <HAL_RCC_OscConfig+0x2ac>)
 80037c4:	689b      	ldr	r3, [r3, #8]
 80037c6:	f003 030c 	and.w	r3, r3, #12
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d00b      	beq.n	80037e6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80037ce:	4b62      	ldr	r3, [pc, #392]	; (8003958 <HAL_RCC_OscConfig+0x2ac>)
 80037d0:	689b      	ldr	r3, [r3, #8]
 80037d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80037d6:	2b08      	cmp	r3, #8
 80037d8:	d11c      	bne.n	8003814 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80037da:	4b5f      	ldr	r3, [pc, #380]	; (8003958 <HAL_RCC_OscConfig+0x2ac>)
 80037dc:	685b      	ldr	r3, [r3, #4]
 80037de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d116      	bne.n	8003814 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037e6:	4b5c      	ldr	r3, [pc, #368]	; (8003958 <HAL_RCC_OscConfig+0x2ac>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f003 0302 	and.w	r3, r3, #2
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d005      	beq.n	80037fe <HAL_RCC_OscConfig+0x152>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	68db      	ldr	r3, [r3, #12]
 80037f6:	2b01      	cmp	r3, #1
 80037f8:	d001      	beq.n	80037fe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80037fa:	2301      	movs	r3, #1
 80037fc:	e1bb      	b.n	8003b76 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037fe:	4b56      	ldr	r3, [pc, #344]	; (8003958 <HAL_RCC_OscConfig+0x2ac>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	691b      	ldr	r3, [r3, #16]
 800380a:	00db      	lsls	r3, r3, #3
 800380c:	4952      	ldr	r1, [pc, #328]	; (8003958 <HAL_RCC_OscConfig+0x2ac>)
 800380e:	4313      	orrs	r3, r2
 8003810:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003812:	e03a      	b.n	800388a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	68db      	ldr	r3, [r3, #12]
 8003818:	2b00      	cmp	r3, #0
 800381a:	d020      	beq.n	800385e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800381c:	4b4f      	ldr	r3, [pc, #316]	; (800395c <HAL_RCC_OscConfig+0x2b0>)
 800381e:	2201      	movs	r2, #1
 8003820:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003822:	f7fe fc49 	bl	80020b8 <HAL_GetTick>
 8003826:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003828:	e008      	b.n	800383c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800382a:	f7fe fc45 	bl	80020b8 <HAL_GetTick>
 800382e:	4602      	mov	r2, r0
 8003830:	693b      	ldr	r3, [r7, #16]
 8003832:	1ad3      	subs	r3, r2, r3
 8003834:	2b02      	cmp	r3, #2
 8003836:	d901      	bls.n	800383c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003838:	2303      	movs	r3, #3
 800383a:	e19c      	b.n	8003b76 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800383c:	4b46      	ldr	r3, [pc, #280]	; (8003958 <HAL_RCC_OscConfig+0x2ac>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f003 0302 	and.w	r3, r3, #2
 8003844:	2b00      	cmp	r3, #0
 8003846:	d0f0      	beq.n	800382a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003848:	4b43      	ldr	r3, [pc, #268]	; (8003958 <HAL_RCC_OscConfig+0x2ac>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	691b      	ldr	r3, [r3, #16]
 8003854:	00db      	lsls	r3, r3, #3
 8003856:	4940      	ldr	r1, [pc, #256]	; (8003958 <HAL_RCC_OscConfig+0x2ac>)
 8003858:	4313      	orrs	r3, r2
 800385a:	600b      	str	r3, [r1, #0]
 800385c:	e015      	b.n	800388a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800385e:	4b3f      	ldr	r3, [pc, #252]	; (800395c <HAL_RCC_OscConfig+0x2b0>)
 8003860:	2200      	movs	r2, #0
 8003862:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003864:	f7fe fc28 	bl	80020b8 <HAL_GetTick>
 8003868:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800386a:	e008      	b.n	800387e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800386c:	f7fe fc24 	bl	80020b8 <HAL_GetTick>
 8003870:	4602      	mov	r2, r0
 8003872:	693b      	ldr	r3, [r7, #16]
 8003874:	1ad3      	subs	r3, r2, r3
 8003876:	2b02      	cmp	r3, #2
 8003878:	d901      	bls.n	800387e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800387a:	2303      	movs	r3, #3
 800387c:	e17b      	b.n	8003b76 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800387e:	4b36      	ldr	r3, [pc, #216]	; (8003958 <HAL_RCC_OscConfig+0x2ac>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f003 0302 	and.w	r3, r3, #2
 8003886:	2b00      	cmp	r3, #0
 8003888:	d1f0      	bne.n	800386c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f003 0308 	and.w	r3, r3, #8
 8003892:	2b00      	cmp	r3, #0
 8003894:	d030      	beq.n	80038f8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	695b      	ldr	r3, [r3, #20]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d016      	beq.n	80038cc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800389e:	4b30      	ldr	r3, [pc, #192]	; (8003960 <HAL_RCC_OscConfig+0x2b4>)
 80038a0:	2201      	movs	r2, #1
 80038a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038a4:	f7fe fc08 	bl	80020b8 <HAL_GetTick>
 80038a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038aa:	e008      	b.n	80038be <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80038ac:	f7fe fc04 	bl	80020b8 <HAL_GetTick>
 80038b0:	4602      	mov	r2, r0
 80038b2:	693b      	ldr	r3, [r7, #16]
 80038b4:	1ad3      	subs	r3, r2, r3
 80038b6:	2b02      	cmp	r3, #2
 80038b8:	d901      	bls.n	80038be <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80038ba:	2303      	movs	r3, #3
 80038bc:	e15b      	b.n	8003b76 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038be:	4b26      	ldr	r3, [pc, #152]	; (8003958 <HAL_RCC_OscConfig+0x2ac>)
 80038c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038c2:	f003 0302 	and.w	r3, r3, #2
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d0f0      	beq.n	80038ac <HAL_RCC_OscConfig+0x200>
 80038ca:	e015      	b.n	80038f8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80038cc:	4b24      	ldr	r3, [pc, #144]	; (8003960 <HAL_RCC_OscConfig+0x2b4>)
 80038ce:	2200      	movs	r2, #0
 80038d0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038d2:	f7fe fbf1 	bl	80020b8 <HAL_GetTick>
 80038d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038d8:	e008      	b.n	80038ec <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80038da:	f7fe fbed 	bl	80020b8 <HAL_GetTick>
 80038de:	4602      	mov	r2, r0
 80038e0:	693b      	ldr	r3, [r7, #16]
 80038e2:	1ad3      	subs	r3, r2, r3
 80038e4:	2b02      	cmp	r3, #2
 80038e6:	d901      	bls.n	80038ec <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80038e8:	2303      	movs	r3, #3
 80038ea:	e144      	b.n	8003b76 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038ec:	4b1a      	ldr	r3, [pc, #104]	; (8003958 <HAL_RCC_OscConfig+0x2ac>)
 80038ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038f0:	f003 0302 	and.w	r3, r3, #2
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d1f0      	bne.n	80038da <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f003 0304 	and.w	r3, r3, #4
 8003900:	2b00      	cmp	r3, #0
 8003902:	f000 80a0 	beq.w	8003a46 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003906:	2300      	movs	r3, #0
 8003908:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800390a:	4b13      	ldr	r3, [pc, #76]	; (8003958 <HAL_RCC_OscConfig+0x2ac>)
 800390c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800390e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003912:	2b00      	cmp	r3, #0
 8003914:	d10f      	bne.n	8003936 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003916:	2300      	movs	r3, #0
 8003918:	60bb      	str	r3, [r7, #8]
 800391a:	4b0f      	ldr	r3, [pc, #60]	; (8003958 <HAL_RCC_OscConfig+0x2ac>)
 800391c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800391e:	4a0e      	ldr	r2, [pc, #56]	; (8003958 <HAL_RCC_OscConfig+0x2ac>)
 8003920:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003924:	6413      	str	r3, [r2, #64]	; 0x40
 8003926:	4b0c      	ldr	r3, [pc, #48]	; (8003958 <HAL_RCC_OscConfig+0x2ac>)
 8003928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800392a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800392e:	60bb      	str	r3, [r7, #8]
 8003930:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003932:	2301      	movs	r3, #1
 8003934:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003936:	4b0b      	ldr	r3, [pc, #44]	; (8003964 <HAL_RCC_OscConfig+0x2b8>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800393e:	2b00      	cmp	r3, #0
 8003940:	d121      	bne.n	8003986 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003942:	4b08      	ldr	r3, [pc, #32]	; (8003964 <HAL_RCC_OscConfig+0x2b8>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4a07      	ldr	r2, [pc, #28]	; (8003964 <HAL_RCC_OscConfig+0x2b8>)
 8003948:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800394c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800394e:	f7fe fbb3 	bl	80020b8 <HAL_GetTick>
 8003952:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003954:	e011      	b.n	800397a <HAL_RCC_OscConfig+0x2ce>
 8003956:	bf00      	nop
 8003958:	40023800 	.word	0x40023800
 800395c:	42470000 	.word	0x42470000
 8003960:	42470e80 	.word	0x42470e80
 8003964:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003968:	f7fe fba6 	bl	80020b8 <HAL_GetTick>
 800396c:	4602      	mov	r2, r0
 800396e:	693b      	ldr	r3, [r7, #16]
 8003970:	1ad3      	subs	r3, r2, r3
 8003972:	2b02      	cmp	r3, #2
 8003974:	d901      	bls.n	800397a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003976:	2303      	movs	r3, #3
 8003978:	e0fd      	b.n	8003b76 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800397a:	4b81      	ldr	r3, [pc, #516]	; (8003b80 <HAL_RCC_OscConfig+0x4d4>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003982:	2b00      	cmp	r3, #0
 8003984:	d0f0      	beq.n	8003968 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	689b      	ldr	r3, [r3, #8]
 800398a:	2b01      	cmp	r3, #1
 800398c:	d106      	bne.n	800399c <HAL_RCC_OscConfig+0x2f0>
 800398e:	4b7d      	ldr	r3, [pc, #500]	; (8003b84 <HAL_RCC_OscConfig+0x4d8>)
 8003990:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003992:	4a7c      	ldr	r2, [pc, #496]	; (8003b84 <HAL_RCC_OscConfig+0x4d8>)
 8003994:	f043 0301 	orr.w	r3, r3, #1
 8003998:	6713      	str	r3, [r2, #112]	; 0x70
 800399a:	e01c      	b.n	80039d6 <HAL_RCC_OscConfig+0x32a>
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	689b      	ldr	r3, [r3, #8]
 80039a0:	2b05      	cmp	r3, #5
 80039a2:	d10c      	bne.n	80039be <HAL_RCC_OscConfig+0x312>
 80039a4:	4b77      	ldr	r3, [pc, #476]	; (8003b84 <HAL_RCC_OscConfig+0x4d8>)
 80039a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039a8:	4a76      	ldr	r2, [pc, #472]	; (8003b84 <HAL_RCC_OscConfig+0x4d8>)
 80039aa:	f043 0304 	orr.w	r3, r3, #4
 80039ae:	6713      	str	r3, [r2, #112]	; 0x70
 80039b0:	4b74      	ldr	r3, [pc, #464]	; (8003b84 <HAL_RCC_OscConfig+0x4d8>)
 80039b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039b4:	4a73      	ldr	r2, [pc, #460]	; (8003b84 <HAL_RCC_OscConfig+0x4d8>)
 80039b6:	f043 0301 	orr.w	r3, r3, #1
 80039ba:	6713      	str	r3, [r2, #112]	; 0x70
 80039bc:	e00b      	b.n	80039d6 <HAL_RCC_OscConfig+0x32a>
 80039be:	4b71      	ldr	r3, [pc, #452]	; (8003b84 <HAL_RCC_OscConfig+0x4d8>)
 80039c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039c2:	4a70      	ldr	r2, [pc, #448]	; (8003b84 <HAL_RCC_OscConfig+0x4d8>)
 80039c4:	f023 0301 	bic.w	r3, r3, #1
 80039c8:	6713      	str	r3, [r2, #112]	; 0x70
 80039ca:	4b6e      	ldr	r3, [pc, #440]	; (8003b84 <HAL_RCC_OscConfig+0x4d8>)
 80039cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039ce:	4a6d      	ldr	r2, [pc, #436]	; (8003b84 <HAL_RCC_OscConfig+0x4d8>)
 80039d0:	f023 0304 	bic.w	r3, r3, #4
 80039d4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	689b      	ldr	r3, [r3, #8]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d015      	beq.n	8003a0a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039de:	f7fe fb6b 	bl	80020b8 <HAL_GetTick>
 80039e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039e4:	e00a      	b.n	80039fc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80039e6:	f7fe fb67 	bl	80020b8 <HAL_GetTick>
 80039ea:	4602      	mov	r2, r0
 80039ec:	693b      	ldr	r3, [r7, #16]
 80039ee:	1ad3      	subs	r3, r2, r3
 80039f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d901      	bls.n	80039fc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80039f8:	2303      	movs	r3, #3
 80039fa:	e0bc      	b.n	8003b76 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039fc:	4b61      	ldr	r3, [pc, #388]	; (8003b84 <HAL_RCC_OscConfig+0x4d8>)
 80039fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a00:	f003 0302 	and.w	r3, r3, #2
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d0ee      	beq.n	80039e6 <HAL_RCC_OscConfig+0x33a>
 8003a08:	e014      	b.n	8003a34 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a0a:	f7fe fb55 	bl	80020b8 <HAL_GetTick>
 8003a0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a10:	e00a      	b.n	8003a28 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a12:	f7fe fb51 	bl	80020b8 <HAL_GetTick>
 8003a16:	4602      	mov	r2, r0
 8003a18:	693b      	ldr	r3, [r7, #16]
 8003a1a:	1ad3      	subs	r3, r2, r3
 8003a1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d901      	bls.n	8003a28 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003a24:	2303      	movs	r3, #3
 8003a26:	e0a6      	b.n	8003b76 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a28:	4b56      	ldr	r3, [pc, #344]	; (8003b84 <HAL_RCC_OscConfig+0x4d8>)
 8003a2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a2c:	f003 0302 	and.w	r3, r3, #2
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d1ee      	bne.n	8003a12 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003a34:	7dfb      	ldrb	r3, [r7, #23]
 8003a36:	2b01      	cmp	r3, #1
 8003a38:	d105      	bne.n	8003a46 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a3a:	4b52      	ldr	r3, [pc, #328]	; (8003b84 <HAL_RCC_OscConfig+0x4d8>)
 8003a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a3e:	4a51      	ldr	r2, [pc, #324]	; (8003b84 <HAL_RCC_OscConfig+0x4d8>)
 8003a40:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a44:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	699b      	ldr	r3, [r3, #24]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	f000 8092 	beq.w	8003b74 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003a50:	4b4c      	ldr	r3, [pc, #304]	; (8003b84 <HAL_RCC_OscConfig+0x4d8>)
 8003a52:	689b      	ldr	r3, [r3, #8]
 8003a54:	f003 030c 	and.w	r3, r3, #12
 8003a58:	2b08      	cmp	r3, #8
 8003a5a:	d05c      	beq.n	8003b16 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	699b      	ldr	r3, [r3, #24]
 8003a60:	2b02      	cmp	r3, #2
 8003a62:	d141      	bne.n	8003ae8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a64:	4b48      	ldr	r3, [pc, #288]	; (8003b88 <HAL_RCC_OscConfig+0x4dc>)
 8003a66:	2200      	movs	r2, #0
 8003a68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a6a:	f7fe fb25 	bl	80020b8 <HAL_GetTick>
 8003a6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a70:	e008      	b.n	8003a84 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a72:	f7fe fb21 	bl	80020b8 <HAL_GetTick>
 8003a76:	4602      	mov	r2, r0
 8003a78:	693b      	ldr	r3, [r7, #16]
 8003a7a:	1ad3      	subs	r3, r2, r3
 8003a7c:	2b02      	cmp	r3, #2
 8003a7e:	d901      	bls.n	8003a84 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003a80:	2303      	movs	r3, #3
 8003a82:	e078      	b.n	8003b76 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a84:	4b3f      	ldr	r3, [pc, #252]	; (8003b84 <HAL_RCC_OscConfig+0x4d8>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d1f0      	bne.n	8003a72 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	69da      	ldr	r2, [r3, #28]
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6a1b      	ldr	r3, [r3, #32]
 8003a98:	431a      	orrs	r2, r3
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a9e:	019b      	lsls	r3, r3, #6
 8003aa0:	431a      	orrs	r2, r3
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aa6:	085b      	lsrs	r3, r3, #1
 8003aa8:	3b01      	subs	r3, #1
 8003aaa:	041b      	lsls	r3, r3, #16
 8003aac:	431a      	orrs	r2, r3
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ab2:	061b      	lsls	r3, r3, #24
 8003ab4:	4933      	ldr	r1, [pc, #204]	; (8003b84 <HAL_RCC_OscConfig+0x4d8>)
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003aba:	4b33      	ldr	r3, [pc, #204]	; (8003b88 <HAL_RCC_OscConfig+0x4dc>)
 8003abc:	2201      	movs	r2, #1
 8003abe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ac0:	f7fe fafa 	bl	80020b8 <HAL_GetTick>
 8003ac4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ac6:	e008      	b.n	8003ada <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ac8:	f7fe faf6 	bl	80020b8 <HAL_GetTick>
 8003acc:	4602      	mov	r2, r0
 8003ace:	693b      	ldr	r3, [r7, #16]
 8003ad0:	1ad3      	subs	r3, r2, r3
 8003ad2:	2b02      	cmp	r3, #2
 8003ad4:	d901      	bls.n	8003ada <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003ad6:	2303      	movs	r3, #3
 8003ad8:	e04d      	b.n	8003b76 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ada:	4b2a      	ldr	r3, [pc, #168]	; (8003b84 <HAL_RCC_OscConfig+0x4d8>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d0f0      	beq.n	8003ac8 <HAL_RCC_OscConfig+0x41c>
 8003ae6:	e045      	b.n	8003b74 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ae8:	4b27      	ldr	r3, [pc, #156]	; (8003b88 <HAL_RCC_OscConfig+0x4dc>)
 8003aea:	2200      	movs	r2, #0
 8003aec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003aee:	f7fe fae3 	bl	80020b8 <HAL_GetTick>
 8003af2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003af4:	e008      	b.n	8003b08 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003af6:	f7fe fadf 	bl	80020b8 <HAL_GetTick>
 8003afa:	4602      	mov	r2, r0
 8003afc:	693b      	ldr	r3, [r7, #16]
 8003afe:	1ad3      	subs	r3, r2, r3
 8003b00:	2b02      	cmp	r3, #2
 8003b02:	d901      	bls.n	8003b08 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003b04:	2303      	movs	r3, #3
 8003b06:	e036      	b.n	8003b76 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b08:	4b1e      	ldr	r3, [pc, #120]	; (8003b84 <HAL_RCC_OscConfig+0x4d8>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d1f0      	bne.n	8003af6 <HAL_RCC_OscConfig+0x44a>
 8003b14:	e02e      	b.n	8003b74 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	699b      	ldr	r3, [r3, #24]
 8003b1a:	2b01      	cmp	r3, #1
 8003b1c:	d101      	bne.n	8003b22 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003b1e:	2301      	movs	r3, #1
 8003b20:	e029      	b.n	8003b76 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003b22:	4b18      	ldr	r3, [pc, #96]	; (8003b84 <HAL_RCC_OscConfig+0x4d8>)
 8003b24:	685b      	ldr	r3, [r3, #4]
 8003b26:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	69db      	ldr	r3, [r3, #28]
 8003b32:	429a      	cmp	r2, r3
 8003b34:	d11c      	bne.n	8003b70 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b40:	429a      	cmp	r2, r3
 8003b42:	d115      	bne.n	8003b70 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003b44:	68fa      	ldr	r2, [r7, #12]
 8003b46:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003b4a:	4013      	ands	r3, r2
 8003b4c:	687a      	ldr	r2, [r7, #4]
 8003b4e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003b50:	4293      	cmp	r3, r2
 8003b52:	d10d      	bne.n	8003b70 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003b5e:	429a      	cmp	r2, r3
 8003b60:	d106      	bne.n	8003b70 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003b6c:	429a      	cmp	r2, r3
 8003b6e:	d001      	beq.n	8003b74 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8003b70:	2301      	movs	r3, #1
 8003b72:	e000      	b.n	8003b76 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8003b74:	2300      	movs	r3, #0
}
 8003b76:	4618      	mov	r0, r3
 8003b78:	3718      	adds	r7, #24
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	bd80      	pop	{r7, pc}
 8003b7e:	bf00      	nop
 8003b80:	40007000 	.word	0x40007000
 8003b84:	40023800 	.word	0x40023800
 8003b88:	42470060 	.word	0x42470060

08003b8c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	b084      	sub	sp, #16
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
 8003b94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d101      	bne.n	8003ba0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003b9c:	2301      	movs	r3, #1
 8003b9e:	e0cc      	b.n	8003d3a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003ba0:	4b68      	ldr	r3, [pc, #416]	; (8003d44 <HAL_RCC_ClockConfig+0x1b8>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f003 030f 	and.w	r3, r3, #15
 8003ba8:	683a      	ldr	r2, [r7, #0]
 8003baa:	429a      	cmp	r2, r3
 8003bac:	d90c      	bls.n	8003bc8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bae:	4b65      	ldr	r3, [pc, #404]	; (8003d44 <HAL_RCC_ClockConfig+0x1b8>)
 8003bb0:	683a      	ldr	r2, [r7, #0]
 8003bb2:	b2d2      	uxtb	r2, r2
 8003bb4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bb6:	4b63      	ldr	r3, [pc, #396]	; (8003d44 <HAL_RCC_ClockConfig+0x1b8>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f003 030f 	and.w	r3, r3, #15
 8003bbe:	683a      	ldr	r2, [r7, #0]
 8003bc0:	429a      	cmp	r2, r3
 8003bc2:	d001      	beq.n	8003bc8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003bc4:	2301      	movs	r3, #1
 8003bc6:	e0b8      	b.n	8003d3a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f003 0302 	and.w	r3, r3, #2
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d020      	beq.n	8003c16 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f003 0304 	and.w	r3, r3, #4
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d005      	beq.n	8003bec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003be0:	4b59      	ldr	r3, [pc, #356]	; (8003d48 <HAL_RCC_ClockConfig+0x1bc>)
 8003be2:	689b      	ldr	r3, [r3, #8]
 8003be4:	4a58      	ldr	r2, [pc, #352]	; (8003d48 <HAL_RCC_ClockConfig+0x1bc>)
 8003be6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003bea:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f003 0308 	and.w	r3, r3, #8
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d005      	beq.n	8003c04 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003bf8:	4b53      	ldr	r3, [pc, #332]	; (8003d48 <HAL_RCC_ClockConfig+0x1bc>)
 8003bfa:	689b      	ldr	r3, [r3, #8]
 8003bfc:	4a52      	ldr	r2, [pc, #328]	; (8003d48 <HAL_RCC_ClockConfig+0x1bc>)
 8003bfe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003c02:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c04:	4b50      	ldr	r3, [pc, #320]	; (8003d48 <HAL_RCC_ClockConfig+0x1bc>)
 8003c06:	689b      	ldr	r3, [r3, #8]
 8003c08:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	689b      	ldr	r3, [r3, #8]
 8003c10:	494d      	ldr	r1, [pc, #308]	; (8003d48 <HAL_RCC_ClockConfig+0x1bc>)
 8003c12:	4313      	orrs	r3, r2
 8003c14:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f003 0301 	and.w	r3, r3, #1
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d044      	beq.n	8003cac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	685b      	ldr	r3, [r3, #4]
 8003c26:	2b01      	cmp	r3, #1
 8003c28:	d107      	bne.n	8003c3a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c2a:	4b47      	ldr	r3, [pc, #284]	; (8003d48 <HAL_RCC_ClockConfig+0x1bc>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d119      	bne.n	8003c6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c36:	2301      	movs	r3, #1
 8003c38:	e07f      	b.n	8003d3a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	685b      	ldr	r3, [r3, #4]
 8003c3e:	2b02      	cmp	r3, #2
 8003c40:	d003      	beq.n	8003c4a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003c46:	2b03      	cmp	r3, #3
 8003c48:	d107      	bne.n	8003c5a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c4a:	4b3f      	ldr	r3, [pc, #252]	; (8003d48 <HAL_RCC_ClockConfig+0x1bc>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d109      	bne.n	8003c6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c56:	2301      	movs	r3, #1
 8003c58:	e06f      	b.n	8003d3a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c5a:	4b3b      	ldr	r3, [pc, #236]	; (8003d48 <HAL_RCC_ClockConfig+0x1bc>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f003 0302 	and.w	r3, r3, #2
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d101      	bne.n	8003c6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c66:	2301      	movs	r3, #1
 8003c68:	e067      	b.n	8003d3a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003c6a:	4b37      	ldr	r3, [pc, #220]	; (8003d48 <HAL_RCC_ClockConfig+0x1bc>)
 8003c6c:	689b      	ldr	r3, [r3, #8]
 8003c6e:	f023 0203 	bic.w	r2, r3, #3
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	685b      	ldr	r3, [r3, #4]
 8003c76:	4934      	ldr	r1, [pc, #208]	; (8003d48 <HAL_RCC_ClockConfig+0x1bc>)
 8003c78:	4313      	orrs	r3, r2
 8003c7a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003c7c:	f7fe fa1c 	bl	80020b8 <HAL_GetTick>
 8003c80:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c82:	e00a      	b.n	8003c9a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c84:	f7fe fa18 	bl	80020b8 <HAL_GetTick>
 8003c88:	4602      	mov	r2, r0
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	1ad3      	subs	r3, r2, r3
 8003c8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d901      	bls.n	8003c9a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003c96:	2303      	movs	r3, #3
 8003c98:	e04f      	b.n	8003d3a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c9a:	4b2b      	ldr	r3, [pc, #172]	; (8003d48 <HAL_RCC_ClockConfig+0x1bc>)
 8003c9c:	689b      	ldr	r3, [r3, #8]
 8003c9e:	f003 020c 	and.w	r2, r3, #12
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	685b      	ldr	r3, [r3, #4]
 8003ca6:	009b      	lsls	r3, r3, #2
 8003ca8:	429a      	cmp	r2, r3
 8003caa:	d1eb      	bne.n	8003c84 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003cac:	4b25      	ldr	r3, [pc, #148]	; (8003d44 <HAL_RCC_ClockConfig+0x1b8>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f003 030f 	and.w	r3, r3, #15
 8003cb4:	683a      	ldr	r2, [r7, #0]
 8003cb6:	429a      	cmp	r2, r3
 8003cb8:	d20c      	bcs.n	8003cd4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cba:	4b22      	ldr	r3, [pc, #136]	; (8003d44 <HAL_RCC_ClockConfig+0x1b8>)
 8003cbc:	683a      	ldr	r2, [r7, #0]
 8003cbe:	b2d2      	uxtb	r2, r2
 8003cc0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cc2:	4b20      	ldr	r3, [pc, #128]	; (8003d44 <HAL_RCC_ClockConfig+0x1b8>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f003 030f 	and.w	r3, r3, #15
 8003cca:	683a      	ldr	r2, [r7, #0]
 8003ccc:	429a      	cmp	r2, r3
 8003cce:	d001      	beq.n	8003cd4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003cd0:	2301      	movs	r3, #1
 8003cd2:	e032      	b.n	8003d3a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f003 0304 	and.w	r3, r3, #4
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d008      	beq.n	8003cf2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ce0:	4b19      	ldr	r3, [pc, #100]	; (8003d48 <HAL_RCC_ClockConfig+0x1bc>)
 8003ce2:	689b      	ldr	r3, [r3, #8]
 8003ce4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	68db      	ldr	r3, [r3, #12]
 8003cec:	4916      	ldr	r1, [pc, #88]	; (8003d48 <HAL_RCC_ClockConfig+0x1bc>)
 8003cee:	4313      	orrs	r3, r2
 8003cf0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f003 0308 	and.w	r3, r3, #8
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d009      	beq.n	8003d12 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003cfe:	4b12      	ldr	r3, [pc, #72]	; (8003d48 <HAL_RCC_ClockConfig+0x1bc>)
 8003d00:	689b      	ldr	r3, [r3, #8]
 8003d02:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	691b      	ldr	r3, [r3, #16]
 8003d0a:	00db      	lsls	r3, r3, #3
 8003d0c:	490e      	ldr	r1, [pc, #56]	; (8003d48 <HAL_RCC_ClockConfig+0x1bc>)
 8003d0e:	4313      	orrs	r3, r2
 8003d10:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003d12:	f000 f821 	bl	8003d58 <HAL_RCC_GetSysClockFreq>
 8003d16:	4601      	mov	r1, r0
 8003d18:	4b0b      	ldr	r3, [pc, #44]	; (8003d48 <HAL_RCC_ClockConfig+0x1bc>)
 8003d1a:	689b      	ldr	r3, [r3, #8]
 8003d1c:	091b      	lsrs	r3, r3, #4
 8003d1e:	f003 030f 	and.w	r3, r3, #15
 8003d22:	4a0a      	ldr	r2, [pc, #40]	; (8003d4c <HAL_RCC_ClockConfig+0x1c0>)
 8003d24:	5cd3      	ldrb	r3, [r2, r3]
 8003d26:	fa21 f303 	lsr.w	r3, r1, r3
 8003d2a:	4a09      	ldr	r2, [pc, #36]	; (8003d50 <HAL_RCC_ClockConfig+0x1c4>)
 8003d2c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003d2e:	4b09      	ldr	r3, [pc, #36]	; (8003d54 <HAL_RCC_ClockConfig+0x1c8>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	4618      	mov	r0, r3
 8003d34:	f7fe f97c 	bl	8002030 <HAL_InitTick>

  return HAL_OK;
 8003d38:	2300      	movs	r3, #0
}
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	3710      	adds	r7, #16
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	bd80      	pop	{r7, pc}
 8003d42:	bf00      	nop
 8003d44:	40023c00 	.word	0x40023c00
 8003d48:	40023800 	.word	0x40023800
 8003d4c:	080073ec 	.word	0x080073ec
 8003d50:	20000008 	.word	0x20000008
 8003d54:	2000000c 	.word	0x2000000c

08003d58 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d5a:	b085      	sub	sp, #20
 8003d5c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003d5e:	2300      	movs	r3, #0
 8003d60:	607b      	str	r3, [r7, #4]
 8003d62:	2300      	movs	r3, #0
 8003d64:	60fb      	str	r3, [r7, #12]
 8003d66:	2300      	movs	r3, #0
 8003d68:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003d6e:	4b50      	ldr	r3, [pc, #320]	; (8003eb0 <HAL_RCC_GetSysClockFreq+0x158>)
 8003d70:	689b      	ldr	r3, [r3, #8]
 8003d72:	f003 030c 	and.w	r3, r3, #12
 8003d76:	2b04      	cmp	r3, #4
 8003d78:	d007      	beq.n	8003d8a <HAL_RCC_GetSysClockFreq+0x32>
 8003d7a:	2b08      	cmp	r3, #8
 8003d7c:	d008      	beq.n	8003d90 <HAL_RCC_GetSysClockFreq+0x38>
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	f040 808d 	bne.w	8003e9e <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003d84:	4b4b      	ldr	r3, [pc, #300]	; (8003eb4 <HAL_RCC_GetSysClockFreq+0x15c>)
 8003d86:	60bb      	str	r3, [r7, #8]
       break;
 8003d88:	e08c      	b.n	8003ea4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003d8a:	4b4b      	ldr	r3, [pc, #300]	; (8003eb8 <HAL_RCC_GetSysClockFreq+0x160>)
 8003d8c:	60bb      	str	r3, [r7, #8]
      break;
 8003d8e:	e089      	b.n	8003ea4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003d90:	4b47      	ldr	r3, [pc, #284]	; (8003eb0 <HAL_RCC_GetSysClockFreq+0x158>)
 8003d92:	685b      	ldr	r3, [r3, #4]
 8003d94:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003d98:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003d9a:	4b45      	ldr	r3, [pc, #276]	; (8003eb0 <HAL_RCC_GetSysClockFreq+0x158>)
 8003d9c:	685b      	ldr	r3, [r3, #4]
 8003d9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d023      	beq.n	8003dee <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003da6:	4b42      	ldr	r3, [pc, #264]	; (8003eb0 <HAL_RCC_GetSysClockFreq+0x158>)
 8003da8:	685b      	ldr	r3, [r3, #4]
 8003daa:	099b      	lsrs	r3, r3, #6
 8003dac:	f04f 0400 	mov.w	r4, #0
 8003db0:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003db4:	f04f 0200 	mov.w	r2, #0
 8003db8:	ea03 0501 	and.w	r5, r3, r1
 8003dbc:	ea04 0602 	and.w	r6, r4, r2
 8003dc0:	4a3d      	ldr	r2, [pc, #244]	; (8003eb8 <HAL_RCC_GetSysClockFreq+0x160>)
 8003dc2:	fb02 f106 	mul.w	r1, r2, r6
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	fb02 f205 	mul.w	r2, r2, r5
 8003dcc:	440a      	add	r2, r1
 8003dce:	493a      	ldr	r1, [pc, #232]	; (8003eb8 <HAL_RCC_GetSysClockFreq+0x160>)
 8003dd0:	fba5 0101 	umull	r0, r1, r5, r1
 8003dd4:	1853      	adds	r3, r2, r1
 8003dd6:	4619      	mov	r1, r3
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	f04f 0400 	mov.w	r4, #0
 8003dde:	461a      	mov	r2, r3
 8003de0:	4623      	mov	r3, r4
 8003de2:	f7fc fee9 	bl	8000bb8 <__aeabi_uldivmod>
 8003de6:	4603      	mov	r3, r0
 8003de8:	460c      	mov	r4, r1
 8003dea:	60fb      	str	r3, [r7, #12]
 8003dec:	e049      	b.n	8003e82 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003dee:	4b30      	ldr	r3, [pc, #192]	; (8003eb0 <HAL_RCC_GetSysClockFreq+0x158>)
 8003df0:	685b      	ldr	r3, [r3, #4]
 8003df2:	099b      	lsrs	r3, r3, #6
 8003df4:	f04f 0400 	mov.w	r4, #0
 8003df8:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003dfc:	f04f 0200 	mov.w	r2, #0
 8003e00:	ea03 0501 	and.w	r5, r3, r1
 8003e04:	ea04 0602 	and.w	r6, r4, r2
 8003e08:	4629      	mov	r1, r5
 8003e0a:	4632      	mov	r2, r6
 8003e0c:	f04f 0300 	mov.w	r3, #0
 8003e10:	f04f 0400 	mov.w	r4, #0
 8003e14:	0154      	lsls	r4, r2, #5
 8003e16:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003e1a:	014b      	lsls	r3, r1, #5
 8003e1c:	4619      	mov	r1, r3
 8003e1e:	4622      	mov	r2, r4
 8003e20:	1b49      	subs	r1, r1, r5
 8003e22:	eb62 0206 	sbc.w	r2, r2, r6
 8003e26:	f04f 0300 	mov.w	r3, #0
 8003e2a:	f04f 0400 	mov.w	r4, #0
 8003e2e:	0194      	lsls	r4, r2, #6
 8003e30:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003e34:	018b      	lsls	r3, r1, #6
 8003e36:	1a5b      	subs	r3, r3, r1
 8003e38:	eb64 0402 	sbc.w	r4, r4, r2
 8003e3c:	f04f 0100 	mov.w	r1, #0
 8003e40:	f04f 0200 	mov.w	r2, #0
 8003e44:	00e2      	lsls	r2, r4, #3
 8003e46:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003e4a:	00d9      	lsls	r1, r3, #3
 8003e4c:	460b      	mov	r3, r1
 8003e4e:	4614      	mov	r4, r2
 8003e50:	195b      	adds	r3, r3, r5
 8003e52:	eb44 0406 	adc.w	r4, r4, r6
 8003e56:	f04f 0100 	mov.w	r1, #0
 8003e5a:	f04f 0200 	mov.w	r2, #0
 8003e5e:	02a2      	lsls	r2, r4, #10
 8003e60:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003e64:	0299      	lsls	r1, r3, #10
 8003e66:	460b      	mov	r3, r1
 8003e68:	4614      	mov	r4, r2
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	4621      	mov	r1, r4
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	f04f 0400 	mov.w	r4, #0
 8003e74:	461a      	mov	r2, r3
 8003e76:	4623      	mov	r3, r4
 8003e78:	f7fc fe9e 	bl	8000bb8 <__aeabi_uldivmod>
 8003e7c:	4603      	mov	r3, r0
 8003e7e:	460c      	mov	r4, r1
 8003e80:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003e82:	4b0b      	ldr	r3, [pc, #44]	; (8003eb0 <HAL_RCC_GetSysClockFreq+0x158>)
 8003e84:	685b      	ldr	r3, [r3, #4]
 8003e86:	0c1b      	lsrs	r3, r3, #16
 8003e88:	f003 0303 	and.w	r3, r3, #3
 8003e8c:	3301      	adds	r3, #1
 8003e8e:	005b      	lsls	r3, r3, #1
 8003e90:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003e92:	68fa      	ldr	r2, [r7, #12]
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e9a:	60bb      	str	r3, [r7, #8]
      break;
 8003e9c:	e002      	b.n	8003ea4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003e9e:	4b05      	ldr	r3, [pc, #20]	; (8003eb4 <HAL_RCC_GetSysClockFreq+0x15c>)
 8003ea0:	60bb      	str	r3, [r7, #8]
      break;
 8003ea2:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003ea4:	68bb      	ldr	r3, [r7, #8]
}
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	3714      	adds	r7, #20
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003eae:	bf00      	nop
 8003eb0:	40023800 	.word	0x40023800
 8003eb4:	00f42400 	.word	0x00f42400
 8003eb8:	017d7840 	.word	0x017d7840

08003ebc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ebc:	b480      	push	{r7}
 8003ebe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ec0:	4b03      	ldr	r3, [pc, #12]	; (8003ed0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003ec2:	681b      	ldr	r3, [r3, #0]
}
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ecc:	4770      	bx	lr
 8003ece:	bf00      	nop
 8003ed0:	20000008 	.word	0x20000008

08003ed4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003ed8:	f7ff fff0 	bl	8003ebc <HAL_RCC_GetHCLKFreq>
 8003edc:	4601      	mov	r1, r0
 8003ede:	4b05      	ldr	r3, [pc, #20]	; (8003ef4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003ee0:	689b      	ldr	r3, [r3, #8]
 8003ee2:	0a9b      	lsrs	r3, r3, #10
 8003ee4:	f003 0307 	and.w	r3, r3, #7
 8003ee8:	4a03      	ldr	r2, [pc, #12]	; (8003ef8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003eea:	5cd3      	ldrb	r3, [r2, r3]
 8003eec:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	bd80      	pop	{r7, pc}
 8003ef4:	40023800 	.word	0x40023800
 8003ef8:	080073fc 	.word	0x080073fc

08003efc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003f00:	f7ff ffdc 	bl	8003ebc <HAL_RCC_GetHCLKFreq>
 8003f04:	4601      	mov	r1, r0
 8003f06:	4b05      	ldr	r3, [pc, #20]	; (8003f1c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003f08:	689b      	ldr	r3, [r3, #8]
 8003f0a:	0b5b      	lsrs	r3, r3, #13
 8003f0c:	f003 0307 	and.w	r3, r3, #7
 8003f10:	4a03      	ldr	r2, [pc, #12]	; (8003f20 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003f12:	5cd3      	ldrb	r3, [r2, r3]
 8003f14:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003f18:	4618      	mov	r0, r3
 8003f1a:	bd80      	pop	{r7, pc}
 8003f1c:	40023800 	.word	0x40023800
 8003f20:	080073fc 	.word	0x080073fc

08003f24 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b082      	sub	sp, #8
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d101      	bne.n	8003f36 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f32:	2301      	movs	r3, #1
 8003f34:	e03f      	b.n	8003fb6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003f3c:	b2db      	uxtb	r3, r3
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d106      	bne.n	8003f50 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	2200      	movs	r2, #0
 8003f46:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003f4a:	6878      	ldr	r0, [r7, #4]
 8003f4c:	f7fd ff5e 	bl	8001e0c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2224      	movs	r2, #36	; 0x24
 8003f54:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	68da      	ldr	r2, [r3, #12]
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003f66:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003f68:	6878      	ldr	r0, [r7, #4]
 8003f6a:	f000 f90b 	bl	8004184 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	691a      	ldr	r2, [r3, #16]
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003f7c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	695a      	ldr	r2, [r3, #20]
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003f8c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	68da      	ldr	r2, [r3, #12]
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003f9c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2220      	movs	r2, #32
 8003fa8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2220      	movs	r2, #32
 8003fb0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003fb4:	2300      	movs	r3, #0
}
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	3708      	adds	r7, #8
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	bd80      	pop	{r7, pc}

08003fbe <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003fbe:	b580      	push	{r7, lr}
 8003fc0:	b088      	sub	sp, #32
 8003fc2:	af02      	add	r7, sp, #8
 8003fc4:	60f8      	str	r0, [r7, #12]
 8003fc6:	60b9      	str	r1, [r7, #8]
 8003fc8:	603b      	str	r3, [r7, #0]
 8003fca:	4613      	mov	r3, r2
 8003fcc:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8003fce:	2300      	movs	r3, #0
 8003fd0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003fd8:	b2db      	uxtb	r3, r3
 8003fda:	2b20      	cmp	r3, #32
 8003fdc:	f040 8083 	bne.w	80040e6 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8003fe0:	68bb      	ldr	r3, [r7, #8]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d002      	beq.n	8003fec <HAL_UART_Transmit+0x2e>
 8003fe6:	88fb      	ldrh	r3, [r7, #6]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d101      	bne.n	8003ff0 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8003fec:	2301      	movs	r3, #1
 8003fee:	e07b      	b.n	80040e8 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003ff6:	2b01      	cmp	r3, #1
 8003ff8:	d101      	bne.n	8003ffe <HAL_UART_Transmit+0x40>
 8003ffa:	2302      	movs	r3, #2
 8003ffc:	e074      	b.n	80040e8 <HAL_UART_Transmit+0x12a>
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	2201      	movs	r2, #1
 8004002:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	2200      	movs	r2, #0
 800400a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	2221      	movs	r2, #33	; 0x21
 8004010:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8004014:	f7fe f850 	bl	80020b8 <HAL_GetTick>
 8004018:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	88fa      	ldrh	r2, [r7, #6]
 800401e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	88fa      	ldrh	r2, [r7, #6]
 8004024:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	2200      	movs	r2, #0
 800402a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800402e:	e042      	b.n	80040b6 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004034:	b29b      	uxth	r3, r3
 8004036:	3b01      	subs	r3, #1
 8004038:	b29a      	uxth	r2, r3
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	689b      	ldr	r3, [r3, #8]
 8004042:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004046:	d122      	bne.n	800408e <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	9300      	str	r3, [sp, #0]
 800404c:	697b      	ldr	r3, [r7, #20]
 800404e:	2200      	movs	r2, #0
 8004050:	2180      	movs	r1, #128	; 0x80
 8004052:	68f8      	ldr	r0, [r7, #12]
 8004054:	f000 f84c 	bl	80040f0 <UART_WaitOnFlagUntilTimeout>
 8004058:	4603      	mov	r3, r0
 800405a:	2b00      	cmp	r3, #0
 800405c:	d001      	beq.n	8004062 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 800405e:	2303      	movs	r3, #3
 8004060:	e042      	b.n	80040e8 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8004062:	68bb      	ldr	r3, [r7, #8]
 8004064:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8004066:	693b      	ldr	r3, [r7, #16]
 8004068:	881b      	ldrh	r3, [r3, #0]
 800406a:	461a      	mov	r2, r3
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004074:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	691b      	ldr	r3, [r3, #16]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d103      	bne.n	8004086 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 800407e:	68bb      	ldr	r3, [r7, #8]
 8004080:	3302      	adds	r3, #2
 8004082:	60bb      	str	r3, [r7, #8]
 8004084:	e017      	b.n	80040b6 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8004086:	68bb      	ldr	r3, [r7, #8]
 8004088:	3301      	adds	r3, #1
 800408a:	60bb      	str	r3, [r7, #8]
 800408c:	e013      	b.n	80040b6 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	9300      	str	r3, [sp, #0]
 8004092:	697b      	ldr	r3, [r7, #20]
 8004094:	2200      	movs	r2, #0
 8004096:	2180      	movs	r1, #128	; 0x80
 8004098:	68f8      	ldr	r0, [r7, #12]
 800409a:	f000 f829 	bl	80040f0 <UART_WaitOnFlagUntilTimeout>
 800409e:	4603      	mov	r3, r0
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d001      	beq.n	80040a8 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 80040a4:	2303      	movs	r3, #3
 80040a6:	e01f      	b.n	80040e8 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80040a8:	68bb      	ldr	r3, [r7, #8]
 80040aa:	1c5a      	adds	r2, r3, #1
 80040ac:	60ba      	str	r2, [r7, #8]
 80040ae:	781a      	ldrb	r2, [r3, #0]
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80040ba:	b29b      	uxth	r3, r3
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d1b7      	bne.n	8004030 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	9300      	str	r3, [sp, #0]
 80040c4:	697b      	ldr	r3, [r7, #20]
 80040c6:	2200      	movs	r2, #0
 80040c8:	2140      	movs	r1, #64	; 0x40
 80040ca:	68f8      	ldr	r0, [r7, #12]
 80040cc:	f000 f810 	bl	80040f0 <UART_WaitOnFlagUntilTimeout>
 80040d0:	4603      	mov	r3, r0
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d001      	beq.n	80040da <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 80040d6:	2303      	movs	r3, #3
 80040d8:	e006      	b.n	80040e8 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	2220      	movs	r2, #32
 80040de:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80040e2:	2300      	movs	r3, #0
 80040e4:	e000      	b.n	80040e8 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80040e6:	2302      	movs	r3, #2
  }
}
 80040e8:	4618      	mov	r0, r3
 80040ea:	3718      	adds	r7, #24
 80040ec:	46bd      	mov	sp, r7
 80040ee:	bd80      	pop	{r7, pc}

080040f0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b084      	sub	sp, #16
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	60f8      	str	r0, [r7, #12]
 80040f8:	60b9      	str	r1, [r7, #8]
 80040fa:	603b      	str	r3, [r7, #0]
 80040fc:	4613      	mov	r3, r2
 80040fe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004100:	e02c      	b.n	800415c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004102:	69bb      	ldr	r3, [r7, #24]
 8004104:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004108:	d028      	beq.n	800415c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800410a:	69bb      	ldr	r3, [r7, #24]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d007      	beq.n	8004120 <UART_WaitOnFlagUntilTimeout+0x30>
 8004110:	f7fd ffd2 	bl	80020b8 <HAL_GetTick>
 8004114:	4602      	mov	r2, r0
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	1ad3      	subs	r3, r2, r3
 800411a:	69ba      	ldr	r2, [r7, #24]
 800411c:	429a      	cmp	r2, r3
 800411e:	d21d      	bcs.n	800415c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	68da      	ldr	r2, [r3, #12]
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800412e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	695a      	ldr	r2, [r3, #20]
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f022 0201 	bic.w	r2, r2, #1
 800413e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	2220      	movs	r2, #32
 8004144:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	2220      	movs	r2, #32
 800414c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	2200      	movs	r2, #0
 8004154:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8004158:	2303      	movs	r3, #3
 800415a:	e00f      	b.n	800417c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	681a      	ldr	r2, [r3, #0]
 8004162:	68bb      	ldr	r3, [r7, #8]
 8004164:	4013      	ands	r3, r2
 8004166:	68ba      	ldr	r2, [r7, #8]
 8004168:	429a      	cmp	r2, r3
 800416a:	bf0c      	ite	eq
 800416c:	2301      	moveq	r3, #1
 800416e:	2300      	movne	r3, #0
 8004170:	b2db      	uxtb	r3, r3
 8004172:	461a      	mov	r2, r3
 8004174:	79fb      	ldrb	r3, [r7, #7]
 8004176:	429a      	cmp	r2, r3
 8004178:	d0c3      	beq.n	8004102 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800417a:	2300      	movs	r3, #0
}
 800417c:	4618      	mov	r0, r3
 800417e:	3710      	adds	r7, #16
 8004180:	46bd      	mov	sp, r7
 8004182:	bd80      	pop	{r7, pc}

08004184 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004184:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004188:	b085      	sub	sp, #20
 800418a:	af00      	add	r7, sp, #0
 800418c:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	691b      	ldr	r3, [r3, #16]
 8004194:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	68da      	ldr	r2, [r3, #12]
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	430a      	orrs	r2, r1
 80041a2:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	689a      	ldr	r2, [r3, #8]
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	691b      	ldr	r3, [r3, #16]
 80041ac:	431a      	orrs	r2, r3
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	695b      	ldr	r3, [r3, #20]
 80041b2:	431a      	orrs	r2, r3
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	69db      	ldr	r3, [r3, #28]
 80041b8:	4313      	orrs	r3, r2
 80041ba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	68db      	ldr	r3, [r3, #12]
 80041c2:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80041c6:	f023 030c 	bic.w	r3, r3, #12
 80041ca:	687a      	ldr	r2, [r7, #4]
 80041cc:	6812      	ldr	r2, [r2, #0]
 80041ce:	68f9      	ldr	r1, [r7, #12]
 80041d0:	430b      	orrs	r3, r1
 80041d2:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	695b      	ldr	r3, [r3, #20]
 80041da:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	699a      	ldr	r2, [r3, #24]
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	430a      	orrs	r2, r1
 80041e8:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	69db      	ldr	r3, [r3, #28]
 80041ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80041f2:	f040 818b 	bne.w	800450c <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	4ac1      	ldr	r2, [pc, #772]	; (8004500 <UART_SetConfig+0x37c>)
 80041fc:	4293      	cmp	r3, r2
 80041fe:	d005      	beq.n	800420c <UART_SetConfig+0x88>
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	4abf      	ldr	r2, [pc, #764]	; (8004504 <UART_SetConfig+0x380>)
 8004206:	4293      	cmp	r3, r2
 8004208:	f040 80bd 	bne.w	8004386 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800420c:	f7ff fe76 	bl	8003efc <HAL_RCC_GetPCLK2Freq>
 8004210:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004212:	68bb      	ldr	r3, [r7, #8]
 8004214:	461d      	mov	r5, r3
 8004216:	f04f 0600 	mov.w	r6, #0
 800421a:	46a8      	mov	r8, r5
 800421c:	46b1      	mov	r9, r6
 800421e:	eb18 0308 	adds.w	r3, r8, r8
 8004222:	eb49 0409 	adc.w	r4, r9, r9
 8004226:	4698      	mov	r8, r3
 8004228:	46a1      	mov	r9, r4
 800422a:	eb18 0805 	adds.w	r8, r8, r5
 800422e:	eb49 0906 	adc.w	r9, r9, r6
 8004232:	f04f 0100 	mov.w	r1, #0
 8004236:	f04f 0200 	mov.w	r2, #0
 800423a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800423e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004242:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004246:	4688      	mov	r8, r1
 8004248:	4691      	mov	r9, r2
 800424a:	eb18 0005 	adds.w	r0, r8, r5
 800424e:	eb49 0106 	adc.w	r1, r9, r6
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	685b      	ldr	r3, [r3, #4]
 8004256:	461d      	mov	r5, r3
 8004258:	f04f 0600 	mov.w	r6, #0
 800425c:	196b      	adds	r3, r5, r5
 800425e:	eb46 0406 	adc.w	r4, r6, r6
 8004262:	461a      	mov	r2, r3
 8004264:	4623      	mov	r3, r4
 8004266:	f7fc fca7 	bl	8000bb8 <__aeabi_uldivmod>
 800426a:	4603      	mov	r3, r0
 800426c:	460c      	mov	r4, r1
 800426e:	461a      	mov	r2, r3
 8004270:	4ba5      	ldr	r3, [pc, #660]	; (8004508 <UART_SetConfig+0x384>)
 8004272:	fba3 2302 	umull	r2, r3, r3, r2
 8004276:	095b      	lsrs	r3, r3, #5
 8004278:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800427c:	68bb      	ldr	r3, [r7, #8]
 800427e:	461d      	mov	r5, r3
 8004280:	f04f 0600 	mov.w	r6, #0
 8004284:	46a9      	mov	r9, r5
 8004286:	46b2      	mov	sl, r6
 8004288:	eb19 0309 	adds.w	r3, r9, r9
 800428c:	eb4a 040a 	adc.w	r4, sl, sl
 8004290:	4699      	mov	r9, r3
 8004292:	46a2      	mov	sl, r4
 8004294:	eb19 0905 	adds.w	r9, r9, r5
 8004298:	eb4a 0a06 	adc.w	sl, sl, r6
 800429c:	f04f 0100 	mov.w	r1, #0
 80042a0:	f04f 0200 	mov.w	r2, #0
 80042a4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80042a8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80042ac:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80042b0:	4689      	mov	r9, r1
 80042b2:	4692      	mov	sl, r2
 80042b4:	eb19 0005 	adds.w	r0, r9, r5
 80042b8:	eb4a 0106 	adc.w	r1, sl, r6
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	685b      	ldr	r3, [r3, #4]
 80042c0:	461d      	mov	r5, r3
 80042c2:	f04f 0600 	mov.w	r6, #0
 80042c6:	196b      	adds	r3, r5, r5
 80042c8:	eb46 0406 	adc.w	r4, r6, r6
 80042cc:	461a      	mov	r2, r3
 80042ce:	4623      	mov	r3, r4
 80042d0:	f7fc fc72 	bl	8000bb8 <__aeabi_uldivmod>
 80042d4:	4603      	mov	r3, r0
 80042d6:	460c      	mov	r4, r1
 80042d8:	461a      	mov	r2, r3
 80042da:	4b8b      	ldr	r3, [pc, #556]	; (8004508 <UART_SetConfig+0x384>)
 80042dc:	fba3 1302 	umull	r1, r3, r3, r2
 80042e0:	095b      	lsrs	r3, r3, #5
 80042e2:	2164      	movs	r1, #100	; 0x64
 80042e4:	fb01 f303 	mul.w	r3, r1, r3
 80042e8:	1ad3      	subs	r3, r2, r3
 80042ea:	00db      	lsls	r3, r3, #3
 80042ec:	3332      	adds	r3, #50	; 0x32
 80042ee:	4a86      	ldr	r2, [pc, #536]	; (8004508 <UART_SetConfig+0x384>)
 80042f0:	fba2 2303 	umull	r2, r3, r2, r3
 80042f4:	095b      	lsrs	r3, r3, #5
 80042f6:	005b      	lsls	r3, r3, #1
 80042f8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80042fc:	4498      	add	r8, r3
 80042fe:	68bb      	ldr	r3, [r7, #8]
 8004300:	461d      	mov	r5, r3
 8004302:	f04f 0600 	mov.w	r6, #0
 8004306:	46a9      	mov	r9, r5
 8004308:	46b2      	mov	sl, r6
 800430a:	eb19 0309 	adds.w	r3, r9, r9
 800430e:	eb4a 040a 	adc.w	r4, sl, sl
 8004312:	4699      	mov	r9, r3
 8004314:	46a2      	mov	sl, r4
 8004316:	eb19 0905 	adds.w	r9, r9, r5
 800431a:	eb4a 0a06 	adc.w	sl, sl, r6
 800431e:	f04f 0100 	mov.w	r1, #0
 8004322:	f04f 0200 	mov.w	r2, #0
 8004326:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800432a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800432e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004332:	4689      	mov	r9, r1
 8004334:	4692      	mov	sl, r2
 8004336:	eb19 0005 	adds.w	r0, r9, r5
 800433a:	eb4a 0106 	adc.w	r1, sl, r6
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	685b      	ldr	r3, [r3, #4]
 8004342:	461d      	mov	r5, r3
 8004344:	f04f 0600 	mov.w	r6, #0
 8004348:	196b      	adds	r3, r5, r5
 800434a:	eb46 0406 	adc.w	r4, r6, r6
 800434e:	461a      	mov	r2, r3
 8004350:	4623      	mov	r3, r4
 8004352:	f7fc fc31 	bl	8000bb8 <__aeabi_uldivmod>
 8004356:	4603      	mov	r3, r0
 8004358:	460c      	mov	r4, r1
 800435a:	461a      	mov	r2, r3
 800435c:	4b6a      	ldr	r3, [pc, #424]	; (8004508 <UART_SetConfig+0x384>)
 800435e:	fba3 1302 	umull	r1, r3, r3, r2
 8004362:	095b      	lsrs	r3, r3, #5
 8004364:	2164      	movs	r1, #100	; 0x64
 8004366:	fb01 f303 	mul.w	r3, r1, r3
 800436a:	1ad3      	subs	r3, r2, r3
 800436c:	00db      	lsls	r3, r3, #3
 800436e:	3332      	adds	r3, #50	; 0x32
 8004370:	4a65      	ldr	r2, [pc, #404]	; (8004508 <UART_SetConfig+0x384>)
 8004372:	fba2 2303 	umull	r2, r3, r2, r3
 8004376:	095b      	lsrs	r3, r3, #5
 8004378:	f003 0207 	and.w	r2, r3, #7
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	4442      	add	r2, r8
 8004382:	609a      	str	r2, [r3, #8]
 8004384:	e26f      	b.n	8004866 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004386:	f7ff fda5 	bl	8003ed4 <HAL_RCC_GetPCLK1Freq>
 800438a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800438c:	68bb      	ldr	r3, [r7, #8]
 800438e:	461d      	mov	r5, r3
 8004390:	f04f 0600 	mov.w	r6, #0
 8004394:	46a8      	mov	r8, r5
 8004396:	46b1      	mov	r9, r6
 8004398:	eb18 0308 	adds.w	r3, r8, r8
 800439c:	eb49 0409 	adc.w	r4, r9, r9
 80043a0:	4698      	mov	r8, r3
 80043a2:	46a1      	mov	r9, r4
 80043a4:	eb18 0805 	adds.w	r8, r8, r5
 80043a8:	eb49 0906 	adc.w	r9, r9, r6
 80043ac:	f04f 0100 	mov.w	r1, #0
 80043b0:	f04f 0200 	mov.w	r2, #0
 80043b4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80043b8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80043bc:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80043c0:	4688      	mov	r8, r1
 80043c2:	4691      	mov	r9, r2
 80043c4:	eb18 0005 	adds.w	r0, r8, r5
 80043c8:	eb49 0106 	adc.w	r1, r9, r6
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	685b      	ldr	r3, [r3, #4]
 80043d0:	461d      	mov	r5, r3
 80043d2:	f04f 0600 	mov.w	r6, #0
 80043d6:	196b      	adds	r3, r5, r5
 80043d8:	eb46 0406 	adc.w	r4, r6, r6
 80043dc:	461a      	mov	r2, r3
 80043de:	4623      	mov	r3, r4
 80043e0:	f7fc fbea 	bl	8000bb8 <__aeabi_uldivmod>
 80043e4:	4603      	mov	r3, r0
 80043e6:	460c      	mov	r4, r1
 80043e8:	461a      	mov	r2, r3
 80043ea:	4b47      	ldr	r3, [pc, #284]	; (8004508 <UART_SetConfig+0x384>)
 80043ec:	fba3 2302 	umull	r2, r3, r3, r2
 80043f0:	095b      	lsrs	r3, r3, #5
 80043f2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80043f6:	68bb      	ldr	r3, [r7, #8]
 80043f8:	461d      	mov	r5, r3
 80043fa:	f04f 0600 	mov.w	r6, #0
 80043fe:	46a9      	mov	r9, r5
 8004400:	46b2      	mov	sl, r6
 8004402:	eb19 0309 	adds.w	r3, r9, r9
 8004406:	eb4a 040a 	adc.w	r4, sl, sl
 800440a:	4699      	mov	r9, r3
 800440c:	46a2      	mov	sl, r4
 800440e:	eb19 0905 	adds.w	r9, r9, r5
 8004412:	eb4a 0a06 	adc.w	sl, sl, r6
 8004416:	f04f 0100 	mov.w	r1, #0
 800441a:	f04f 0200 	mov.w	r2, #0
 800441e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004422:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004426:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800442a:	4689      	mov	r9, r1
 800442c:	4692      	mov	sl, r2
 800442e:	eb19 0005 	adds.w	r0, r9, r5
 8004432:	eb4a 0106 	adc.w	r1, sl, r6
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	685b      	ldr	r3, [r3, #4]
 800443a:	461d      	mov	r5, r3
 800443c:	f04f 0600 	mov.w	r6, #0
 8004440:	196b      	adds	r3, r5, r5
 8004442:	eb46 0406 	adc.w	r4, r6, r6
 8004446:	461a      	mov	r2, r3
 8004448:	4623      	mov	r3, r4
 800444a:	f7fc fbb5 	bl	8000bb8 <__aeabi_uldivmod>
 800444e:	4603      	mov	r3, r0
 8004450:	460c      	mov	r4, r1
 8004452:	461a      	mov	r2, r3
 8004454:	4b2c      	ldr	r3, [pc, #176]	; (8004508 <UART_SetConfig+0x384>)
 8004456:	fba3 1302 	umull	r1, r3, r3, r2
 800445a:	095b      	lsrs	r3, r3, #5
 800445c:	2164      	movs	r1, #100	; 0x64
 800445e:	fb01 f303 	mul.w	r3, r1, r3
 8004462:	1ad3      	subs	r3, r2, r3
 8004464:	00db      	lsls	r3, r3, #3
 8004466:	3332      	adds	r3, #50	; 0x32
 8004468:	4a27      	ldr	r2, [pc, #156]	; (8004508 <UART_SetConfig+0x384>)
 800446a:	fba2 2303 	umull	r2, r3, r2, r3
 800446e:	095b      	lsrs	r3, r3, #5
 8004470:	005b      	lsls	r3, r3, #1
 8004472:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004476:	4498      	add	r8, r3
 8004478:	68bb      	ldr	r3, [r7, #8]
 800447a:	461d      	mov	r5, r3
 800447c:	f04f 0600 	mov.w	r6, #0
 8004480:	46a9      	mov	r9, r5
 8004482:	46b2      	mov	sl, r6
 8004484:	eb19 0309 	adds.w	r3, r9, r9
 8004488:	eb4a 040a 	adc.w	r4, sl, sl
 800448c:	4699      	mov	r9, r3
 800448e:	46a2      	mov	sl, r4
 8004490:	eb19 0905 	adds.w	r9, r9, r5
 8004494:	eb4a 0a06 	adc.w	sl, sl, r6
 8004498:	f04f 0100 	mov.w	r1, #0
 800449c:	f04f 0200 	mov.w	r2, #0
 80044a0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80044a4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80044a8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80044ac:	4689      	mov	r9, r1
 80044ae:	4692      	mov	sl, r2
 80044b0:	eb19 0005 	adds.w	r0, r9, r5
 80044b4:	eb4a 0106 	adc.w	r1, sl, r6
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	685b      	ldr	r3, [r3, #4]
 80044bc:	461d      	mov	r5, r3
 80044be:	f04f 0600 	mov.w	r6, #0
 80044c2:	196b      	adds	r3, r5, r5
 80044c4:	eb46 0406 	adc.w	r4, r6, r6
 80044c8:	461a      	mov	r2, r3
 80044ca:	4623      	mov	r3, r4
 80044cc:	f7fc fb74 	bl	8000bb8 <__aeabi_uldivmod>
 80044d0:	4603      	mov	r3, r0
 80044d2:	460c      	mov	r4, r1
 80044d4:	461a      	mov	r2, r3
 80044d6:	4b0c      	ldr	r3, [pc, #48]	; (8004508 <UART_SetConfig+0x384>)
 80044d8:	fba3 1302 	umull	r1, r3, r3, r2
 80044dc:	095b      	lsrs	r3, r3, #5
 80044de:	2164      	movs	r1, #100	; 0x64
 80044e0:	fb01 f303 	mul.w	r3, r1, r3
 80044e4:	1ad3      	subs	r3, r2, r3
 80044e6:	00db      	lsls	r3, r3, #3
 80044e8:	3332      	adds	r3, #50	; 0x32
 80044ea:	4a07      	ldr	r2, [pc, #28]	; (8004508 <UART_SetConfig+0x384>)
 80044ec:	fba2 2303 	umull	r2, r3, r2, r3
 80044f0:	095b      	lsrs	r3, r3, #5
 80044f2:	f003 0207 	and.w	r2, r3, #7
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	4442      	add	r2, r8
 80044fc:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80044fe:	e1b2      	b.n	8004866 <UART_SetConfig+0x6e2>
 8004500:	40011000 	.word	0x40011000
 8004504:	40011400 	.word	0x40011400
 8004508:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	4ad7      	ldr	r2, [pc, #860]	; (8004870 <UART_SetConfig+0x6ec>)
 8004512:	4293      	cmp	r3, r2
 8004514:	d005      	beq.n	8004522 <UART_SetConfig+0x39e>
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	4ad6      	ldr	r2, [pc, #856]	; (8004874 <UART_SetConfig+0x6f0>)
 800451c:	4293      	cmp	r3, r2
 800451e:	f040 80d1 	bne.w	80046c4 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8004522:	f7ff fceb 	bl	8003efc <HAL_RCC_GetPCLK2Freq>
 8004526:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004528:	68bb      	ldr	r3, [r7, #8]
 800452a:	469a      	mov	sl, r3
 800452c:	f04f 0b00 	mov.w	fp, #0
 8004530:	46d0      	mov	r8, sl
 8004532:	46d9      	mov	r9, fp
 8004534:	eb18 0308 	adds.w	r3, r8, r8
 8004538:	eb49 0409 	adc.w	r4, r9, r9
 800453c:	4698      	mov	r8, r3
 800453e:	46a1      	mov	r9, r4
 8004540:	eb18 080a 	adds.w	r8, r8, sl
 8004544:	eb49 090b 	adc.w	r9, r9, fp
 8004548:	f04f 0100 	mov.w	r1, #0
 800454c:	f04f 0200 	mov.w	r2, #0
 8004550:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004554:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004558:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800455c:	4688      	mov	r8, r1
 800455e:	4691      	mov	r9, r2
 8004560:	eb1a 0508 	adds.w	r5, sl, r8
 8004564:	eb4b 0609 	adc.w	r6, fp, r9
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	685b      	ldr	r3, [r3, #4]
 800456c:	4619      	mov	r1, r3
 800456e:	f04f 0200 	mov.w	r2, #0
 8004572:	f04f 0300 	mov.w	r3, #0
 8004576:	f04f 0400 	mov.w	r4, #0
 800457a:	0094      	lsls	r4, r2, #2
 800457c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004580:	008b      	lsls	r3, r1, #2
 8004582:	461a      	mov	r2, r3
 8004584:	4623      	mov	r3, r4
 8004586:	4628      	mov	r0, r5
 8004588:	4631      	mov	r1, r6
 800458a:	f7fc fb15 	bl	8000bb8 <__aeabi_uldivmod>
 800458e:	4603      	mov	r3, r0
 8004590:	460c      	mov	r4, r1
 8004592:	461a      	mov	r2, r3
 8004594:	4bb8      	ldr	r3, [pc, #736]	; (8004878 <UART_SetConfig+0x6f4>)
 8004596:	fba3 2302 	umull	r2, r3, r3, r2
 800459a:	095b      	lsrs	r3, r3, #5
 800459c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80045a0:	68bb      	ldr	r3, [r7, #8]
 80045a2:	469b      	mov	fp, r3
 80045a4:	f04f 0c00 	mov.w	ip, #0
 80045a8:	46d9      	mov	r9, fp
 80045aa:	46e2      	mov	sl, ip
 80045ac:	eb19 0309 	adds.w	r3, r9, r9
 80045b0:	eb4a 040a 	adc.w	r4, sl, sl
 80045b4:	4699      	mov	r9, r3
 80045b6:	46a2      	mov	sl, r4
 80045b8:	eb19 090b 	adds.w	r9, r9, fp
 80045bc:	eb4a 0a0c 	adc.w	sl, sl, ip
 80045c0:	f04f 0100 	mov.w	r1, #0
 80045c4:	f04f 0200 	mov.w	r2, #0
 80045c8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80045cc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80045d0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80045d4:	4689      	mov	r9, r1
 80045d6:	4692      	mov	sl, r2
 80045d8:	eb1b 0509 	adds.w	r5, fp, r9
 80045dc:	eb4c 060a 	adc.w	r6, ip, sl
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	685b      	ldr	r3, [r3, #4]
 80045e4:	4619      	mov	r1, r3
 80045e6:	f04f 0200 	mov.w	r2, #0
 80045ea:	f04f 0300 	mov.w	r3, #0
 80045ee:	f04f 0400 	mov.w	r4, #0
 80045f2:	0094      	lsls	r4, r2, #2
 80045f4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80045f8:	008b      	lsls	r3, r1, #2
 80045fa:	461a      	mov	r2, r3
 80045fc:	4623      	mov	r3, r4
 80045fe:	4628      	mov	r0, r5
 8004600:	4631      	mov	r1, r6
 8004602:	f7fc fad9 	bl	8000bb8 <__aeabi_uldivmod>
 8004606:	4603      	mov	r3, r0
 8004608:	460c      	mov	r4, r1
 800460a:	461a      	mov	r2, r3
 800460c:	4b9a      	ldr	r3, [pc, #616]	; (8004878 <UART_SetConfig+0x6f4>)
 800460e:	fba3 1302 	umull	r1, r3, r3, r2
 8004612:	095b      	lsrs	r3, r3, #5
 8004614:	2164      	movs	r1, #100	; 0x64
 8004616:	fb01 f303 	mul.w	r3, r1, r3
 800461a:	1ad3      	subs	r3, r2, r3
 800461c:	011b      	lsls	r3, r3, #4
 800461e:	3332      	adds	r3, #50	; 0x32
 8004620:	4a95      	ldr	r2, [pc, #596]	; (8004878 <UART_SetConfig+0x6f4>)
 8004622:	fba2 2303 	umull	r2, r3, r2, r3
 8004626:	095b      	lsrs	r3, r3, #5
 8004628:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800462c:	4498      	add	r8, r3
 800462e:	68bb      	ldr	r3, [r7, #8]
 8004630:	469b      	mov	fp, r3
 8004632:	f04f 0c00 	mov.w	ip, #0
 8004636:	46d9      	mov	r9, fp
 8004638:	46e2      	mov	sl, ip
 800463a:	eb19 0309 	adds.w	r3, r9, r9
 800463e:	eb4a 040a 	adc.w	r4, sl, sl
 8004642:	4699      	mov	r9, r3
 8004644:	46a2      	mov	sl, r4
 8004646:	eb19 090b 	adds.w	r9, r9, fp
 800464a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800464e:	f04f 0100 	mov.w	r1, #0
 8004652:	f04f 0200 	mov.w	r2, #0
 8004656:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800465a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800465e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004662:	4689      	mov	r9, r1
 8004664:	4692      	mov	sl, r2
 8004666:	eb1b 0509 	adds.w	r5, fp, r9
 800466a:	eb4c 060a 	adc.w	r6, ip, sl
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	685b      	ldr	r3, [r3, #4]
 8004672:	4619      	mov	r1, r3
 8004674:	f04f 0200 	mov.w	r2, #0
 8004678:	f04f 0300 	mov.w	r3, #0
 800467c:	f04f 0400 	mov.w	r4, #0
 8004680:	0094      	lsls	r4, r2, #2
 8004682:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004686:	008b      	lsls	r3, r1, #2
 8004688:	461a      	mov	r2, r3
 800468a:	4623      	mov	r3, r4
 800468c:	4628      	mov	r0, r5
 800468e:	4631      	mov	r1, r6
 8004690:	f7fc fa92 	bl	8000bb8 <__aeabi_uldivmod>
 8004694:	4603      	mov	r3, r0
 8004696:	460c      	mov	r4, r1
 8004698:	461a      	mov	r2, r3
 800469a:	4b77      	ldr	r3, [pc, #476]	; (8004878 <UART_SetConfig+0x6f4>)
 800469c:	fba3 1302 	umull	r1, r3, r3, r2
 80046a0:	095b      	lsrs	r3, r3, #5
 80046a2:	2164      	movs	r1, #100	; 0x64
 80046a4:	fb01 f303 	mul.w	r3, r1, r3
 80046a8:	1ad3      	subs	r3, r2, r3
 80046aa:	011b      	lsls	r3, r3, #4
 80046ac:	3332      	adds	r3, #50	; 0x32
 80046ae:	4a72      	ldr	r2, [pc, #456]	; (8004878 <UART_SetConfig+0x6f4>)
 80046b0:	fba2 2303 	umull	r2, r3, r2, r3
 80046b4:	095b      	lsrs	r3, r3, #5
 80046b6:	f003 020f 	and.w	r2, r3, #15
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	4442      	add	r2, r8
 80046c0:	609a      	str	r2, [r3, #8]
 80046c2:	e0d0      	b.n	8004866 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80046c4:	f7ff fc06 	bl	8003ed4 <HAL_RCC_GetPCLK1Freq>
 80046c8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80046ca:	68bb      	ldr	r3, [r7, #8]
 80046cc:	469a      	mov	sl, r3
 80046ce:	f04f 0b00 	mov.w	fp, #0
 80046d2:	46d0      	mov	r8, sl
 80046d4:	46d9      	mov	r9, fp
 80046d6:	eb18 0308 	adds.w	r3, r8, r8
 80046da:	eb49 0409 	adc.w	r4, r9, r9
 80046de:	4698      	mov	r8, r3
 80046e0:	46a1      	mov	r9, r4
 80046e2:	eb18 080a 	adds.w	r8, r8, sl
 80046e6:	eb49 090b 	adc.w	r9, r9, fp
 80046ea:	f04f 0100 	mov.w	r1, #0
 80046ee:	f04f 0200 	mov.w	r2, #0
 80046f2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80046f6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80046fa:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80046fe:	4688      	mov	r8, r1
 8004700:	4691      	mov	r9, r2
 8004702:	eb1a 0508 	adds.w	r5, sl, r8
 8004706:	eb4b 0609 	adc.w	r6, fp, r9
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	685b      	ldr	r3, [r3, #4]
 800470e:	4619      	mov	r1, r3
 8004710:	f04f 0200 	mov.w	r2, #0
 8004714:	f04f 0300 	mov.w	r3, #0
 8004718:	f04f 0400 	mov.w	r4, #0
 800471c:	0094      	lsls	r4, r2, #2
 800471e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004722:	008b      	lsls	r3, r1, #2
 8004724:	461a      	mov	r2, r3
 8004726:	4623      	mov	r3, r4
 8004728:	4628      	mov	r0, r5
 800472a:	4631      	mov	r1, r6
 800472c:	f7fc fa44 	bl	8000bb8 <__aeabi_uldivmod>
 8004730:	4603      	mov	r3, r0
 8004732:	460c      	mov	r4, r1
 8004734:	461a      	mov	r2, r3
 8004736:	4b50      	ldr	r3, [pc, #320]	; (8004878 <UART_SetConfig+0x6f4>)
 8004738:	fba3 2302 	umull	r2, r3, r3, r2
 800473c:	095b      	lsrs	r3, r3, #5
 800473e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004742:	68bb      	ldr	r3, [r7, #8]
 8004744:	469b      	mov	fp, r3
 8004746:	f04f 0c00 	mov.w	ip, #0
 800474a:	46d9      	mov	r9, fp
 800474c:	46e2      	mov	sl, ip
 800474e:	eb19 0309 	adds.w	r3, r9, r9
 8004752:	eb4a 040a 	adc.w	r4, sl, sl
 8004756:	4699      	mov	r9, r3
 8004758:	46a2      	mov	sl, r4
 800475a:	eb19 090b 	adds.w	r9, r9, fp
 800475e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004762:	f04f 0100 	mov.w	r1, #0
 8004766:	f04f 0200 	mov.w	r2, #0
 800476a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800476e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004772:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004776:	4689      	mov	r9, r1
 8004778:	4692      	mov	sl, r2
 800477a:	eb1b 0509 	adds.w	r5, fp, r9
 800477e:	eb4c 060a 	adc.w	r6, ip, sl
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	685b      	ldr	r3, [r3, #4]
 8004786:	4619      	mov	r1, r3
 8004788:	f04f 0200 	mov.w	r2, #0
 800478c:	f04f 0300 	mov.w	r3, #0
 8004790:	f04f 0400 	mov.w	r4, #0
 8004794:	0094      	lsls	r4, r2, #2
 8004796:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800479a:	008b      	lsls	r3, r1, #2
 800479c:	461a      	mov	r2, r3
 800479e:	4623      	mov	r3, r4
 80047a0:	4628      	mov	r0, r5
 80047a2:	4631      	mov	r1, r6
 80047a4:	f7fc fa08 	bl	8000bb8 <__aeabi_uldivmod>
 80047a8:	4603      	mov	r3, r0
 80047aa:	460c      	mov	r4, r1
 80047ac:	461a      	mov	r2, r3
 80047ae:	4b32      	ldr	r3, [pc, #200]	; (8004878 <UART_SetConfig+0x6f4>)
 80047b0:	fba3 1302 	umull	r1, r3, r3, r2
 80047b4:	095b      	lsrs	r3, r3, #5
 80047b6:	2164      	movs	r1, #100	; 0x64
 80047b8:	fb01 f303 	mul.w	r3, r1, r3
 80047bc:	1ad3      	subs	r3, r2, r3
 80047be:	011b      	lsls	r3, r3, #4
 80047c0:	3332      	adds	r3, #50	; 0x32
 80047c2:	4a2d      	ldr	r2, [pc, #180]	; (8004878 <UART_SetConfig+0x6f4>)
 80047c4:	fba2 2303 	umull	r2, r3, r2, r3
 80047c8:	095b      	lsrs	r3, r3, #5
 80047ca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80047ce:	4498      	add	r8, r3
 80047d0:	68bb      	ldr	r3, [r7, #8]
 80047d2:	469b      	mov	fp, r3
 80047d4:	f04f 0c00 	mov.w	ip, #0
 80047d8:	46d9      	mov	r9, fp
 80047da:	46e2      	mov	sl, ip
 80047dc:	eb19 0309 	adds.w	r3, r9, r9
 80047e0:	eb4a 040a 	adc.w	r4, sl, sl
 80047e4:	4699      	mov	r9, r3
 80047e6:	46a2      	mov	sl, r4
 80047e8:	eb19 090b 	adds.w	r9, r9, fp
 80047ec:	eb4a 0a0c 	adc.w	sl, sl, ip
 80047f0:	f04f 0100 	mov.w	r1, #0
 80047f4:	f04f 0200 	mov.w	r2, #0
 80047f8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80047fc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004800:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004804:	4689      	mov	r9, r1
 8004806:	4692      	mov	sl, r2
 8004808:	eb1b 0509 	adds.w	r5, fp, r9
 800480c:	eb4c 060a 	adc.w	r6, ip, sl
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	685b      	ldr	r3, [r3, #4]
 8004814:	4619      	mov	r1, r3
 8004816:	f04f 0200 	mov.w	r2, #0
 800481a:	f04f 0300 	mov.w	r3, #0
 800481e:	f04f 0400 	mov.w	r4, #0
 8004822:	0094      	lsls	r4, r2, #2
 8004824:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004828:	008b      	lsls	r3, r1, #2
 800482a:	461a      	mov	r2, r3
 800482c:	4623      	mov	r3, r4
 800482e:	4628      	mov	r0, r5
 8004830:	4631      	mov	r1, r6
 8004832:	f7fc f9c1 	bl	8000bb8 <__aeabi_uldivmod>
 8004836:	4603      	mov	r3, r0
 8004838:	460c      	mov	r4, r1
 800483a:	461a      	mov	r2, r3
 800483c:	4b0e      	ldr	r3, [pc, #56]	; (8004878 <UART_SetConfig+0x6f4>)
 800483e:	fba3 1302 	umull	r1, r3, r3, r2
 8004842:	095b      	lsrs	r3, r3, #5
 8004844:	2164      	movs	r1, #100	; 0x64
 8004846:	fb01 f303 	mul.w	r3, r1, r3
 800484a:	1ad3      	subs	r3, r2, r3
 800484c:	011b      	lsls	r3, r3, #4
 800484e:	3332      	adds	r3, #50	; 0x32
 8004850:	4a09      	ldr	r2, [pc, #36]	; (8004878 <UART_SetConfig+0x6f4>)
 8004852:	fba2 2303 	umull	r2, r3, r2, r3
 8004856:	095b      	lsrs	r3, r3, #5
 8004858:	f003 020f 	and.w	r2, r3, #15
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	4442      	add	r2, r8
 8004862:	609a      	str	r2, [r3, #8]
}
 8004864:	e7ff      	b.n	8004866 <UART_SetConfig+0x6e2>
 8004866:	bf00      	nop
 8004868:	3714      	adds	r7, #20
 800486a:	46bd      	mov	sp, r7
 800486c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004870:	40011000 	.word	0x40011000
 8004874:	40011400 	.word	0x40011400
 8004878:	51eb851f 	.word	0x51eb851f

0800487c <__errno>:
 800487c:	4b01      	ldr	r3, [pc, #4]	; (8004884 <__errno+0x8>)
 800487e:	6818      	ldr	r0, [r3, #0]
 8004880:	4770      	bx	lr
 8004882:	bf00      	nop
 8004884:	20000014 	.word	0x20000014

08004888 <__libc_init_array>:
 8004888:	b570      	push	{r4, r5, r6, lr}
 800488a:	4e0d      	ldr	r6, [pc, #52]	; (80048c0 <__libc_init_array+0x38>)
 800488c:	4c0d      	ldr	r4, [pc, #52]	; (80048c4 <__libc_init_array+0x3c>)
 800488e:	1ba4      	subs	r4, r4, r6
 8004890:	10a4      	asrs	r4, r4, #2
 8004892:	2500      	movs	r5, #0
 8004894:	42a5      	cmp	r5, r4
 8004896:	d109      	bne.n	80048ac <__libc_init_array+0x24>
 8004898:	4e0b      	ldr	r6, [pc, #44]	; (80048c8 <__libc_init_array+0x40>)
 800489a:	4c0c      	ldr	r4, [pc, #48]	; (80048cc <__libc_init_array+0x44>)
 800489c:	f002 f87e 	bl	800699c <_init>
 80048a0:	1ba4      	subs	r4, r4, r6
 80048a2:	10a4      	asrs	r4, r4, #2
 80048a4:	2500      	movs	r5, #0
 80048a6:	42a5      	cmp	r5, r4
 80048a8:	d105      	bne.n	80048b6 <__libc_init_array+0x2e>
 80048aa:	bd70      	pop	{r4, r5, r6, pc}
 80048ac:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80048b0:	4798      	blx	r3
 80048b2:	3501      	adds	r5, #1
 80048b4:	e7ee      	b.n	8004894 <__libc_init_array+0xc>
 80048b6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80048ba:	4798      	blx	r3
 80048bc:	3501      	adds	r5, #1
 80048be:	e7f2      	b.n	80048a6 <__libc_init_array+0x1e>
 80048c0:	08007668 	.word	0x08007668
 80048c4:	08007668 	.word	0x08007668
 80048c8:	08007668 	.word	0x08007668
 80048cc:	0800766c 	.word	0x0800766c

080048d0 <memcpy>:
 80048d0:	b510      	push	{r4, lr}
 80048d2:	1e43      	subs	r3, r0, #1
 80048d4:	440a      	add	r2, r1
 80048d6:	4291      	cmp	r1, r2
 80048d8:	d100      	bne.n	80048dc <memcpy+0xc>
 80048da:	bd10      	pop	{r4, pc}
 80048dc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80048e0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80048e4:	e7f7      	b.n	80048d6 <memcpy+0x6>

080048e6 <memmove>:
 80048e6:	4288      	cmp	r0, r1
 80048e8:	b510      	push	{r4, lr}
 80048ea:	eb01 0302 	add.w	r3, r1, r2
 80048ee:	d807      	bhi.n	8004900 <memmove+0x1a>
 80048f0:	1e42      	subs	r2, r0, #1
 80048f2:	4299      	cmp	r1, r3
 80048f4:	d00a      	beq.n	800490c <memmove+0x26>
 80048f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80048fa:	f802 4f01 	strb.w	r4, [r2, #1]!
 80048fe:	e7f8      	b.n	80048f2 <memmove+0xc>
 8004900:	4283      	cmp	r3, r0
 8004902:	d9f5      	bls.n	80048f0 <memmove+0xa>
 8004904:	1881      	adds	r1, r0, r2
 8004906:	1ad2      	subs	r2, r2, r3
 8004908:	42d3      	cmn	r3, r2
 800490a:	d100      	bne.n	800490e <memmove+0x28>
 800490c:	bd10      	pop	{r4, pc}
 800490e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004912:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8004916:	e7f7      	b.n	8004908 <memmove+0x22>

08004918 <memset>:
 8004918:	4402      	add	r2, r0
 800491a:	4603      	mov	r3, r0
 800491c:	4293      	cmp	r3, r2
 800491e:	d100      	bne.n	8004922 <memset+0xa>
 8004920:	4770      	bx	lr
 8004922:	f803 1b01 	strb.w	r1, [r3], #1
 8004926:	e7f9      	b.n	800491c <memset+0x4>

08004928 <__cvt>:
 8004928:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800492c:	ec55 4b10 	vmov	r4, r5, d0
 8004930:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8004932:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004936:	2d00      	cmp	r5, #0
 8004938:	460e      	mov	r6, r1
 800493a:	4691      	mov	r9, r2
 800493c:	4619      	mov	r1, r3
 800493e:	bfb8      	it	lt
 8004940:	4622      	movlt	r2, r4
 8004942:	462b      	mov	r3, r5
 8004944:	f027 0720 	bic.w	r7, r7, #32
 8004948:	bfbb      	ittet	lt
 800494a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800494e:	461d      	movlt	r5, r3
 8004950:	2300      	movge	r3, #0
 8004952:	232d      	movlt	r3, #45	; 0x2d
 8004954:	bfb8      	it	lt
 8004956:	4614      	movlt	r4, r2
 8004958:	2f46      	cmp	r7, #70	; 0x46
 800495a:	700b      	strb	r3, [r1, #0]
 800495c:	d004      	beq.n	8004968 <__cvt+0x40>
 800495e:	2f45      	cmp	r7, #69	; 0x45
 8004960:	d100      	bne.n	8004964 <__cvt+0x3c>
 8004962:	3601      	adds	r6, #1
 8004964:	2102      	movs	r1, #2
 8004966:	e000      	b.n	800496a <__cvt+0x42>
 8004968:	2103      	movs	r1, #3
 800496a:	ab03      	add	r3, sp, #12
 800496c:	9301      	str	r3, [sp, #4]
 800496e:	ab02      	add	r3, sp, #8
 8004970:	9300      	str	r3, [sp, #0]
 8004972:	4632      	mov	r2, r6
 8004974:	4653      	mov	r3, sl
 8004976:	ec45 4b10 	vmov	d0, r4, r5
 800497a:	f000 fcfd 	bl	8005378 <_dtoa_r>
 800497e:	2f47      	cmp	r7, #71	; 0x47
 8004980:	4680      	mov	r8, r0
 8004982:	d102      	bne.n	800498a <__cvt+0x62>
 8004984:	f019 0f01 	tst.w	r9, #1
 8004988:	d026      	beq.n	80049d8 <__cvt+0xb0>
 800498a:	2f46      	cmp	r7, #70	; 0x46
 800498c:	eb08 0906 	add.w	r9, r8, r6
 8004990:	d111      	bne.n	80049b6 <__cvt+0x8e>
 8004992:	f898 3000 	ldrb.w	r3, [r8]
 8004996:	2b30      	cmp	r3, #48	; 0x30
 8004998:	d10a      	bne.n	80049b0 <__cvt+0x88>
 800499a:	2200      	movs	r2, #0
 800499c:	2300      	movs	r3, #0
 800499e:	4620      	mov	r0, r4
 80049a0:	4629      	mov	r1, r5
 80049a2:	f7fc f899 	bl	8000ad8 <__aeabi_dcmpeq>
 80049a6:	b918      	cbnz	r0, 80049b0 <__cvt+0x88>
 80049a8:	f1c6 0601 	rsb	r6, r6, #1
 80049ac:	f8ca 6000 	str.w	r6, [sl]
 80049b0:	f8da 3000 	ldr.w	r3, [sl]
 80049b4:	4499      	add	r9, r3
 80049b6:	2200      	movs	r2, #0
 80049b8:	2300      	movs	r3, #0
 80049ba:	4620      	mov	r0, r4
 80049bc:	4629      	mov	r1, r5
 80049be:	f7fc f88b 	bl	8000ad8 <__aeabi_dcmpeq>
 80049c2:	b938      	cbnz	r0, 80049d4 <__cvt+0xac>
 80049c4:	2230      	movs	r2, #48	; 0x30
 80049c6:	9b03      	ldr	r3, [sp, #12]
 80049c8:	454b      	cmp	r3, r9
 80049ca:	d205      	bcs.n	80049d8 <__cvt+0xb0>
 80049cc:	1c59      	adds	r1, r3, #1
 80049ce:	9103      	str	r1, [sp, #12]
 80049d0:	701a      	strb	r2, [r3, #0]
 80049d2:	e7f8      	b.n	80049c6 <__cvt+0x9e>
 80049d4:	f8cd 900c 	str.w	r9, [sp, #12]
 80049d8:	9b03      	ldr	r3, [sp, #12]
 80049da:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80049dc:	eba3 0308 	sub.w	r3, r3, r8
 80049e0:	4640      	mov	r0, r8
 80049e2:	6013      	str	r3, [r2, #0]
 80049e4:	b004      	add	sp, #16
 80049e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080049ea <__exponent>:
 80049ea:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80049ec:	2900      	cmp	r1, #0
 80049ee:	4604      	mov	r4, r0
 80049f0:	bfba      	itte	lt
 80049f2:	4249      	neglt	r1, r1
 80049f4:	232d      	movlt	r3, #45	; 0x2d
 80049f6:	232b      	movge	r3, #43	; 0x2b
 80049f8:	2909      	cmp	r1, #9
 80049fa:	f804 2b02 	strb.w	r2, [r4], #2
 80049fe:	7043      	strb	r3, [r0, #1]
 8004a00:	dd20      	ble.n	8004a44 <__exponent+0x5a>
 8004a02:	f10d 0307 	add.w	r3, sp, #7
 8004a06:	461f      	mov	r7, r3
 8004a08:	260a      	movs	r6, #10
 8004a0a:	fb91 f5f6 	sdiv	r5, r1, r6
 8004a0e:	fb06 1115 	mls	r1, r6, r5, r1
 8004a12:	3130      	adds	r1, #48	; 0x30
 8004a14:	2d09      	cmp	r5, #9
 8004a16:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004a1a:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 8004a1e:	4629      	mov	r1, r5
 8004a20:	dc09      	bgt.n	8004a36 <__exponent+0x4c>
 8004a22:	3130      	adds	r1, #48	; 0x30
 8004a24:	3b02      	subs	r3, #2
 8004a26:	f802 1c01 	strb.w	r1, [r2, #-1]
 8004a2a:	42bb      	cmp	r3, r7
 8004a2c:	4622      	mov	r2, r4
 8004a2e:	d304      	bcc.n	8004a3a <__exponent+0x50>
 8004a30:	1a10      	subs	r0, r2, r0
 8004a32:	b003      	add	sp, #12
 8004a34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004a36:	4613      	mov	r3, r2
 8004a38:	e7e7      	b.n	8004a0a <__exponent+0x20>
 8004a3a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004a3e:	f804 2b01 	strb.w	r2, [r4], #1
 8004a42:	e7f2      	b.n	8004a2a <__exponent+0x40>
 8004a44:	2330      	movs	r3, #48	; 0x30
 8004a46:	4419      	add	r1, r3
 8004a48:	7083      	strb	r3, [r0, #2]
 8004a4a:	1d02      	adds	r2, r0, #4
 8004a4c:	70c1      	strb	r1, [r0, #3]
 8004a4e:	e7ef      	b.n	8004a30 <__exponent+0x46>

08004a50 <_printf_float>:
 8004a50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a54:	b08d      	sub	sp, #52	; 0x34
 8004a56:	460c      	mov	r4, r1
 8004a58:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8004a5c:	4616      	mov	r6, r2
 8004a5e:	461f      	mov	r7, r3
 8004a60:	4605      	mov	r5, r0
 8004a62:	f001 fa41 	bl	8005ee8 <_localeconv_r>
 8004a66:	6803      	ldr	r3, [r0, #0]
 8004a68:	9304      	str	r3, [sp, #16]
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	f7fb fbb8 	bl	80001e0 <strlen>
 8004a70:	2300      	movs	r3, #0
 8004a72:	930a      	str	r3, [sp, #40]	; 0x28
 8004a74:	f8d8 3000 	ldr.w	r3, [r8]
 8004a78:	9005      	str	r0, [sp, #20]
 8004a7a:	3307      	adds	r3, #7
 8004a7c:	f023 0307 	bic.w	r3, r3, #7
 8004a80:	f103 0208 	add.w	r2, r3, #8
 8004a84:	f894 a018 	ldrb.w	sl, [r4, #24]
 8004a88:	f8d4 b000 	ldr.w	fp, [r4]
 8004a8c:	f8c8 2000 	str.w	r2, [r8]
 8004a90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a94:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004a98:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8004a9c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004aa0:	9307      	str	r3, [sp, #28]
 8004aa2:	f8cd 8018 	str.w	r8, [sp, #24]
 8004aa6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004aaa:	4ba7      	ldr	r3, [pc, #668]	; (8004d48 <_printf_float+0x2f8>)
 8004aac:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004ab0:	f7fc f844 	bl	8000b3c <__aeabi_dcmpun>
 8004ab4:	bb70      	cbnz	r0, 8004b14 <_printf_float+0xc4>
 8004ab6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004aba:	4ba3      	ldr	r3, [pc, #652]	; (8004d48 <_printf_float+0x2f8>)
 8004abc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004ac0:	f7fc f81e 	bl	8000b00 <__aeabi_dcmple>
 8004ac4:	bb30      	cbnz	r0, 8004b14 <_printf_float+0xc4>
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	2300      	movs	r3, #0
 8004aca:	4640      	mov	r0, r8
 8004acc:	4649      	mov	r1, r9
 8004ace:	f7fc f80d 	bl	8000aec <__aeabi_dcmplt>
 8004ad2:	b110      	cbz	r0, 8004ada <_printf_float+0x8a>
 8004ad4:	232d      	movs	r3, #45	; 0x2d
 8004ad6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004ada:	4a9c      	ldr	r2, [pc, #624]	; (8004d4c <_printf_float+0x2fc>)
 8004adc:	4b9c      	ldr	r3, [pc, #624]	; (8004d50 <_printf_float+0x300>)
 8004ade:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8004ae2:	bf8c      	ite	hi
 8004ae4:	4690      	movhi	r8, r2
 8004ae6:	4698      	movls	r8, r3
 8004ae8:	2303      	movs	r3, #3
 8004aea:	f02b 0204 	bic.w	r2, fp, #4
 8004aee:	6123      	str	r3, [r4, #16]
 8004af0:	6022      	str	r2, [r4, #0]
 8004af2:	f04f 0900 	mov.w	r9, #0
 8004af6:	9700      	str	r7, [sp, #0]
 8004af8:	4633      	mov	r3, r6
 8004afa:	aa0b      	add	r2, sp, #44	; 0x2c
 8004afc:	4621      	mov	r1, r4
 8004afe:	4628      	mov	r0, r5
 8004b00:	f000 f9e6 	bl	8004ed0 <_printf_common>
 8004b04:	3001      	adds	r0, #1
 8004b06:	f040 808d 	bne.w	8004c24 <_printf_float+0x1d4>
 8004b0a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004b0e:	b00d      	add	sp, #52	; 0x34
 8004b10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b14:	4642      	mov	r2, r8
 8004b16:	464b      	mov	r3, r9
 8004b18:	4640      	mov	r0, r8
 8004b1a:	4649      	mov	r1, r9
 8004b1c:	f7fc f80e 	bl	8000b3c <__aeabi_dcmpun>
 8004b20:	b110      	cbz	r0, 8004b28 <_printf_float+0xd8>
 8004b22:	4a8c      	ldr	r2, [pc, #560]	; (8004d54 <_printf_float+0x304>)
 8004b24:	4b8c      	ldr	r3, [pc, #560]	; (8004d58 <_printf_float+0x308>)
 8004b26:	e7da      	b.n	8004ade <_printf_float+0x8e>
 8004b28:	6861      	ldr	r1, [r4, #4]
 8004b2a:	1c4b      	adds	r3, r1, #1
 8004b2c:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8004b30:	a80a      	add	r0, sp, #40	; 0x28
 8004b32:	d13e      	bne.n	8004bb2 <_printf_float+0x162>
 8004b34:	2306      	movs	r3, #6
 8004b36:	6063      	str	r3, [r4, #4]
 8004b38:	2300      	movs	r3, #0
 8004b3a:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8004b3e:	ab09      	add	r3, sp, #36	; 0x24
 8004b40:	9300      	str	r3, [sp, #0]
 8004b42:	ec49 8b10 	vmov	d0, r8, r9
 8004b46:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004b4a:	6022      	str	r2, [r4, #0]
 8004b4c:	f8cd a004 	str.w	sl, [sp, #4]
 8004b50:	6861      	ldr	r1, [r4, #4]
 8004b52:	4628      	mov	r0, r5
 8004b54:	f7ff fee8 	bl	8004928 <__cvt>
 8004b58:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8004b5c:	2b47      	cmp	r3, #71	; 0x47
 8004b5e:	4680      	mov	r8, r0
 8004b60:	d109      	bne.n	8004b76 <_printf_float+0x126>
 8004b62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b64:	1cd8      	adds	r0, r3, #3
 8004b66:	db02      	blt.n	8004b6e <_printf_float+0x11e>
 8004b68:	6862      	ldr	r2, [r4, #4]
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	dd47      	ble.n	8004bfe <_printf_float+0x1ae>
 8004b6e:	f1aa 0a02 	sub.w	sl, sl, #2
 8004b72:	fa5f fa8a 	uxtb.w	sl, sl
 8004b76:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8004b7a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004b7c:	d824      	bhi.n	8004bc8 <_printf_float+0x178>
 8004b7e:	3901      	subs	r1, #1
 8004b80:	4652      	mov	r2, sl
 8004b82:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004b86:	9109      	str	r1, [sp, #36]	; 0x24
 8004b88:	f7ff ff2f 	bl	80049ea <__exponent>
 8004b8c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004b8e:	1813      	adds	r3, r2, r0
 8004b90:	2a01      	cmp	r2, #1
 8004b92:	4681      	mov	r9, r0
 8004b94:	6123      	str	r3, [r4, #16]
 8004b96:	dc02      	bgt.n	8004b9e <_printf_float+0x14e>
 8004b98:	6822      	ldr	r2, [r4, #0]
 8004b9a:	07d1      	lsls	r1, r2, #31
 8004b9c:	d501      	bpl.n	8004ba2 <_printf_float+0x152>
 8004b9e:	3301      	adds	r3, #1
 8004ba0:	6123      	str	r3, [r4, #16]
 8004ba2:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d0a5      	beq.n	8004af6 <_printf_float+0xa6>
 8004baa:	232d      	movs	r3, #45	; 0x2d
 8004bac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004bb0:	e7a1      	b.n	8004af6 <_printf_float+0xa6>
 8004bb2:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8004bb6:	f000 8177 	beq.w	8004ea8 <_printf_float+0x458>
 8004bba:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8004bbe:	d1bb      	bne.n	8004b38 <_printf_float+0xe8>
 8004bc0:	2900      	cmp	r1, #0
 8004bc2:	d1b9      	bne.n	8004b38 <_printf_float+0xe8>
 8004bc4:	2301      	movs	r3, #1
 8004bc6:	e7b6      	b.n	8004b36 <_printf_float+0xe6>
 8004bc8:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8004bcc:	d119      	bne.n	8004c02 <_printf_float+0x1b2>
 8004bce:	2900      	cmp	r1, #0
 8004bd0:	6863      	ldr	r3, [r4, #4]
 8004bd2:	dd0c      	ble.n	8004bee <_printf_float+0x19e>
 8004bd4:	6121      	str	r1, [r4, #16]
 8004bd6:	b913      	cbnz	r3, 8004bde <_printf_float+0x18e>
 8004bd8:	6822      	ldr	r2, [r4, #0]
 8004bda:	07d2      	lsls	r2, r2, #31
 8004bdc:	d502      	bpl.n	8004be4 <_printf_float+0x194>
 8004bde:	3301      	adds	r3, #1
 8004be0:	440b      	add	r3, r1
 8004be2:	6123      	str	r3, [r4, #16]
 8004be4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004be6:	65a3      	str	r3, [r4, #88]	; 0x58
 8004be8:	f04f 0900 	mov.w	r9, #0
 8004bec:	e7d9      	b.n	8004ba2 <_printf_float+0x152>
 8004bee:	b913      	cbnz	r3, 8004bf6 <_printf_float+0x1a6>
 8004bf0:	6822      	ldr	r2, [r4, #0]
 8004bf2:	07d0      	lsls	r0, r2, #31
 8004bf4:	d501      	bpl.n	8004bfa <_printf_float+0x1aa>
 8004bf6:	3302      	adds	r3, #2
 8004bf8:	e7f3      	b.n	8004be2 <_printf_float+0x192>
 8004bfa:	2301      	movs	r3, #1
 8004bfc:	e7f1      	b.n	8004be2 <_printf_float+0x192>
 8004bfe:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8004c02:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8004c06:	4293      	cmp	r3, r2
 8004c08:	db05      	blt.n	8004c16 <_printf_float+0x1c6>
 8004c0a:	6822      	ldr	r2, [r4, #0]
 8004c0c:	6123      	str	r3, [r4, #16]
 8004c0e:	07d1      	lsls	r1, r2, #31
 8004c10:	d5e8      	bpl.n	8004be4 <_printf_float+0x194>
 8004c12:	3301      	adds	r3, #1
 8004c14:	e7e5      	b.n	8004be2 <_printf_float+0x192>
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	bfd4      	ite	le
 8004c1a:	f1c3 0302 	rsble	r3, r3, #2
 8004c1e:	2301      	movgt	r3, #1
 8004c20:	4413      	add	r3, r2
 8004c22:	e7de      	b.n	8004be2 <_printf_float+0x192>
 8004c24:	6823      	ldr	r3, [r4, #0]
 8004c26:	055a      	lsls	r2, r3, #21
 8004c28:	d407      	bmi.n	8004c3a <_printf_float+0x1ea>
 8004c2a:	6923      	ldr	r3, [r4, #16]
 8004c2c:	4642      	mov	r2, r8
 8004c2e:	4631      	mov	r1, r6
 8004c30:	4628      	mov	r0, r5
 8004c32:	47b8      	blx	r7
 8004c34:	3001      	adds	r0, #1
 8004c36:	d12b      	bne.n	8004c90 <_printf_float+0x240>
 8004c38:	e767      	b.n	8004b0a <_printf_float+0xba>
 8004c3a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8004c3e:	f240 80dc 	bls.w	8004dfa <_printf_float+0x3aa>
 8004c42:	2200      	movs	r2, #0
 8004c44:	2300      	movs	r3, #0
 8004c46:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004c4a:	f7fb ff45 	bl	8000ad8 <__aeabi_dcmpeq>
 8004c4e:	2800      	cmp	r0, #0
 8004c50:	d033      	beq.n	8004cba <_printf_float+0x26a>
 8004c52:	2301      	movs	r3, #1
 8004c54:	4a41      	ldr	r2, [pc, #260]	; (8004d5c <_printf_float+0x30c>)
 8004c56:	4631      	mov	r1, r6
 8004c58:	4628      	mov	r0, r5
 8004c5a:	47b8      	blx	r7
 8004c5c:	3001      	adds	r0, #1
 8004c5e:	f43f af54 	beq.w	8004b0a <_printf_float+0xba>
 8004c62:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004c66:	429a      	cmp	r2, r3
 8004c68:	db02      	blt.n	8004c70 <_printf_float+0x220>
 8004c6a:	6823      	ldr	r3, [r4, #0]
 8004c6c:	07d8      	lsls	r0, r3, #31
 8004c6e:	d50f      	bpl.n	8004c90 <_printf_float+0x240>
 8004c70:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004c74:	4631      	mov	r1, r6
 8004c76:	4628      	mov	r0, r5
 8004c78:	47b8      	blx	r7
 8004c7a:	3001      	adds	r0, #1
 8004c7c:	f43f af45 	beq.w	8004b0a <_printf_float+0xba>
 8004c80:	f04f 0800 	mov.w	r8, #0
 8004c84:	f104 091a 	add.w	r9, r4, #26
 8004c88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004c8a:	3b01      	subs	r3, #1
 8004c8c:	4543      	cmp	r3, r8
 8004c8e:	dc09      	bgt.n	8004ca4 <_printf_float+0x254>
 8004c90:	6823      	ldr	r3, [r4, #0]
 8004c92:	079b      	lsls	r3, r3, #30
 8004c94:	f100 8103 	bmi.w	8004e9e <_printf_float+0x44e>
 8004c98:	68e0      	ldr	r0, [r4, #12]
 8004c9a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004c9c:	4298      	cmp	r0, r3
 8004c9e:	bfb8      	it	lt
 8004ca0:	4618      	movlt	r0, r3
 8004ca2:	e734      	b.n	8004b0e <_printf_float+0xbe>
 8004ca4:	2301      	movs	r3, #1
 8004ca6:	464a      	mov	r2, r9
 8004ca8:	4631      	mov	r1, r6
 8004caa:	4628      	mov	r0, r5
 8004cac:	47b8      	blx	r7
 8004cae:	3001      	adds	r0, #1
 8004cb0:	f43f af2b 	beq.w	8004b0a <_printf_float+0xba>
 8004cb4:	f108 0801 	add.w	r8, r8, #1
 8004cb8:	e7e6      	b.n	8004c88 <_printf_float+0x238>
 8004cba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	dc2b      	bgt.n	8004d18 <_printf_float+0x2c8>
 8004cc0:	2301      	movs	r3, #1
 8004cc2:	4a26      	ldr	r2, [pc, #152]	; (8004d5c <_printf_float+0x30c>)
 8004cc4:	4631      	mov	r1, r6
 8004cc6:	4628      	mov	r0, r5
 8004cc8:	47b8      	blx	r7
 8004cca:	3001      	adds	r0, #1
 8004ccc:	f43f af1d 	beq.w	8004b0a <_printf_float+0xba>
 8004cd0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004cd2:	b923      	cbnz	r3, 8004cde <_printf_float+0x28e>
 8004cd4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004cd6:	b913      	cbnz	r3, 8004cde <_printf_float+0x28e>
 8004cd8:	6823      	ldr	r3, [r4, #0]
 8004cda:	07d9      	lsls	r1, r3, #31
 8004cdc:	d5d8      	bpl.n	8004c90 <_printf_float+0x240>
 8004cde:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004ce2:	4631      	mov	r1, r6
 8004ce4:	4628      	mov	r0, r5
 8004ce6:	47b8      	blx	r7
 8004ce8:	3001      	adds	r0, #1
 8004cea:	f43f af0e 	beq.w	8004b0a <_printf_float+0xba>
 8004cee:	f04f 0900 	mov.w	r9, #0
 8004cf2:	f104 0a1a 	add.w	sl, r4, #26
 8004cf6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004cf8:	425b      	negs	r3, r3
 8004cfa:	454b      	cmp	r3, r9
 8004cfc:	dc01      	bgt.n	8004d02 <_printf_float+0x2b2>
 8004cfe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004d00:	e794      	b.n	8004c2c <_printf_float+0x1dc>
 8004d02:	2301      	movs	r3, #1
 8004d04:	4652      	mov	r2, sl
 8004d06:	4631      	mov	r1, r6
 8004d08:	4628      	mov	r0, r5
 8004d0a:	47b8      	blx	r7
 8004d0c:	3001      	adds	r0, #1
 8004d0e:	f43f aefc 	beq.w	8004b0a <_printf_float+0xba>
 8004d12:	f109 0901 	add.w	r9, r9, #1
 8004d16:	e7ee      	b.n	8004cf6 <_printf_float+0x2a6>
 8004d18:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004d1a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004d1c:	429a      	cmp	r2, r3
 8004d1e:	bfa8      	it	ge
 8004d20:	461a      	movge	r2, r3
 8004d22:	2a00      	cmp	r2, #0
 8004d24:	4691      	mov	r9, r2
 8004d26:	dd07      	ble.n	8004d38 <_printf_float+0x2e8>
 8004d28:	4613      	mov	r3, r2
 8004d2a:	4631      	mov	r1, r6
 8004d2c:	4642      	mov	r2, r8
 8004d2e:	4628      	mov	r0, r5
 8004d30:	47b8      	blx	r7
 8004d32:	3001      	adds	r0, #1
 8004d34:	f43f aee9 	beq.w	8004b0a <_printf_float+0xba>
 8004d38:	f104 031a 	add.w	r3, r4, #26
 8004d3c:	f04f 0b00 	mov.w	fp, #0
 8004d40:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004d44:	9306      	str	r3, [sp, #24]
 8004d46:	e015      	b.n	8004d74 <_printf_float+0x324>
 8004d48:	7fefffff 	.word	0x7fefffff
 8004d4c:	08007408 	.word	0x08007408
 8004d50:	08007404 	.word	0x08007404
 8004d54:	08007410 	.word	0x08007410
 8004d58:	0800740c 	.word	0x0800740c
 8004d5c:	08007414 	.word	0x08007414
 8004d60:	2301      	movs	r3, #1
 8004d62:	9a06      	ldr	r2, [sp, #24]
 8004d64:	4631      	mov	r1, r6
 8004d66:	4628      	mov	r0, r5
 8004d68:	47b8      	blx	r7
 8004d6a:	3001      	adds	r0, #1
 8004d6c:	f43f aecd 	beq.w	8004b0a <_printf_float+0xba>
 8004d70:	f10b 0b01 	add.w	fp, fp, #1
 8004d74:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8004d78:	ebaa 0309 	sub.w	r3, sl, r9
 8004d7c:	455b      	cmp	r3, fp
 8004d7e:	dcef      	bgt.n	8004d60 <_printf_float+0x310>
 8004d80:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004d84:	429a      	cmp	r2, r3
 8004d86:	44d0      	add	r8, sl
 8004d88:	db15      	blt.n	8004db6 <_printf_float+0x366>
 8004d8a:	6823      	ldr	r3, [r4, #0]
 8004d8c:	07da      	lsls	r2, r3, #31
 8004d8e:	d412      	bmi.n	8004db6 <_printf_float+0x366>
 8004d90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004d92:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004d94:	eba3 020a 	sub.w	r2, r3, sl
 8004d98:	eba3 0a01 	sub.w	sl, r3, r1
 8004d9c:	4592      	cmp	sl, r2
 8004d9e:	bfa8      	it	ge
 8004da0:	4692      	movge	sl, r2
 8004da2:	f1ba 0f00 	cmp.w	sl, #0
 8004da6:	dc0e      	bgt.n	8004dc6 <_printf_float+0x376>
 8004da8:	f04f 0800 	mov.w	r8, #0
 8004dac:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8004db0:	f104 091a 	add.w	r9, r4, #26
 8004db4:	e019      	b.n	8004dea <_printf_float+0x39a>
 8004db6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004dba:	4631      	mov	r1, r6
 8004dbc:	4628      	mov	r0, r5
 8004dbe:	47b8      	blx	r7
 8004dc0:	3001      	adds	r0, #1
 8004dc2:	d1e5      	bne.n	8004d90 <_printf_float+0x340>
 8004dc4:	e6a1      	b.n	8004b0a <_printf_float+0xba>
 8004dc6:	4653      	mov	r3, sl
 8004dc8:	4642      	mov	r2, r8
 8004dca:	4631      	mov	r1, r6
 8004dcc:	4628      	mov	r0, r5
 8004dce:	47b8      	blx	r7
 8004dd0:	3001      	adds	r0, #1
 8004dd2:	d1e9      	bne.n	8004da8 <_printf_float+0x358>
 8004dd4:	e699      	b.n	8004b0a <_printf_float+0xba>
 8004dd6:	2301      	movs	r3, #1
 8004dd8:	464a      	mov	r2, r9
 8004dda:	4631      	mov	r1, r6
 8004ddc:	4628      	mov	r0, r5
 8004dde:	47b8      	blx	r7
 8004de0:	3001      	adds	r0, #1
 8004de2:	f43f ae92 	beq.w	8004b0a <_printf_float+0xba>
 8004de6:	f108 0801 	add.w	r8, r8, #1
 8004dea:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004dee:	1a9b      	subs	r3, r3, r2
 8004df0:	eba3 030a 	sub.w	r3, r3, sl
 8004df4:	4543      	cmp	r3, r8
 8004df6:	dcee      	bgt.n	8004dd6 <_printf_float+0x386>
 8004df8:	e74a      	b.n	8004c90 <_printf_float+0x240>
 8004dfa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004dfc:	2a01      	cmp	r2, #1
 8004dfe:	dc01      	bgt.n	8004e04 <_printf_float+0x3b4>
 8004e00:	07db      	lsls	r3, r3, #31
 8004e02:	d53a      	bpl.n	8004e7a <_printf_float+0x42a>
 8004e04:	2301      	movs	r3, #1
 8004e06:	4642      	mov	r2, r8
 8004e08:	4631      	mov	r1, r6
 8004e0a:	4628      	mov	r0, r5
 8004e0c:	47b8      	blx	r7
 8004e0e:	3001      	adds	r0, #1
 8004e10:	f43f ae7b 	beq.w	8004b0a <_printf_float+0xba>
 8004e14:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004e18:	4631      	mov	r1, r6
 8004e1a:	4628      	mov	r0, r5
 8004e1c:	47b8      	blx	r7
 8004e1e:	3001      	adds	r0, #1
 8004e20:	f108 0801 	add.w	r8, r8, #1
 8004e24:	f43f ae71 	beq.w	8004b0a <_printf_float+0xba>
 8004e28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	f103 3aff 	add.w	sl, r3, #4294967295	; 0xffffffff
 8004e30:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004e34:	2300      	movs	r3, #0
 8004e36:	f7fb fe4f 	bl	8000ad8 <__aeabi_dcmpeq>
 8004e3a:	b9c8      	cbnz	r0, 8004e70 <_printf_float+0x420>
 8004e3c:	4653      	mov	r3, sl
 8004e3e:	4642      	mov	r2, r8
 8004e40:	4631      	mov	r1, r6
 8004e42:	4628      	mov	r0, r5
 8004e44:	47b8      	blx	r7
 8004e46:	3001      	adds	r0, #1
 8004e48:	d10e      	bne.n	8004e68 <_printf_float+0x418>
 8004e4a:	e65e      	b.n	8004b0a <_printf_float+0xba>
 8004e4c:	2301      	movs	r3, #1
 8004e4e:	4652      	mov	r2, sl
 8004e50:	4631      	mov	r1, r6
 8004e52:	4628      	mov	r0, r5
 8004e54:	47b8      	blx	r7
 8004e56:	3001      	adds	r0, #1
 8004e58:	f43f ae57 	beq.w	8004b0a <_printf_float+0xba>
 8004e5c:	f108 0801 	add.w	r8, r8, #1
 8004e60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004e62:	3b01      	subs	r3, #1
 8004e64:	4543      	cmp	r3, r8
 8004e66:	dcf1      	bgt.n	8004e4c <_printf_float+0x3fc>
 8004e68:	464b      	mov	r3, r9
 8004e6a:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004e6e:	e6de      	b.n	8004c2e <_printf_float+0x1de>
 8004e70:	f04f 0800 	mov.w	r8, #0
 8004e74:	f104 0a1a 	add.w	sl, r4, #26
 8004e78:	e7f2      	b.n	8004e60 <_printf_float+0x410>
 8004e7a:	2301      	movs	r3, #1
 8004e7c:	e7df      	b.n	8004e3e <_printf_float+0x3ee>
 8004e7e:	2301      	movs	r3, #1
 8004e80:	464a      	mov	r2, r9
 8004e82:	4631      	mov	r1, r6
 8004e84:	4628      	mov	r0, r5
 8004e86:	47b8      	blx	r7
 8004e88:	3001      	adds	r0, #1
 8004e8a:	f43f ae3e 	beq.w	8004b0a <_printf_float+0xba>
 8004e8e:	f108 0801 	add.w	r8, r8, #1
 8004e92:	68e3      	ldr	r3, [r4, #12]
 8004e94:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004e96:	1a9b      	subs	r3, r3, r2
 8004e98:	4543      	cmp	r3, r8
 8004e9a:	dcf0      	bgt.n	8004e7e <_printf_float+0x42e>
 8004e9c:	e6fc      	b.n	8004c98 <_printf_float+0x248>
 8004e9e:	f04f 0800 	mov.w	r8, #0
 8004ea2:	f104 0919 	add.w	r9, r4, #25
 8004ea6:	e7f4      	b.n	8004e92 <_printf_float+0x442>
 8004ea8:	2900      	cmp	r1, #0
 8004eaa:	f43f ae8b 	beq.w	8004bc4 <_printf_float+0x174>
 8004eae:	2300      	movs	r3, #0
 8004eb0:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8004eb4:	ab09      	add	r3, sp, #36	; 0x24
 8004eb6:	9300      	str	r3, [sp, #0]
 8004eb8:	ec49 8b10 	vmov	d0, r8, r9
 8004ebc:	6022      	str	r2, [r4, #0]
 8004ebe:	f8cd a004 	str.w	sl, [sp, #4]
 8004ec2:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004ec6:	4628      	mov	r0, r5
 8004ec8:	f7ff fd2e 	bl	8004928 <__cvt>
 8004ecc:	4680      	mov	r8, r0
 8004ece:	e648      	b.n	8004b62 <_printf_float+0x112>

08004ed0 <_printf_common>:
 8004ed0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ed4:	4691      	mov	r9, r2
 8004ed6:	461f      	mov	r7, r3
 8004ed8:	688a      	ldr	r2, [r1, #8]
 8004eda:	690b      	ldr	r3, [r1, #16]
 8004edc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004ee0:	4293      	cmp	r3, r2
 8004ee2:	bfb8      	it	lt
 8004ee4:	4613      	movlt	r3, r2
 8004ee6:	f8c9 3000 	str.w	r3, [r9]
 8004eea:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004eee:	4606      	mov	r6, r0
 8004ef0:	460c      	mov	r4, r1
 8004ef2:	b112      	cbz	r2, 8004efa <_printf_common+0x2a>
 8004ef4:	3301      	adds	r3, #1
 8004ef6:	f8c9 3000 	str.w	r3, [r9]
 8004efa:	6823      	ldr	r3, [r4, #0]
 8004efc:	0699      	lsls	r1, r3, #26
 8004efe:	bf42      	ittt	mi
 8004f00:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004f04:	3302      	addmi	r3, #2
 8004f06:	f8c9 3000 	strmi.w	r3, [r9]
 8004f0a:	6825      	ldr	r5, [r4, #0]
 8004f0c:	f015 0506 	ands.w	r5, r5, #6
 8004f10:	d107      	bne.n	8004f22 <_printf_common+0x52>
 8004f12:	f104 0a19 	add.w	sl, r4, #25
 8004f16:	68e3      	ldr	r3, [r4, #12]
 8004f18:	f8d9 2000 	ldr.w	r2, [r9]
 8004f1c:	1a9b      	subs	r3, r3, r2
 8004f1e:	42ab      	cmp	r3, r5
 8004f20:	dc28      	bgt.n	8004f74 <_printf_common+0xa4>
 8004f22:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004f26:	6822      	ldr	r2, [r4, #0]
 8004f28:	3300      	adds	r3, #0
 8004f2a:	bf18      	it	ne
 8004f2c:	2301      	movne	r3, #1
 8004f2e:	0692      	lsls	r2, r2, #26
 8004f30:	d42d      	bmi.n	8004f8e <_printf_common+0xbe>
 8004f32:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004f36:	4639      	mov	r1, r7
 8004f38:	4630      	mov	r0, r6
 8004f3a:	47c0      	blx	r8
 8004f3c:	3001      	adds	r0, #1
 8004f3e:	d020      	beq.n	8004f82 <_printf_common+0xb2>
 8004f40:	6823      	ldr	r3, [r4, #0]
 8004f42:	68e5      	ldr	r5, [r4, #12]
 8004f44:	f8d9 2000 	ldr.w	r2, [r9]
 8004f48:	f003 0306 	and.w	r3, r3, #6
 8004f4c:	2b04      	cmp	r3, #4
 8004f4e:	bf08      	it	eq
 8004f50:	1aad      	subeq	r5, r5, r2
 8004f52:	68a3      	ldr	r3, [r4, #8]
 8004f54:	6922      	ldr	r2, [r4, #16]
 8004f56:	bf0c      	ite	eq
 8004f58:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004f5c:	2500      	movne	r5, #0
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	bfc4      	itt	gt
 8004f62:	1a9b      	subgt	r3, r3, r2
 8004f64:	18ed      	addgt	r5, r5, r3
 8004f66:	f04f 0900 	mov.w	r9, #0
 8004f6a:	341a      	adds	r4, #26
 8004f6c:	454d      	cmp	r5, r9
 8004f6e:	d11a      	bne.n	8004fa6 <_printf_common+0xd6>
 8004f70:	2000      	movs	r0, #0
 8004f72:	e008      	b.n	8004f86 <_printf_common+0xb6>
 8004f74:	2301      	movs	r3, #1
 8004f76:	4652      	mov	r2, sl
 8004f78:	4639      	mov	r1, r7
 8004f7a:	4630      	mov	r0, r6
 8004f7c:	47c0      	blx	r8
 8004f7e:	3001      	adds	r0, #1
 8004f80:	d103      	bne.n	8004f8a <_printf_common+0xba>
 8004f82:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004f86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f8a:	3501      	adds	r5, #1
 8004f8c:	e7c3      	b.n	8004f16 <_printf_common+0x46>
 8004f8e:	18e1      	adds	r1, r4, r3
 8004f90:	1c5a      	adds	r2, r3, #1
 8004f92:	2030      	movs	r0, #48	; 0x30
 8004f94:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004f98:	4422      	add	r2, r4
 8004f9a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004f9e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004fa2:	3302      	adds	r3, #2
 8004fa4:	e7c5      	b.n	8004f32 <_printf_common+0x62>
 8004fa6:	2301      	movs	r3, #1
 8004fa8:	4622      	mov	r2, r4
 8004faa:	4639      	mov	r1, r7
 8004fac:	4630      	mov	r0, r6
 8004fae:	47c0      	blx	r8
 8004fb0:	3001      	adds	r0, #1
 8004fb2:	d0e6      	beq.n	8004f82 <_printf_common+0xb2>
 8004fb4:	f109 0901 	add.w	r9, r9, #1
 8004fb8:	e7d8      	b.n	8004f6c <_printf_common+0x9c>
	...

08004fbc <_printf_i>:
 8004fbc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004fc0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004fc4:	460c      	mov	r4, r1
 8004fc6:	7e09      	ldrb	r1, [r1, #24]
 8004fc8:	b085      	sub	sp, #20
 8004fca:	296e      	cmp	r1, #110	; 0x6e
 8004fcc:	4617      	mov	r7, r2
 8004fce:	4606      	mov	r6, r0
 8004fd0:	4698      	mov	r8, r3
 8004fd2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004fd4:	f000 80b3 	beq.w	800513e <_printf_i+0x182>
 8004fd8:	d822      	bhi.n	8005020 <_printf_i+0x64>
 8004fda:	2963      	cmp	r1, #99	; 0x63
 8004fdc:	d036      	beq.n	800504c <_printf_i+0x90>
 8004fde:	d80a      	bhi.n	8004ff6 <_printf_i+0x3a>
 8004fe0:	2900      	cmp	r1, #0
 8004fe2:	f000 80b9 	beq.w	8005158 <_printf_i+0x19c>
 8004fe6:	2958      	cmp	r1, #88	; 0x58
 8004fe8:	f000 8083 	beq.w	80050f2 <_printf_i+0x136>
 8004fec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004ff0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004ff4:	e032      	b.n	800505c <_printf_i+0xa0>
 8004ff6:	2964      	cmp	r1, #100	; 0x64
 8004ff8:	d001      	beq.n	8004ffe <_printf_i+0x42>
 8004ffa:	2969      	cmp	r1, #105	; 0x69
 8004ffc:	d1f6      	bne.n	8004fec <_printf_i+0x30>
 8004ffe:	6820      	ldr	r0, [r4, #0]
 8005000:	6813      	ldr	r3, [r2, #0]
 8005002:	0605      	lsls	r5, r0, #24
 8005004:	f103 0104 	add.w	r1, r3, #4
 8005008:	d52a      	bpl.n	8005060 <_printf_i+0xa4>
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	6011      	str	r1, [r2, #0]
 800500e:	2b00      	cmp	r3, #0
 8005010:	da03      	bge.n	800501a <_printf_i+0x5e>
 8005012:	222d      	movs	r2, #45	; 0x2d
 8005014:	425b      	negs	r3, r3
 8005016:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800501a:	486f      	ldr	r0, [pc, #444]	; (80051d8 <_printf_i+0x21c>)
 800501c:	220a      	movs	r2, #10
 800501e:	e039      	b.n	8005094 <_printf_i+0xd8>
 8005020:	2973      	cmp	r1, #115	; 0x73
 8005022:	f000 809d 	beq.w	8005160 <_printf_i+0x1a4>
 8005026:	d808      	bhi.n	800503a <_printf_i+0x7e>
 8005028:	296f      	cmp	r1, #111	; 0x6f
 800502a:	d020      	beq.n	800506e <_printf_i+0xb2>
 800502c:	2970      	cmp	r1, #112	; 0x70
 800502e:	d1dd      	bne.n	8004fec <_printf_i+0x30>
 8005030:	6823      	ldr	r3, [r4, #0]
 8005032:	f043 0320 	orr.w	r3, r3, #32
 8005036:	6023      	str	r3, [r4, #0]
 8005038:	e003      	b.n	8005042 <_printf_i+0x86>
 800503a:	2975      	cmp	r1, #117	; 0x75
 800503c:	d017      	beq.n	800506e <_printf_i+0xb2>
 800503e:	2978      	cmp	r1, #120	; 0x78
 8005040:	d1d4      	bne.n	8004fec <_printf_i+0x30>
 8005042:	2378      	movs	r3, #120	; 0x78
 8005044:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005048:	4864      	ldr	r0, [pc, #400]	; (80051dc <_printf_i+0x220>)
 800504a:	e055      	b.n	80050f8 <_printf_i+0x13c>
 800504c:	6813      	ldr	r3, [r2, #0]
 800504e:	1d19      	adds	r1, r3, #4
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	6011      	str	r1, [r2, #0]
 8005054:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005058:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800505c:	2301      	movs	r3, #1
 800505e:	e08c      	b.n	800517a <_printf_i+0x1be>
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	6011      	str	r1, [r2, #0]
 8005064:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005068:	bf18      	it	ne
 800506a:	b21b      	sxthne	r3, r3
 800506c:	e7cf      	b.n	800500e <_printf_i+0x52>
 800506e:	6813      	ldr	r3, [r2, #0]
 8005070:	6825      	ldr	r5, [r4, #0]
 8005072:	1d18      	adds	r0, r3, #4
 8005074:	6010      	str	r0, [r2, #0]
 8005076:	0628      	lsls	r0, r5, #24
 8005078:	d501      	bpl.n	800507e <_printf_i+0xc2>
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	e002      	b.n	8005084 <_printf_i+0xc8>
 800507e:	0668      	lsls	r0, r5, #25
 8005080:	d5fb      	bpl.n	800507a <_printf_i+0xbe>
 8005082:	881b      	ldrh	r3, [r3, #0]
 8005084:	4854      	ldr	r0, [pc, #336]	; (80051d8 <_printf_i+0x21c>)
 8005086:	296f      	cmp	r1, #111	; 0x6f
 8005088:	bf14      	ite	ne
 800508a:	220a      	movne	r2, #10
 800508c:	2208      	moveq	r2, #8
 800508e:	2100      	movs	r1, #0
 8005090:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005094:	6865      	ldr	r5, [r4, #4]
 8005096:	60a5      	str	r5, [r4, #8]
 8005098:	2d00      	cmp	r5, #0
 800509a:	f2c0 8095 	blt.w	80051c8 <_printf_i+0x20c>
 800509e:	6821      	ldr	r1, [r4, #0]
 80050a0:	f021 0104 	bic.w	r1, r1, #4
 80050a4:	6021      	str	r1, [r4, #0]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d13d      	bne.n	8005126 <_printf_i+0x16a>
 80050aa:	2d00      	cmp	r5, #0
 80050ac:	f040 808e 	bne.w	80051cc <_printf_i+0x210>
 80050b0:	4665      	mov	r5, ip
 80050b2:	2a08      	cmp	r2, #8
 80050b4:	d10b      	bne.n	80050ce <_printf_i+0x112>
 80050b6:	6823      	ldr	r3, [r4, #0]
 80050b8:	07db      	lsls	r3, r3, #31
 80050ba:	d508      	bpl.n	80050ce <_printf_i+0x112>
 80050bc:	6923      	ldr	r3, [r4, #16]
 80050be:	6862      	ldr	r2, [r4, #4]
 80050c0:	429a      	cmp	r2, r3
 80050c2:	bfde      	ittt	le
 80050c4:	2330      	movle	r3, #48	; 0x30
 80050c6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80050ca:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80050ce:	ebac 0305 	sub.w	r3, ip, r5
 80050d2:	6123      	str	r3, [r4, #16]
 80050d4:	f8cd 8000 	str.w	r8, [sp]
 80050d8:	463b      	mov	r3, r7
 80050da:	aa03      	add	r2, sp, #12
 80050dc:	4621      	mov	r1, r4
 80050de:	4630      	mov	r0, r6
 80050e0:	f7ff fef6 	bl	8004ed0 <_printf_common>
 80050e4:	3001      	adds	r0, #1
 80050e6:	d14d      	bne.n	8005184 <_printf_i+0x1c8>
 80050e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80050ec:	b005      	add	sp, #20
 80050ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80050f2:	4839      	ldr	r0, [pc, #228]	; (80051d8 <_printf_i+0x21c>)
 80050f4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80050f8:	6813      	ldr	r3, [r2, #0]
 80050fa:	6821      	ldr	r1, [r4, #0]
 80050fc:	1d1d      	adds	r5, r3, #4
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	6015      	str	r5, [r2, #0]
 8005102:	060a      	lsls	r2, r1, #24
 8005104:	d50b      	bpl.n	800511e <_printf_i+0x162>
 8005106:	07ca      	lsls	r2, r1, #31
 8005108:	bf44      	itt	mi
 800510a:	f041 0120 	orrmi.w	r1, r1, #32
 800510e:	6021      	strmi	r1, [r4, #0]
 8005110:	b91b      	cbnz	r3, 800511a <_printf_i+0x15e>
 8005112:	6822      	ldr	r2, [r4, #0]
 8005114:	f022 0220 	bic.w	r2, r2, #32
 8005118:	6022      	str	r2, [r4, #0]
 800511a:	2210      	movs	r2, #16
 800511c:	e7b7      	b.n	800508e <_printf_i+0xd2>
 800511e:	064d      	lsls	r5, r1, #25
 8005120:	bf48      	it	mi
 8005122:	b29b      	uxthmi	r3, r3
 8005124:	e7ef      	b.n	8005106 <_printf_i+0x14a>
 8005126:	4665      	mov	r5, ip
 8005128:	fbb3 f1f2 	udiv	r1, r3, r2
 800512c:	fb02 3311 	mls	r3, r2, r1, r3
 8005130:	5cc3      	ldrb	r3, [r0, r3]
 8005132:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8005136:	460b      	mov	r3, r1
 8005138:	2900      	cmp	r1, #0
 800513a:	d1f5      	bne.n	8005128 <_printf_i+0x16c>
 800513c:	e7b9      	b.n	80050b2 <_printf_i+0xf6>
 800513e:	6813      	ldr	r3, [r2, #0]
 8005140:	6825      	ldr	r5, [r4, #0]
 8005142:	6961      	ldr	r1, [r4, #20]
 8005144:	1d18      	adds	r0, r3, #4
 8005146:	6010      	str	r0, [r2, #0]
 8005148:	0628      	lsls	r0, r5, #24
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	d501      	bpl.n	8005152 <_printf_i+0x196>
 800514e:	6019      	str	r1, [r3, #0]
 8005150:	e002      	b.n	8005158 <_printf_i+0x19c>
 8005152:	066a      	lsls	r2, r5, #25
 8005154:	d5fb      	bpl.n	800514e <_printf_i+0x192>
 8005156:	8019      	strh	r1, [r3, #0]
 8005158:	2300      	movs	r3, #0
 800515a:	6123      	str	r3, [r4, #16]
 800515c:	4665      	mov	r5, ip
 800515e:	e7b9      	b.n	80050d4 <_printf_i+0x118>
 8005160:	6813      	ldr	r3, [r2, #0]
 8005162:	1d19      	adds	r1, r3, #4
 8005164:	6011      	str	r1, [r2, #0]
 8005166:	681d      	ldr	r5, [r3, #0]
 8005168:	6862      	ldr	r2, [r4, #4]
 800516a:	2100      	movs	r1, #0
 800516c:	4628      	mov	r0, r5
 800516e:	f7fb f83f 	bl	80001f0 <memchr>
 8005172:	b108      	cbz	r0, 8005178 <_printf_i+0x1bc>
 8005174:	1b40      	subs	r0, r0, r5
 8005176:	6060      	str	r0, [r4, #4]
 8005178:	6863      	ldr	r3, [r4, #4]
 800517a:	6123      	str	r3, [r4, #16]
 800517c:	2300      	movs	r3, #0
 800517e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005182:	e7a7      	b.n	80050d4 <_printf_i+0x118>
 8005184:	6923      	ldr	r3, [r4, #16]
 8005186:	462a      	mov	r2, r5
 8005188:	4639      	mov	r1, r7
 800518a:	4630      	mov	r0, r6
 800518c:	47c0      	blx	r8
 800518e:	3001      	adds	r0, #1
 8005190:	d0aa      	beq.n	80050e8 <_printf_i+0x12c>
 8005192:	6823      	ldr	r3, [r4, #0]
 8005194:	079b      	lsls	r3, r3, #30
 8005196:	d413      	bmi.n	80051c0 <_printf_i+0x204>
 8005198:	68e0      	ldr	r0, [r4, #12]
 800519a:	9b03      	ldr	r3, [sp, #12]
 800519c:	4298      	cmp	r0, r3
 800519e:	bfb8      	it	lt
 80051a0:	4618      	movlt	r0, r3
 80051a2:	e7a3      	b.n	80050ec <_printf_i+0x130>
 80051a4:	2301      	movs	r3, #1
 80051a6:	464a      	mov	r2, r9
 80051a8:	4639      	mov	r1, r7
 80051aa:	4630      	mov	r0, r6
 80051ac:	47c0      	blx	r8
 80051ae:	3001      	adds	r0, #1
 80051b0:	d09a      	beq.n	80050e8 <_printf_i+0x12c>
 80051b2:	3501      	adds	r5, #1
 80051b4:	68e3      	ldr	r3, [r4, #12]
 80051b6:	9a03      	ldr	r2, [sp, #12]
 80051b8:	1a9b      	subs	r3, r3, r2
 80051ba:	42ab      	cmp	r3, r5
 80051bc:	dcf2      	bgt.n	80051a4 <_printf_i+0x1e8>
 80051be:	e7eb      	b.n	8005198 <_printf_i+0x1dc>
 80051c0:	2500      	movs	r5, #0
 80051c2:	f104 0919 	add.w	r9, r4, #25
 80051c6:	e7f5      	b.n	80051b4 <_printf_i+0x1f8>
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d1ac      	bne.n	8005126 <_printf_i+0x16a>
 80051cc:	7803      	ldrb	r3, [r0, #0]
 80051ce:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80051d2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80051d6:	e76c      	b.n	80050b2 <_printf_i+0xf6>
 80051d8:	08007416 	.word	0x08007416
 80051dc:	08007427 	.word	0x08007427

080051e0 <siprintf>:
 80051e0:	b40e      	push	{r1, r2, r3}
 80051e2:	b500      	push	{lr}
 80051e4:	b09c      	sub	sp, #112	; 0x70
 80051e6:	ab1d      	add	r3, sp, #116	; 0x74
 80051e8:	9002      	str	r0, [sp, #8]
 80051ea:	9006      	str	r0, [sp, #24]
 80051ec:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80051f0:	4809      	ldr	r0, [pc, #36]	; (8005218 <siprintf+0x38>)
 80051f2:	9107      	str	r1, [sp, #28]
 80051f4:	9104      	str	r1, [sp, #16]
 80051f6:	4909      	ldr	r1, [pc, #36]	; (800521c <siprintf+0x3c>)
 80051f8:	f853 2b04 	ldr.w	r2, [r3], #4
 80051fc:	9105      	str	r1, [sp, #20]
 80051fe:	6800      	ldr	r0, [r0, #0]
 8005200:	9301      	str	r3, [sp, #4]
 8005202:	a902      	add	r1, sp, #8
 8005204:	f001 fa72 	bl	80066ec <_svfiprintf_r>
 8005208:	9b02      	ldr	r3, [sp, #8]
 800520a:	2200      	movs	r2, #0
 800520c:	701a      	strb	r2, [r3, #0]
 800520e:	b01c      	add	sp, #112	; 0x70
 8005210:	f85d eb04 	ldr.w	lr, [sp], #4
 8005214:	b003      	add	sp, #12
 8005216:	4770      	bx	lr
 8005218:	20000014 	.word	0x20000014
 800521c:	ffff0208 	.word	0xffff0208

08005220 <_vsiprintf_r>:
 8005220:	b500      	push	{lr}
 8005222:	b09b      	sub	sp, #108	; 0x6c
 8005224:	9100      	str	r1, [sp, #0]
 8005226:	9104      	str	r1, [sp, #16]
 8005228:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800522c:	9105      	str	r1, [sp, #20]
 800522e:	9102      	str	r1, [sp, #8]
 8005230:	4905      	ldr	r1, [pc, #20]	; (8005248 <_vsiprintf_r+0x28>)
 8005232:	9103      	str	r1, [sp, #12]
 8005234:	4669      	mov	r1, sp
 8005236:	f001 fa59 	bl	80066ec <_svfiprintf_r>
 800523a:	9b00      	ldr	r3, [sp, #0]
 800523c:	2200      	movs	r2, #0
 800523e:	701a      	strb	r2, [r3, #0]
 8005240:	b01b      	add	sp, #108	; 0x6c
 8005242:	f85d fb04 	ldr.w	pc, [sp], #4
 8005246:	bf00      	nop
 8005248:	ffff0208 	.word	0xffff0208

0800524c <vsiprintf>:
 800524c:	4613      	mov	r3, r2
 800524e:	460a      	mov	r2, r1
 8005250:	4601      	mov	r1, r0
 8005252:	4802      	ldr	r0, [pc, #8]	; (800525c <vsiprintf+0x10>)
 8005254:	6800      	ldr	r0, [r0, #0]
 8005256:	f7ff bfe3 	b.w	8005220 <_vsiprintf_r>
 800525a:	bf00      	nop
 800525c:	20000014 	.word	0x20000014

08005260 <quorem>:
 8005260:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005264:	6903      	ldr	r3, [r0, #16]
 8005266:	690c      	ldr	r4, [r1, #16]
 8005268:	42a3      	cmp	r3, r4
 800526a:	4680      	mov	r8, r0
 800526c:	f2c0 8082 	blt.w	8005374 <quorem+0x114>
 8005270:	3c01      	subs	r4, #1
 8005272:	f101 0714 	add.w	r7, r1, #20
 8005276:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800527a:	f100 0614 	add.w	r6, r0, #20
 800527e:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8005282:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8005286:	eb06 030c 	add.w	r3, r6, ip
 800528a:	3501      	adds	r5, #1
 800528c:	eb07 090c 	add.w	r9, r7, ip
 8005290:	9301      	str	r3, [sp, #4]
 8005292:	fbb0 f5f5 	udiv	r5, r0, r5
 8005296:	b395      	cbz	r5, 80052fe <quorem+0x9e>
 8005298:	f04f 0a00 	mov.w	sl, #0
 800529c:	4638      	mov	r0, r7
 800529e:	46b6      	mov	lr, r6
 80052a0:	46d3      	mov	fp, sl
 80052a2:	f850 2b04 	ldr.w	r2, [r0], #4
 80052a6:	b293      	uxth	r3, r2
 80052a8:	fb05 a303 	mla	r3, r5, r3, sl
 80052ac:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80052b0:	b29b      	uxth	r3, r3
 80052b2:	ebab 0303 	sub.w	r3, fp, r3
 80052b6:	0c12      	lsrs	r2, r2, #16
 80052b8:	f8de b000 	ldr.w	fp, [lr]
 80052bc:	fb05 a202 	mla	r2, r5, r2, sl
 80052c0:	fa13 f38b 	uxtah	r3, r3, fp
 80052c4:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80052c8:	fa1f fb82 	uxth.w	fp, r2
 80052cc:	f8de 2000 	ldr.w	r2, [lr]
 80052d0:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80052d4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80052d8:	b29b      	uxth	r3, r3
 80052da:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80052de:	4581      	cmp	r9, r0
 80052e0:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80052e4:	f84e 3b04 	str.w	r3, [lr], #4
 80052e8:	d2db      	bcs.n	80052a2 <quorem+0x42>
 80052ea:	f856 300c 	ldr.w	r3, [r6, ip]
 80052ee:	b933      	cbnz	r3, 80052fe <quorem+0x9e>
 80052f0:	9b01      	ldr	r3, [sp, #4]
 80052f2:	3b04      	subs	r3, #4
 80052f4:	429e      	cmp	r6, r3
 80052f6:	461a      	mov	r2, r3
 80052f8:	d330      	bcc.n	800535c <quorem+0xfc>
 80052fa:	f8c8 4010 	str.w	r4, [r8, #16]
 80052fe:	4640      	mov	r0, r8
 8005300:	f001 f81e 	bl	8006340 <__mcmp>
 8005304:	2800      	cmp	r0, #0
 8005306:	db25      	blt.n	8005354 <quorem+0xf4>
 8005308:	3501      	adds	r5, #1
 800530a:	4630      	mov	r0, r6
 800530c:	f04f 0c00 	mov.w	ip, #0
 8005310:	f857 2b04 	ldr.w	r2, [r7], #4
 8005314:	f8d0 e000 	ldr.w	lr, [r0]
 8005318:	b293      	uxth	r3, r2
 800531a:	ebac 0303 	sub.w	r3, ip, r3
 800531e:	0c12      	lsrs	r2, r2, #16
 8005320:	fa13 f38e 	uxtah	r3, r3, lr
 8005324:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005328:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800532c:	b29b      	uxth	r3, r3
 800532e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005332:	45b9      	cmp	r9, r7
 8005334:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005338:	f840 3b04 	str.w	r3, [r0], #4
 800533c:	d2e8      	bcs.n	8005310 <quorem+0xb0>
 800533e:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8005342:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8005346:	b92a      	cbnz	r2, 8005354 <quorem+0xf4>
 8005348:	3b04      	subs	r3, #4
 800534a:	429e      	cmp	r6, r3
 800534c:	461a      	mov	r2, r3
 800534e:	d30b      	bcc.n	8005368 <quorem+0x108>
 8005350:	f8c8 4010 	str.w	r4, [r8, #16]
 8005354:	4628      	mov	r0, r5
 8005356:	b003      	add	sp, #12
 8005358:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800535c:	6812      	ldr	r2, [r2, #0]
 800535e:	3b04      	subs	r3, #4
 8005360:	2a00      	cmp	r2, #0
 8005362:	d1ca      	bne.n	80052fa <quorem+0x9a>
 8005364:	3c01      	subs	r4, #1
 8005366:	e7c5      	b.n	80052f4 <quorem+0x94>
 8005368:	6812      	ldr	r2, [r2, #0]
 800536a:	3b04      	subs	r3, #4
 800536c:	2a00      	cmp	r2, #0
 800536e:	d1ef      	bne.n	8005350 <quorem+0xf0>
 8005370:	3c01      	subs	r4, #1
 8005372:	e7ea      	b.n	800534a <quorem+0xea>
 8005374:	2000      	movs	r0, #0
 8005376:	e7ee      	b.n	8005356 <quorem+0xf6>

08005378 <_dtoa_r>:
 8005378:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800537c:	ec57 6b10 	vmov	r6, r7, d0
 8005380:	b097      	sub	sp, #92	; 0x5c
 8005382:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005384:	9106      	str	r1, [sp, #24]
 8005386:	4604      	mov	r4, r0
 8005388:	920b      	str	r2, [sp, #44]	; 0x2c
 800538a:	9312      	str	r3, [sp, #72]	; 0x48
 800538c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005390:	e9cd 6700 	strd	r6, r7, [sp]
 8005394:	b93d      	cbnz	r5, 80053a6 <_dtoa_r+0x2e>
 8005396:	2010      	movs	r0, #16
 8005398:	f000 fdb4 	bl	8005f04 <malloc>
 800539c:	6260      	str	r0, [r4, #36]	; 0x24
 800539e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80053a2:	6005      	str	r5, [r0, #0]
 80053a4:	60c5      	str	r5, [r0, #12]
 80053a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80053a8:	6819      	ldr	r1, [r3, #0]
 80053aa:	b151      	cbz	r1, 80053c2 <_dtoa_r+0x4a>
 80053ac:	685a      	ldr	r2, [r3, #4]
 80053ae:	604a      	str	r2, [r1, #4]
 80053b0:	2301      	movs	r3, #1
 80053b2:	4093      	lsls	r3, r2
 80053b4:	608b      	str	r3, [r1, #8]
 80053b6:	4620      	mov	r0, r4
 80053b8:	f000 fde0 	bl	8005f7c <_Bfree>
 80053bc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80053be:	2200      	movs	r2, #0
 80053c0:	601a      	str	r2, [r3, #0]
 80053c2:	1e3b      	subs	r3, r7, #0
 80053c4:	bfbb      	ittet	lt
 80053c6:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80053ca:	9301      	strlt	r3, [sp, #4]
 80053cc:	2300      	movge	r3, #0
 80053ce:	2201      	movlt	r2, #1
 80053d0:	bfac      	ite	ge
 80053d2:	f8c8 3000 	strge.w	r3, [r8]
 80053d6:	f8c8 2000 	strlt.w	r2, [r8]
 80053da:	4baf      	ldr	r3, [pc, #700]	; (8005698 <_dtoa_r+0x320>)
 80053dc:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80053e0:	ea33 0308 	bics.w	r3, r3, r8
 80053e4:	d114      	bne.n	8005410 <_dtoa_r+0x98>
 80053e6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80053e8:	f242 730f 	movw	r3, #9999	; 0x270f
 80053ec:	6013      	str	r3, [r2, #0]
 80053ee:	9b00      	ldr	r3, [sp, #0]
 80053f0:	b923      	cbnz	r3, 80053fc <_dtoa_r+0x84>
 80053f2:	f3c8 0013 	ubfx	r0, r8, #0, #20
 80053f6:	2800      	cmp	r0, #0
 80053f8:	f000 8542 	beq.w	8005e80 <_dtoa_r+0xb08>
 80053fc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80053fe:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 80056ac <_dtoa_r+0x334>
 8005402:	2b00      	cmp	r3, #0
 8005404:	f000 8544 	beq.w	8005e90 <_dtoa_r+0xb18>
 8005408:	f10b 0303 	add.w	r3, fp, #3
 800540c:	f000 bd3e 	b.w	8005e8c <_dtoa_r+0xb14>
 8005410:	e9dd 6700 	ldrd	r6, r7, [sp]
 8005414:	2200      	movs	r2, #0
 8005416:	2300      	movs	r3, #0
 8005418:	4630      	mov	r0, r6
 800541a:	4639      	mov	r1, r7
 800541c:	f7fb fb5c 	bl	8000ad8 <__aeabi_dcmpeq>
 8005420:	4681      	mov	r9, r0
 8005422:	b168      	cbz	r0, 8005440 <_dtoa_r+0xc8>
 8005424:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005426:	2301      	movs	r3, #1
 8005428:	6013      	str	r3, [r2, #0]
 800542a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800542c:	2b00      	cmp	r3, #0
 800542e:	f000 8524 	beq.w	8005e7a <_dtoa_r+0xb02>
 8005432:	4b9a      	ldr	r3, [pc, #616]	; (800569c <_dtoa_r+0x324>)
 8005434:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005436:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 800543a:	6013      	str	r3, [r2, #0]
 800543c:	f000 bd28 	b.w	8005e90 <_dtoa_r+0xb18>
 8005440:	aa14      	add	r2, sp, #80	; 0x50
 8005442:	a915      	add	r1, sp, #84	; 0x54
 8005444:	ec47 6b10 	vmov	d0, r6, r7
 8005448:	4620      	mov	r0, r4
 800544a:	f000 fff0 	bl	800642e <__d2b>
 800544e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8005452:	9004      	str	r0, [sp, #16]
 8005454:	2d00      	cmp	r5, #0
 8005456:	d07c      	beq.n	8005552 <_dtoa_r+0x1da>
 8005458:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800545c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8005460:	46b2      	mov	sl, r6
 8005462:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8005466:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800546a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800546e:	2200      	movs	r2, #0
 8005470:	4b8b      	ldr	r3, [pc, #556]	; (80056a0 <_dtoa_r+0x328>)
 8005472:	4650      	mov	r0, sl
 8005474:	4659      	mov	r1, fp
 8005476:	f7fa ff0f 	bl	8000298 <__aeabi_dsub>
 800547a:	a381      	add	r3, pc, #516	; (adr r3, 8005680 <_dtoa_r+0x308>)
 800547c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005480:	f7fb f8c2 	bl	8000608 <__aeabi_dmul>
 8005484:	a380      	add	r3, pc, #512	; (adr r3, 8005688 <_dtoa_r+0x310>)
 8005486:	e9d3 2300 	ldrd	r2, r3, [r3]
 800548a:	f7fa ff07 	bl	800029c <__adddf3>
 800548e:	4606      	mov	r6, r0
 8005490:	4628      	mov	r0, r5
 8005492:	460f      	mov	r7, r1
 8005494:	f7fb f84e 	bl	8000534 <__aeabi_i2d>
 8005498:	a37d      	add	r3, pc, #500	; (adr r3, 8005690 <_dtoa_r+0x318>)
 800549a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800549e:	f7fb f8b3 	bl	8000608 <__aeabi_dmul>
 80054a2:	4602      	mov	r2, r0
 80054a4:	460b      	mov	r3, r1
 80054a6:	4630      	mov	r0, r6
 80054a8:	4639      	mov	r1, r7
 80054aa:	f7fa fef7 	bl	800029c <__adddf3>
 80054ae:	4606      	mov	r6, r0
 80054b0:	460f      	mov	r7, r1
 80054b2:	f7fb fb59 	bl	8000b68 <__aeabi_d2iz>
 80054b6:	2200      	movs	r2, #0
 80054b8:	4682      	mov	sl, r0
 80054ba:	2300      	movs	r3, #0
 80054bc:	4630      	mov	r0, r6
 80054be:	4639      	mov	r1, r7
 80054c0:	f7fb fb14 	bl	8000aec <__aeabi_dcmplt>
 80054c4:	b148      	cbz	r0, 80054da <_dtoa_r+0x162>
 80054c6:	4650      	mov	r0, sl
 80054c8:	f7fb f834 	bl	8000534 <__aeabi_i2d>
 80054cc:	4632      	mov	r2, r6
 80054ce:	463b      	mov	r3, r7
 80054d0:	f7fb fb02 	bl	8000ad8 <__aeabi_dcmpeq>
 80054d4:	b908      	cbnz	r0, 80054da <_dtoa_r+0x162>
 80054d6:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80054da:	f1ba 0f16 	cmp.w	sl, #22
 80054de:	d859      	bhi.n	8005594 <_dtoa_r+0x21c>
 80054e0:	4970      	ldr	r1, [pc, #448]	; (80056a4 <_dtoa_r+0x32c>)
 80054e2:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80054e6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80054ea:	e9d1 0100 	ldrd	r0, r1, [r1]
 80054ee:	f7fb fb1b 	bl	8000b28 <__aeabi_dcmpgt>
 80054f2:	2800      	cmp	r0, #0
 80054f4:	d050      	beq.n	8005598 <_dtoa_r+0x220>
 80054f6:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80054fa:	2300      	movs	r3, #0
 80054fc:	930f      	str	r3, [sp, #60]	; 0x3c
 80054fe:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005500:	1b5d      	subs	r5, r3, r5
 8005502:	f1b5 0801 	subs.w	r8, r5, #1
 8005506:	bf49      	itett	mi
 8005508:	f1c5 0301 	rsbmi	r3, r5, #1
 800550c:	2300      	movpl	r3, #0
 800550e:	9305      	strmi	r3, [sp, #20]
 8005510:	f04f 0800 	movmi.w	r8, #0
 8005514:	bf58      	it	pl
 8005516:	9305      	strpl	r3, [sp, #20]
 8005518:	f1ba 0f00 	cmp.w	sl, #0
 800551c:	db3e      	blt.n	800559c <_dtoa_r+0x224>
 800551e:	2300      	movs	r3, #0
 8005520:	44d0      	add	r8, sl
 8005522:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8005526:	9307      	str	r3, [sp, #28]
 8005528:	9b06      	ldr	r3, [sp, #24]
 800552a:	2b09      	cmp	r3, #9
 800552c:	f200 8090 	bhi.w	8005650 <_dtoa_r+0x2d8>
 8005530:	2b05      	cmp	r3, #5
 8005532:	bfc4      	itt	gt
 8005534:	3b04      	subgt	r3, #4
 8005536:	9306      	strgt	r3, [sp, #24]
 8005538:	9b06      	ldr	r3, [sp, #24]
 800553a:	f1a3 0302 	sub.w	r3, r3, #2
 800553e:	bfcc      	ite	gt
 8005540:	2500      	movgt	r5, #0
 8005542:	2501      	movle	r5, #1
 8005544:	2b03      	cmp	r3, #3
 8005546:	f200 808f 	bhi.w	8005668 <_dtoa_r+0x2f0>
 800554a:	e8df f003 	tbb	[pc, r3]
 800554e:	7f7d      	.short	0x7f7d
 8005550:	7131      	.short	0x7131
 8005552:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8005556:	441d      	add	r5, r3
 8005558:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800555c:	2820      	cmp	r0, #32
 800555e:	dd13      	ble.n	8005588 <_dtoa_r+0x210>
 8005560:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8005564:	9b00      	ldr	r3, [sp, #0]
 8005566:	fa08 f800 	lsl.w	r8, r8, r0
 800556a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800556e:	fa23 f000 	lsr.w	r0, r3, r0
 8005572:	ea48 0000 	orr.w	r0, r8, r0
 8005576:	f7fa ffcd 	bl	8000514 <__aeabi_ui2d>
 800557a:	2301      	movs	r3, #1
 800557c:	4682      	mov	sl, r0
 800557e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8005582:	3d01      	subs	r5, #1
 8005584:	9313      	str	r3, [sp, #76]	; 0x4c
 8005586:	e772      	b.n	800546e <_dtoa_r+0xf6>
 8005588:	9b00      	ldr	r3, [sp, #0]
 800558a:	f1c0 0020 	rsb	r0, r0, #32
 800558e:	fa03 f000 	lsl.w	r0, r3, r0
 8005592:	e7f0      	b.n	8005576 <_dtoa_r+0x1fe>
 8005594:	2301      	movs	r3, #1
 8005596:	e7b1      	b.n	80054fc <_dtoa_r+0x184>
 8005598:	900f      	str	r0, [sp, #60]	; 0x3c
 800559a:	e7b0      	b.n	80054fe <_dtoa_r+0x186>
 800559c:	9b05      	ldr	r3, [sp, #20]
 800559e:	eba3 030a 	sub.w	r3, r3, sl
 80055a2:	9305      	str	r3, [sp, #20]
 80055a4:	f1ca 0300 	rsb	r3, sl, #0
 80055a8:	9307      	str	r3, [sp, #28]
 80055aa:	2300      	movs	r3, #0
 80055ac:	930e      	str	r3, [sp, #56]	; 0x38
 80055ae:	e7bb      	b.n	8005528 <_dtoa_r+0x1b0>
 80055b0:	2301      	movs	r3, #1
 80055b2:	930a      	str	r3, [sp, #40]	; 0x28
 80055b4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	dd59      	ble.n	800566e <_dtoa_r+0x2f6>
 80055ba:	9302      	str	r3, [sp, #8]
 80055bc:	4699      	mov	r9, r3
 80055be:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80055c0:	2200      	movs	r2, #0
 80055c2:	6072      	str	r2, [r6, #4]
 80055c4:	2204      	movs	r2, #4
 80055c6:	f102 0014 	add.w	r0, r2, #20
 80055ca:	4298      	cmp	r0, r3
 80055cc:	6871      	ldr	r1, [r6, #4]
 80055ce:	d953      	bls.n	8005678 <_dtoa_r+0x300>
 80055d0:	4620      	mov	r0, r4
 80055d2:	f000 fc9f 	bl	8005f14 <_Balloc>
 80055d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80055d8:	6030      	str	r0, [r6, #0]
 80055da:	f1b9 0f0e 	cmp.w	r9, #14
 80055de:	f8d3 b000 	ldr.w	fp, [r3]
 80055e2:	f200 80e6 	bhi.w	80057b2 <_dtoa_r+0x43a>
 80055e6:	2d00      	cmp	r5, #0
 80055e8:	f000 80e3 	beq.w	80057b2 <_dtoa_r+0x43a>
 80055ec:	ed9d 7b00 	vldr	d7, [sp]
 80055f0:	f1ba 0f00 	cmp.w	sl, #0
 80055f4:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 80055f8:	dd74      	ble.n	80056e4 <_dtoa_r+0x36c>
 80055fa:	4a2a      	ldr	r2, [pc, #168]	; (80056a4 <_dtoa_r+0x32c>)
 80055fc:	f00a 030f 	and.w	r3, sl, #15
 8005600:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005604:	ed93 7b00 	vldr	d7, [r3]
 8005608:	ea4f 162a 	mov.w	r6, sl, asr #4
 800560c:	06f0      	lsls	r0, r6, #27
 800560e:	ed8d 7b08 	vstr	d7, [sp, #32]
 8005612:	d565      	bpl.n	80056e0 <_dtoa_r+0x368>
 8005614:	4b24      	ldr	r3, [pc, #144]	; (80056a8 <_dtoa_r+0x330>)
 8005616:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800561a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800561e:	f7fb f91d 	bl	800085c <__aeabi_ddiv>
 8005622:	e9cd 0100 	strd	r0, r1, [sp]
 8005626:	f006 060f 	and.w	r6, r6, #15
 800562a:	2503      	movs	r5, #3
 800562c:	4f1e      	ldr	r7, [pc, #120]	; (80056a8 <_dtoa_r+0x330>)
 800562e:	e04c      	b.n	80056ca <_dtoa_r+0x352>
 8005630:	2301      	movs	r3, #1
 8005632:	930a      	str	r3, [sp, #40]	; 0x28
 8005634:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005636:	4453      	add	r3, sl
 8005638:	f103 0901 	add.w	r9, r3, #1
 800563c:	9302      	str	r3, [sp, #8]
 800563e:	464b      	mov	r3, r9
 8005640:	2b01      	cmp	r3, #1
 8005642:	bfb8      	it	lt
 8005644:	2301      	movlt	r3, #1
 8005646:	e7ba      	b.n	80055be <_dtoa_r+0x246>
 8005648:	2300      	movs	r3, #0
 800564a:	e7b2      	b.n	80055b2 <_dtoa_r+0x23a>
 800564c:	2300      	movs	r3, #0
 800564e:	e7f0      	b.n	8005632 <_dtoa_r+0x2ba>
 8005650:	2501      	movs	r5, #1
 8005652:	2300      	movs	r3, #0
 8005654:	9306      	str	r3, [sp, #24]
 8005656:	950a      	str	r5, [sp, #40]	; 0x28
 8005658:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800565c:	9302      	str	r3, [sp, #8]
 800565e:	4699      	mov	r9, r3
 8005660:	2200      	movs	r2, #0
 8005662:	2312      	movs	r3, #18
 8005664:	920b      	str	r2, [sp, #44]	; 0x2c
 8005666:	e7aa      	b.n	80055be <_dtoa_r+0x246>
 8005668:	2301      	movs	r3, #1
 800566a:	930a      	str	r3, [sp, #40]	; 0x28
 800566c:	e7f4      	b.n	8005658 <_dtoa_r+0x2e0>
 800566e:	2301      	movs	r3, #1
 8005670:	9302      	str	r3, [sp, #8]
 8005672:	4699      	mov	r9, r3
 8005674:	461a      	mov	r2, r3
 8005676:	e7f5      	b.n	8005664 <_dtoa_r+0x2ec>
 8005678:	3101      	adds	r1, #1
 800567a:	6071      	str	r1, [r6, #4]
 800567c:	0052      	lsls	r2, r2, #1
 800567e:	e7a2      	b.n	80055c6 <_dtoa_r+0x24e>
 8005680:	636f4361 	.word	0x636f4361
 8005684:	3fd287a7 	.word	0x3fd287a7
 8005688:	8b60c8b3 	.word	0x8b60c8b3
 800568c:	3fc68a28 	.word	0x3fc68a28
 8005690:	509f79fb 	.word	0x509f79fb
 8005694:	3fd34413 	.word	0x3fd34413
 8005698:	7ff00000 	.word	0x7ff00000
 800569c:	08007415 	.word	0x08007415
 80056a0:	3ff80000 	.word	0x3ff80000
 80056a4:	08007470 	.word	0x08007470
 80056a8:	08007448 	.word	0x08007448
 80056ac:	08007441 	.word	0x08007441
 80056b0:	07f1      	lsls	r1, r6, #31
 80056b2:	d508      	bpl.n	80056c6 <_dtoa_r+0x34e>
 80056b4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80056b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80056bc:	f7fa ffa4 	bl	8000608 <__aeabi_dmul>
 80056c0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80056c4:	3501      	adds	r5, #1
 80056c6:	1076      	asrs	r6, r6, #1
 80056c8:	3708      	adds	r7, #8
 80056ca:	2e00      	cmp	r6, #0
 80056cc:	d1f0      	bne.n	80056b0 <_dtoa_r+0x338>
 80056ce:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80056d2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80056d6:	f7fb f8c1 	bl	800085c <__aeabi_ddiv>
 80056da:	e9cd 0100 	strd	r0, r1, [sp]
 80056de:	e01a      	b.n	8005716 <_dtoa_r+0x39e>
 80056e0:	2502      	movs	r5, #2
 80056e2:	e7a3      	b.n	800562c <_dtoa_r+0x2b4>
 80056e4:	f000 80a0 	beq.w	8005828 <_dtoa_r+0x4b0>
 80056e8:	f1ca 0600 	rsb	r6, sl, #0
 80056ec:	4b9f      	ldr	r3, [pc, #636]	; (800596c <_dtoa_r+0x5f4>)
 80056ee:	4fa0      	ldr	r7, [pc, #640]	; (8005970 <_dtoa_r+0x5f8>)
 80056f0:	f006 020f 	and.w	r2, r6, #15
 80056f4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80056f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056fc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005700:	f7fa ff82 	bl	8000608 <__aeabi_dmul>
 8005704:	e9cd 0100 	strd	r0, r1, [sp]
 8005708:	1136      	asrs	r6, r6, #4
 800570a:	2300      	movs	r3, #0
 800570c:	2502      	movs	r5, #2
 800570e:	2e00      	cmp	r6, #0
 8005710:	d17f      	bne.n	8005812 <_dtoa_r+0x49a>
 8005712:	2b00      	cmp	r3, #0
 8005714:	d1e1      	bne.n	80056da <_dtoa_r+0x362>
 8005716:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005718:	2b00      	cmp	r3, #0
 800571a:	f000 8087 	beq.w	800582c <_dtoa_r+0x4b4>
 800571e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8005722:	2200      	movs	r2, #0
 8005724:	4b93      	ldr	r3, [pc, #588]	; (8005974 <_dtoa_r+0x5fc>)
 8005726:	4630      	mov	r0, r6
 8005728:	4639      	mov	r1, r7
 800572a:	f7fb f9df 	bl	8000aec <__aeabi_dcmplt>
 800572e:	2800      	cmp	r0, #0
 8005730:	d07c      	beq.n	800582c <_dtoa_r+0x4b4>
 8005732:	f1b9 0f00 	cmp.w	r9, #0
 8005736:	d079      	beq.n	800582c <_dtoa_r+0x4b4>
 8005738:	9b02      	ldr	r3, [sp, #8]
 800573a:	2b00      	cmp	r3, #0
 800573c:	dd35      	ble.n	80057aa <_dtoa_r+0x432>
 800573e:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8005742:	9308      	str	r3, [sp, #32]
 8005744:	4639      	mov	r1, r7
 8005746:	2200      	movs	r2, #0
 8005748:	4b8b      	ldr	r3, [pc, #556]	; (8005978 <_dtoa_r+0x600>)
 800574a:	4630      	mov	r0, r6
 800574c:	f7fa ff5c 	bl	8000608 <__aeabi_dmul>
 8005750:	e9cd 0100 	strd	r0, r1, [sp]
 8005754:	9f02      	ldr	r7, [sp, #8]
 8005756:	3501      	adds	r5, #1
 8005758:	4628      	mov	r0, r5
 800575a:	f7fa feeb 	bl	8000534 <__aeabi_i2d>
 800575e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005762:	f7fa ff51 	bl	8000608 <__aeabi_dmul>
 8005766:	2200      	movs	r2, #0
 8005768:	4b84      	ldr	r3, [pc, #528]	; (800597c <_dtoa_r+0x604>)
 800576a:	f7fa fd97 	bl	800029c <__adddf3>
 800576e:	4605      	mov	r5, r0
 8005770:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8005774:	2f00      	cmp	r7, #0
 8005776:	d15d      	bne.n	8005834 <_dtoa_r+0x4bc>
 8005778:	2200      	movs	r2, #0
 800577a:	4b81      	ldr	r3, [pc, #516]	; (8005980 <_dtoa_r+0x608>)
 800577c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005780:	f7fa fd8a 	bl	8000298 <__aeabi_dsub>
 8005784:	462a      	mov	r2, r5
 8005786:	4633      	mov	r3, r6
 8005788:	e9cd 0100 	strd	r0, r1, [sp]
 800578c:	f7fb f9cc 	bl	8000b28 <__aeabi_dcmpgt>
 8005790:	2800      	cmp	r0, #0
 8005792:	f040 8288 	bne.w	8005ca6 <_dtoa_r+0x92e>
 8005796:	462a      	mov	r2, r5
 8005798:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800579c:	e9dd 0100 	ldrd	r0, r1, [sp]
 80057a0:	f7fb f9a4 	bl	8000aec <__aeabi_dcmplt>
 80057a4:	2800      	cmp	r0, #0
 80057a6:	f040 827c 	bne.w	8005ca2 <_dtoa_r+0x92a>
 80057aa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80057ae:	e9cd 2300 	strd	r2, r3, [sp]
 80057b2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	f2c0 8150 	blt.w	8005a5a <_dtoa_r+0x6e2>
 80057ba:	f1ba 0f0e 	cmp.w	sl, #14
 80057be:	f300 814c 	bgt.w	8005a5a <_dtoa_r+0x6e2>
 80057c2:	4b6a      	ldr	r3, [pc, #424]	; (800596c <_dtoa_r+0x5f4>)
 80057c4:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80057c8:	ed93 7b00 	vldr	d7, [r3]
 80057cc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80057d4:	f280 80d8 	bge.w	8005988 <_dtoa_r+0x610>
 80057d8:	f1b9 0f00 	cmp.w	r9, #0
 80057dc:	f300 80d4 	bgt.w	8005988 <_dtoa_r+0x610>
 80057e0:	f040 825e 	bne.w	8005ca0 <_dtoa_r+0x928>
 80057e4:	2200      	movs	r2, #0
 80057e6:	4b66      	ldr	r3, [pc, #408]	; (8005980 <_dtoa_r+0x608>)
 80057e8:	ec51 0b17 	vmov	r0, r1, d7
 80057ec:	f7fa ff0c 	bl	8000608 <__aeabi_dmul>
 80057f0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80057f4:	f7fb f98e 	bl	8000b14 <__aeabi_dcmpge>
 80057f8:	464f      	mov	r7, r9
 80057fa:	464e      	mov	r6, r9
 80057fc:	2800      	cmp	r0, #0
 80057fe:	f040 8234 	bne.w	8005c6a <_dtoa_r+0x8f2>
 8005802:	2331      	movs	r3, #49	; 0x31
 8005804:	f10b 0501 	add.w	r5, fp, #1
 8005808:	f88b 3000 	strb.w	r3, [fp]
 800580c:	f10a 0a01 	add.w	sl, sl, #1
 8005810:	e22f      	b.n	8005c72 <_dtoa_r+0x8fa>
 8005812:	07f2      	lsls	r2, r6, #31
 8005814:	d505      	bpl.n	8005822 <_dtoa_r+0x4aa>
 8005816:	e9d7 2300 	ldrd	r2, r3, [r7]
 800581a:	f7fa fef5 	bl	8000608 <__aeabi_dmul>
 800581e:	3501      	adds	r5, #1
 8005820:	2301      	movs	r3, #1
 8005822:	1076      	asrs	r6, r6, #1
 8005824:	3708      	adds	r7, #8
 8005826:	e772      	b.n	800570e <_dtoa_r+0x396>
 8005828:	2502      	movs	r5, #2
 800582a:	e774      	b.n	8005716 <_dtoa_r+0x39e>
 800582c:	f8cd a020 	str.w	sl, [sp, #32]
 8005830:	464f      	mov	r7, r9
 8005832:	e791      	b.n	8005758 <_dtoa_r+0x3e0>
 8005834:	4b4d      	ldr	r3, [pc, #308]	; (800596c <_dtoa_r+0x5f4>)
 8005836:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800583a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800583e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005840:	2b00      	cmp	r3, #0
 8005842:	d047      	beq.n	80058d4 <_dtoa_r+0x55c>
 8005844:	4602      	mov	r2, r0
 8005846:	460b      	mov	r3, r1
 8005848:	2000      	movs	r0, #0
 800584a:	494e      	ldr	r1, [pc, #312]	; (8005984 <_dtoa_r+0x60c>)
 800584c:	f7fb f806 	bl	800085c <__aeabi_ddiv>
 8005850:	462a      	mov	r2, r5
 8005852:	4633      	mov	r3, r6
 8005854:	f7fa fd20 	bl	8000298 <__aeabi_dsub>
 8005858:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800585c:	465d      	mov	r5, fp
 800585e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005862:	f7fb f981 	bl	8000b68 <__aeabi_d2iz>
 8005866:	4606      	mov	r6, r0
 8005868:	f7fa fe64 	bl	8000534 <__aeabi_i2d>
 800586c:	4602      	mov	r2, r0
 800586e:	460b      	mov	r3, r1
 8005870:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005874:	f7fa fd10 	bl	8000298 <__aeabi_dsub>
 8005878:	3630      	adds	r6, #48	; 0x30
 800587a:	f805 6b01 	strb.w	r6, [r5], #1
 800587e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005882:	e9cd 0100 	strd	r0, r1, [sp]
 8005886:	f7fb f931 	bl	8000aec <__aeabi_dcmplt>
 800588a:	2800      	cmp	r0, #0
 800588c:	d163      	bne.n	8005956 <_dtoa_r+0x5de>
 800588e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005892:	2000      	movs	r0, #0
 8005894:	4937      	ldr	r1, [pc, #220]	; (8005974 <_dtoa_r+0x5fc>)
 8005896:	f7fa fcff 	bl	8000298 <__aeabi_dsub>
 800589a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800589e:	f7fb f925 	bl	8000aec <__aeabi_dcmplt>
 80058a2:	2800      	cmp	r0, #0
 80058a4:	f040 80b7 	bne.w	8005a16 <_dtoa_r+0x69e>
 80058a8:	eba5 030b 	sub.w	r3, r5, fp
 80058ac:	429f      	cmp	r7, r3
 80058ae:	f77f af7c 	ble.w	80057aa <_dtoa_r+0x432>
 80058b2:	2200      	movs	r2, #0
 80058b4:	4b30      	ldr	r3, [pc, #192]	; (8005978 <_dtoa_r+0x600>)
 80058b6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80058ba:	f7fa fea5 	bl	8000608 <__aeabi_dmul>
 80058be:	2200      	movs	r2, #0
 80058c0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80058c4:	4b2c      	ldr	r3, [pc, #176]	; (8005978 <_dtoa_r+0x600>)
 80058c6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80058ca:	f7fa fe9d 	bl	8000608 <__aeabi_dmul>
 80058ce:	e9cd 0100 	strd	r0, r1, [sp]
 80058d2:	e7c4      	b.n	800585e <_dtoa_r+0x4e6>
 80058d4:	462a      	mov	r2, r5
 80058d6:	4633      	mov	r3, r6
 80058d8:	f7fa fe96 	bl	8000608 <__aeabi_dmul>
 80058dc:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80058e0:	eb0b 0507 	add.w	r5, fp, r7
 80058e4:	465e      	mov	r6, fp
 80058e6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80058ea:	f7fb f93d 	bl	8000b68 <__aeabi_d2iz>
 80058ee:	4607      	mov	r7, r0
 80058f0:	f7fa fe20 	bl	8000534 <__aeabi_i2d>
 80058f4:	3730      	adds	r7, #48	; 0x30
 80058f6:	4602      	mov	r2, r0
 80058f8:	460b      	mov	r3, r1
 80058fa:	e9dd 0100 	ldrd	r0, r1, [sp]
 80058fe:	f7fa fccb 	bl	8000298 <__aeabi_dsub>
 8005902:	f806 7b01 	strb.w	r7, [r6], #1
 8005906:	42ae      	cmp	r6, r5
 8005908:	e9cd 0100 	strd	r0, r1, [sp]
 800590c:	f04f 0200 	mov.w	r2, #0
 8005910:	d126      	bne.n	8005960 <_dtoa_r+0x5e8>
 8005912:	4b1c      	ldr	r3, [pc, #112]	; (8005984 <_dtoa_r+0x60c>)
 8005914:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005918:	f7fa fcc0 	bl	800029c <__adddf3>
 800591c:	4602      	mov	r2, r0
 800591e:	460b      	mov	r3, r1
 8005920:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005924:	f7fb f900 	bl	8000b28 <__aeabi_dcmpgt>
 8005928:	2800      	cmp	r0, #0
 800592a:	d174      	bne.n	8005a16 <_dtoa_r+0x69e>
 800592c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005930:	2000      	movs	r0, #0
 8005932:	4914      	ldr	r1, [pc, #80]	; (8005984 <_dtoa_r+0x60c>)
 8005934:	f7fa fcb0 	bl	8000298 <__aeabi_dsub>
 8005938:	4602      	mov	r2, r0
 800593a:	460b      	mov	r3, r1
 800593c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005940:	f7fb f8d4 	bl	8000aec <__aeabi_dcmplt>
 8005944:	2800      	cmp	r0, #0
 8005946:	f43f af30 	beq.w	80057aa <_dtoa_r+0x432>
 800594a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800594e:	2b30      	cmp	r3, #48	; 0x30
 8005950:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8005954:	d002      	beq.n	800595c <_dtoa_r+0x5e4>
 8005956:	f8dd a020 	ldr.w	sl, [sp, #32]
 800595a:	e04a      	b.n	80059f2 <_dtoa_r+0x67a>
 800595c:	4615      	mov	r5, r2
 800595e:	e7f4      	b.n	800594a <_dtoa_r+0x5d2>
 8005960:	4b05      	ldr	r3, [pc, #20]	; (8005978 <_dtoa_r+0x600>)
 8005962:	f7fa fe51 	bl	8000608 <__aeabi_dmul>
 8005966:	e9cd 0100 	strd	r0, r1, [sp]
 800596a:	e7bc      	b.n	80058e6 <_dtoa_r+0x56e>
 800596c:	08007470 	.word	0x08007470
 8005970:	08007448 	.word	0x08007448
 8005974:	3ff00000 	.word	0x3ff00000
 8005978:	40240000 	.word	0x40240000
 800597c:	401c0000 	.word	0x401c0000
 8005980:	40140000 	.word	0x40140000
 8005984:	3fe00000 	.word	0x3fe00000
 8005988:	e9dd 6700 	ldrd	r6, r7, [sp]
 800598c:	465d      	mov	r5, fp
 800598e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005992:	4630      	mov	r0, r6
 8005994:	4639      	mov	r1, r7
 8005996:	f7fa ff61 	bl	800085c <__aeabi_ddiv>
 800599a:	f7fb f8e5 	bl	8000b68 <__aeabi_d2iz>
 800599e:	4680      	mov	r8, r0
 80059a0:	f7fa fdc8 	bl	8000534 <__aeabi_i2d>
 80059a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80059a8:	f7fa fe2e 	bl	8000608 <__aeabi_dmul>
 80059ac:	4602      	mov	r2, r0
 80059ae:	460b      	mov	r3, r1
 80059b0:	4630      	mov	r0, r6
 80059b2:	4639      	mov	r1, r7
 80059b4:	f108 0630 	add.w	r6, r8, #48	; 0x30
 80059b8:	f7fa fc6e 	bl	8000298 <__aeabi_dsub>
 80059bc:	f805 6b01 	strb.w	r6, [r5], #1
 80059c0:	eba5 060b 	sub.w	r6, r5, fp
 80059c4:	45b1      	cmp	r9, r6
 80059c6:	4602      	mov	r2, r0
 80059c8:	460b      	mov	r3, r1
 80059ca:	d139      	bne.n	8005a40 <_dtoa_r+0x6c8>
 80059cc:	f7fa fc66 	bl	800029c <__adddf3>
 80059d0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80059d4:	4606      	mov	r6, r0
 80059d6:	460f      	mov	r7, r1
 80059d8:	f7fb f8a6 	bl	8000b28 <__aeabi_dcmpgt>
 80059dc:	b9c8      	cbnz	r0, 8005a12 <_dtoa_r+0x69a>
 80059de:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80059e2:	4630      	mov	r0, r6
 80059e4:	4639      	mov	r1, r7
 80059e6:	f7fb f877 	bl	8000ad8 <__aeabi_dcmpeq>
 80059ea:	b110      	cbz	r0, 80059f2 <_dtoa_r+0x67a>
 80059ec:	f018 0f01 	tst.w	r8, #1
 80059f0:	d10f      	bne.n	8005a12 <_dtoa_r+0x69a>
 80059f2:	9904      	ldr	r1, [sp, #16]
 80059f4:	4620      	mov	r0, r4
 80059f6:	f000 fac1 	bl	8005f7c <_Bfree>
 80059fa:	2300      	movs	r3, #0
 80059fc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80059fe:	702b      	strb	r3, [r5, #0]
 8005a00:	f10a 0301 	add.w	r3, sl, #1
 8005a04:	6013      	str	r3, [r2, #0]
 8005a06:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	f000 8241 	beq.w	8005e90 <_dtoa_r+0xb18>
 8005a0e:	601d      	str	r5, [r3, #0]
 8005a10:	e23e      	b.n	8005e90 <_dtoa_r+0xb18>
 8005a12:	f8cd a020 	str.w	sl, [sp, #32]
 8005a16:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8005a1a:	2a39      	cmp	r2, #57	; 0x39
 8005a1c:	f105 33ff 	add.w	r3, r5, #4294967295	; 0xffffffff
 8005a20:	d108      	bne.n	8005a34 <_dtoa_r+0x6bc>
 8005a22:	459b      	cmp	fp, r3
 8005a24:	d10a      	bne.n	8005a3c <_dtoa_r+0x6c4>
 8005a26:	9b08      	ldr	r3, [sp, #32]
 8005a28:	3301      	adds	r3, #1
 8005a2a:	9308      	str	r3, [sp, #32]
 8005a2c:	2330      	movs	r3, #48	; 0x30
 8005a2e:	f88b 3000 	strb.w	r3, [fp]
 8005a32:	465b      	mov	r3, fp
 8005a34:	781a      	ldrb	r2, [r3, #0]
 8005a36:	3201      	adds	r2, #1
 8005a38:	701a      	strb	r2, [r3, #0]
 8005a3a:	e78c      	b.n	8005956 <_dtoa_r+0x5de>
 8005a3c:	461d      	mov	r5, r3
 8005a3e:	e7ea      	b.n	8005a16 <_dtoa_r+0x69e>
 8005a40:	2200      	movs	r2, #0
 8005a42:	4b9b      	ldr	r3, [pc, #620]	; (8005cb0 <_dtoa_r+0x938>)
 8005a44:	f7fa fde0 	bl	8000608 <__aeabi_dmul>
 8005a48:	2200      	movs	r2, #0
 8005a4a:	2300      	movs	r3, #0
 8005a4c:	4606      	mov	r6, r0
 8005a4e:	460f      	mov	r7, r1
 8005a50:	f7fb f842 	bl	8000ad8 <__aeabi_dcmpeq>
 8005a54:	2800      	cmp	r0, #0
 8005a56:	d09a      	beq.n	800598e <_dtoa_r+0x616>
 8005a58:	e7cb      	b.n	80059f2 <_dtoa_r+0x67a>
 8005a5a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005a5c:	2a00      	cmp	r2, #0
 8005a5e:	f000 808b 	beq.w	8005b78 <_dtoa_r+0x800>
 8005a62:	9a06      	ldr	r2, [sp, #24]
 8005a64:	2a01      	cmp	r2, #1
 8005a66:	dc6e      	bgt.n	8005b46 <_dtoa_r+0x7ce>
 8005a68:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8005a6a:	2a00      	cmp	r2, #0
 8005a6c:	d067      	beq.n	8005b3e <_dtoa_r+0x7c6>
 8005a6e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005a72:	9f07      	ldr	r7, [sp, #28]
 8005a74:	9d05      	ldr	r5, [sp, #20]
 8005a76:	9a05      	ldr	r2, [sp, #20]
 8005a78:	2101      	movs	r1, #1
 8005a7a:	441a      	add	r2, r3
 8005a7c:	4620      	mov	r0, r4
 8005a7e:	9205      	str	r2, [sp, #20]
 8005a80:	4498      	add	r8, r3
 8005a82:	f000 fb1b 	bl	80060bc <__i2b>
 8005a86:	4606      	mov	r6, r0
 8005a88:	2d00      	cmp	r5, #0
 8005a8a:	dd0c      	ble.n	8005aa6 <_dtoa_r+0x72e>
 8005a8c:	f1b8 0f00 	cmp.w	r8, #0
 8005a90:	dd09      	ble.n	8005aa6 <_dtoa_r+0x72e>
 8005a92:	4545      	cmp	r5, r8
 8005a94:	9a05      	ldr	r2, [sp, #20]
 8005a96:	462b      	mov	r3, r5
 8005a98:	bfa8      	it	ge
 8005a9a:	4643      	movge	r3, r8
 8005a9c:	1ad2      	subs	r2, r2, r3
 8005a9e:	9205      	str	r2, [sp, #20]
 8005aa0:	1aed      	subs	r5, r5, r3
 8005aa2:	eba8 0803 	sub.w	r8, r8, r3
 8005aa6:	9b07      	ldr	r3, [sp, #28]
 8005aa8:	b1eb      	cbz	r3, 8005ae6 <_dtoa_r+0x76e>
 8005aaa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d067      	beq.n	8005b80 <_dtoa_r+0x808>
 8005ab0:	b18f      	cbz	r7, 8005ad6 <_dtoa_r+0x75e>
 8005ab2:	4631      	mov	r1, r6
 8005ab4:	463a      	mov	r2, r7
 8005ab6:	4620      	mov	r0, r4
 8005ab8:	f000 fba0 	bl	80061fc <__pow5mult>
 8005abc:	9a04      	ldr	r2, [sp, #16]
 8005abe:	4601      	mov	r1, r0
 8005ac0:	4606      	mov	r6, r0
 8005ac2:	4620      	mov	r0, r4
 8005ac4:	f000 fb03 	bl	80060ce <__multiply>
 8005ac8:	9904      	ldr	r1, [sp, #16]
 8005aca:	9008      	str	r0, [sp, #32]
 8005acc:	4620      	mov	r0, r4
 8005ace:	f000 fa55 	bl	8005f7c <_Bfree>
 8005ad2:	9b08      	ldr	r3, [sp, #32]
 8005ad4:	9304      	str	r3, [sp, #16]
 8005ad6:	9b07      	ldr	r3, [sp, #28]
 8005ad8:	1bda      	subs	r2, r3, r7
 8005ada:	d004      	beq.n	8005ae6 <_dtoa_r+0x76e>
 8005adc:	9904      	ldr	r1, [sp, #16]
 8005ade:	4620      	mov	r0, r4
 8005ae0:	f000 fb8c 	bl	80061fc <__pow5mult>
 8005ae4:	9004      	str	r0, [sp, #16]
 8005ae6:	2101      	movs	r1, #1
 8005ae8:	4620      	mov	r0, r4
 8005aea:	f000 fae7 	bl	80060bc <__i2b>
 8005aee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005af0:	4607      	mov	r7, r0
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	f000 81d0 	beq.w	8005e98 <_dtoa_r+0xb20>
 8005af8:	461a      	mov	r2, r3
 8005afa:	4601      	mov	r1, r0
 8005afc:	4620      	mov	r0, r4
 8005afe:	f000 fb7d 	bl	80061fc <__pow5mult>
 8005b02:	9b06      	ldr	r3, [sp, #24]
 8005b04:	2b01      	cmp	r3, #1
 8005b06:	4607      	mov	r7, r0
 8005b08:	dc40      	bgt.n	8005b8c <_dtoa_r+0x814>
 8005b0a:	9b00      	ldr	r3, [sp, #0]
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d139      	bne.n	8005b84 <_dtoa_r+0x80c>
 8005b10:	9b01      	ldr	r3, [sp, #4]
 8005b12:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d136      	bne.n	8005b88 <_dtoa_r+0x810>
 8005b1a:	9b01      	ldr	r3, [sp, #4]
 8005b1c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005b20:	0d1b      	lsrs	r3, r3, #20
 8005b22:	051b      	lsls	r3, r3, #20
 8005b24:	b12b      	cbz	r3, 8005b32 <_dtoa_r+0x7ba>
 8005b26:	9b05      	ldr	r3, [sp, #20]
 8005b28:	3301      	adds	r3, #1
 8005b2a:	9305      	str	r3, [sp, #20]
 8005b2c:	f108 0801 	add.w	r8, r8, #1
 8005b30:	2301      	movs	r3, #1
 8005b32:	9307      	str	r3, [sp, #28]
 8005b34:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d12a      	bne.n	8005b90 <_dtoa_r+0x818>
 8005b3a:	2001      	movs	r0, #1
 8005b3c:	e030      	b.n	8005ba0 <_dtoa_r+0x828>
 8005b3e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005b40:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005b44:	e795      	b.n	8005a72 <_dtoa_r+0x6fa>
 8005b46:	9b07      	ldr	r3, [sp, #28]
 8005b48:	f109 37ff 	add.w	r7, r9, #4294967295	; 0xffffffff
 8005b4c:	42bb      	cmp	r3, r7
 8005b4e:	bfbf      	itttt	lt
 8005b50:	9b07      	ldrlt	r3, [sp, #28]
 8005b52:	9707      	strlt	r7, [sp, #28]
 8005b54:	1afa      	sublt	r2, r7, r3
 8005b56:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8005b58:	bfbb      	ittet	lt
 8005b5a:	189b      	addlt	r3, r3, r2
 8005b5c:	930e      	strlt	r3, [sp, #56]	; 0x38
 8005b5e:	1bdf      	subge	r7, r3, r7
 8005b60:	2700      	movlt	r7, #0
 8005b62:	f1b9 0f00 	cmp.w	r9, #0
 8005b66:	bfb5      	itete	lt
 8005b68:	9b05      	ldrlt	r3, [sp, #20]
 8005b6a:	9d05      	ldrge	r5, [sp, #20]
 8005b6c:	eba3 0509 	sublt.w	r5, r3, r9
 8005b70:	464b      	movge	r3, r9
 8005b72:	bfb8      	it	lt
 8005b74:	2300      	movlt	r3, #0
 8005b76:	e77e      	b.n	8005a76 <_dtoa_r+0x6fe>
 8005b78:	9f07      	ldr	r7, [sp, #28]
 8005b7a:	9d05      	ldr	r5, [sp, #20]
 8005b7c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8005b7e:	e783      	b.n	8005a88 <_dtoa_r+0x710>
 8005b80:	9a07      	ldr	r2, [sp, #28]
 8005b82:	e7ab      	b.n	8005adc <_dtoa_r+0x764>
 8005b84:	2300      	movs	r3, #0
 8005b86:	e7d4      	b.n	8005b32 <_dtoa_r+0x7ba>
 8005b88:	9b00      	ldr	r3, [sp, #0]
 8005b8a:	e7d2      	b.n	8005b32 <_dtoa_r+0x7ba>
 8005b8c:	2300      	movs	r3, #0
 8005b8e:	9307      	str	r3, [sp, #28]
 8005b90:	693b      	ldr	r3, [r7, #16]
 8005b92:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8005b96:	6918      	ldr	r0, [r3, #16]
 8005b98:	f000 fa42 	bl	8006020 <__hi0bits>
 8005b9c:	f1c0 0020 	rsb	r0, r0, #32
 8005ba0:	4440      	add	r0, r8
 8005ba2:	f010 001f 	ands.w	r0, r0, #31
 8005ba6:	d047      	beq.n	8005c38 <_dtoa_r+0x8c0>
 8005ba8:	f1c0 0320 	rsb	r3, r0, #32
 8005bac:	2b04      	cmp	r3, #4
 8005bae:	dd3b      	ble.n	8005c28 <_dtoa_r+0x8b0>
 8005bb0:	9b05      	ldr	r3, [sp, #20]
 8005bb2:	f1c0 001c 	rsb	r0, r0, #28
 8005bb6:	4403      	add	r3, r0
 8005bb8:	9305      	str	r3, [sp, #20]
 8005bba:	4405      	add	r5, r0
 8005bbc:	4480      	add	r8, r0
 8005bbe:	9b05      	ldr	r3, [sp, #20]
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	dd05      	ble.n	8005bd0 <_dtoa_r+0x858>
 8005bc4:	461a      	mov	r2, r3
 8005bc6:	9904      	ldr	r1, [sp, #16]
 8005bc8:	4620      	mov	r0, r4
 8005bca:	f000 fb65 	bl	8006298 <__lshift>
 8005bce:	9004      	str	r0, [sp, #16]
 8005bd0:	f1b8 0f00 	cmp.w	r8, #0
 8005bd4:	dd05      	ble.n	8005be2 <_dtoa_r+0x86a>
 8005bd6:	4639      	mov	r1, r7
 8005bd8:	4642      	mov	r2, r8
 8005bda:	4620      	mov	r0, r4
 8005bdc:	f000 fb5c 	bl	8006298 <__lshift>
 8005be0:	4607      	mov	r7, r0
 8005be2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005be4:	b353      	cbz	r3, 8005c3c <_dtoa_r+0x8c4>
 8005be6:	4639      	mov	r1, r7
 8005be8:	9804      	ldr	r0, [sp, #16]
 8005bea:	f000 fba9 	bl	8006340 <__mcmp>
 8005bee:	2800      	cmp	r0, #0
 8005bf0:	da24      	bge.n	8005c3c <_dtoa_r+0x8c4>
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	220a      	movs	r2, #10
 8005bf6:	9904      	ldr	r1, [sp, #16]
 8005bf8:	4620      	mov	r0, r4
 8005bfa:	f000 f9d6 	bl	8005faa <__multadd>
 8005bfe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005c00:	9004      	str	r0, [sp, #16]
 8005c02:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	f000 814d 	beq.w	8005ea6 <_dtoa_r+0xb2e>
 8005c0c:	2300      	movs	r3, #0
 8005c0e:	4631      	mov	r1, r6
 8005c10:	220a      	movs	r2, #10
 8005c12:	4620      	mov	r0, r4
 8005c14:	f000 f9c9 	bl	8005faa <__multadd>
 8005c18:	9b02      	ldr	r3, [sp, #8]
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	4606      	mov	r6, r0
 8005c1e:	dc4f      	bgt.n	8005cc0 <_dtoa_r+0x948>
 8005c20:	9b06      	ldr	r3, [sp, #24]
 8005c22:	2b02      	cmp	r3, #2
 8005c24:	dd4c      	ble.n	8005cc0 <_dtoa_r+0x948>
 8005c26:	e011      	b.n	8005c4c <_dtoa_r+0x8d4>
 8005c28:	d0c9      	beq.n	8005bbe <_dtoa_r+0x846>
 8005c2a:	9a05      	ldr	r2, [sp, #20]
 8005c2c:	331c      	adds	r3, #28
 8005c2e:	441a      	add	r2, r3
 8005c30:	9205      	str	r2, [sp, #20]
 8005c32:	441d      	add	r5, r3
 8005c34:	4498      	add	r8, r3
 8005c36:	e7c2      	b.n	8005bbe <_dtoa_r+0x846>
 8005c38:	4603      	mov	r3, r0
 8005c3a:	e7f6      	b.n	8005c2a <_dtoa_r+0x8b2>
 8005c3c:	f1b9 0f00 	cmp.w	r9, #0
 8005c40:	dc38      	bgt.n	8005cb4 <_dtoa_r+0x93c>
 8005c42:	9b06      	ldr	r3, [sp, #24]
 8005c44:	2b02      	cmp	r3, #2
 8005c46:	dd35      	ble.n	8005cb4 <_dtoa_r+0x93c>
 8005c48:	f8cd 9008 	str.w	r9, [sp, #8]
 8005c4c:	9b02      	ldr	r3, [sp, #8]
 8005c4e:	b963      	cbnz	r3, 8005c6a <_dtoa_r+0x8f2>
 8005c50:	4639      	mov	r1, r7
 8005c52:	2205      	movs	r2, #5
 8005c54:	4620      	mov	r0, r4
 8005c56:	f000 f9a8 	bl	8005faa <__multadd>
 8005c5a:	4601      	mov	r1, r0
 8005c5c:	4607      	mov	r7, r0
 8005c5e:	9804      	ldr	r0, [sp, #16]
 8005c60:	f000 fb6e 	bl	8006340 <__mcmp>
 8005c64:	2800      	cmp	r0, #0
 8005c66:	f73f adcc 	bgt.w	8005802 <_dtoa_r+0x48a>
 8005c6a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005c6c:	465d      	mov	r5, fp
 8005c6e:	ea6f 0a03 	mvn.w	sl, r3
 8005c72:	f04f 0900 	mov.w	r9, #0
 8005c76:	4639      	mov	r1, r7
 8005c78:	4620      	mov	r0, r4
 8005c7a:	f000 f97f 	bl	8005f7c <_Bfree>
 8005c7e:	2e00      	cmp	r6, #0
 8005c80:	f43f aeb7 	beq.w	80059f2 <_dtoa_r+0x67a>
 8005c84:	f1b9 0f00 	cmp.w	r9, #0
 8005c88:	d005      	beq.n	8005c96 <_dtoa_r+0x91e>
 8005c8a:	45b1      	cmp	r9, r6
 8005c8c:	d003      	beq.n	8005c96 <_dtoa_r+0x91e>
 8005c8e:	4649      	mov	r1, r9
 8005c90:	4620      	mov	r0, r4
 8005c92:	f000 f973 	bl	8005f7c <_Bfree>
 8005c96:	4631      	mov	r1, r6
 8005c98:	4620      	mov	r0, r4
 8005c9a:	f000 f96f 	bl	8005f7c <_Bfree>
 8005c9e:	e6a8      	b.n	80059f2 <_dtoa_r+0x67a>
 8005ca0:	2700      	movs	r7, #0
 8005ca2:	463e      	mov	r6, r7
 8005ca4:	e7e1      	b.n	8005c6a <_dtoa_r+0x8f2>
 8005ca6:	f8dd a020 	ldr.w	sl, [sp, #32]
 8005caa:	463e      	mov	r6, r7
 8005cac:	e5a9      	b.n	8005802 <_dtoa_r+0x48a>
 8005cae:	bf00      	nop
 8005cb0:	40240000 	.word	0x40240000
 8005cb4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005cb6:	f8cd 9008 	str.w	r9, [sp, #8]
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	f000 80fa 	beq.w	8005eb4 <_dtoa_r+0xb3c>
 8005cc0:	2d00      	cmp	r5, #0
 8005cc2:	dd05      	ble.n	8005cd0 <_dtoa_r+0x958>
 8005cc4:	4631      	mov	r1, r6
 8005cc6:	462a      	mov	r2, r5
 8005cc8:	4620      	mov	r0, r4
 8005cca:	f000 fae5 	bl	8006298 <__lshift>
 8005cce:	4606      	mov	r6, r0
 8005cd0:	9b07      	ldr	r3, [sp, #28]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d04c      	beq.n	8005d70 <_dtoa_r+0x9f8>
 8005cd6:	6871      	ldr	r1, [r6, #4]
 8005cd8:	4620      	mov	r0, r4
 8005cda:	f000 f91b 	bl	8005f14 <_Balloc>
 8005cde:	6932      	ldr	r2, [r6, #16]
 8005ce0:	3202      	adds	r2, #2
 8005ce2:	4605      	mov	r5, r0
 8005ce4:	0092      	lsls	r2, r2, #2
 8005ce6:	f106 010c 	add.w	r1, r6, #12
 8005cea:	300c      	adds	r0, #12
 8005cec:	f7fe fdf0 	bl	80048d0 <memcpy>
 8005cf0:	2201      	movs	r2, #1
 8005cf2:	4629      	mov	r1, r5
 8005cf4:	4620      	mov	r0, r4
 8005cf6:	f000 facf 	bl	8006298 <__lshift>
 8005cfa:	9b00      	ldr	r3, [sp, #0]
 8005cfc:	f8cd b014 	str.w	fp, [sp, #20]
 8005d00:	f003 0301 	and.w	r3, r3, #1
 8005d04:	46b1      	mov	r9, r6
 8005d06:	9307      	str	r3, [sp, #28]
 8005d08:	4606      	mov	r6, r0
 8005d0a:	4639      	mov	r1, r7
 8005d0c:	9804      	ldr	r0, [sp, #16]
 8005d0e:	f7ff faa7 	bl	8005260 <quorem>
 8005d12:	4649      	mov	r1, r9
 8005d14:	4605      	mov	r5, r0
 8005d16:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8005d1a:	9804      	ldr	r0, [sp, #16]
 8005d1c:	f000 fb10 	bl	8006340 <__mcmp>
 8005d20:	4632      	mov	r2, r6
 8005d22:	9000      	str	r0, [sp, #0]
 8005d24:	4639      	mov	r1, r7
 8005d26:	4620      	mov	r0, r4
 8005d28:	f000 fb24 	bl	8006374 <__mdiff>
 8005d2c:	68c3      	ldr	r3, [r0, #12]
 8005d2e:	4602      	mov	r2, r0
 8005d30:	bb03      	cbnz	r3, 8005d74 <_dtoa_r+0x9fc>
 8005d32:	4601      	mov	r1, r0
 8005d34:	9008      	str	r0, [sp, #32]
 8005d36:	9804      	ldr	r0, [sp, #16]
 8005d38:	f000 fb02 	bl	8006340 <__mcmp>
 8005d3c:	9a08      	ldr	r2, [sp, #32]
 8005d3e:	4603      	mov	r3, r0
 8005d40:	4611      	mov	r1, r2
 8005d42:	4620      	mov	r0, r4
 8005d44:	9308      	str	r3, [sp, #32]
 8005d46:	f000 f919 	bl	8005f7c <_Bfree>
 8005d4a:	9b08      	ldr	r3, [sp, #32]
 8005d4c:	b9a3      	cbnz	r3, 8005d78 <_dtoa_r+0xa00>
 8005d4e:	9a06      	ldr	r2, [sp, #24]
 8005d50:	b992      	cbnz	r2, 8005d78 <_dtoa_r+0xa00>
 8005d52:	9a07      	ldr	r2, [sp, #28]
 8005d54:	b982      	cbnz	r2, 8005d78 <_dtoa_r+0xa00>
 8005d56:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8005d5a:	d029      	beq.n	8005db0 <_dtoa_r+0xa38>
 8005d5c:	9b00      	ldr	r3, [sp, #0]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	dd01      	ble.n	8005d66 <_dtoa_r+0x9ee>
 8005d62:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8005d66:	9b05      	ldr	r3, [sp, #20]
 8005d68:	1c5d      	adds	r5, r3, #1
 8005d6a:	f883 8000 	strb.w	r8, [r3]
 8005d6e:	e782      	b.n	8005c76 <_dtoa_r+0x8fe>
 8005d70:	4630      	mov	r0, r6
 8005d72:	e7c2      	b.n	8005cfa <_dtoa_r+0x982>
 8005d74:	2301      	movs	r3, #1
 8005d76:	e7e3      	b.n	8005d40 <_dtoa_r+0x9c8>
 8005d78:	9a00      	ldr	r2, [sp, #0]
 8005d7a:	2a00      	cmp	r2, #0
 8005d7c:	db04      	blt.n	8005d88 <_dtoa_r+0xa10>
 8005d7e:	d125      	bne.n	8005dcc <_dtoa_r+0xa54>
 8005d80:	9a06      	ldr	r2, [sp, #24]
 8005d82:	bb1a      	cbnz	r2, 8005dcc <_dtoa_r+0xa54>
 8005d84:	9a07      	ldr	r2, [sp, #28]
 8005d86:	bb0a      	cbnz	r2, 8005dcc <_dtoa_r+0xa54>
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	ddec      	ble.n	8005d66 <_dtoa_r+0x9ee>
 8005d8c:	2201      	movs	r2, #1
 8005d8e:	9904      	ldr	r1, [sp, #16]
 8005d90:	4620      	mov	r0, r4
 8005d92:	f000 fa81 	bl	8006298 <__lshift>
 8005d96:	4639      	mov	r1, r7
 8005d98:	9004      	str	r0, [sp, #16]
 8005d9a:	f000 fad1 	bl	8006340 <__mcmp>
 8005d9e:	2800      	cmp	r0, #0
 8005da0:	dc03      	bgt.n	8005daa <_dtoa_r+0xa32>
 8005da2:	d1e0      	bne.n	8005d66 <_dtoa_r+0x9ee>
 8005da4:	f018 0f01 	tst.w	r8, #1
 8005da8:	d0dd      	beq.n	8005d66 <_dtoa_r+0x9ee>
 8005daa:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8005dae:	d1d8      	bne.n	8005d62 <_dtoa_r+0x9ea>
 8005db0:	9b05      	ldr	r3, [sp, #20]
 8005db2:	9a05      	ldr	r2, [sp, #20]
 8005db4:	1c5d      	adds	r5, r3, #1
 8005db6:	2339      	movs	r3, #57	; 0x39
 8005db8:	7013      	strb	r3, [r2, #0]
 8005dba:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005dbe:	2b39      	cmp	r3, #57	; 0x39
 8005dc0:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8005dc4:	d04f      	beq.n	8005e66 <_dtoa_r+0xaee>
 8005dc6:	3301      	adds	r3, #1
 8005dc8:	7013      	strb	r3, [r2, #0]
 8005dca:	e754      	b.n	8005c76 <_dtoa_r+0x8fe>
 8005dcc:	9a05      	ldr	r2, [sp, #20]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	f102 0501 	add.w	r5, r2, #1
 8005dd4:	dd06      	ble.n	8005de4 <_dtoa_r+0xa6c>
 8005dd6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8005dda:	d0e9      	beq.n	8005db0 <_dtoa_r+0xa38>
 8005ddc:	f108 0801 	add.w	r8, r8, #1
 8005de0:	9b05      	ldr	r3, [sp, #20]
 8005de2:	e7c2      	b.n	8005d6a <_dtoa_r+0x9f2>
 8005de4:	9a02      	ldr	r2, [sp, #8]
 8005de6:	f805 8c01 	strb.w	r8, [r5, #-1]
 8005dea:	eba5 030b 	sub.w	r3, r5, fp
 8005dee:	4293      	cmp	r3, r2
 8005df0:	d021      	beq.n	8005e36 <_dtoa_r+0xabe>
 8005df2:	2300      	movs	r3, #0
 8005df4:	220a      	movs	r2, #10
 8005df6:	9904      	ldr	r1, [sp, #16]
 8005df8:	4620      	mov	r0, r4
 8005dfa:	f000 f8d6 	bl	8005faa <__multadd>
 8005dfe:	45b1      	cmp	r9, r6
 8005e00:	9004      	str	r0, [sp, #16]
 8005e02:	f04f 0300 	mov.w	r3, #0
 8005e06:	f04f 020a 	mov.w	r2, #10
 8005e0a:	4649      	mov	r1, r9
 8005e0c:	4620      	mov	r0, r4
 8005e0e:	d105      	bne.n	8005e1c <_dtoa_r+0xaa4>
 8005e10:	f000 f8cb 	bl	8005faa <__multadd>
 8005e14:	4681      	mov	r9, r0
 8005e16:	4606      	mov	r6, r0
 8005e18:	9505      	str	r5, [sp, #20]
 8005e1a:	e776      	b.n	8005d0a <_dtoa_r+0x992>
 8005e1c:	f000 f8c5 	bl	8005faa <__multadd>
 8005e20:	4631      	mov	r1, r6
 8005e22:	4681      	mov	r9, r0
 8005e24:	2300      	movs	r3, #0
 8005e26:	220a      	movs	r2, #10
 8005e28:	4620      	mov	r0, r4
 8005e2a:	f000 f8be 	bl	8005faa <__multadd>
 8005e2e:	4606      	mov	r6, r0
 8005e30:	e7f2      	b.n	8005e18 <_dtoa_r+0xaa0>
 8005e32:	f04f 0900 	mov.w	r9, #0
 8005e36:	2201      	movs	r2, #1
 8005e38:	9904      	ldr	r1, [sp, #16]
 8005e3a:	4620      	mov	r0, r4
 8005e3c:	f000 fa2c 	bl	8006298 <__lshift>
 8005e40:	4639      	mov	r1, r7
 8005e42:	9004      	str	r0, [sp, #16]
 8005e44:	f000 fa7c 	bl	8006340 <__mcmp>
 8005e48:	2800      	cmp	r0, #0
 8005e4a:	dcb6      	bgt.n	8005dba <_dtoa_r+0xa42>
 8005e4c:	d102      	bne.n	8005e54 <_dtoa_r+0xadc>
 8005e4e:	f018 0f01 	tst.w	r8, #1
 8005e52:	d1b2      	bne.n	8005dba <_dtoa_r+0xa42>
 8005e54:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005e58:	2b30      	cmp	r3, #48	; 0x30
 8005e5a:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8005e5e:	f47f af0a 	bne.w	8005c76 <_dtoa_r+0x8fe>
 8005e62:	4615      	mov	r5, r2
 8005e64:	e7f6      	b.n	8005e54 <_dtoa_r+0xadc>
 8005e66:	4593      	cmp	fp, r2
 8005e68:	d105      	bne.n	8005e76 <_dtoa_r+0xafe>
 8005e6a:	2331      	movs	r3, #49	; 0x31
 8005e6c:	f10a 0a01 	add.w	sl, sl, #1
 8005e70:	f88b 3000 	strb.w	r3, [fp]
 8005e74:	e6ff      	b.n	8005c76 <_dtoa_r+0x8fe>
 8005e76:	4615      	mov	r5, r2
 8005e78:	e79f      	b.n	8005dba <_dtoa_r+0xa42>
 8005e7a:	f8df b064 	ldr.w	fp, [pc, #100]	; 8005ee0 <_dtoa_r+0xb68>
 8005e7e:	e007      	b.n	8005e90 <_dtoa_r+0xb18>
 8005e80:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005e82:	f8df b060 	ldr.w	fp, [pc, #96]	; 8005ee4 <_dtoa_r+0xb6c>
 8005e86:	b11b      	cbz	r3, 8005e90 <_dtoa_r+0xb18>
 8005e88:	f10b 0308 	add.w	r3, fp, #8
 8005e8c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005e8e:	6013      	str	r3, [r2, #0]
 8005e90:	4658      	mov	r0, fp
 8005e92:	b017      	add	sp, #92	; 0x5c
 8005e94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e98:	9b06      	ldr	r3, [sp, #24]
 8005e9a:	2b01      	cmp	r3, #1
 8005e9c:	f77f ae35 	ble.w	8005b0a <_dtoa_r+0x792>
 8005ea0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005ea2:	9307      	str	r3, [sp, #28]
 8005ea4:	e649      	b.n	8005b3a <_dtoa_r+0x7c2>
 8005ea6:	9b02      	ldr	r3, [sp, #8]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	dc03      	bgt.n	8005eb4 <_dtoa_r+0xb3c>
 8005eac:	9b06      	ldr	r3, [sp, #24]
 8005eae:	2b02      	cmp	r3, #2
 8005eb0:	f73f aecc 	bgt.w	8005c4c <_dtoa_r+0x8d4>
 8005eb4:	465d      	mov	r5, fp
 8005eb6:	4639      	mov	r1, r7
 8005eb8:	9804      	ldr	r0, [sp, #16]
 8005eba:	f7ff f9d1 	bl	8005260 <quorem>
 8005ebe:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8005ec2:	f805 8b01 	strb.w	r8, [r5], #1
 8005ec6:	9a02      	ldr	r2, [sp, #8]
 8005ec8:	eba5 030b 	sub.w	r3, r5, fp
 8005ecc:	429a      	cmp	r2, r3
 8005ece:	ddb0      	ble.n	8005e32 <_dtoa_r+0xaba>
 8005ed0:	2300      	movs	r3, #0
 8005ed2:	220a      	movs	r2, #10
 8005ed4:	9904      	ldr	r1, [sp, #16]
 8005ed6:	4620      	mov	r0, r4
 8005ed8:	f000 f867 	bl	8005faa <__multadd>
 8005edc:	9004      	str	r0, [sp, #16]
 8005ede:	e7ea      	b.n	8005eb6 <_dtoa_r+0xb3e>
 8005ee0:	08007414 	.word	0x08007414
 8005ee4:	08007438 	.word	0x08007438

08005ee8 <_localeconv_r>:
 8005ee8:	4b04      	ldr	r3, [pc, #16]	; (8005efc <_localeconv_r+0x14>)
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	6a18      	ldr	r0, [r3, #32]
 8005eee:	4b04      	ldr	r3, [pc, #16]	; (8005f00 <_localeconv_r+0x18>)
 8005ef0:	2800      	cmp	r0, #0
 8005ef2:	bf08      	it	eq
 8005ef4:	4618      	moveq	r0, r3
 8005ef6:	30f0      	adds	r0, #240	; 0xf0
 8005ef8:	4770      	bx	lr
 8005efa:	bf00      	nop
 8005efc:	20000014 	.word	0x20000014
 8005f00:	20000078 	.word	0x20000078

08005f04 <malloc>:
 8005f04:	4b02      	ldr	r3, [pc, #8]	; (8005f10 <malloc+0xc>)
 8005f06:	4601      	mov	r1, r0
 8005f08:	6818      	ldr	r0, [r3, #0]
 8005f0a:	f000 bb3b 	b.w	8006584 <_malloc_r>
 8005f0e:	bf00      	nop
 8005f10:	20000014 	.word	0x20000014

08005f14 <_Balloc>:
 8005f14:	b570      	push	{r4, r5, r6, lr}
 8005f16:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005f18:	4604      	mov	r4, r0
 8005f1a:	460e      	mov	r6, r1
 8005f1c:	b93d      	cbnz	r5, 8005f2e <_Balloc+0x1a>
 8005f1e:	2010      	movs	r0, #16
 8005f20:	f7ff fff0 	bl	8005f04 <malloc>
 8005f24:	6260      	str	r0, [r4, #36]	; 0x24
 8005f26:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005f2a:	6005      	str	r5, [r0, #0]
 8005f2c:	60c5      	str	r5, [r0, #12]
 8005f2e:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8005f30:	68eb      	ldr	r3, [r5, #12]
 8005f32:	b183      	cbz	r3, 8005f56 <_Balloc+0x42>
 8005f34:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005f36:	68db      	ldr	r3, [r3, #12]
 8005f38:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8005f3c:	b9b8      	cbnz	r0, 8005f6e <_Balloc+0x5a>
 8005f3e:	2101      	movs	r1, #1
 8005f40:	fa01 f506 	lsl.w	r5, r1, r6
 8005f44:	1d6a      	adds	r2, r5, #5
 8005f46:	0092      	lsls	r2, r2, #2
 8005f48:	4620      	mov	r0, r4
 8005f4a:	f000 fabf 	bl	80064cc <_calloc_r>
 8005f4e:	b160      	cbz	r0, 8005f6a <_Balloc+0x56>
 8005f50:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8005f54:	e00e      	b.n	8005f74 <_Balloc+0x60>
 8005f56:	2221      	movs	r2, #33	; 0x21
 8005f58:	2104      	movs	r1, #4
 8005f5a:	4620      	mov	r0, r4
 8005f5c:	f000 fab6 	bl	80064cc <_calloc_r>
 8005f60:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005f62:	60e8      	str	r0, [r5, #12]
 8005f64:	68db      	ldr	r3, [r3, #12]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d1e4      	bne.n	8005f34 <_Balloc+0x20>
 8005f6a:	2000      	movs	r0, #0
 8005f6c:	bd70      	pop	{r4, r5, r6, pc}
 8005f6e:	6802      	ldr	r2, [r0, #0]
 8005f70:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8005f74:	2300      	movs	r3, #0
 8005f76:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005f7a:	e7f7      	b.n	8005f6c <_Balloc+0x58>

08005f7c <_Bfree>:
 8005f7c:	b570      	push	{r4, r5, r6, lr}
 8005f7e:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8005f80:	4606      	mov	r6, r0
 8005f82:	460d      	mov	r5, r1
 8005f84:	b93c      	cbnz	r4, 8005f96 <_Bfree+0x1a>
 8005f86:	2010      	movs	r0, #16
 8005f88:	f7ff ffbc 	bl	8005f04 <malloc>
 8005f8c:	6270      	str	r0, [r6, #36]	; 0x24
 8005f8e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005f92:	6004      	str	r4, [r0, #0]
 8005f94:	60c4      	str	r4, [r0, #12]
 8005f96:	b13d      	cbz	r5, 8005fa8 <_Bfree+0x2c>
 8005f98:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8005f9a:	686a      	ldr	r2, [r5, #4]
 8005f9c:	68db      	ldr	r3, [r3, #12]
 8005f9e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005fa2:	6029      	str	r1, [r5, #0]
 8005fa4:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8005fa8:	bd70      	pop	{r4, r5, r6, pc}

08005faa <__multadd>:
 8005faa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005fae:	690d      	ldr	r5, [r1, #16]
 8005fb0:	461f      	mov	r7, r3
 8005fb2:	4606      	mov	r6, r0
 8005fb4:	460c      	mov	r4, r1
 8005fb6:	f101 0c14 	add.w	ip, r1, #20
 8005fba:	2300      	movs	r3, #0
 8005fbc:	f8dc 0000 	ldr.w	r0, [ip]
 8005fc0:	b281      	uxth	r1, r0
 8005fc2:	fb02 7101 	mla	r1, r2, r1, r7
 8005fc6:	0c0f      	lsrs	r7, r1, #16
 8005fc8:	0c00      	lsrs	r0, r0, #16
 8005fca:	fb02 7000 	mla	r0, r2, r0, r7
 8005fce:	b289      	uxth	r1, r1
 8005fd0:	3301      	adds	r3, #1
 8005fd2:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8005fd6:	429d      	cmp	r5, r3
 8005fd8:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8005fdc:	f84c 1b04 	str.w	r1, [ip], #4
 8005fe0:	dcec      	bgt.n	8005fbc <__multadd+0x12>
 8005fe2:	b1d7      	cbz	r7, 800601a <__multadd+0x70>
 8005fe4:	68a3      	ldr	r3, [r4, #8]
 8005fe6:	42ab      	cmp	r3, r5
 8005fe8:	dc12      	bgt.n	8006010 <__multadd+0x66>
 8005fea:	6861      	ldr	r1, [r4, #4]
 8005fec:	4630      	mov	r0, r6
 8005fee:	3101      	adds	r1, #1
 8005ff0:	f7ff ff90 	bl	8005f14 <_Balloc>
 8005ff4:	6922      	ldr	r2, [r4, #16]
 8005ff6:	3202      	adds	r2, #2
 8005ff8:	f104 010c 	add.w	r1, r4, #12
 8005ffc:	4680      	mov	r8, r0
 8005ffe:	0092      	lsls	r2, r2, #2
 8006000:	300c      	adds	r0, #12
 8006002:	f7fe fc65 	bl	80048d0 <memcpy>
 8006006:	4621      	mov	r1, r4
 8006008:	4630      	mov	r0, r6
 800600a:	f7ff ffb7 	bl	8005f7c <_Bfree>
 800600e:	4644      	mov	r4, r8
 8006010:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006014:	3501      	adds	r5, #1
 8006016:	615f      	str	r7, [r3, #20]
 8006018:	6125      	str	r5, [r4, #16]
 800601a:	4620      	mov	r0, r4
 800601c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08006020 <__hi0bits>:
 8006020:	0c02      	lsrs	r2, r0, #16
 8006022:	0412      	lsls	r2, r2, #16
 8006024:	4603      	mov	r3, r0
 8006026:	b9b2      	cbnz	r2, 8006056 <__hi0bits+0x36>
 8006028:	0403      	lsls	r3, r0, #16
 800602a:	2010      	movs	r0, #16
 800602c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8006030:	bf04      	itt	eq
 8006032:	021b      	lsleq	r3, r3, #8
 8006034:	3008      	addeq	r0, #8
 8006036:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800603a:	bf04      	itt	eq
 800603c:	011b      	lsleq	r3, r3, #4
 800603e:	3004      	addeq	r0, #4
 8006040:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8006044:	bf04      	itt	eq
 8006046:	009b      	lsleq	r3, r3, #2
 8006048:	3002      	addeq	r0, #2
 800604a:	2b00      	cmp	r3, #0
 800604c:	db06      	blt.n	800605c <__hi0bits+0x3c>
 800604e:	005b      	lsls	r3, r3, #1
 8006050:	d503      	bpl.n	800605a <__hi0bits+0x3a>
 8006052:	3001      	adds	r0, #1
 8006054:	4770      	bx	lr
 8006056:	2000      	movs	r0, #0
 8006058:	e7e8      	b.n	800602c <__hi0bits+0xc>
 800605a:	2020      	movs	r0, #32
 800605c:	4770      	bx	lr

0800605e <__lo0bits>:
 800605e:	6803      	ldr	r3, [r0, #0]
 8006060:	f013 0207 	ands.w	r2, r3, #7
 8006064:	4601      	mov	r1, r0
 8006066:	d00b      	beq.n	8006080 <__lo0bits+0x22>
 8006068:	07da      	lsls	r2, r3, #31
 800606a:	d423      	bmi.n	80060b4 <__lo0bits+0x56>
 800606c:	0798      	lsls	r0, r3, #30
 800606e:	bf49      	itett	mi
 8006070:	085b      	lsrmi	r3, r3, #1
 8006072:	089b      	lsrpl	r3, r3, #2
 8006074:	2001      	movmi	r0, #1
 8006076:	600b      	strmi	r3, [r1, #0]
 8006078:	bf5c      	itt	pl
 800607a:	600b      	strpl	r3, [r1, #0]
 800607c:	2002      	movpl	r0, #2
 800607e:	4770      	bx	lr
 8006080:	b298      	uxth	r0, r3
 8006082:	b9a8      	cbnz	r0, 80060b0 <__lo0bits+0x52>
 8006084:	0c1b      	lsrs	r3, r3, #16
 8006086:	2010      	movs	r0, #16
 8006088:	f013 0fff 	tst.w	r3, #255	; 0xff
 800608c:	bf04      	itt	eq
 800608e:	0a1b      	lsreq	r3, r3, #8
 8006090:	3008      	addeq	r0, #8
 8006092:	071a      	lsls	r2, r3, #28
 8006094:	bf04      	itt	eq
 8006096:	091b      	lsreq	r3, r3, #4
 8006098:	3004      	addeq	r0, #4
 800609a:	079a      	lsls	r2, r3, #30
 800609c:	bf04      	itt	eq
 800609e:	089b      	lsreq	r3, r3, #2
 80060a0:	3002      	addeq	r0, #2
 80060a2:	07da      	lsls	r2, r3, #31
 80060a4:	d402      	bmi.n	80060ac <__lo0bits+0x4e>
 80060a6:	085b      	lsrs	r3, r3, #1
 80060a8:	d006      	beq.n	80060b8 <__lo0bits+0x5a>
 80060aa:	3001      	adds	r0, #1
 80060ac:	600b      	str	r3, [r1, #0]
 80060ae:	4770      	bx	lr
 80060b0:	4610      	mov	r0, r2
 80060b2:	e7e9      	b.n	8006088 <__lo0bits+0x2a>
 80060b4:	2000      	movs	r0, #0
 80060b6:	4770      	bx	lr
 80060b8:	2020      	movs	r0, #32
 80060ba:	4770      	bx	lr

080060bc <__i2b>:
 80060bc:	b510      	push	{r4, lr}
 80060be:	460c      	mov	r4, r1
 80060c0:	2101      	movs	r1, #1
 80060c2:	f7ff ff27 	bl	8005f14 <_Balloc>
 80060c6:	2201      	movs	r2, #1
 80060c8:	6144      	str	r4, [r0, #20]
 80060ca:	6102      	str	r2, [r0, #16]
 80060cc:	bd10      	pop	{r4, pc}

080060ce <__multiply>:
 80060ce:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060d2:	4614      	mov	r4, r2
 80060d4:	690a      	ldr	r2, [r1, #16]
 80060d6:	6923      	ldr	r3, [r4, #16]
 80060d8:	429a      	cmp	r2, r3
 80060da:	bfb8      	it	lt
 80060dc:	460b      	movlt	r3, r1
 80060de:	4688      	mov	r8, r1
 80060e0:	bfbc      	itt	lt
 80060e2:	46a0      	movlt	r8, r4
 80060e4:	461c      	movlt	r4, r3
 80060e6:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80060ea:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80060ee:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80060f2:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80060f6:	eb07 0609 	add.w	r6, r7, r9
 80060fa:	42b3      	cmp	r3, r6
 80060fc:	bfb8      	it	lt
 80060fe:	3101      	addlt	r1, #1
 8006100:	f7ff ff08 	bl	8005f14 <_Balloc>
 8006104:	f100 0514 	add.w	r5, r0, #20
 8006108:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800610c:	462b      	mov	r3, r5
 800610e:	2200      	movs	r2, #0
 8006110:	4573      	cmp	r3, lr
 8006112:	d316      	bcc.n	8006142 <__multiply+0x74>
 8006114:	f104 0214 	add.w	r2, r4, #20
 8006118:	f108 0114 	add.w	r1, r8, #20
 800611c:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8006120:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8006124:	9300      	str	r3, [sp, #0]
 8006126:	9b00      	ldr	r3, [sp, #0]
 8006128:	9201      	str	r2, [sp, #4]
 800612a:	4293      	cmp	r3, r2
 800612c:	d80c      	bhi.n	8006148 <__multiply+0x7a>
 800612e:	2e00      	cmp	r6, #0
 8006130:	dd03      	ble.n	800613a <__multiply+0x6c>
 8006132:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8006136:	2b00      	cmp	r3, #0
 8006138:	d05d      	beq.n	80061f6 <__multiply+0x128>
 800613a:	6106      	str	r6, [r0, #16]
 800613c:	b003      	add	sp, #12
 800613e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006142:	f843 2b04 	str.w	r2, [r3], #4
 8006146:	e7e3      	b.n	8006110 <__multiply+0x42>
 8006148:	f8b2 b000 	ldrh.w	fp, [r2]
 800614c:	f1bb 0f00 	cmp.w	fp, #0
 8006150:	d023      	beq.n	800619a <__multiply+0xcc>
 8006152:	4689      	mov	r9, r1
 8006154:	46ac      	mov	ip, r5
 8006156:	f04f 0800 	mov.w	r8, #0
 800615a:	f859 4b04 	ldr.w	r4, [r9], #4
 800615e:	f8dc a000 	ldr.w	sl, [ip]
 8006162:	b2a3      	uxth	r3, r4
 8006164:	fa1f fa8a 	uxth.w	sl, sl
 8006168:	fb0b a303 	mla	r3, fp, r3, sl
 800616c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8006170:	f8dc 4000 	ldr.w	r4, [ip]
 8006174:	4443      	add	r3, r8
 8006176:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800617a:	fb0b 840a 	mla	r4, fp, sl, r8
 800617e:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8006182:	46e2      	mov	sl, ip
 8006184:	b29b      	uxth	r3, r3
 8006186:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800618a:	454f      	cmp	r7, r9
 800618c:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8006190:	f84a 3b04 	str.w	r3, [sl], #4
 8006194:	d82b      	bhi.n	80061ee <__multiply+0x120>
 8006196:	f8cc 8004 	str.w	r8, [ip, #4]
 800619a:	9b01      	ldr	r3, [sp, #4]
 800619c:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 80061a0:	3204      	adds	r2, #4
 80061a2:	f1ba 0f00 	cmp.w	sl, #0
 80061a6:	d020      	beq.n	80061ea <__multiply+0x11c>
 80061a8:	682b      	ldr	r3, [r5, #0]
 80061aa:	4689      	mov	r9, r1
 80061ac:	46a8      	mov	r8, r5
 80061ae:	f04f 0b00 	mov.w	fp, #0
 80061b2:	f8b9 c000 	ldrh.w	ip, [r9]
 80061b6:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 80061ba:	fb0a 440c 	mla	r4, sl, ip, r4
 80061be:	445c      	add	r4, fp
 80061c0:	46c4      	mov	ip, r8
 80061c2:	b29b      	uxth	r3, r3
 80061c4:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80061c8:	f84c 3b04 	str.w	r3, [ip], #4
 80061cc:	f859 3b04 	ldr.w	r3, [r9], #4
 80061d0:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 80061d4:	0c1b      	lsrs	r3, r3, #16
 80061d6:	fb0a b303 	mla	r3, sl, r3, fp
 80061da:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80061de:	454f      	cmp	r7, r9
 80061e0:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 80061e4:	d805      	bhi.n	80061f2 <__multiply+0x124>
 80061e6:	f8c8 3004 	str.w	r3, [r8, #4]
 80061ea:	3504      	adds	r5, #4
 80061ec:	e79b      	b.n	8006126 <__multiply+0x58>
 80061ee:	46d4      	mov	ip, sl
 80061f0:	e7b3      	b.n	800615a <__multiply+0x8c>
 80061f2:	46e0      	mov	r8, ip
 80061f4:	e7dd      	b.n	80061b2 <__multiply+0xe4>
 80061f6:	3e01      	subs	r6, #1
 80061f8:	e799      	b.n	800612e <__multiply+0x60>
	...

080061fc <__pow5mult>:
 80061fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006200:	4615      	mov	r5, r2
 8006202:	f012 0203 	ands.w	r2, r2, #3
 8006206:	4606      	mov	r6, r0
 8006208:	460f      	mov	r7, r1
 800620a:	d007      	beq.n	800621c <__pow5mult+0x20>
 800620c:	3a01      	subs	r2, #1
 800620e:	4c21      	ldr	r4, [pc, #132]	; (8006294 <__pow5mult+0x98>)
 8006210:	2300      	movs	r3, #0
 8006212:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006216:	f7ff fec8 	bl	8005faa <__multadd>
 800621a:	4607      	mov	r7, r0
 800621c:	10ad      	asrs	r5, r5, #2
 800621e:	d035      	beq.n	800628c <__pow5mult+0x90>
 8006220:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006222:	b93c      	cbnz	r4, 8006234 <__pow5mult+0x38>
 8006224:	2010      	movs	r0, #16
 8006226:	f7ff fe6d 	bl	8005f04 <malloc>
 800622a:	6270      	str	r0, [r6, #36]	; 0x24
 800622c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006230:	6004      	str	r4, [r0, #0]
 8006232:	60c4      	str	r4, [r0, #12]
 8006234:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006238:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800623c:	b94c      	cbnz	r4, 8006252 <__pow5mult+0x56>
 800623e:	f240 2171 	movw	r1, #625	; 0x271
 8006242:	4630      	mov	r0, r6
 8006244:	f7ff ff3a 	bl	80060bc <__i2b>
 8006248:	2300      	movs	r3, #0
 800624a:	f8c8 0008 	str.w	r0, [r8, #8]
 800624e:	4604      	mov	r4, r0
 8006250:	6003      	str	r3, [r0, #0]
 8006252:	f04f 0800 	mov.w	r8, #0
 8006256:	07eb      	lsls	r3, r5, #31
 8006258:	d50a      	bpl.n	8006270 <__pow5mult+0x74>
 800625a:	4639      	mov	r1, r7
 800625c:	4622      	mov	r2, r4
 800625e:	4630      	mov	r0, r6
 8006260:	f7ff ff35 	bl	80060ce <__multiply>
 8006264:	4639      	mov	r1, r7
 8006266:	4681      	mov	r9, r0
 8006268:	4630      	mov	r0, r6
 800626a:	f7ff fe87 	bl	8005f7c <_Bfree>
 800626e:	464f      	mov	r7, r9
 8006270:	106d      	asrs	r5, r5, #1
 8006272:	d00b      	beq.n	800628c <__pow5mult+0x90>
 8006274:	6820      	ldr	r0, [r4, #0]
 8006276:	b938      	cbnz	r0, 8006288 <__pow5mult+0x8c>
 8006278:	4622      	mov	r2, r4
 800627a:	4621      	mov	r1, r4
 800627c:	4630      	mov	r0, r6
 800627e:	f7ff ff26 	bl	80060ce <__multiply>
 8006282:	6020      	str	r0, [r4, #0]
 8006284:	f8c0 8000 	str.w	r8, [r0]
 8006288:	4604      	mov	r4, r0
 800628a:	e7e4      	b.n	8006256 <__pow5mult+0x5a>
 800628c:	4638      	mov	r0, r7
 800628e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006292:	bf00      	nop
 8006294:	08007538 	.word	0x08007538

08006298 <__lshift>:
 8006298:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800629c:	460c      	mov	r4, r1
 800629e:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80062a2:	6923      	ldr	r3, [r4, #16]
 80062a4:	6849      	ldr	r1, [r1, #4]
 80062a6:	eb0a 0903 	add.w	r9, sl, r3
 80062aa:	68a3      	ldr	r3, [r4, #8]
 80062ac:	4607      	mov	r7, r0
 80062ae:	4616      	mov	r6, r2
 80062b0:	f109 0501 	add.w	r5, r9, #1
 80062b4:	42ab      	cmp	r3, r5
 80062b6:	db32      	blt.n	800631e <__lshift+0x86>
 80062b8:	4638      	mov	r0, r7
 80062ba:	f7ff fe2b 	bl	8005f14 <_Balloc>
 80062be:	2300      	movs	r3, #0
 80062c0:	4680      	mov	r8, r0
 80062c2:	f100 0114 	add.w	r1, r0, #20
 80062c6:	461a      	mov	r2, r3
 80062c8:	4553      	cmp	r3, sl
 80062ca:	db2b      	blt.n	8006324 <__lshift+0x8c>
 80062cc:	6920      	ldr	r0, [r4, #16]
 80062ce:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80062d2:	f104 0314 	add.w	r3, r4, #20
 80062d6:	f016 021f 	ands.w	r2, r6, #31
 80062da:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80062de:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80062e2:	d025      	beq.n	8006330 <__lshift+0x98>
 80062e4:	f1c2 0e20 	rsb	lr, r2, #32
 80062e8:	2000      	movs	r0, #0
 80062ea:	681e      	ldr	r6, [r3, #0]
 80062ec:	468a      	mov	sl, r1
 80062ee:	4096      	lsls	r6, r2
 80062f0:	4330      	orrs	r0, r6
 80062f2:	f84a 0b04 	str.w	r0, [sl], #4
 80062f6:	f853 0b04 	ldr.w	r0, [r3], #4
 80062fa:	459c      	cmp	ip, r3
 80062fc:	fa20 f00e 	lsr.w	r0, r0, lr
 8006300:	d814      	bhi.n	800632c <__lshift+0x94>
 8006302:	6048      	str	r0, [r1, #4]
 8006304:	b108      	cbz	r0, 800630a <__lshift+0x72>
 8006306:	f109 0502 	add.w	r5, r9, #2
 800630a:	3d01      	subs	r5, #1
 800630c:	4638      	mov	r0, r7
 800630e:	f8c8 5010 	str.w	r5, [r8, #16]
 8006312:	4621      	mov	r1, r4
 8006314:	f7ff fe32 	bl	8005f7c <_Bfree>
 8006318:	4640      	mov	r0, r8
 800631a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800631e:	3101      	adds	r1, #1
 8006320:	005b      	lsls	r3, r3, #1
 8006322:	e7c7      	b.n	80062b4 <__lshift+0x1c>
 8006324:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8006328:	3301      	adds	r3, #1
 800632a:	e7cd      	b.n	80062c8 <__lshift+0x30>
 800632c:	4651      	mov	r1, sl
 800632e:	e7dc      	b.n	80062ea <__lshift+0x52>
 8006330:	3904      	subs	r1, #4
 8006332:	f853 2b04 	ldr.w	r2, [r3], #4
 8006336:	f841 2f04 	str.w	r2, [r1, #4]!
 800633a:	459c      	cmp	ip, r3
 800633c:	d8f9      	bhi.n	8006332 <__lshift+0x9a>
 800633e:	e7e4      	b.n	800630a <__lshift+0x72>

08006340 <__mcmp>:
 8006340:	6903      	ldr	r3, [r0, #16]
 8006342:	690a      	ldr	r2, [r1, #16]
 8006344:	1a9b      	subs	r3, r3, r2
 8006346:	b530      	push	{r4, r5, lr}
 8006348:	d10c      	bne.n	8006364 <__mcmp+0x24>
 800634a:	0092      	lsls	r2, r2, #2
 800634c:	3014      	adds	r0, #20
 800634e:	3114      	adds	r1, #20
 8006350:	1884      	adds	r4, r0, r2
 8006352:	4411      	add	r1, r2
 8006354:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006358:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800635c:	4295      	cmp	r5, r2
 800635e:	d003      	beq.n	8006368 <__mcmp+0x28>
 8006360:	d305      	bcc.n	800636e <__mcmp+0x2e>
 8006362:	2301      	movs	r3, #1
 8006364:	4618      	mov	r0, r3
 8006366:	bd30      	pop	{r4, r5, pc}
 8006368:	42a0      	cmp	r0, r4
 800636a:	d3f3      	bcc.n	8006354 <__mcmp+0x14>
 800636c:	e7fa      	b.n	8006364 <__mcmp+0x24>
 800636e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006372:	e7f7      	b.n	8006364 <__mcmp+0x24>

08006374 <__mdiff>:
 8006374:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006378:	460d      	mov	r5, r1
 800637a:	4607      	mov	r7, r0
 800637c:	4611      	mov	r1, r2
 800637e:	4628      	mov	r0, r5
 8006380:	4614      	mov	r4, r2
 8006382:	f7ff ffdd 	bl	8006340 <__mcmp>
 8006386:	1e06      	subs	r6, r0, #0
 8006388:	d108      	bne.n	800639c <__mdiff+0x28>
 800638a:	4631      	mov	r1, r6
 800638c:	4638      	mov	r0, r7
 800638e:	f7ff fdc1 	bl	8005f14 <_Balloc>
 8006392:	2301      	movs	r3, #1
 8006394:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8006398:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800639c:	bfa4      	itt	ge
 800639e:	4623      	movge	r3, r4
 80063a0:	462c      	movge	r4, r5
 80063a2:	4638      	mov	r0, r7
 80063a4:	6861      	ldr	r1, [r4, #4]
 80063a6:	bfa6      	itte	ge
 80063a8:	461d      	movge	r5, r3
 80063aa:	2600      	movge	r6, #0
 80063ac:	2601      	movlt	r6, #1
 80063ae:	f7ff fdb1 	bl	8005f14 <_Balloc>
 80063b2:	692b      	ldr	r3, [r5, #16]
 80063b4:	60c6      	str	r6, [r0, #12]
 80063b6:	6926      	ldr	r6, [r4, #16]
 80063b8:	f105 0914 	add.w	r9, r5, #20
 80063bc:	f104 0214 	add.w	r2, r4, #20
 80063c0:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 80063c4:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80063c8:	f100 0514 	add.w	r5, r0, #20
 80063cc:	f04f 0e00 	mov.w	lr, #0
 80063d0:	f852 ab04 	ldr.w	sl, [r2], #4
 80063d4:	f859 4b04 	ldr.w	r4, [r9], #4
 80063d8:	fa1e f18a 	uxtah	r1, lr, sl
 80063dc:	b2a3      	uxth	r3, r4
 80063de:	1ac9      	subs	r1, r1, r3
 80063e0:	0c23      	lsrs	r3, r4, #16
 80063e2:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 80063e6:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80063ea:	b289      	uxth	r1, r1
 80063ec:	ea4f 4e23 	mov.w	lr, r3, asr #16
 80063f0:	45c8      	cmp	r8, r9
 80063f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80063f6:	4694      	mov	ip, r2
 80063f8:	f845 3b04 	str.w	r3, [r5], #4
 80063fc:	d8e8      	bhi.n	80063d0 <__mdiff+0x5c>
 80063fe:	45bc      	cmp	ip, r7
 8006400:	d304      	bcc.n	800640c <__mdiff+0x98>
 8006402:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8006406:	b183      	cbz	r3, 800642a <__mdiff+0xb6>
 8006408:	6106      	str	r6, [r0, #16]
 800640a:	e7c5      	b.n	8006398 <__mdiff+0x24>
 800640c:	f85c 1b04 	ldr.w	r1, [ip], #4
 8006410:	fa1e f381 	uxtah	r3, lr, r1
 8006414:	141a      	asrs	r2, r3, #16
 8006416:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800641a:	b29b      	uxth	r3, r3
 800641c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006420:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8006424:	f845 3b04 	str.w	r3, [r5], #4
 8006428:	e7e9      	b.n	80063fe <__mdiff+0x8a>
 800642a:	3e01      	subs	r6, #1
 800642c:	e7e9      	b.n	8006402 <__mdiff+0x8e>

0800642e <__d2b>:
 800642e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006432:	460e      	mov	r6, r1
 8006434:	2101      	movs	r1, #1
 8006436:	ec59 8b10 	vmov	r8, r9, d0
 800643a:	4615      	mov	r5, r2
 800643c:	f7ff fd6a 	bl	8005f14 <_Balloc>
 8006440:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8006444:	4607      	mov	r7, r0
 8006446:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800644a:	bb34      	cbnz	r4, 800649a <__d2b+0x6c>
 800644c:	9301      	str	r3, [sp, #4]
 800644e:	f1b8 0300 	subs.w	r3, r8, #0
 8006452:	d027      	beq.n	80064a4 <__d2b+0x76>
 8006454:	a802      	add	r0, sp, #8
 8006456:	f840 3d08 	str.w	r3, [r0, #-8]!
 800645a:	f7ff fe00 	bl	800605e <__lo0bits>
 800645e:	9900      	ldr	r1, [sp, #0]
 8006460:	b1f0      	cbz	r0, 80064a0 <__d2b+0x72>
 8006462:	9a01      	ldr	r2, [sp, #4]
 8006464:	f1c0 0320 	rsb	r3, r0, #32
 8006468:	fa02 f303 	lsl.w	r3, r2, r3
 800646c:	430b      	orrs	r3, r1
 800646e:	40c2      	lsrs	r2, r0
 8006470:	617b      	str	r3, [r7, #20]
 8006472:	9201      	str	r2, [sp, #4]
 8006474:	9b01      	ldr	r3, [sp, #4]
 8006476:	61bb      	str	r3, [r7, #24]
 8006478:	2b00      	cmp	r3, #0
 800647a:	bf14      	ite	ne
 800647c:	2102      	movne	r1, #2
 800647e:	2101      	moveq	r1, #1
 8006480:	6139      	str	r1, [r7, #16]
 8006482:	b1c4      	cbz	r4, 80064b6 <__d2b+0x88>
 8006484:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8006488:	4404      	add	r4, r0
 800648a:	6034      	str	r4, [r6, #0]
 800648c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006490:	6028      	str	r0, [r5, #0]
 8006492:	4638      	mov	r0, r7
 8006494:	b003      	add	sp, #12
 8006496:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800649a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800649e:	e7d5      	b.n	800644c <__d2b+0x1e>
 80064a0:	6179      	str	r1, [r7, #20]
 80064a2:	e7e7      	b.n	8006474 <__d2b+0x46>
 80064a4:	a801      	add	r0, sp, #4
 80064a6:	f7ff fdda 	bl	800605e <__lo0bits>
 80064aa:	9b01      	ldr	r3, [sp, #4]
 80064ac:	617b      	str	r3, [r7, #20]
 80064ae:	2101      	movs	r1, #1
 80064b0:	6139      	str	r1, [r7, #16]
 80064b2:	3020      	adds	r0, #32
 80064b4:	e7e5      	b.n	8006482 <__d2b+0x54>
 80064b6:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80064ba:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80064be:	6030      	str	r0, [r6, #0]
 80064c0:	6918      	ldr	r0, [r3, #16]
 80064c2:	f7ff fdad 	bl	8006020 <__hi0bits>
 80064c6:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80064ca:	e7e1      	b.n	8006490 <__d2b+0x62>

080064cc <_calloc_r>:
 80064cc:	b538      	push	{r3, r4, r5, lr}
 80064ce:	fb02 f401 	mul.w	r4, r2, r1
 80064d2:	4621      	mov	r1, r4
 80064d4:	f000 f856 	bl	8006584 <_malloc_r>
 80064d8:	4605      	mov	r5, r0
 80064da:	b118      	cbz	r0, 80064e4 <_calloc_r+0x18>
 80064dc:	4622      	mov	r2, r4
 80064de:	2100      	movs	r1, #0
 80064e0:	f7fe fa1a 	bl	8004918 <memset>
 80064e4:	4628      	mov	r0, r5
 80064e6:	bd38      	pop	{r3, r4, r5, pc}

080064e8 <_free_r>:
 80064e8:	b538      	push	{r3, r4, r5, lr}
 80064ea:	4605      	mov	r5, r0
 80064ec:	2900      	cmp	r1, #0
 80064ee:	d045      	beq.n	800657c <_free_r+0x94>
 80064f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80064f4:	1f0c      	subs	r4, r1, #4
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	bfb8      	it	lt
 80064fa:	18e4      	addlt	r4, r4, r3
 80064fc:	f000 fa10 	bl	8006920 <__malloc_lock>
 8006500:	4a1f      	ldr	r2, [pc, #124]	; (8006580 <_free_r+0x98>)
 8006502:	6813      	ldr	r3, [r2, #0]
 8006504:	4610      	mov	r0, r2
 8006506:	b933      	cbnz	r3, 8006516 <_free_r+0x2e>
 8006508:	6063      	str	r3, [r4, #4]
 800650a:	6014      	str	r4, [r2, #0]
 800650c:	4628      	mov	r0, r5
 800650e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006512:	f000 ba06 	b.w	8006922 <__malloc_unlock>
 8006516:	42a3      	cmp	r3, r4
 8006518:	d90c      	bls.n	8006534 <_free_r+0x4c>
 800651a:	6821      	ldr	r1, [r4, #0]
 800651c:	1862      	adds	r2, r4, r1
 800651e:	4293      	cmp	r3, r2
 8006520:	bf04      	itt	eq
 8006522:	681a      	ldreq	r2, [r3, #0]
 8006524:	685b      	ldreq	r3, [r3, #4]
 8006526:	6063      	str	r3, [r4, #4]
 8006528:	bf04      	itt	eq
 800652a:	1852      	addeq	r2, r2, r1
 800652c:	6022      	streq	r2, [r4, #0]
 800652e:	6004      	str	r4, [r0, #0]
 8006530:	e7ec      	b.n	800650c <_free_r+0x24>
 8006532:	4613      	mov	r3, r2
 8006534:	685a      	ldr	r2, [r3, #4]
 8006536:	b10a      	cbz	r2, 800653c <_free_r+0x54>
 8006538:	42a2      	cmp	r2, r4
 800653a:	d9fa      	bls.n	8006532 <_free_r+0x4a>
 800653c:	6819      	ldr	r1, [r3, #0]
 800653e:	1858      	adds	r0, r3, r1
 8006540:	42a0      	cmp	r0, r4
 8006542:	d10b      	bne.n	800655c <_free_r+0x74>
 8006544:	6820      	ldr	r0, [r4, #0]
 8006546:	4401      	add	r1, r0
 8006548:	1858      	adds	r0, r3, r1
 800654a:	4282      	cmp	r2, r0
 800654c:	6019      	str	r1, [r3, #0]
 800654e:	d1dd      	bne.n	800650c <_free_r+0x24>
 8006550:	6810      	ldr	r0, [r2, #0]
 8006552:	6852      	ldr	r2, [r2, #4]
 8006554:	605a      	str	r2, [r3, #4]
 8006556:	4401      	add	r1, r0
 8006558:	6019      	str	r1, [r3, #0]
 800655a:	e7d7      	b.n	800650c <_free_r+0x24>
 800655c:	d902      	bls.n	8006564 <_free_r+0x7c>
 800655e:	230c      	movs	r3, #12
 8006560:	602b      	str	r3, [r5, #0]
 8006562:	e7d3      	b.n	800650c <_free_r+0x24>
 8006564:	6820      	ldr	r0, [r4, #0]
 8006566:	1821      	adds	r1, r4, r0
 8006568:	428a      	cmp	r2, r1
 800656a:	bf04      	itt	eq
 800656c:	6811      	ldreq	r1, [r2, #0]
 800656e:	6852      	ldreq	r2, [r2, #4]
 8006570:	6062      	str	r2, [r4, #4]
 8006572:	bf04      	itt	eq
 8006574:	1809      	addeq	r1, r1, r0
 8006576:	6021      	streq	r1, [r4, #0]
 8006578:	605c      	str	r4, [r3, #4]
 800657a:	e7c7      	b.n	800650c <_free_r+0x24>
 800657c:	bd38      	pop	{r3, r4, r5, pc}
 800657e:	bf00      	nop
 8006580:	2000060c 	.word	0x2000060c

08006584 <_malloc_r>:
 8006584:	b570      	push	{r4, r5, r6, lr}
 8006586:	1ccd      	adds	r5, r1, #3
 8006588:	f025 0503 	bic.w	r5, r5, #3
 800658c:	3508      	adds	r5, #8
 800658e:	2d0c      	cmp	r5, #12
 8006590:	bf38      	it	cc
 8006592:	250c      	movcc	r5, #12
 8006594:	2d00      	cmp	r5, #0
 8006596:	4606      	mov	r6, r0
 8006598:	db01      	blt.n	800659e <_malloc_r+0x1a>
 800659a:	42a9      	cmp	r1, r5
 800659c:	d903      	bls.n	80065a6 <_malloc_r+0x22>
 800659e:	230c      	movs	r3, #12
 80065a0:	6033      	str	r3, [r6, #0]
 80065a2:	2000      	movs	r0, #0
 80065a4:	bd70      	pop	{r4, r5, r6, pc}
 80065a6:	f000 f9bb 	bl	8006920 <__malloc_lock>
 80065aa:	4a21      	ldr	r2, [pc, #132]	; (8006630 <_malloc_r+0xac>)
 80065ac:	6814      	ldr	r4, [r2, #0]
 80065ae:	4621      	mov	r1, r4
 80065b0:	b991      	cbnz	r1, 80065d8 <_malloc_r+0x54>
 80065b2:	4c20      	ldr	r4, [pc, #128]	; (8006634 <_malloc_r+0xb0>)
 80065b4:	6823      	ldr	r3, [r4, #0]
 80065b6:	b91b      	cbnz	r3, 80065c0 <_malloc_r+0x3c>
 80065b8:	4630      	mov	r0, r6
 80065ba:	f000 f98f 	bl	80068dc <_sbrk_r>
 80065be:	6020      	str	r0, [r4, #0]
 80065c0:	4629      	mov	r1, r5
 80065c2:	4630      	mov	r0, r6
 80065c4:	f000 f98a 	bl	80068dc <_sbrk_r>
 80065c8:	1c43      	adds	r3, r0, #1
 80065ca:	d124      	bne.n	8006616 <_malloc_r+0x92>
 80065cc:	230c      	movs	r3, #12
 80065ce:	6033      	str	r3, [r6, #0]
 80065d0:	4630      	mov	r0, r6
 80065d2:	f000 f9a6 	bl	8006922 <__malloc_unlock>
 80065d6:	e7e4      	b.n	80065a2 <_malloc_r+0x1e>
 80065d8:	680b      	ldr	r3, [r1, #0]
 80065da:	1b5b      	subs	r3, r3, r5
 80065dc:	d418      	bmi.n	8006610 <_malloc_r+0x8c>
 80065de:	2b0b      	cmp	r3, #11
 80065e0:	d90f      	bls.n	8006602 <_malloc_r+0x7e>
 80065e2:	600b      	str	r3, [r1, #0]
 80065e4:	50cd      	str	r5, [r1, r3]
 80065e6:	18cc      	adds	r4, r1, r3
 80065e8:	4630      	mov	r0, r6
 80065ea:	f000 f99a 	bl	8006922 <__malloc_unlock>
 80065ee:	f104 000b 	add.w	r0, r4, #11
 80065f2:	1d23      	adds	r3, r4, #4
 80065f4:	f020 0007 	bic.w	r0, r0, #7
 80065f8:	1ac3      	subs	r3, r0, r3
 80065fa:	d0d3      	beq.n	80065a4 <_malloc_r+0x20>
 80065fc:	425a      	negs	r2, r3
 80065fe:	50e2      	str	r2, [r4, r3]
 8006600:	e7d0      	b.n	80065a4 <_malloc_r+0x20>
 8006602:	428c      	cmp	r4, r1
 8006604:	684b      	ldr	r3, [r1, #4]
 8006606:	bf16      	itet	ne
 8006608:	6063      	strne	r3, [r4, #4]
 800660a:	6013      	streq	r3, [r2, #0]
 800660c:	460c      	movne	r4, r1
 800660e:	e7eb      	b.n	80065e8 <_malloc_r+0x64>
 8006610:	460c      	mov	r4, r1
 8006612:	6849      	ldr	r1, [r1, #4]
 8006614:	e7cc      	b.n	80065b0 <_malloc_r+0x2c>
 8006616:	1cc4      	adds	r4, r0, #3
 8006618:	f024 0403 	bic.w	r4, r4, #3
 800661c:	42a0      	cmp	r0, r4
 800661e:	d005      	beq.n	800662c <_malloc_r+0xa8>
 8006620:	1a21      	subs	r1, r4, r0
 8006622:	4630      	mov	r0, r6
 8006624:	f000 f95a 	bl	80068dc <_sbrk_r>
 8006628:	3001      	adds	r0, #1
 800662a:	d0cf      	beq.n	80065cc <_malloc_r+0x48>
 800662c:	6025      	str	r5, [r4, #0]
 800662e:	e7db      	b.n	80065e8 <_malloc_r+0x64>
 8006630:	2000060c 	.word	0x2000060c
 8006634:	20000610 	.word	0x20000610

08006638 <__ssputs_r>:
 8006638:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800663c:	688e      	ldr	r6, [r1, #8]
 800663e:	429e      	cmp	r6, r3
 8006640:	4682      	mov	sl, r0
 8006642:	460c      	mov	r4, r1
 8006644:	4690      	mov	r8, r2
 8006646:	4699      	mov	r9, r3
 8006648:	d837      	bhi.n	80066ba <__ssputs_r+0x82>
 800664a:	898a      	ldrh	r2, [r1, #12]
 800664c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006650:	d031      	beq.n	80066b6 <__ssputs_r+0x7e>
 8006652:	6825      	ldr	r5, [r4, #0]
 8006654:	6909      	ldr	r1, [r1, #16]
 8006656:	1a6f      	subs	r7, r5, r1
 8006658:	6965      	ldr	r5, [r4, #20]
 800665a:	2302      	movs	r3, #2
 800665c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006660:	fb95 f5f3 	sdiv	r5, r5, r3
 8006664:	f109 0301 	add.w	r3, r9, #1
 8006668:	443b      	add	r3, r7
 800666a:	429d      	cmp	r5, r3
 800666c:	bf38      	it	cc
 800666e:	461d      	movcc	r5, r3
 8006670:	0553      	lsls	r3, r2, #21
 8006672:	d530      	bpl.n	80066d6 <__ssputs_r+0x9e>
 8006674:	4629      	mov	r1, r5
 8006676:	f7ff ff85 	bl	8006584 <_malloc_r>
 800667a:	4606      	mov	r6, r0
 800667c:	b950      	cbnz	r0, 8006694 <__ssputs_r+0x5c>
 800667e:	230c      	movs	r3, #12
 8006680:	f8ca 3000 	str.w	r3, [sl]
 8006684:	89a3      	ldrh	r3, [r4, #12]
 8006686:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800668a:	81a3      	strh	r3, [r4, #12]
 800668c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006690:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006694:	463a      	mov	r2, r7
 8006696:	6921      	ldr	r1, [r4, #16]
 8006698:	f7fe f91a 	bl	80048d0 <memcpy>
 800669c:	89a3      	ldrh	r3, [r4, #12]
 800669e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80066a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80066a6:	81a3      	strh	r3, [r4, #12]
 80066a8:	6126      	str	r6, [r4, #16]
 80066aa:	6165      	str	r5, [r4, #20]
 80066ac:	443e      	add	r6, r7
 80066ae:	1bed      	subs	r5, r5, r7
 80066b0:	6026      	str	r6, [r4, #0]
 80066b2:	60a5      	str	r5, [r4, #8]
 80066b4:	464e      	mov	r6, r9
 80066b6:	454e      	cmp	r6, r9
 80066b8:	d900      	bls.n	80066bc <__ssputs_r+0x84>
 80066ba:	464e      	mov	r6, r9
 80066bc:	4632      	mov	r2, r6
 80066be:	4641      	mov	r1, r8
 80066c0:	6820      	ldr	r0, [r4, #0]
 80066c2:	f7fe f910 	bl	80048e6 <memmove>
 80066c6:	68a3      	ldr	r3, [r4, #8]
 80066c8:	1b9b      	subs	r3, r3, r6
 80066ca:	60a3      	str	r3, [r4, #8]
 80066cc:	6823      	ldr	r3, [r4, #0]
 80066ce:	441e      	add	r6, r3
 80066d0:	6026      	str	r6, [r4, #0]
 80066d2:	2000      	movs	r0, #0
 80066d4:	e7dc      	b.n	8006690 <__ssputs_r+0x58>
 80066d6:	462a      	mov	r2, r5
 80066d8:	f000 f924 	bl	8006924 <_realloc_r>
 80066dc:	4606      	mov	r6, r0
 80066de:	2800      	cmp	r0, #0
 80066e0:	d1e2      	bne.n	80066a8 <__ssputs_r+0x70>
 80066e2:	6921      	ldr	r1, [r4, #16]
 80066e4:	4650      	mov	r0, sl
 80066e6:	f7ff feff 	bl	80064e8 <_free_r>
 80066ea:	e7c8      	b.n	800667e <__ssputs_r+0x46>

080066ec <_svfiprintf_r>:
 80066ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066f0:	461d      	mov	r5, r3
 80066f2:	898b      	ldrh	r3, [r1, #12]
 80066f4:	061f      	lsls	r7, r3, #24
 80066f6:	b09d      	sub	sp, #116	; 0x74
 80066f8:	4680      	mov	r8, r0
 80066fa:	460c      	mov	r4, r1
 80066fc:	4616      	mov	r6, r2
 80066fe:	d50f      	bpl.n	8006720 <_svfiprintf_r+0x34>
 8006700:	690b      	ldr	r3, [r1, #16]
 8006702:	b96b      	cbnz	r3, 8006720 <_svfiprintf_r+0x34>
 8006704:	2140      	movs	r1, #64	; 0x40
 8006706:	f7ff ff3d 	bl	8006584 <_malloc_r>
 800670a:	6020      	str	r0, [r4, #0]
 800670c:	6120      	str	r0, [r4, #16]
 800670e:	b928      	cbnz	r0, 800671c <_svfiprintf_r+0x30>
 8006710:	230c      	movs	r3, #12
 8006712:	f8c8 3000 	str.w	r3, [r8]
 8006716:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800671a:	e0c8      	b.n	80068ae <_svfiprintf_r+0x1c2>
 800671c:	2340      	movs	r3, #64	; 0x40
 800671e:	6163      	str	r3, [r4, #20]
 8006720:	2300      	movs	r3, #0
 8006722:	9309      	str	r3, [sp, #36]	; 0x24
 8006724:	2320      	movs	r3, #32
 8006726:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800672a:	2330      	movs	r3, #48	; 0x30
 800672c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006730:	9503      	str	r5, [sp, #12]
 8006732:	f04f 0b01 	mov.w	fp, #1
 8006736:	4637      	mov	r7, r6
 8006738:	463d      	mov	r5, r7
 800673a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800673e:	b10b      	cbz	r3, 8006744 <_svfiprintf_r+0x58>
 8006740:	2b25      	cmp	r3, #37	; 0x25
 8006742:	d13e      	bne.n	80067c2 <_svfiprintf_r+0xd6>
 8006744:	ebb7 0a06 	subs.w	sl, r7, r6
 8006748:	d00b      	beq.n	8006762 <_svfiprintf_r+0x76>
 800674a:	4653      	mov	r3, sl
 800674c:	4632      	mov	r2, r6
 800674e:	4621      	mov	r1, r4
 8006750:	4640      	mov	r0, r8
 8006752:	f7ff ff71 	bl	8006638 <__ssputs_r>
 8006756:	3001      	adds	r0, #1
 8006758:	f000 80a4 	beq.w	80068a4 <_svfiprintf_r+0x1b8>
 800675c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800675e:	4453      	add	r3, sl
 8006760:	9309      	str	r3, [sp, #36]	; 0x24
 8006762:	783b      	ldrb	r3, [r7, #0]
 8006764:	2b00      	cmp	r3, #0
 8006766:	f000 809d 	beq.w	80068a4 <_svfiprintf_r+0x1b8>
 800676a:	2300      	movs	r3, #0
 800676c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006770:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006774:	9304      	str	r3, [sp, #16]
 8006776:	9307      	str	r3, [sp, #28]
 8006778:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800677c:	931a      	str	r3, [sp, #104]	; 0x68
 800677e:	462f      	mov	r7, r5
 8006780:	2205      	movs	r2, #5
 8006782:	f817 1b01 	ldrb.w	r1, [r7], #1
 8006786:	4850      	ldr	r0, [pc, #320]	; (80068c8 <_svfiprintf_r+0x1dc>)
 8006788:	f7f9 fd32 	bl	80001f0 <memchr>
 800678c:	9b04      	ldr	r3, [sp, #16]
 800678e:	b9d0      	cbnz	r0, 80067c6 <_svfiprintf_r+0xda>
 8006790:	06d9      	lsls	r1, r3, #27
 8006792:	bf44      	itt	mi
 8006794:	2220      	movmi	r2, #32
 8006796:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800679a:	071a      	lsls	r2, r3, #28
 800679c:	bf44      	itt	mi
 800679e:	222b      	movmi	r2, #43	; 0x2b
 80067a0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80067a4:	782a      	ldrb	r2, [r5, #0]
 80067a6:	2a2a      	cmp	r2, #42	; 0x2a
 80067a8:	d015      	beq.n	80067d6 <_svfiprintf_r+0xea>
 80067aa:	9a07      	ldr	r2, [sp, #28]
 80067ac:	462f      	mov	r7, r5
 80067ae:	2000      	movs	r0, #0
 80067b0:	250a      	movs	r5, #10
 80067b2:	4639      	mov	r1, r7
 80067b4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80067b8:	3b30      	subs	r3, #48	; 0x30
 80067ba:	2b09      	cmp	r3, #9
 80067bc:	d94d      	bls.n	800685a <_svfiprintf_r+0x16e>
 80067be:	b1b8      	cbz	r0, 80067f0 <_svfiprintf_r+0x104>
 80067c0:	e00f      	b.n	80067e2 <_svfiprintf_r+0xf6>
 80067c2:	462f      	mov	r7, r5
 80067c4:	e7b8      	b.n	8006738 <_svfiprintf_r+0x4c>
 80067c6:	4a40      	ldr	r2, [pc, #256]	; (80068c8 <_svfiprintf_r+0x1dc>)
 80067c8:	1a80      	subs	r0, r0, r2
 80067ca:	fa0b f000 	lsl.w	r0, fp, r0
 80067ce:	4318      	orrs	r0, r3
 80067d0:	9004      	str	r0, [sp, #16]
 80067d2:	463d      	mov	r5, r7
 80067d4:	e7d3      	b.n	800677e <_svfiprintf_r+0x92>
 80067d6:	9a03      	ldr	r2, [sp, #12]
 80067d8:	1d11      	adds	r1, r2, #4
 80067da:	6812      	ldr	r2, [r2, #0]
 80067dc:	9103      	str	r1, [sp, #12]
 80067de:	2a00      	cmp	r2, #0
 80067e0:	db01      	blt.n	80067e6 <_svfiprintf_r+0xfa>
 80067e2:	9207      	str	r2, [sp, #28]
 80067e4:	e004      	b.n	80067f0 <_svfiprintf_r+0x104>
 80067e6:	4252      	negs	r2, r2
 80067e8:	f043 0302 	orr.w	r3, r3, #2
 80067ec:	9207      	str	r2, [sp, #28]
 80067ee:	9304      	str	r3, [sp, #16]
 80067f0:	783b      	ldrb	r3, [r7, #0]
 80067f2:	2b2e      	cmp	r3, #46	; 0x2e
 80067f4:	d10c      	bne.n	8006810 <_svfiprintf_r+0x124>
 80067f6:	787b      	ldrb	r3, [r7, #1]
 80067f8:	2b2a      	cmp	r3, #42	; 0x2a
 80067fa:	d133      	bne.n	8006864 <_svfiprintf_r+0x178>
 80067fc:	9b03      	ldr	r3, [sp, #12]
 80067fe:	1d1a      	adds	r2, r3, #4
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	9203      	str	r2, [sp, #12]
 8006804:	2b00      	cmp	r3, #0
 8006806:	bfb8      	it	lt
 8006808:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800680c:	3702      	adds	r7, #2
 800680e:	9305      	str	r3, [sp, #20]
 8006810:	4d2e      	ldr	r5, [pc, #184]	; (80068cc <_svfiprintf_r+0x1e0>)
 8006812:	7839      	ldrb	r1, [r7, #0]
 8006814:	2203      	movs	r2, #3
 8006816:	4628      	mov	r0, r5
 8006818:	f7f9 fcea 	bl	80001f0 <memchr>
 800681c:	b138      	cbz	r0, 800682e <_svfiprintf_r+0x142>
 800681e:	2340      	movs	r3, #64	; 0x40
 8006820:	1b40      	subs	r0, r0, r5
 8006822:	fa03 f000 	lsl.w	r0, r3, r0
 8006826:	9b04      	ldr	r3, [sp, #16]
 8006828:	4303      	orrs	r3, r0
 800682a:	3701      	adds	r7, #1
 800682c:	9304      	str	r3, [sp, #16]
 800682e:	7839      	ldrb	r1, [r7, #0]
 8006830:	4827      	ldr	r0, [pc, #156]	; (80068d0 <_svfiprintf_r+0x1e4>)
 8006832:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006836:	2206      	movs	r2, #6
 8006838:	1c7e      	adds	r6, r7, #1
 800683a:	f7f9 fcd9 	bl	80001f0 <memchr>
 800683e:	2800      	cmp	r0, #0
 8006840:	d038      	beq.n	80068b4 <_svfiprintf_r+0x1c8>
 8006842:	4b24      	ldr	r3, [pc, #144]	; (80068d4 <_svfiprintf_r+0x1e8>)
 8006844:	bb13      	cbnz	r3, 800688c <_svfiprintf_r+0x1a0>
 8006846:	9b03      	ldr	r3, [sp, #12]
 8006848:	3307      	adds	r3, #7
 800684a:	f023 0307 	bic.w	r3, r3, #7
 800684e:	3308      	adds	r3, #8
 8006850:	9303      	str	r3, [sp, #12]
 8006852:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006854:	444b      	add	r3, r9
 8006856:	9309      	str	r3, [sp, #36]	; 0x24
 8006858:	e76d      	b.n	8006736 <_svfiprintf_r+0x4a>
 800685a:	fb05 3202 	mla	r2, r5, r2, r3
 800685e:	2001      	movs	r0, #1
 8006860:	460f      	mov	r7, r1
 8006862:	e7a6      	b.n	80067b2 <_svfiprintf_r+0xc6>
 8006864:	2300      	movs	r3, #0
 8006866:	3701      	adds	r7, #1
 8006868:	9305      	str	r3, [sp, #20]
 800686a:	4619      	mov	r1, r3
 800686c:	250a      	movs	r5, #10
 800686e:	4638      	mov	r0, r7
 8006870:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006874:	3a30      	subs	r2, #48	; 0x30
 8006876:	2a09      	cmp	r2, #9
 8006878:	d903      	bls.n	8006882 <_svfiprintf_r+0x196>
 800687a:	2b00      	cmp	r3, #0
 800687c:	d0c8      	beq.n	8006810 <_svfiprintf_r+0x124>
 800687e:	9105      	str	r1, [sp, #20]
 8006880:	e7c6      	b.n	8006810 <_svfiprintf_r+0x124>
 8006882:	fb05 2101 	mla	r1, r5, r1, r2
 8006886:	2301      	movs	r3, #1
 8006888:	4607      	mov	r7, r0
 800688a:	e7f0      	b.n	800686e <_svfiprintf_r+0x182>
 800688c:	ab03      	add	r3, sp, #12
 800688e:	9300      	str	r3, [sp, #0]
 8006890:	4622      	mov	r2, r4
 8006892:	4b11      	ldr	r3, [pc, #68]	; (80068d8 <_svfiprintf_r+0x1ec>)
 8006894:	a904      	add	r1, sp, #16
 8006896:	4640      	mov	r0, r8
 8006898:	f7fe f8da 	bl	8004a50 <_printf_float>
 800689c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80068a0:	4681      	mov	r9, r0
 80068a2:	d1d6      	bne.n	8006852 <_svfiprintf_r+0x166>
 80068a4:	89a3      	ldrh	r3, [r4, #12]
 80068a6:	065b      	lsls	r3, r3, #25
 80068a8:	f53f af35 	bmi.w	8006716 <_svfiprintf_r+0x2a>
 80068ac:	9809      	ldr	r0, [sp, #36]	; 0x24
 80068ae:	b01d      	add	sp, #116	; 0x74
 80068b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068b4:	ab03      	add	r3, sp, #12
 80068b6:	9300      	str	r3, [sp, #0]
 80068b8:	4622      	mov	r2, r4
 80068ba:	4b07      	ldr	r3, [pc, #28]	; (80068d8 <_svfiprintf_r+0x1ec>)
 80068bc:	a904      	add	r1, sp, #16
 80068be:	4640      	mov	r0, r8
 80068c0:	f7fe fb7c 	bl	8004fbc <_printf_i>
 80068c4:	e7ea      	b.n	800689c <_svfiprintf_r+0x1b0>
 80068c6:	bf00      	nop
 80068c8:	08007544 	.word	0x08007544
 80068cc:	0800754a 	.word	0x0800754a
 80068d0:	0800754e 	.word	0x0800754e
 80068d4:	08004a51 	.word	0x08004a51
 80068d8:	08006639 	.word	0x08006639

080068dc <_sbrk_r>:
 80068dc:	b538      	push	{r3, r4, r5, lr}
 80068de:	4c06      	ldr	r4, [pc, #24]	; (80068f8 <_sbrk_r+0x1c>)
 80068e0:	2300      	movs	r3, #0
 80068e2:	4605      	mov	r5, r0
 80068e4:	4608      	mov	r0, r1
 80068e6:	6023      	str	r3, [r4, #0]
 80068e8:	f7fb fb0a 	bl	8001f00 <_sbrk>
 80068ec:	1c43      	adds	r3, r0, #1
 80068ee:	d102      	bne.n	80068f6 <_sbrk_r+0x1a>
 80068f0:	6823      	ldr	r3, [r4, #0]
 80068f2:	b103      	cbz	r3, 80068f6 <_sbrk_r+0x1a>
 80068f4:	602b      	str	r3, [r5, #0]
 80068f6:	bd38      	pop	{r3, r4, r5, pc}
 80068f8:	200006f4 	.word	0x200006f4

080068fc <__ascii_mbtowc>:
 80068fc:	b082      	sub	sp, #8
 80068fe:	b901      	cbnz	r1, 8006902 <__ascii_mbtowc+0x6>
 8006900:	a901      	add	r1, sp, #4
 8006902:	b142      	cbz	r2, 8006916 <__ascii_mbtowc+0x1a>
 8006904:	b14b      	cbz	r3, 800691a <__ascii_mbtowc+0x1e>
 8006906:	7813      	ldrb	r3, [r2, #0]
 8006908:	600b      	str	r3, [r1, #0]
 800690a:	7812      	ldrb	r2, [r2, #0]
 800690c:	1c10      	adds	r0, r2, #0
 800690e:	bf18      	it	ne
 8006910:	2001      	movne	r0, #1
 8006912:	b002      	add	sp, #8
 8006914:	4770      	bx	lr
 8006916:	4610      	mov	r0, r2
 8006918:	e7fb      	b.n	8006912 <__ascii_mbtowc+0x16>
 800691a:	f06f 0001 	mvn.w	r0, #1
 800691e:	e7f8      	b.n	8006912 <__ascii_mbtowc+0x16>

08006920 <__malloc_lock>:
 8006920:	4770      	bx	lr

08006922 <__malloc_unlock>:
 8006922:	4770      	bx	lr

08006924 <_realloc_r>:
 8006924:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006926:	4607      	mov	r7, r0
 8006928:	4614      	mov	r4, r2
 800692a:	460e      	mov	r6, r1
 800692c:	b921      	cbnz	r1, 8006938 <_realloc_r+0x14>
 800692e:	4611      	mov	r1, r2
 8006930:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006934:	f7ff be26 	b.w	8006584 <_malloc_r>
 8006938:	b922      	cbnz	r2, 8006944 <_realloc_r+0x20>
 800693a:	f7ff fdd5 	bl	80064e8 <_free_r>
 800693e:	4625      	mov	r5, r4
 8006940:	4628      	mov	r0, r5
 8006942:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006944:	f000 f821 	bl	800698a <_malloc_usable_size_r>
 8006948:	42a0      	cmp	r0, r4
 800694a:	d20f      	bcs.n	800696c <_realloc_r+0x48>
 800694c:	4621      	mov	r1, r4
 800694e:	4638      	mov	r0, r7
 8006950:	f7ff fe18 	bl	8006584 <_malloc_r>
 8006954:	4605      	mov	r5, r0
 8006956:	2800      	cmp	r0, #0
 8006958:	d0f2      	beq.n	8006940 <_realloc_r+0x1c>
 800695a:	4631      	mov	r1, r6
 800695c:	4622      	mov	r2, r4
 800695e:	f7fd ffb7 	bl	80048d0 <memcpy>
 8006962:	4631      	mov	r1, r6
 8006964:	4638      	mov	r0, r7
 8006966:	f7ff fdbf 	bl	80064e8 <_free_r>
 800696a:	e7e9      	b.n	8006940 <_realloc_r+0x1c>
 800696c:	4635      	mov	r5, r6
 800696e:	e7e7      	b.n	8006940 <_realloc_r+0x1c>

08006970 <__ascii_wctomb>:
 8006970:	b149      	cbz	r1, 8006986 <__ascii_wctomb+0x16>
 8006972:	2aff      	cmp	r2, #255	; 0xff
 8006974:	bf85      	ittet	hi
 8006976:	238a      	movhi	r3, #138	; 0x8a
 8006978:	6003      	strhi	r3, [r0, #0]
 800697a:	700a      	strbls	r2, [r1, #0]
 800697c:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8006980:	bf98      	it	ls
 8006982:	2001      	movls	r0, #1
 8006984:	4770      	bx	lr
 8006986:	4608      	mov	r0, r1
 8006988:	4770      	bx	lr

0800698a <_malloc_usable_size_r>:
 800698a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800698e:	1f18      	subs	r0, r3, #4
 8006990:	2b00      	cmp	r3, #0
 8006992:	bfbc      	itt	lt
 8006994:	580b      	ldrlt	r3, [r1, r0]
 8006996:	18c0      	addlt	r0, r0, r3
 8006998:	4770      	bx	lr
	...

0800699c <_init>:
 800699c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800699e:	bf00      	nop
 80069a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80069a2:	bc08      	pop	{r3}
 80069a4:	469e      	mov	lr, r3
 80069a6:	4770      	bx	lr

080069a8 <_fini>:
 80069a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069aa:	bf00      	nop
 80069ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80069ae:	bc08      	pop	{r3}
 80069b0:	469e      	mov	lr, r3
 80069b2:	4770      	bx	lr
