
PSU_FW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000040f4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002c8  08004294  08004294  00014294  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800455c  0800455c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  0800455c  0800455c  0001455c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004564  08004564  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004564  08004564  00014564  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004568  08004568  00014568  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800456c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000514  20000070  080045dc  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000584  080045dc  00020584  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d004  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001cc3  00000000  00000000  0002d0a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ab0  00000000  00000000  0002ed68  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000009f0  00000000  00000000  0002f818  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000173ef  00000000  00000000  00030208  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000995a  00000000  00000000  000475f7  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008cba1  00000000  00000000  00050f51  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ddaf2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002f20  00000000  00000000  000ddb70  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800427c 	.word	0x0800427c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	0800427c 	.word	0x0800427c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002a4:	f000 b972 	b.w	800058c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	4688      	mov	r8, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14b      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4615      	mov	r5, r2
 80002d2:	d967      	bls.n	80003a4 <__udivmoddi4+0xe4>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0720 	rsb	r7, r2, #32
 80002de:	fa01 f302 	lsl.w	r3, r1, r2
 80002e2:	fa20 f707 	lsr.w	r7, r0, r7
 80002e6:	4095      	lsls	r5, r2
 80002e8:	ea47 0803 	orr.w	r8, r7, r3
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002f8:	fa1f fc85 	uxth.w	ip, r5
 80002fc:	fb0e 8817 	mls	r8, lr, r7, r8
 8000300:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000304:	fb07 f10c 	mul.w	r1, r7, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000312:	f080 811b 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8118 	bls.w	800054c <__udivmoddi4+0x28c>
 800031c:	3f02      	subs	r7, #2
 800031e:	442b      	add	r3, r5
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0fe 	udiv	r0, r3, lr
 8000328:	fb0e 3310 	mls	r3, lr, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fc0c 	mul.w	ip, r0, ip
 8000334:	45a4      	cmp	ip, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	192c      	adds	r4, r5, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800033e:	f080 8107 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000342:	45a4      	cmp	ip, r4
 8000344:	f240 8104 	bls.w	8000550 <__udivmoddi4+0x290>
 8000348:	3802      	subs	r0, #2
 800034a:	442c      	add	r4, r5
 800034c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000350:	eba4 040c 	sub.w	r4, r4, ip
 8000354:	2700      	movs	r7, #0
 8000356:	b11e      	cbz	r6, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c6 4300 	strd	r4, r3, [r6]
 8000360:	4639      	mov	r1, r7
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0xbe>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80eb 	beq.w	8000546 <__udivmoddi4+0x286>
 8000370:	2700      	movs	r7, #0
 8000372:	e9c6 0100 	strd	r0, r1, [r6]
 8000376:	4638      	mov	r0, r7
 8000378:	4639      	mov	r1, r7
 800037a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037e:	fab3 f783 	clz	r7, r3
 8000382:	2f00      	cmp	r7, #0
 8000384:	d147      	bne.n	8000416 <__udivmoddi4+0x156>
 8000386:	428b      	cmp	r3, r1
 8000388:	d302      	bcc.n	8000390 <__udivmoddi4+0xd0>
 800038a:	4282      	cmp	r2, r0
 800038c:	f200 80fa 	bhi.w	8000584 <__udivmoddi4+0x2c4>
 8000390:	1a84      	subs	r4, r0, r2
 8000392:	eb61 0303 	sbc.w	r3, r1, r3
 8000396:	2001      	movs	r0, #1
 8000398:	4698      	mov	r8, r3
 800039a:	2e00      	cmp	r6, #0
 800039c:	d0e0      	beq.n	8000360 <__udivmoddi4+0xa0>
 800039e:	e9c6 4800 	strd	r4, r8, [r6]
 80003a2:	e7dd      	b.n	8000360 <__udivmoddi4+0xa0>
 80003a4:	b902      	cbnz	r2, 80003a8 <__udivmoddi4+0xe8>
 80003a6:	deff      	udf	#255	; 0xff
 80003a8:	fab2 f282 	clz	r2, r2
 80003ac:	2a00      	cmp	r2, #0
 80003ae:	f040 808f 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b2:	1b49      	subs	r1, r1, r5
 80003b4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003b8:	fa1f f885 	uxth.w	r8, r5
 80003bc:	2701      	movs	r7, #1
 80003be:	fbb1 fcfe 	udiv	ip, r1, lr
 80003c2:	0c23      	lsrs	r3, r4, #16
 80003c4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003cc:	fb08 f10c 	mul.w	r1, r8, ip
 80003d0:	4299      	cmp	r1, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d4:	18eb      	adds	r3, r5, r3
 80003d6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4299      	cmp	r1, r3
 80003de:	f200 80cd 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003e2:	4684      	mov	ip, r0
 80003e4:	1a59      	subs	r1, r3, r1
 80003e6:	b2a3      	uxth	r3, r4
 80003e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ec:	fb0e 1410 	mls	r4, lr, r0, r1
 80003f0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003f4:	fb08 f800 	mul.w	r8, r8, r0
 80003f8:	45a0      	cmp	r8, r4
 80003fa:	d907      	bls.n	800040c <__udivmoddi4+0x14c>
 80003fc:	192c      	adds	r4, r5, r4
 80003fe:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x14a>
 8000404:	45a0      	cmp	r8, r4
 8000406:	f200 80b6 	bhi.w	8000576 <__udivmoddi4+0x2b6>
 800040a:	4618      	mov	r0, r3
 800040c:	eba4 0408 	sub.w	r4, r4, r8
 8000410:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000414:	e79f      	b.n	8000356 <__udivmoddi4+0x96>
 8000416:	f1c7 0c20 	rsb	ip, r7, #32
 800041a:	40bb      	lsls	r3, r7
 800041c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000420:	ea4e 0e03 	orr.w	lr, lr, r3
 8000424:	fa01 f407 	lsl.w	r4, r1, r7
 8000428:	fa20 f50c 	lsr.w	r5, r0, ip
 800042c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000430:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000434:	4325      	orrs	r5, r4
 8000436:	fbb3 f9f8 	udiv	r9, r3, r8
 800043a:	0c2c      	lsrs	r4, r5, #16
 800043c:	fb08 3319 	mls	r3, r8, r9, r3
 8000440:	fa1f fa8e 	uxth.w	sl, lr
 8000444:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000448:	fb09 f40a 	mul.w	r4, r9, sl
 800044c:	429c      	cmp	r4, r3
 800044e:	fa02 f207 	lsl.w	r2, r2, r7
 8000452:	fa00 f107 	lsl.w	r1, r0, r7
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1e 0303 	adds.w	r3, lr, r3
 800045c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000460:	f080 8087 	bcs.w	8000572 <__udivmoddi4+0x2b2>
 8000464:	429c      	cmp	r4, r3
 8000466:	f240 8084 	bls.w	8000572 <__udivmoddi4+0x2b2>
 800046a:	f1a9 0902 	sub.w	r9, r9, #2
 800046e:	4473      	add	r3, lr
 8000470:	1b1b      	subs	r3, r3, r4
 8000472:	b2ad      	uxth	r5, r5
 8000474:	fbb3 f0f8 	udiv	r0, r3, r8
 8000478:	fb08 3310 	mls	r3, r8, r0, r3
 800047c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000480:	fb00 fa0a 	mul.w	sl, r0, sl
 8000484:	45a2      	cmp	sl, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1e 0404 	adds.w	r4, lr, r4
 800048c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000490:	d26b      	bcs.n	800056a <__udivmoddi4+0x2aa>
 8000492:	45a2      	cmp	sl, r4
 8000494:	d969      	bls.n	800056a <__udivmoddi4+0x2aa>
 8000496:	3802      	subs	r0, #2
 8000498:	4474      	add	r4, lr
 800049a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800049e:	fba0 8902 	umull	r8, r9, r0, r2
 80004a2:	eba4 040a 	sub.w	r4, r4, sl
 80004a6:	454c      	cmp	r4, r9
 80004a8:	46c2      	mov	sl, r8
 80004aa:	464b      	mov	r3, r9
 80004ac:	d354      	bcc.n	8000558 <__udivmoddi4+0x298>
 80004ae:	d051      	beq.n	8000554 <__udivmoddi4+0x294>
 80004b0:	2e00      	cmp	r6, #0
 80004b2:	d069      	beq.n	8000588 <__udivmoddi4+0x2c8>
 80004b4:	ebb1 050a 	subs.w	r5, r1, sl
 80004b8:	eb64 0403 	sbc.w	r4, r4, r3
 80004bc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004c0:	40fd      	lsrs	r5, r7
 80004c2:	40fc      	lsrs	r4, r7
 80004c4:	ea4c 0505 	orr.w	r5, ip, r5
 80004c8:	e9c6 5400 	strd	r5, r4, [r6]
 80004cc:	2700      	movs	r7, #0
 80004ce:	e747      	b.n	8000360 <__udivmoddi4+0xa0>
 80004d0:	f1c2 0320 	rsb	r3, r2, #32
 80004d4:	fa20 f703 	lsr.w	r7, r0, r3
 80004d8:	4095      	lsls	r5, r2
 80004da:	fa01 f002 	lsl.w	r0, r1, r2
 80004de:	fa21 f303 	lsr.w	r3, r1, r3
 80004e2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004e6:	4338      	orrs	r0, r7
 80004e8:	0c01      	lsrs	r1, r0, #16
 80004ea:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ee:	fa1f f885 	uxth.w	r8, r5
 80004f2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb07 f308 	mul.w	r3, r7, r8
 80004fe:	428b      	cmp	r3, r1
 8000500:	fa04 f402 	lsl.w	r4, r4, r2
 8000504:	d907      	bls.n	8000516 <__udivmoddi4+0x256>
 8000506:	1869      	adds	r1, r5, r1
 8000508:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 800050c:	d22f      	bcs.n	800056e <__udivmoddi4+0x2ae>
 800050e:	428b      	cmp	r3, r1
 8000510:	d92d      	bls.n	800056e <__udivmoddi4+0x2ae>
 8000512:	3f02      	subs	r7, #2
 8000514:	4429      	add	r1, r5
 8000516:	1acb      	subs	r3, r1, r3
 8000518:	b281      	uxth	r1, r0
 800051a:	fbb3 f0fe 	udiv	r0, r3, lr
 800051e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000522:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000526:	fb00 f308 	mul.w	r3, r0, r8
 800052a:	428b      	cmp	r3, r1
 800052c:	d907      	bls.n	800053e <__udivmoddi4+0x27e>
 800052e:	1869      	adds	r1, r5, r1
 8000530:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000534:	d217      	bcs.n	8000566 <__udivmoddi4+0x2a6>
 8000536:	428b      	cmp	r3, r1
 8000538:	d915      	bls.n	8000566 <__udivmoddi4+0x2a6>
 800053a:	3802      	subs	r0, #2
 800053c:	4429      	add	r1, r5
 800053e:	1ac9      	subs	r1, r1, r3
 8000540:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000544:	e73b      	b.n	80003be <__udivmoddi4+0xfe>
 8000546:	4637      	mov	r7, r6
 8000548:	4630      	mov	r0, r6
 800054a:	e709      	b.n	8000360 <__udivmoddi4+0xa0>
 800054c:	4607      	mov	r7, r0
 800054e:	e6e7      	b.n	8000320 <__udivmoddi4+0x60>
 8000550:	4618      	mov	r0, r3
 8000552:	e6fb      	b.n	800034c <__udivmoddi4+0x8c>
 8000554:	4541      	cmp	r1, r8
 8000556:	d2ab      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 8000558:	ebb8 0a02 	subs.w	sl, r8, r2
 800055c:	eb69 020e 	sbc.w	r2, r9, lr
 8000560:	3801      	subs	r0, #1
 8000562:	4613      	mov	r3, r2
 8000564:	e7a4      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000566:	4660      	mov	r0, ip
 8000568:	e7e9      	b.n	800053e <__udivmoddi4+0x27e>
 800056a:	4618      	mov	r0, r3
 800056c:	e795      	b.n	800049a <__udivmoddi4+0x1da>
 800056e:	4667      	mov	r7, ip
 8000570:	e7d1      	b.n	8000516 <__udivmoddi4+0x256>
 8000572:	4681      	mov	r9, r0
 8000574:	e77c      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000576:	3802      	subs	r0, #2
 8000578:	442c      	add	r4, r5
 800057a:	e747      	b.n	800040c <__udivmoddi4+0x14c>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	442b      	add	r3, r5
 8000582:	e72f      	b.n	80003e4 <__udivmoddi4+0x124>
 8000584:	4638      	mov	r0, r7
 8000586:	e708      	b.n	800039a <__udivmoddi4+0xda>
 8000588:	4637      	mov	r7, r6
 800058a:	e6e9      	b.n	8000360 <__udivmoddi4+0xa0>

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <printMsg>:
#include "debug.h"
#include "stm32f4xx_hal.h"
#include "stm32f4xx_hal_gpio.h"

void printMsg(char *format, ...)
{
 8000590:	b40f      	push	{r0, r1, r2, r3}
 8000592:	b580      	push	{r7, lr}
 8000594:	b096      	sub	sp, #88	; 0x58
 8000596:	af00      	add	r7, sp, #0
	char str[80];

	/*Extract the the argument list using VA apis */
	va_list args;
	va_start(args, format);
 8000598:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800059c:	607b      	str	r3, [r7, #4]
	vsprintf(str, format, args);
 800059e:	f107 0308 	add.w	r3, r7, #8
 80005a2:	687a      	ldr	r2, [r7, #4]
 80005a4:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80005a6:	4618      	mov	r0, r3
 80005a8:	f003 fa9c 	bl	8003ae4 <vsiprintf>
	HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen(str), HAL_MAX_DELAY);
 80005ac:	f107 0308 	add.w	r3, r7, #8
 80005b0:	4618      	mov	r0, r3
 80005b2:	f7ff fe15 	bl	80001e0 <strlen>
 80005b6:	4603      	mov	r3, r0
 80005b8:	b29a      	uxth	r2, r3
 80005ba:	f107 0108 	add.w	r1, r7, #8
 80005be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80005c2:	4805      	ldr	r0, [pc, #20]	; (80005d8 <printMsg+0x48>)
 80005c4:	f002 fdc3 	bl	800314e <HAL_UART_Transmit>
	va_end(args);
}
 80005c8:	bf00      	nop
 80005ca:	3758      	adds	r7, #88	; 0x58
 80005cc:	46bd      	mov	sp, r7
 80005ce:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80005d2:	b004      	add	sp, #16
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop
 80005d8:	2000053c 	.word	0x2000053c

080005dc <i2cScan>:

uint8_t i2cScan(void)
{
 80005dc:	b5b0      	push	{r4, r5, r7, lr}
 80005de:	b088      	sub	sp, #32
 80005e0:	af00      	add	r7, sp, #0
	char info[] = "Scanning I2C bus...\r\n";
 80005e2:	4b26      	ldr	r3, [pc, #152]	; (800067c <i2cScan+0xa0>)
 80005e4:	1d3c      	adds	r4, r7, #4
 80005e6:	461d      	mov	r5, r3
 80005e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005ec:	e895 0003 	ldmia.w	r5, {r0, r1}
 80005f0:	6020      	str	r0, [r4, #0]
 80005f2:	3404      	adds	r4, #4
 80005f4:	8021      	strh	r1, [r4, #0]
	printMsg(info);
 80005f6:	1d3b      	adds	r3, r7, #4
 80005f8:	4618      	mov	r0, r3
 80005fa:	f7ff ffc9 	bl	8000590 <printMsg>

	uint8_t devices = 0;
 80005fe:	2300      	movs	r3, #0
 8000600:	77fb      	strb	r3, [r7, #31]

	HAL_StatusTypeDef res;

	for (uint16_t i = 0; i < 128; i++)
 8000602:	2300      	movs	r3, #0
 8000604:	83bb      	strh	r3, [r7, #28]
 8000606:	e02b      	b.n	8000660 <i2cScan+0x84>
	{
		res = HAL_I2C_IsDeviceReady(&hi2c1, i << 1, 1, 10);
 8000608:	8bbb      	ldrh	r3, [r7, #28]
 800060a:	005b      	lsls	r3, r3, #1
 800060c:	b299      	uxth	r1, r3
 800060e:	230a      	movs	r3, #10
 8000610:	2201      	movs	r2, #1
 8000612:	481b      	ldr	r0, [pc, #108]	; (8000680 <i2cScan+0xa4>)
 8000614:	f001 fdc6 	bl	80021a4 <HAL_I2C_IsDeviceReady>
 8000618:	4603      	mov	r3, r0
 800061a:	76fb      	strb	r3, [r7, #27]
		if (res == HAL_OK && i == SSD1306_I2C_ADDR)
 800061c:	7efb      	ldrb	r3, [r7, #27]
 800061e:	2b00      	cmp	r3, #0
 8000620:	d10c      	bne.n	800063c <i2cScan+0x60>
 8000622:	8bbb      	ldrh	r3, [r7, #28]
 8000624:	2b7a      	cmp	r3, #122	; 0x7a
 8000626:	d109      	bne.n	800063c <i2cScan+0x60>
		{
			devices |= OLED_FOUND;
 8000628:	7ffb      	ldrb	r3, [r7, #31]
 800062a:	f043 0301 	orr.w	r3, r3, #1
 800062e:	77fb      	strb	r3, [r7, #31]
			printMsg("OLED found at 0x%02X\n", i);
 8000630:	8bbb      	ldrh	r3, [r7, #28]
 8000632:	4619      	mov	r1, r3
 8000634:	4813      	ldr	r0, [pc, #76]	; (8000684 <i2cScan+0xa8>)
 8000636:	f7ff ffab 	bl	8000590 <printMsg>
 800063a:	e00e      	b.n	800065a <i2cScan+0x7e>
		}
		else if (res == HAL_OK && i == MCP4018_ADDR)
 800063c:	7efb      	ldrb	r3, [r7, #27]
 800063e:	2b00      	cmp	r3, #0
 8000640:	d10b      	bne.n	800065a <i2cScan+0x7e>
 8000642:	8bbb      	ldrh	r3, [r7, #28]
 8000644:	2b5e      	cmp	r3, #94	; 0x5e
 8000646:	d108      	bne.n	800065a <i2cScan+0x7e>
		{
			devices |= POT_FOUND;
 8000648:	7ffb      	ldrb	r3, [r7, #31]
 800064a:	f043 0302 	orr.w	r3, r3, #2
 800064e:	77fb      	strb	r3, [r7, #31]
			printMsg("MCP4018 found at 0x%02X\n", i);
 8000650:	8bbb      	ldrh	r3, [r7, #28]
 8000652:	4619      	mov	r1, r3
 8000654:	480c      	ldr	r0, [pc, #48]	; (8000688 <i2cScan+0xac>)
 8000656:	f7ff ff9b 	bl	8000590 <printMsg>
	for (uint16_t i = 0; i < 128; i++)
 800065a:	8bbb      	ldrh	r3, [r7, #28]
 800065c:	3301      	adds	r3, #1
 800065e:	83bb      	strh	r3, [r7, #28]
 8000660:	8bbb      	ldrh	r3, [r7, #28]
 8000662:	2b7f      	cmp	r3, #127	; 0x7f
 8000664:	d9d0      	bls.n	8000608 <i2cScan+0x2c>
		}
	}
	printMsg("returning from scan %02X\n", devices);
 8000666:	7ffb      	ldrb	r3, [r7, #31]
 8000668:	4619      	mov	r1, r3
 800066a:	4808      	ldr	r0, [pc, #32]	; (800068c <i2cScan+0xb0>)
 800066c:	f7ff ff90 	bl	8000590 <printMsg>
	return devices;
 8000670:	7ffb      	ldrb	r3, [r7, #31]
}
 8000672:	4618      	mov	r0, r3
 8000674:	3720      	adds	r7, #32
 8000676:	46bd      	mov	sp, r7
 8000678:	bdb0      	pop	{r4, r5, r7, pc}
 800067a:	bf00      	nop
 800067c:	080042e4 	.word	0x080042e4
 8000680:	200004a0 	.word	0x200004a0
 8000684:	08004294 	.word	0x08004294
 8000688:	080042ac 	.word	0x080042ac
 800068c:	080042c8 	.word	0x080042c8

08000690 <errorLEDs>:

void errorLEDs(uint8_t error)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b082      	sub	sp, #8
 8000694:	af00      	add	r7, sp, #0
 8000696:	4603      	mov	r3, r0
 8000698:	71fb      	strb	r3, [r7, #7]
	printMsg("errors");
 800069a:	4829      	ldr	r0, [pc, #164]	; (8000740 <errorLEDs+0xb0>)
 800069c:	f7ff ff78 	bl	8000590 <printMsg>
	while (1)
	{
		if (error == OLED_FOUND)
 80006a0:	79fb      	ldrb	r3, [r7, #7]
 80006a2:	2b01      	cmp	r3, #1
 80006a4:	d113      	bne.n	80006ce <errorLEDs+0x3e>
		{
			HAL_GPIO_TogglePin(CC_LED_PORT, CC_LED_PIN);
 80006a6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006aa:	4826      	ldr	r0, [pc, #152]	; (8000744 <errorLEDs+0xb4>)
 80006ac:	f001 fb09 	bl	8001cc2 <HAL_GPIO_TogglePin>
			HAL_Delay(FLASH_FREQ);
 80006b0:	2064      	movs	r0, #100	; 0x64
 80006b2:	f000 fdd5 	bl	8001260 <HAL_Delay>
			HAL_GPIO_TogglePin(OE_LED_PORT, OE_LED_PIN);
 80006b6:	2120      	movs	r1, #32
 80006b8:	4823      	ldr	r0, [pc, #140]	; (8000748 <errorLEDs+0xb8>)
 80006ba:	f001 fb02 	bl	8001cc2 <HAL_GPIO_TogglePin>
			HAL_Delay(FLASH_FREQ >> 1);
 80006be:	2032      	movs	r0, #50	; 0x32
 80006c0:	f000 fdce 	bl	8001260 <HAL_Delay>
			HAL_GPIO_TogglePin(OE_LED_PORT, OE_LED_PIN);
 80006c4:	2120      	movs	r1, #32
 80006c6:	4820      	ldr	r0, [pc, #128]	; (8000748 <errorLEDs+0xb8>)
 80006c8:	f001 fafb 	bl	8001cc2 <HAL_GPIO_TogglePin>
 80006cc:	e7e8      	b.n	80006a0 <errorLEDs+0x10>
		}
		else if (error == POT_FOUND)
 80006ce:	79fb      	ldrb	r3, [r7, #7]
 80006d0:	2b02      	cmp	r3, #2
 80006d2:	d114      	bne.n	80006fe <errorLEDs+0x6e>
		{
			HAL_GPIO_TogglePin(OE_LED_PORT, OE_LED_PIN);
 80006d4:	2120      	movs	r1, #32
 80006d6:	481c      	ldr	r0, [pc, #112]	; (8000748 <errorLEDs+0xb8>)
 80006d8:	f001 faf3 	bl	8001cc2 <HAL_GPIO_TogglePin>
			HAL_Delay(FLASH_FREQ);
 80006dc:	2064      	movs	r0, #100	; 0x64
 80006de:	f000 fdbf 	bl	8001260 <HAL_Delay>
			HAL_GPIO_TogglePin(CC_LED_PORT, CC_LED_PIN);
 80006e2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006e6:	4817      	ldr	r0, [pc, #92]	; (8000744 <errorLEDs+0xb4>)
 80006e8:	f001 faeb 	bl	8001cc2 <HAL_GPIO_TogglePin>
			HAL_Delay(FLASH_FREQ >> 1);
 80006ec:	2032      	movs	r0, #50	; 0x32
 80006ee:	f000 fdb7 	bl	8001260 <HAL_Delay>
			HAL_GPIO_TogglePin(CC_LED_PORT, CC_LED_PIN);
 80006f2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006f6:	4813      	ldr	r0, [pc, #76]	; (8000744 <errorLEDs+0xb4>)
 80006f8:	f001 fae3 	bl	8001cc2 <HAL_GPIO_TogglePin>
 80006fc:	e7d0      	b.n	80006a0 <errorLEDs+0x10>
		}
		else if (error == 0)
 80006fe:	79fb      	ldrb	r3, [r7, #7]
 8000700:	2b00      	cmp	r3, #0
 8000702:	d118      	bne.n	8000736 <errorLEDs+0xa6>
		{
			HAL_GPIO_TogglePin(OE_LED_PORT, OE_LED_PIN);
 8000704:	2120      	movs	r1, #32
 8000706:	4810      	ldr	r0, [pc, #64]	; (8000748 <errorLEDs+0xb8>)
 8000708:	f001 fadb 	bl	8001cc2 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(CC_LED_PORT, CC_LED_PIN);
 800070c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000710:	480c      	ldr	r0, [pc, #48]	; (8000744 <errorLEDs+0xb4>)
 8000712:	f001 fad6 	bl	8001cc2 <HAL_GPIO_TogglePin>
			HAL_Delay(FLASH_FREQ >> 1);
 8000716:	2032      	movs	r0, #50	; 0x32
 8000718:	f000 fda2 	bl	8001260 <HAL_Delay>
			HAL_GPIO_TogglePin(OE_LED_PORT, OE_LED_PIN);
 800071c:	2120      	movs	r1, #32
 800071e:	480a      	ldr	r0, [pc, #40]	; (8000748 <errorLEDs+0xb8>)
 8000720:	f001 facf 	bl	8001cc2 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(CC_LED_PORT, CC_LED_PIN);
 8000724:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000728:	4806      	ldr	r0, [pc, #24]	; (8000744 <errorLEDs+0xb4>)
 800072a:	f001 faca 	bl	8001cc2 <HAL_GPIO_TogglePin>
			HAL_Delay(FLASH_FREQ >> 1);
 800072e:	2032      	movs	r0, #50	; 0x32
 8000730:	f000 fd96 	bl	8001260 <HAL_Delay>
		if (error == OLED_FOUND)
 8000734:	e7b4      	b.n	80006a0 <errorLEDs+0x10>
		}
		else
		{
			break;
 8000736:	bf00      	nop
		}
	}
}
 8000738:	bf00      	nop
 800073a:	3708      	adds	r7, #8
 800073c:	46bd      	mov	sp, r7
 800073e:	bd80      	pop	{r7, pc}
 8000740:	080042fc 	.word	0x080042fc
 8000744:	40020800 	.word	0x40020800
 8000748:	40020000 	.word	0x40020000

0800074c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b082      	sub	sp, #8
 8000750:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000752:	f000 fd13 	bl	800117c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000756:	f000 f81d 	bl	8000794 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800075a:	f000 f925 	bl	80009a8 <MX_GPIO_Init>
  MX_ADC1_Init();
 800075e:	f000 f879 	bl	8000854 <MX_ADC1_Init>
  MX_I2C1_Init();
 8000762:	f000 f8c9 	bl	80008f8 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8000766:	f000 f8f5 	bl	8000954 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  uint8_t i2cScanRet = i2cScan();
 800076a:	f7ff ff37 	bl	80005dc <i2cScan>
 800076e:	4603      	mov	r3, r0
 8000770:	71fb      	strb	r3, [r7, #7]
  if (!i2cScanRet)
 8000772:	79fb      	ldrb	r3, [r7, #7]
 8000774:	2b00      	cmp	r3, #0
 8000776:	d103      	bne.n	8000780 <main+0x34>
  {
    errorLEDs(i2cScanRet);
 8000778:	79fb      	ldrb	r3, [r7, #7]
 800077a:	4618      	mov	r0, r3
 800077c:	f7ff ff88 	bl	8000690 <errorLEDs>
  }
  printMsg("no error");
 8000780:	4803      	ldr	r0, [pc, #12]	; (8000790 <main+0x44>)
 8000782:	f7ff ff05 	bl	8000590 <printMsg>
  ssd1306_Init();
 8000786:	f000 fa55 	bl	8000c34 <ssd1306_Init>
  showStartup();
 800078a:	f000 f9d9 	bl	8000b40 <showStartup>
  //  ssd1306_TestAll();
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800078e:	e7fe      	b.n	800078e <main+0x42>
 8000790:	08004304 	.word	0x08004304

08000794 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b094      	sub	sp, #80	; 0x50
 8000798:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800079a:	f107 0320 	add.w	r3, r7, #32
 800079e:	2230      	movs	r2, #48	; 0x30
 80007a0:	2100      	movs	r1, #0
 80007a2:	4618      	mov	r0, r3
 80007a4:	f003 f980 	bl	8003aa8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007a8:	f107 030c 	add.w	r3, r7, #12
 80007ac:	2200      	movs	r2, #0
 80007ae:	601a      	str	r2, [r3, #0]
 80007b0:	605a      	str	r2, [r3, #4]
 80007b2:	609a      	str	r2, [r3, #8]
 80007b4:	60da      	str	r2, [r3, #12]
 80007b6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007b8:	2300      	movs	r3, #0
 80007ba:	60bb      	str	r3, [r7, #8]
 80007bc:	4b23      	ldr	r3, [pc, #140]	; (800084c <SystemClock_Config+0xb8>)
 80007be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007c0:	4a22      	ldr	r2, [pc, #136]	; (800084c <SystemClock_Config+0xb8>)
 80007c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007c6:	6413      	str	r3, [r2, #64]	; 0x40
 80007c8:	4b20      	ldr	r3, [pc, #128]	; (800084c <SystemClock_Config+0xb8>)
 80007ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007d0:	60bb      	str	r3, [r7, #8]
 80007d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80007d4:	2300      	movs	r3, #0
 80007d6:	607b      	str	r3, [r7, #4]
 80007d8:	4b1d      	ldr	r3, [pc, #116]	; (8000850 <SystemClock_Config+0xbc>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80007e0:	4a1b      	ldr	r2, [pc, #108]	; (8000850 <SystemClock_Config+0xbc>)
 80007e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80007e6:	6013      	str	r3, [r2, #0]
 80007e8:	4b19      	ldr	r3, [pc, #100]	; (8000850 <SystemClock_Config+0xbc>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007f0:	607b      	str	r3, [r7, #4]
 80007f2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007f4:	2302      	movs	r3, #2
 80007f6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007f8:	2301      	movs	r3, #1
 80007fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007fc:	2310      	movs	r3, #16
 80007fe:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000800:	2300      	movs	r3, #0
 8000802:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000804:	f107 0320 	add.w	r3, r7, #32
 8000808:	4618      	mov	r0, r3
 800080a:	f002 f817 	bl	800283c <HAL_RCC_OscConfig>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d001      	beq.n	8000818 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000814:	f000 f9a6 	bl	8000b64 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000818:	230f      	movs	r3, #15
 800081a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800081c:	2300      	movs	r3, #0
 800081e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000820:	2300      	movs	r3, #0
 8000822:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000824:	2300      	movs	r3, #0
 8000826:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000828:	2300      	movs	r3, #0
 800082a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800082c:	f107 030c 	add.w	r3, r7, #12
 8000830:	2100      	movs	r1, #0
 8000832:	4618      	mov	r0, r3
 8000834:	f002 fa72 	bl	8002d1c <HAL_RCC_ClockConfig>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	d001      	beq.n	8000842 <SystemClock_Config+0xae>
  {
    Error_Handler();
 800083e:	f000 f991 	bl	8000b64 <Error_Handler>
  }
}
 8000842:	bf00      	nop
 8000844:	3750      	adds	r7, #80	; 0x50
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	40023800 	.word	0x40023800
 8000850:	40007000 	.word	0x40007000

08000854 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b084      	sub	sp, #16
 8000858:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800085a:	463b      	mov	r3, r7
 800085c:	2200      	movs	r2, #0
 800085e:	601a      	str	r2, [r3, #0]
 8000860:	605a      	str	r2, [r3, #4]
 8000862:	609a      	str	r2, [r3, #8]
 8000864:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000866:	4b21      	ldr	r3, [pc, #132]	; (80008ec <MX_ADC1_Init+0x98>)
 8000868:	4a21      	ldr	r2, [pc, #132]	; (80008f0 <MX_ADC1_Init+0x9c>)
 800086a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800086c:	4b1f      	ldr	r3, [pc, #124]	; (80008ec <MX_ADC1_Init+0x98>)
 800086e:	2200      	movs	r2, #0
 8000870:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000872:	4b1e      	ldr	r3, [pc, #120]	; (80008ec <MX_ADC1_Init+0x98>)
 8000874:	2200      	movs	r2, #0
 8000876:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000878:	4b1c      	ldr	r3, [pc, #112]	; (80008ec <MX_ADC1_Init+0x98>)
 800087a:	2200      	movs	r2, #0
 800087c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800087e:	4b1b      	ldr	r3, [pc, #108]	; (80008ec <MX_ADC1_Init+0x98>)
 8000880:	2200      	movs	r2, #0
 8000882:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000884:	4b19      	ldr	r3, [pc, #100]	; (80008ec <MX_ADC1_Init+0x98>)
 8000886:	2200      	movs	r2, #0
 8000888:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800088c:	4b17      	ldr	r3, [pc, #92]	; (80008ec <MX_ADC1_Init+0x98>)
 800088e:	2200      	movs	r2, #0
 8000890:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000892:	4b16      	ldr	r3, [pc, #88]	; (80008ec <MX_ADC1_Init+0x98>)
 8000894:	4a17      	ldr	r2, [pc, #92]	; (80008f4 <MX_ADC1_Init+0xa0>)
 8000896:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000898:	4b14      	ldr	r3, [pc, #80]	; (80008ec <MX_ADC1_Init+0x98>)
 800089a:	2200      	movs	r2, #0
 800089c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800089e:	4b13      	ldr	r3, [pc, #76]	; (80008ec <MX_ADC1_Init+0x98>)
 80008a0:	2201      	movs	r2, #1
 80008a2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80008a4:	4b11      	ldr	r3, [pc, #68]	; (80008ec <MX_ADC1_Init+0x98>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80008ac:	4b0f      	ldr	r3, [pc, #60]	; (80008ec <MX_ADC1_Init+0x98>)
 80008ae:	2201      	movs	r2, #1
 80008b0:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80008b2:	480e      	ldr	r0, [pc, #56]	; (80008ec <MX_ADC1_Init+0x98>)
 80008b4:	f000 fcf6 	bl	80012a4 <HAL_ADC_Init>
 80008b8:	4603      	mov	r3, r0
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d001      	beq.n	80008c2 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80008be:	f000 f951 	bl	8000b64 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 80008c2:	230d      	movs	r3, #13
 80008c4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80008c6:	2301      	movs	r3, #1
 80008c8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80008ca:	2300      	movs	r3, #0
 80008cc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008ce:	463b      	mov	r3, r7
 80008d0:	4619      	mov	r1, r3
 80008d2:	4806      	ldr	r0, [pc, #24]	; (80008ec <MX_ADC1_Init+0x98>)
 80008d4:	f000 fd2a 	bl	800132c <HAL_ADC_ConfigChannel>
 80008d8:	4603      	mov	r3, r0
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d001      	beq.n	80008e2 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80008de:	f000 f941 	bl	8000b64 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80008e2:	bf00      	nop
 80008e4:	3710      	adds	r7, #16
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	bf00      	nop
 80008ec:	200004f4 	.word	0x200004f4
 80008f0:	40012000 	.word	0x40012000
 80008f4:	0f000001 	.word	0x0f000001

080008f8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80008fc:	4b12      	ldr	r3, [pc, #72]	; (8000948 <MX_I2C1_Init+0x50>)
 80008fe:	4a13      	ldr	r2, [pc, #76]	; (800094c <MX_I2C1_Init+0x54>)
 8000900:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000902:	4b11      	ldr	r3, [pc, #68]	; (8000948 <MX_I2C1_Init+0x50>)
 8000904:	4a12      	ldr	r2, [pc, #72]	; (8000950 <MX_I2C1_Init+0x58>)
 8000906:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000908:	4b0f      	ldr	r3, [pc, #60]	; (8000948 <MX_I2C1_Init+0x50>)
 800090a:	2200      	movs	r2, #0
 800090c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800090e:	4b0e      	ldr	r3, [pc, #56]	; (8000948 <MX_I2C1_Init+0x50>)
 8000910:	2200      	movs	r2, #0
 8000912:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000914:	4b0c      	ldr	r3, [pc, #48]	; (8000948 <MX_I2C1_Init+0x50>)
 8000916:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800091a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800091c:	4b0a      	ldr	r3, [pc, #40]	; (8000948 <MX_I2C1_Init+0x50>)
 800091e:	2200      	movs	r2, #0
 8000920:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000922:	4b09      	ldr	r3, [pc, #36]	; (8000948 <MX_I2C1_Init+0x50>)
 8000924:	2200      	movs	r2, #0
 8000926:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000928:	4b07      	ldr	r3, [pc, #28]	; (8000948 <MX_I2C1_Init+0x50>)
 800092a:	2200      	movs	r2, #0
 800092c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800092e:	4b06      	ldr	r3, [pc, #24]	; (8000948 <MX_I2C1_Init+0x50>)
 8000930:	2200      	movs	r2, #0
 8000932:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000934:	4804      	ldr	r0, [pc, #16]	; (8000948 <MX_I2C1_Init+0x50>)
 8000936:	f001 fa03 	bl	8001d40 <HAL_I2C_Init>
 800093a:	4603      	mov	r3, r0
 800093c:	2b00      	cmp	r3, #0
 800093e:	d001      	beq.n	8000944 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000940:	f000 f910 	bl	8000b64 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000944:	bf00      	nop
 8000946:	bd80      	pop	{r7, pc}
 8000948:	200004a0 	.word	0x200004a0
 800094c:	40005400 	.word	0x40005400
 8000950:	00061a80 	.word	0x00061a80

08000954 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000958:	4b11      	ldr	r3, [pc, #68]	; (80009a0 <MX_USART2_UART_Init+0x4c>)
 800095a:	4a12      	ldr	r2, [pc, #72]	; (80009a4 <MX_USART2_UART_Init+0x50>)
 800095c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800095e:	4b10      	ldr	r3, [pc, #64]	; (80009a0 <MX_USART2_UART_Init+0x4c>)
 8000960:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000964:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000966:	4b0e      	ldr	r3, [pc, #56]	; (80009a0 <MX_USART2_UART_Init+0x4c>)
 8000968:	2200      	movs	r2, #0
 800096a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800096c:	4b0c      	ldr	r3, [pc, #48]	; (80009a0 <MX_USART2_UART_Init+0x4c>)
 800096e:	2200      	movs	r2, #0
 8000970:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000972:	4b0b      	ldr	r3, [pc, #44]	; (80009a0 <MX_USART2_UART_Init+0x4c>)
 8000974:	2200      	movs	r2, #0
 8000976:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000978:	4b09      	ldr	r3, [pc, #36]	; (80009a0 <MX_USART2_UART_Init+0x4c>)
 800097a:	220c      	movs	r2, #12
 800097c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800097e:	4b08      	ldr	r3, [pc, #32]	; (80009a0 <MX_USART2_UART_Init+0x4c>)
 8000980:	2200      	movs	r2, #0
 8000982:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000984:	4b06      	ldr	r3, [pc, #24]	; (80009a0 <MX_USART2_UART_Init+0x4c>)
 8000986:	2200      	movs	r2, #0
 8000988:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800098a:	4805      	ldr	r0, [pc, #20]	; (80009a0 <MX_USART2_UART_Init+0x4c>)
 800098c:	f002 fb92 	bl	80030b4 <HAL_UART_Init>
 8000990:	4603      	mov	r3, r0
 8000992:	2b00      	cmp	r3, #0
 8000994:	d001      	beq.n	800099a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000996:	f000 f8e5 	bl	8000b64 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800099a:	bf00      	nop
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	2000053c 	.word	0x2000053c
 80009a4:	40004400 	.word	0x40004400

080009a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b08a      	sub	sp, #40	; 0x28
 80009ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ae:	f107 0314 	add.w	r3, r7, #20
 80009b2:	2200      	movs	r2, #0
 80009b4:	601a      	str	r2, [r3, #0]
 80009b6:	605a      	str	r2, [r3, #4]
 80009b8:	609a      	str	r2, [r3, #8]
 80009ba:	60da      	str	r2, [r3, #12]
 80009bc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009be:	2300      	movs	r3, #0
 80009c0:	613b      	str	r3, [r7, #16]
 80009c2:	4b59      	ldr	r3, [pc, #356]	; (8000b28 <MX_GPIO_Init+0x180>)
 80009c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c6:	4a58      	ldr	r2, [pc, #352]	; (8000b28 <MX_GPIO_Init+0x180>)
 80009c8:	f043 0304 	orr.w	r3, r3, #4
 80009cc:	6313      	str	r3, [r2, #48]	; 0x30
 80009ce:	4b56      	ldr	r3, [pc, #344]	; (8000b28 <MX_GPIO_Init+0x180>)
 80009d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d2:	f003 0304 	and.w	r3, r3, #4
 80009d6:	613b      	str	r3, [r7, #16]
 80009d8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009da:	2300      	movs	r3, #0
 80009dc:	60fb      	str	r3, [r7, #12]
 80009de:	4b52      	ldr	r3, [pc, #328]	; (8000b28 <MX_GPIO_Init+0x180>)
 80009e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e2:	4a51      	ldr	r2, [pc, #324]	; (8000b28 <MX_GPIO_Init+0x180>)
 80009e4:	f043 0301 	orr.w	r3, r3, #1
 80009e8:	6313      	str	r3, [r2, #48]	; 0x30
 80009ea:	4b4f      	ldr	r3, [pc, #316]	; (8000b28 <MX_GPIO_Init+0x180>)
 80009ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ee:	f003 0301 	and.w	r3, r3, #1
 80009f2:	60fb      	str	r3, [r7, #12]
 80009f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009f6:	2300      	movs	r3, #0
 80009f8:	60bb      	str	r3, [r7, #8]
 80009fa:	4b4b      	ldr	r3, [pc, #300]	; (8000b28 <MX_GPIO_Init+0x180>)
 80009fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fe:	4a4a      	ldr	r2, [pc, #296]	; (8000b28 <MX_GPIO_Init+0x180>)
 8000a00:	f043 0308 	orr.w	r3, r3, #8
 8000a04:	6313      	str	r3, [r2, #48]	; 0x30
 8000a06:	4b48      	ldr	r3, [pc, #288]	; (8000b28 <MX_GPIO_Init+0x180>)
 8000a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0a:	f003 0308 	and.w	r3, r3, #8
 8000a0e:	60bb      	str	r3, [r7, #8]
 8000a10:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a12:	2300      	movs	r3, #0
 8000a14:	607b      	str	r3, [r7, #4]
 8000a16:	4b44      	ldr	r3, [pc, #272]	; (8000b28 <MX_GPIO_Init+0x180>)
 8000a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1a:	4a43      	ldr	r2, [pc, #268]	; (8000b28 <MX_GPIO_Init+0x180>)
 8000a1c:	f043 0302 	orr.w	r3, r3, #2
 8000a20:	6313      	str	r3, [r2, #48]	; 0x30
 8000a22:	4b41      	ldr	r3, [pc, #260]	; (8000b28 <MX_GPIO_Init+0x180>)
 8000a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a26:	f003 0302 	and.w	r3, r3, #2
 8000a2a:	607b      	str	r3, [r7, #4]
 8000a2c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, REG_EN_Pin|CC_LED_Pin, GPIO_PIN_RESET);
 8000a2e:	2200      	movs	r2, #0
 8000a30:	f240 4102 	movw	r1, #1026	; 0x402
 8000a34:	483d      	ldr	r0, [pc, #244]	; (8000b2c <MX_GPIO_Init+0x184>)
 8000a36:	f001 f92b 	bl	8001c90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|OE_LED_Pin, GPIO_PIN_RESET);
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	f248 0120 	movw	r1, #32800	; 0x8020
 8000a40:	483b      	ldr	r0, [pc, #236]	; (8000b30 <MX_GPIO_Init+0x188>)
 8000a42:	f001 f925 	bl	8001c90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, nSW_UP_Pin|LCD_RST_Pin, GPIO_PIN_RESET);
 8000a46:	2200      	movs	r2, #0
 8000a48:	f44f 7188 	mov.w	r1, #272	; 0x110
 8000a4c:	4839      	ldr	r0, [pc, #228]	; (8000b34 <MX_GPIO_Init+0x18c>)
 8000a4e:	f001 f91f 	bl	8001c90 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : REG_EN_Pin CC_LED_Pin */
  GPIO_InitStruct.Pin = REG_EN_Pin|CC_LED_Pin;
 8000a52:	f240 4302 	movw	r3, #1026	; 0x402
 8000a56:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a58:	2301      	movs	r3, #1
 8000a5a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a60:	2300      	movs	r3, #0
 8000a62:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a64:	f107 0314 	add.w	r3, r7, #20
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4830      	ldr	r0, [pc, #192]	; (8000b2c <MX_GPIO_Init+0x184>)
 8000a6c:	f000 ff8e 	bl	800198c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 OE_LED_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_5|OE_LED_Pin;
 8000a70:	f248 0320 	movw	r3, #32800	; 0x8020
 8000a74:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a76:	2301      	movs	r3, #1
 8000a78:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a82:	f107 0314 	add.w	r3, r7, #20
 8000a86:	4619      	mov	r1, r3
 8000a88:	4829      	ldr	r0, [pc, #164]	; (8000b30 <MX_GPIO_Init+0x188>)
 8000a8a:	f000 ff7f 	bl	800198c <HAL_GPIO_Init>

  /*Configure GPIO pin : nSW_INT_Pin */
  GPIO_InitStruct.Pin = nSW_INT_Pin;
 8000a8e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000a92:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a94:	4b28      	ldr	r3, [pc, #160]	; (8000b38 <MX_GPIO_Init+0x190>)
 8000a96:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(nSW_INT_GPIO_Port, &GPIO_InitStruct);
 8000a9c:	f107 0314 	add.w	r3, r7, #20
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4822      	ldr	r0, [pc, #136]	; (8000b2c <MX_GPIO_Init+0x184>)
 8000aa4:	f000 ff72 	bl	800198c <HAL_GPIO_Init>

  /*Configure GPIO pin : nSW_VI_Pin */
  GPIO_InitStruct.Pin = nSW_VI_Pin;
 8000aa8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000aac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(nSW_VI_GPIO_Port, &GPIO_InitStruct);
 8000ab6:	f107 0314 	add.w	r3, r7, #20
 8000aba:	4619      	mov	r1, r3
 8000abc:	481b      	ldr	r0, [pc, #108]	; (8000b2c <MX_GPIO_Init+0x184>)
 8000abe:	f000 ff65 	bl	800198c <HAL_GPIO_Init>

  /*Configure GPIO pin : nSW_DW_Pin */
  GPIO_InitStruct.Pin = nSW_DW_Pin;
 8000ac2:	2304      	movs	r3, #4
 8000ac4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aca:	2300      	movs	r3, #0
 8000acc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(nSW_DW_GPIO_Port, &GPIO_InitStruct);
 8000ace:	f107 0314 	add.w	r3, r7, #20
 8000ad2:	4619      	mov	r1, r3
 8000ad4:	4819      	ldr	r0, [pc, #100]	; (8000b3c <MX_GPIO_Init+0x194>)
 8000ad6:	f000 ff59 	bl	800198c <HAL_GPIO_Init>

  /*Configure GPIO pins : nSW_UP_Pin LCD_RST_Pin */
  GPIO_InitStruct.Pin = nSW_UP_Pin|LCD_RST_Pin;
 8000ada:	f44f 7388 	mov.w	r3, #272	; 0x110
 8000ade:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ae0:	2301      	movs	r3, #1
 8000ae2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aec:	f107 0314 	add.w	r3, r7, #20
 8000af0:	4619      	mov	r1, r3
 8000af2:	4810      	ldr	r0, [pc, #64]	; (8000b34 <MX_GPIO_Init+0x18c>)
 8000af4:	f000 ff4a 	bl	800198c <HAL_GPIO_Init>

  /*Configure GPIO pin : nSW_OE_Pin */
  GPIO_InitStruct.Pin = nSW_OE_Pin;
 8000af8:	2320      	movs	r3, #32
 8000afa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000afc:	2300      	movs	r3, #0
 8000afe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b00:	2300      	movs	r3, #0
 8000b02:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(nSW_OE_GPIO_Port, &GPIO_InitStruct);
 8000b04:	f107 0314 	add.w	r3, r7, #20
 8000b08:	4619      	mov	r1, r3
 8000b0a:	480a      	ldr	r0, [pc, #40]	; (8000b34 <MX_GPIO_Init+0x18c>)
 8000b0c:	f000 ff3e 	bl	800198c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000b10:	2200      	movs	r2, #0
 8000b12:	2100      	movs	r1, #0
 8000b14:	2028      	movs	r0, #40	; 0x28
 8000b16:	f000 ff02 	bl	800191e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000b1a:	2028      	movs	r0, #40	; 0x28
 8000b1c:	f000 ff1b 	bl	8001956 <HAL_NVIC_EnableIRQ>

}
 8000b20:	bf00      	nop
 8000b22:	3728      	adds	r7, #40	; 0x28
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bd80      	pop	{r7, pc}
 8000b28:	40023800 	.word	0x40023800
 8000b2c:	40020800 	.word	0x40020800
 8000b30:	40020000 	.word	0x40020000
 8000b34:	40020400 	.word	0x40020400
 8000b38:	10210000 	.word	0x10210000
 8000b3c:	40020c00 	.word	0x40020c00

08000b40 <showStartup>:

/* USER CODE BEGIN 4 */
void showStartup(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	af00      	add	r7, sp, #0
  ssd1306_FillBuffer((uint8_t *)&BOOTSCREEN, sizeof(BOOTSCREEN));
 8000b44:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b48:	4805      	ldr	r0, [pc, #20]	; (8000b60 <showStartup+0x20>)
 8000b4a:	f000 f859 	bl	8000c00 <ssd1306_FillBuffer>
  ssd1306_UpdateScreen();
 8000b4e:	f000 f8fd 	bl	8000d4c <ssd1306_UpdateScreen>
  HAL_Delay(2000);
 8000b52:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000b56:	f000 fb83 	bl	8001260 <HAL_Delay>
}
 8000b5a:	bf00      	nop
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	08004310 	.word	0x08004310

08000b64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b68:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b6a:	e7fe      	b.n	8000b6a <Error_Handler+0x6>

08000b6c <ssd1306_Reset>:
#include <math.h>
#include <stdlib.h>
#include <string.h> // For memcpy

void ssd1306_Reset(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(SSD1306_Reset_Port, SSD1306_Reset_Pin, GPIO_PIN_RESET);
 8000b70:	2200      	movs	r2, #0
 8000b72:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b76:	4808      	ldr	r0, [pc, #32]	; (8000b98 <ssd1306_Reset+0x2c>)
 8000b78:	f001 f88a 	bl	8001c90 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 8000b7c:	200a      	movs	r0, #10
 8000b7e:	f000 fb6f 	bl	8001260 <HAL_Delay>
    HAL_GPIO_WritePin(SSD1306_Reset_Port, SSD1306_Reset_Pin, GPIO_PIN_SET);
 8000b82:	2201      	movs	r2, #1
 8000b84:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b88:	4803      	ldr	r0, [pc, #12]	; (8000b98 <ssd1306_Reset+0x2c>)
 8000b8a:	f001 f881 	bl	8001c90 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 8000b8e:	200a      	movs	r0, #10
 8000b90:	f000 fb66 	bl	8001260 <HAL_Delay>
}
 8000b94:	bf00      	nop
 8000b96:	bd80      	pop	{r7, pc}
 8000b98:	40020400 	.word	0x40020400

08000b9c <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b086      	sub	sp, #24
 8000ba0:	af04      	add	r7, sp, #16
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8000ba6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000baa:	9302      	str	r3, [sp, #8]
 8000bac:	2301      	movs	r3, #1
 8000bae:	9301      	str	r3, [sp, #4]
 8000bb0:	1dfb      	adds	r3, r7, #7
 8000bb2:	9300      	str	r3, [sp, #0]
 8000bb4:	2301      	movs	r3, #1
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	217a      	movs	r1, #122	; 0x7a
 8000bba:	4803      	ldr	r0, [pc, #12]	; (8000bc8 <ssd1306_WriteCommand+0x2c>)
 8000bbc:	f001 f9f8 	bl	8001fb0 <HAL_I2C_Mem_Write>
}
 8000bc0:	bf00      	nop
 8000bc2:	3708      	adds	r7, #8
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bd80      	pop	{r7, pc}
 8000bc8:	200004a0 	.word	0x200004a0

08000bcc <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t *buffer, size_t buff_size)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b086      	sub	sp, #24
 8000bd0:	af04      	add	r7, sp, #16
 8000bd2:	6078      	str	r0, [r7, #4]
 8000bd4:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8000bd6:	683b      	ldr	r3, [r7, #0]
 8000bd8:	b29b      	uxth	r3, r3
 8000bda:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000bde:	9202      	str	r2, [sp, #8]
 8000be0:	9301      	str	r3, [sp, #4]
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	9300      	str	r3, [sp, #0]
 8000be6:	2301      	movs	r3, #1
 8000be8:	2240      	movs	r2, #64	; 0x40
 8000bea:	217a      	movs	r1, #122	; 0x7a
 8000bec:	4803      	ldr	r0, [pc, #12]	; (8000bfc <ssd1306_WriteData+0x30>)
 8000bee:	f001 f9df 	bl	8001fb0 <HAL_I2C_Mem_Write>
}
 8000bf2:	bf00      	nop
 8000bf4:	3708      	adds	r7, #8
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	bf00      	nop
 8000bfc:	200004a0 	.word	0x200004a0

08000c00 <ssd1306_FillBuffer>:
// Screen object
static SSD1306_t SSD1306;

/* Fills the Screenbuffer with values from a given buffer of a fixed length */
SSD1306_Error_t ssd1306_FillBuffer(uint8_t *buf, uint32_t len)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b084      	sub	sp, #16
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
 8000c08:	6039      	str	r1, [r7, #0]
    SSD1306_Error_t ret = SSD1306_ERR;
 8000c0a:	2301      	movs	r3, #1
 8000c0c:	73fb      	strb	r3, [r7, #15]
    if (len <= SSD1306_BUFFER_SIZE)
 8000c0e:	683b      	ldr	r3, [r7, #0]
 8000c10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000c14:	d806      	bhi.n	8000c24 <ssd1306_FillBuffer+0x24>
    {
        memcpy(SSD1306_Buffer, buf, len);
 8000c16:	683a      	ldr	r2, [r7, #0]
 8000c18:	6879      	ldr	r1, [r7, #4]
 8000c1a:	4805      	ldr	r0, [pc, #20]	; (8000c30 <ssd1306_FillBuffer+0x30>)
 8000c1c:	f002 ff20 	bl	8003a60 <memcpy>
        ret = SSD1306_OK;
 8000c20:	2300      	movs	r3, #0
 8000c22:	73fb      	strb	r3, [r7, #15]
    }
    return ret;
 8000c24:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c26:	4618      	mov	r0, r3
 8000c28:	3710      	adds	r7, #16
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	2000008c 	.word	0x2000008c

08000c34 <ssd1306_Init>:

// Initialize the oled screen
void ssd1306_Init(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8000c38:	f7ff ff98 	bl	8000b6c <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8000c3c:	2064      	movs	r0, #100	; 0x64
 8000c3e:	f000 fb0f 	bl	8001260 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8000c42:	2000      	movs	r0, #0
 8000c44:	f000 f8bc 	bl	8000dc0 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8000c48:	2020      	movs	r0, #32
 8000c4a:	f7ff ffa7 	bl	8000b9c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8000c4e:	2000      	movs	r0, #0
 8000c50:	f7ff ffa4 	bl	8000b9c <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000c54:	20b0      	movs	r0, #176	; 0xb0
 8000c56:	f7ff ffa1 	bl	8000b9c <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8000c5a:	20c8      	movs	r0, #200	; 0xc8
 8000c5c:	f7ff ff9e 	bl	8000b9c <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8000c60:	2000      	movs	r0, #0
 8000c62:	f7ff ff9b 	bl	8000b9c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8000c66:	2010      	movs	r0, #16
 8000c68:	f7ff ff98 	bl	8000b9c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8000c6c:	2040      	movs	r0, #64	; 0x40
 8000c6e:	f7ff ff95 	bl	8000b9c <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8000c72:	20ff      	movs	r0, #255	; 0xff
 8000c74:	f000 f890 	bl	8000d98 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8000c78:	20a1      	movs	r0, #161	; 0xa1
 8000c7a:	f7ff ff8f 	bl	8000b9c <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8000c7e:	20a6      	movs	r0, #166	; 0xa6
 8000c80:	f7ff ff8c 	bl	8000b9c <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8000c84:	20a8      	movs	r0, #168	; 0xa8
 8000c86:	f7ff ff89 	bl	8000b9c <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8000c8a:	203f      	movs	r0, #63	; 0x3f
 8000c8c:	f7ff ff86 	bl	8000b9c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000c90:	20a4      	movs	r0, #164	; 0xa4
 8000c92:	f7ff ff83 	bl	8000b9c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8000c96:	20d3      	movs	r0, #211	; 0xd3
 8000c98:	f7ff ff80 	bl	8000b9c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8000c9c:	2000      	movs	r0, #0
 8000c9e:	f7ff ff7d 	bl	8000b9c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8000ca2:	20d5      	movs	r0, #213	; 0xd5
 8000ca4:	f7ff ff7a 	bl	8000b9c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8000ca8:	20f0      	movs	r0, #240	; 0xf0
 8000caa:	f7ff ff77 	bl	8000b9c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8000cae:	20d9      	movs	r0, #217	; 0xd9
 8000cb0:	f7ff ff74 	bl	8000b9c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8000cb4:	2022      	movs	r0, #34	; 0x22
 8000cb6:	f7ff ff71 	bl	8000b9c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8000cba:	20da      	movs	r0, #218	; 0xda
 8000cbc:	f7ff ff6e 	bl	8000b9c <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8000cc0:	2012      	movs	r0, #18
 8000cc2:	f7ff ff6b 	bl	8000b9c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8000cc6:	20db      	movs	r0, #219	; 0xdb
 8000cc8:	f7ff ff68 	bl	8000b9c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8000ccc:	2020      	movs	r0, #32
 8000cce:	f7ff ff65 	bl	8000b9c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8000cd2:	208d      	movs	r0, #141	; 0x8d
 8000cd4:	f7ff ff62 	bl	8000b9c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8000cd8:	2014      	movs	r0, #20
 8000cda:	f7ff ff5f 	bl	8000b9c <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1);    //--turn on SSD1306 panel
 8000cde:	2001      	movs	r0, #1
 8000ce0:	f000 f86e 	bl	8000dc0 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8000ce4:	2000      	movs	r0, #0
 8000ce6:	f000 f80f 	bl	8000d08 <ssd1306_Fill>

    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8000cea:	f000 f82f 	bl	8000d4c <ssd1306_UpdateScreen>

    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8000cee:	4b05      	ldr	r3, [pc, #20]	; (8000d04 <ssd1306_Init+0xd0>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8000cf4:	4b03      	ldr	r3, [pc, #12]	; (8000d04 <ssd1306_Init+0xd0>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	805a      	strh	r2, [r3, #2]

    SSD1306.Initialized = 1;
 8000cfa:	4b02      	ldr	r3, [pc, #8]	; (8000d04 <ssd1306_Init+0xd0>)
 8000cfc:	2201      	movs	r2, #1
 8000cfe:	715a      	strb	r2, [r3, #5]
}
 8000d00:	bf00      	nop
 8000d02:	bd80      	pop	{r7, pc}
 8000d04:	2000048c 	.word	0x2000048c

08000d08 <ssd1306_Fill>:

// Fill the whole screen with the given color
void ssd1306_Fill(SSD1306_COLOR color)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	b085      	sub	sp, #20
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	4603      	mov	r3, r0
 8000d10:	71fb      	strb	r3, [r7, #7]
    /* Set memory */
    uint32_t i;

    for (i = 0; i < sizeof(SSD1306_Buffer); i++)
 8000d12:	2300      	movs	r3, #0
 8000d14:	60fb      	str	r3, [r7, #12]
 8000d16:	e00d      	b.n	8000d34 <ssd1306_Fill+0x2c>
    {
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8000d18:	79fb      	ldrb	r3, [r7, #7]
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d101      	bne.n	8000d22 <ssd1306_Fill+0x1a>
 8000d1e:	2100      	movs	r1, #0
 8000d20:	e000      	b.n	8000d24 <ssd1306_Fill+0x1c>
 8000d22:	21ff      	movs	r1, #255	; 0xff
 8000d24:	4a08      	ldr	r2, [pc, #32]	; (8000d48 <ssd1306_Fill+0x40>)
 8000d26:	68fb      	ldr	r3, [r7, #12]
 8000d28:	4413      	add	r3, r2
 8000d2a:	460a      	mov	r2, r1
 8000d2c:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < sizeof(SSD1306_Buffer); i++)
 8000d2e:	68fb      	ldr	r3, [r7, #12]
 8000d30:	3301      	adds	r3, #1
 8000d32:	60fb      	str	r3, [r7, #12]
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000d3a:	d3ed      	bcc.n	8000d18 <ssd1306_Fill+0x10>
    }
}
 8000d3c:	bf00      	nop
 8000d3e:	3714      	adds	r7, #20
 8000d40:	46bd      	mov	sp, r7
 8000d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d46:	4770      	bx	lr
 8000d48:	2000008c 	.word	0x2000008c

08000d4c <ssd1306_UpdateScreen>:

// Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b082      	sub	sp, #8
 8000d50:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for (uint8_t i = 0; i < SSD1306_HEIGHT / 8; i++)
 8000d52:	2300      	movs	r3, #0
 8000d54:	71fb      	strb	r3, [r7, #7]
 8000d56:	e016      	b.n	8000d86 <ssd1306_UpdateScreen+0x3a>
    {
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8000d58:	79fb      	ldrb	r3, [r7, #7]
 8000d5a:	3b50      	subs	r3, #80	; 0x50
 8000d5c:	b2db      	uxtb	r3, r3
 8000d5e:	4618      	mov	r0, r3
 8000d60:	f7ff ff1c 	bl	8000b9c <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00);
 8000d64:	2000      	movs	r0, #0
 8000d66:	f7ff ff19 	bl	8000b9c <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10);
 8000d6a:	2010      	movs	r0, #16
 8000d6c:	f7ff ff16 	bl	8000b9c <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH * i], SSD1306_WIDTH);
 8000d70:	79fb      	ldrb	r3, [r7, #7]
 8000d72:	01db      	lsls	r3, r3, #7
 8000d74:	4a07      	ldr	r2, [pc, #28]	; (8000d94 <ssd1306_UpdateScreen+0x48>)
 8000d76:	4413      	add	r3, r2
 8000d78:	2180      	movs	r1, #128	; 0x80
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	f7ff ff26 	bl	8000bcc <ssd1306_WriteData>
    for (uint8_t i = 0; i < SSD1306_HEIGHT / 8; i++)
 8000d80:	79fb      	ldrb	r3, [r7, #7]
 8000d82:	3301      	adds	r3, #1
 8000d84:	71fb      	strb	r3, [r7, #7]
 8000d86:	79fb      	ldrb	r3, [r7, #7]
 8000d88:	2b07      	cmp	r3, #7
 8000d8a:	d9e5      	bls.n	8000d58 <ssd1306_UpdateScreen+0xc>
    }
}
 8000d8c:	bf00      	nop
 8000d8e:	3708      	adds	r7, #8
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd80      	pop	{r7, pc}
 8000d94:	2000008c 	.word	0x2000008c

08000d98 <ssd1306_SetContrast>:

    return;
}

void ssd1306_SetContrast(const uint8_t value)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b084      	sub	sp, #16
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	4603      	mov	r3, r0
 8000da0:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8000da2:	2381      	movs	r3, #129	; 0x81
 8000da4:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8000da6:	7bfb      	ldrb	r3, [r7, #15]
 8000da8:	4618      	mov	r0, r3
 8000daa:	f7ff fef7 	bl	8000b9c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8000dae:	79fb      	ldrb	r3, [r7, #7]
 8000db0:	4618      	mov	r0, r3
 8000db2:	f7ff fef3 	bl	8000b9c <ssd1306_WriteCommand>
}
 8000db6:	bf00      	nop
 8000db8:	3710      	adds	r7, #16
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}
	...

08000dc0 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b084      	sub	sp, #16
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on)
 8000dca:	79fb      	ldrb	r3, [r7, #7]
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d005      	beq.n	8000ddc <ssd1306_SetDisplayOn+0x1c>
    {
        value = 0xAF; // Display on
 8000dd0:	23af      	movs	r3, #175	; 0xaf
 8000dd2:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8000dd4:	4b08      	ldr	r3, [pc, #32]	; (8000df8 <ssd1306_SetDisplayOn+0x38>)
 8000dd6:	2201      	movs	r2, #1
 8000dd8:	719a      	strb	r2, [r3, #6]
 8000dda:	e004      	b.n	8000de6 <ssd1306_SetDisplayOn+0x26>
    }
    else
    {
        value = 0xAE; // Display off
 8000ddc:	23ae      	movs	r3, #174	; 0xae
 8000dde:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8000de0:	4b05      	ldr	r3, [pc, #20]	; (8000df8 <ssd1306_SetDisplayOn+0x38>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	719a      	strb	r2, [r3, #6]
    }
    ssd1306_WriteCommand(value);
 8000de6:	7bfb      	ldrb	r3, [r7, #15]
 8000de8:	4618      	mov	r0, r3
 8000dea:	f7ff fed7 	bl	8000b9c <ssd1306_WriteCommand>
}
 8000dee:	bf00      	nop
 8000df0:	3710      	adds	r7, #16
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	2000048c 	.word	0x2000048c

08000dfc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	b083      	sub	sp, #12
 8000e00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e02:	2300      	movs	r3, #0
 8000e04:	607b      	str	r3, [r7, #4]
 8000e06:	4b10      	ldr	r3, [pc, #64]	; (8000e48 <HAL_MspInit+0x4c>)
 8000e08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e0a:	4a0f      	ldr	r2, [pc, #60]	; (8000e48 <HAL_MspInit+0x4c>)
 8000e0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e10:	6453      	str	r3, [r2, #68]	; 0x44
 8000e12:	4b0d      	ldr	r3, [pc, #52]	; (8000e48 <HAL_MspInit+0x4c>)
 8000e14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e1a:	607b      	str	r3, [r7, #4]
 8000e1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e1e:	2300      	movs	r3, #0
 8000e20:	603b      	str	r3, [r7, #0]
 8000e22:	4b09      	ldr	r3, [pc, #36]	; (8000e48 <HAL_MspInit+0x4c>)
 8000e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e26:	4a08      	ldr	r2, [pc, #32]	; (8000e48 <HAL_MspInit+0x4c>)
 8000e28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e2c:	6413      	str	r3, [r2, #64]	; 0x40
 8000e2e:	4b06      	ldr	r3, [pc, #24]	; (8000e48 <HAL_MspInit+0x4c>)
 8000e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e36:	603b      	str	r3, [r7, #0]
 8000e38:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e3a:	bf00      	nop
 8000e3c:	370c      	adds	r7, #12
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e44:	4770      	bx	lr
 8000e46:	bf00      	nop
 8000e48:	40023800 	.word	0x40023800

08000e4c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b08a      	sub	sp, #40	; 0x28
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e54:	f107 0314 	add.w	r3, r7, #20
 8000e58:	2200      	movs	r2, #0
 8000e5a:	601a      	str	r2, [r3, #0]
 8000e5c:	605a      	str	r2, [r3, #4]
 8000e5e:	609a      	str	r2, [r3, #8]
 8000e60:	60da      	str	r2, [r3, #12]
 8000e62:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	4a24      	ldr	r2, [pc, #144]	; (8000efc <HAL_ADC_MspInit+0xb0>)
 8000e6a:	4293      	cmp	r3, r2
 8000e6c:	d141      	bne.n	8000ef2 <HAL_ADC_MspInit+0xa6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000e6e:	2300      	movs	r3, #0
 8000e70:	613b      	str	r3, [r7, #16]
 8000e72:	4b23      	ldr	r3, [pc, #140]	; (8000f00 <HAL_ADC_MspInit+0xb4>)
 8000e74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e76:	4a22      	ldr	r2, [pc, #136]	; (8000f00 <HAL_ADC_MspInit+0xb4>)
 8000e78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e7c:	6453      	str	r3, [r2, #68]	; 0x44
 8000e7e:	4b20      	ldr	r3, [pc, #128]	; (8000f00 <HAL_ADC_MspInit+0xb4>)
 8000e80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e86:	613b      	str	r3, [r7, #16]
 8000e88:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	60fb      	str	r3, [r7, #12]
 8000e8e:	4b1c      	ldr	r3, [pc, #112]	; (8000f00 <HAL_ADC_MspInit+0xb4>)
 8000e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e92:	4a1b      	ldr	r2, [pc, #108]	; (8000f00 <HAL_ADC_MspInit+0xb4>)
 8000e94:	f043 0304 	orr.w	r3, r3, #4
 8000e98:	6313      	str	r3, [r2, #48]	; 0x30
 8000e9a:	4b19      	ldr	r3, [pc, #100]	; (8000f00 <HAL_ADC_MspInit+0xb4>)
 8000e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e9e:	f003 0304 	and.w	r3, r3, #4
 8000ea2:	60fb      	str	r3, [r7, #12]
 8000ea4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	60bb      	str	r3, [r7, #8]
 8000eaa:	4b15      	ldr	r3, [pc, #84]	; (8000f00 <HAL_ADC_MspInit+0xb4>)
 8000eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eae:	4a14      	ldr	r2, [pc, #80]	; (8000f00 <HAL_ADC_MspInit+0xb4>)
 8000eb0:	f043 0301 	orr.w	r3, r3, #1
 8000eb4:	6313      	str	r3, [r2, #48]	; 0x30
 8000eb6:	4b12      	ldr	r3, [pc, #72]	; (8000f00 <HAL_ADC_MspInit+0xb4>)
 8000eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eba:	f003 0301 	and.w	r3, r3, #1
 8000ebe:	60bb      	str	r3, [r7, #8]
 8000ec0:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC3     ------> ADC1_IN13
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = I_SENSE_Pin;
 8000ec2:	2308      	movs	r3, #8
 8000ec4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ec6:	2303      	movs	r3, #3
 8000ec8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(I_SENSE_GPIO_Port, &GPIO_InitStruct);
 8000ece:	f107 0314 	add.w	r3, r7, #20
 8000ed2:	4619      	mov	r1, r3
 8000ed4:	480b      	ldr	r0, [pc, #44]	; (8000f04 <HAL_ADC_MspInit+0xb8>)
 8000ed6:	f000 fd59 	bl	800198c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VO_SENSE_Pin|VI_SENSE_Pin;
 8000eda:	2303      	movs	r3, #3
 8000edc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ede:	2303      	movs	r3, #3
 8000ee0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ee6:	f107 0314 	add.w	r3, r7, #20
 8000eea:	4619      	mov	r1, r3
 8000eec:	4806      	ldr	r0, [pc, #24]	; (8000f08 <HAL_ADC_MspInit+0xbc>)
 8000eee:	f000 fd4d 	bl	800198c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000ef2:	bf00      	nop
 8000ef4:	3728      	adds	r7, #40	; 0x28
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	40012000 	.word	0x40012000
 8000f00:	40023800 	.word	0x40023800
 8000f04:	40020800 	.word	0x40020800
 8000f08:	40020000 	.word	0x40020000

08000f0c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b08a      	sub	sp, #40	; 0x28
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f14:	f107 0314 	add.w	r3, r7, #20
 8000f18:	2200      	movs	r2, #0
 8000f1a:	601a      	str	r2, [r3, #0]
 8000f1c:	605a      	str	r2, [r3, #4]
 8000f1e:	609a      	str	r2, [r3, #8]
 8000f20:	60da      	str	r2, [r3, #12]
 8000f22:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	4a19      	ldr	r2, [pc, #100]	; (8000f90 <HAL_I2C_MspInit+0x84>)
 8000f2a:	4293      	cmp	r3, r2
 8000f2c:	d12b      	bne.n	8000f86 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f2e:	2300      	movs	r3, #0
 8000f30:	613b      	str	r3, [r7, #16]
 8000f32:	4b18      	ldr	r3, [pc, #96]	; (8000f94 <HAL_I2C_MspInit+0x88>)
 8000f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f36:	4a17      	ldr	r2, [pc, #92]	; (8000f94 <HAL_I2C_MspInit+0x88>)
 8000f38:	f043 0302 	orr.w	r3, r3, #2
 8000f3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f3e:	4b15      	ldr	r3, [pc, #84]	; (8000f94 <HAL_I2C_MspInit+0x88>)
 8000f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f42:	f003 0302 	and.w	r3, r3, #2
 8000f46:	613b      	str	r3, [r7, #16]
 8000f48:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000f4a:	23c0      	movs	r3, #192	; 0xc0
 8000f4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f4e:	2312      	movs	r3, #18
 8000f50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f52:	2301      	movs	r3, #1
 8000f54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f56:	2303      	movs	r3, #3
 8000f58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000f5a:	2304      	movs	r3, #4
 8000f5c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f5e:	f107 0314 	add.w	r3, r7, #20
 8000f62:	4619      	mov	r1, r3
 8000f64:	480c      	ldr	r0, [pc, #48]	; (8000f98 <HAL_I2C_MspInit+0x8c>)
 8000f66:	f000 fd11 	bl	800198c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	60fb      	str	r3, [r7, #12]
 8000f6e:	4b09      	ldr	r3, [pc, #36]	; (8000f94 <HAL_I2C_MspInit+0x88>)
 8000f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f72:	4a08      	ldr	r2, [pc, #32]	; (8000f94 <HAL_I2C_MspInit+0x88>)
 8000f74:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000f78:	6413      	str	r3, [r2, #64]	; 0x40
 8000f7a:	4b06      	ldr	r3, [pc, #24]	; (8000f94 <HAL_I2C_MspInit+0x88>)
 8000f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f7e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f82:	60fb      	str	r3, [r7, #12]
 8000f84:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000f86:	bf00      	nop
 8000f88:	3728      	adds	r7, #40	; 0x28
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	40005400 	.word	0x40005400
 8000f94:	40023800 	.word	0x40023800
 8000f98:	40020400 	.word	0x40020400

08000f9c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b08a      	sub	sp, #40	; 0x28
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fa4:	f107 0314 	add.w	r3, r7, #20
 8000fa8:	2200      	movs	r2, #0
 8000faa:	601a      	str	r2, [r3, #0]
 8000fac:	605a      	str	r2, [r3, #4]
 8000fae:	609a      	str	r2, [r3, #8]
 8000fb0:	60da      	str	r2, [r3, #12]
 8000fb2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	4a19      	ldr	r2, [pc, #100]	; (8001020 <HAL_UART_MspInit+0x84>)
 8000fba:	4293      	cmp	r3, r2
 8000fbc:	d12b      	bne.n	8001016 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	613b      	str	r3, [r7, #16]
 8000fc2:	4b18      	ldr	r3, [pc, #96]	; (8001024 <HAL_UART_MspInit+0x88>)
 8000fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fc6:	4a17      	ldr	r2, [pc, #92]	; (8001024 <HAL_UART_MspInit+0x88>)
 8000fc8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fcc:	6413      	str	r3, [r2, #64]	; 0x40
 8000fce:	4b15      	ldr	r3, [pc, #84]	; (8001024 <HAL_UART_MspInit+0x88>)
 8000fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fd6:	613b      	str	r3, [r7, #16]
 8000fd8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fda:	2300      	movs	r3, #0
 8000fdc:	60fb      	str	r3, [r7, #12]
 8000fde:	4b11      	ldr	r3, [pc, #68]	; (8001024 <HAL_UART_MspInit+0x88>)
 8000fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe2:	4a10      	ldr	r2, [pc, #64]	; (8001024 <HAL_UART_MspInit+0x88>)
 8000fe4:	f043 0301 	orr.w	r3, r3, #1
 8000fe8:	6313      	str	r3, [r2, #48]	; 0x30
 8000fea:	4b0e      	ldr	r3, [pc, #56]	; (8001024 <HAL_UART_MspInit+0x88>)
 8000fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fee:	f003 0301 	and.w	r3, r3, #1
 8000ff2:	60fb      	str	r3, [r7, #12]
 8000ff4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000ff6:	230c      	movs	r3, #12
 8000ff8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ffa:	2302      	movs	r3, #2
 8000ffc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffe:	2300      	movs	r3, #0
 8001000:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001002:	2303      	movs	r3, #3
 8001004:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001006:	2307      	movs	r3, #7
 8001008:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800100a:	f107 0314 	add.w	r3, r7, #20
 800100e:	4619      	mov	r1, r3
 8001010:	4805      	ldr	r0, [pc, #20]	; (8001028 <HAL_UART_MspInit+0x8c>)
 8001012:	f000 fcbb 	bl	800198c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001016:	bf00      	nop
 8001018:	3728      	adds	r7, #40	; 0x28
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	40004400 	.word	0x40004400
 8001024:	40023800 	.word	0x40023800
 8001028:	40020000 	.word	0x40020000

0800102c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800102c:	b480      	push	{r7}
 800102e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001030:	e7fe      	b.n	8001030 <NMI_Handler+0x4>

08001032 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001032:	b480      	push	{r7}
 8001034:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001036:	e7fe      	b.n	8001036 <HardFault_Handler+0x4>

08001038 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001038:	b480      	push	{r7}
 800103a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800103c:	e7fe      	b.n	800103c <MemManage_Handler+0x4>

0800103e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800103e:	b480      	push	{r7}
 8001040:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001042:	e7fe      	b.n	8001042 <BusFault_Handler+0x4>

08001044 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001044:	b480      	push	{r7}
 8001046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001048:	e7fe      	b.n	8001048 <UsageFault_Handler+0x4>

0800104a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800104a:	b480      	push	{r7}
 800104c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800104e:	bf00      	nop
 8001050:	46bd      	mov	sp, r7
 8001052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001056:	4770      	bx	lr

08001058 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800105c:	bf00      	nop
 800105e:	46bd      	mov	sp, r7
 8001060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001064:	4770      	bx	lr

08001066 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001066:	b480      	push	{r7}
 8001068:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800106a:	bf00      	nop
 800106c:	46bd      	mov	sp, r7
 800106e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001072:	4770      	bx	lr

08001074 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001078:	f000 f8d2 	bl	8001220 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800107c:	bf00      	nop
 800107e:	bd80      	pop	{r7, pc}

08001080 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8001084:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001088:	f000 fe36 	bl	8001cf8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800108c:	bf00      	nop
 800108e:	bd80      	pop	{r7, pc}

08001090 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b086      	sub	sp, #24
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001098:	4a14      	ldr	r2, [pc, #80]	; (80010ec <_sbrk+0x5c>)
 800109a:	4b15      	ldr	r3, [pc, #84]	; (80010f0 <_sbrk+0x60>)
 800109c:	1ad3      	subs	r3, r2, r3
 800109e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010a0:	697b      	ldr	r3, [r7, #20]
 80010a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010a4:	4b13      	ldr	r3, [pc, #76]	; (80010f4 <_sbrk+0x64>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d102      	bne.n	80010b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010ac:	4b11      	ldr	r3, [pc, #68]	; (80010f4 <_sbrk+0x64>)
 80010ae:	4a12      	ldr	r2, [pc, #72]	; (80010f8 <_sbrk+0x68>)
 80010b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010b2:	4b10      	ldr	r3, [pc, #64]	; (80010f4 <_sbrk+0x64>)
 80010b4:	681a      	ldr	r2, [r3, #0]
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	4413      	add	r3, r2
 80010ba:	693a      	ldr	r2, [r7, #16]
 80010bc:	429a      	cmp	r2, r3
 80010be:	d207      	bcs.n	80010d0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010c0:	f002 fca4 	bl	8003a0c <__errno>
 80010c4:	4602      	mov	r2, r0
 80010c6:	230c      	movs	r3, #12
 80010c8:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80010ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80010ce:	e009      	b.n	80010e4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010d0:	4b08      	ldr	r3, [pc, #32]	; (80010f4 <_sbrk+0x64>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010d6:	4b07      	ldr	r3, [pc, #28]	; (80010f4 <_sbrk+0x64>)
 80010d8:	681a      	ldr	r2, [r3, #0]
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	4413      	add	r3, r2
 80010de:	4a05      	ldr	r2, [pc, #20]	; (80010f4 <_sbrk+0x64>)
 80010e0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010e2:	68fb      	ldr	r3, [r7, #12]
}
 80010e4:	4618      	mov	r0, r3
 80010e6:	3718      	adds	r7, #24
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	20018000 	.word	0x20018000
 80010f0:	00000400 	.word	0x00000400
 80010f4:	20000494 	.word	0x20000494
 80010f8:	20000588 	.word	0x20000588

080010fc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010fc:	b480      	push	{r7}
 80010fe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001100:	4b08      	ldr	r3, [pc, #32]	; (8001124 <SystemInit+0x28>)
 8001102:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001106:	4a07      	ldr	r2, [pc, #28]	; (8001124 <SystemInit+0x28>)
 8001108:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800110c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001110:	4b04      	ldr	r3, [pc, #16]	; (8001124 <SystemInit+0x28>)
 8001112:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001116:	609a      	str	r2, [r3, #8]
#endif
}
 8001118:	bf00      	nop
 800111a:	46bd      	mov	sp, r7
 800111c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001120:	4770      	bx	lr
 8001122:	bf00      	nop
 8001124:	e000ed00 	.word	0xe000ed00

08001128 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001128:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001160 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800112c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800112e:	e003      	b.n	8001138 <LoopCopyDataInit>

08001130 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001130:	4b0c      	ldr	r3, [pc, #48]	; (8001164 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001132:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001134:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001136:	3104      	adds	r1, #4

08001138 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001138:	480b      	ldr	r0, [pc, #44]	; (8001168 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800113a:	4b0c      	ldr	r3, [pc, #48]	; (800116c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800113c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800113e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001140:	d3f6      	bcc.n	8001130 <CopyDataInit>
  ldr  r2, =_sbss
 8001142:	4a0b      	ldr	r2, [pc, #44]	; (8001170 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001144:	e002      	b.n	800114c <LoopFillZerobss>

08001146 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001146:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001148:	f842 3b04 	str.w	r3, [r2], #4

0800114c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800114c:	4b09      	ldr	r3, [pc, #36]	; (8001174 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800114e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001150:	d3f9      	bcc.n	8001146 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001152:	f7ff ffd3 	bl	80010fc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001156:	f002 fc5f 	bl	8003a18 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800115a:	f7ff faf7 	bl	800074c <main>
  bx  lr    
 800115e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001160:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 8001164:	0800456c 	.word	0x0800456c
  ldr  r0, =_sdata
 8001168:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800116c:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 8001170:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 8001174:	20000584 	.word	0x20000584

08001178 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001178:	e7fe      	b.n	8001178 <ADC_IRQHandler>
	...

0800117c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001180:	4b0e      	ldr	r3, [pc, #56]	; (80011bc <HAL_Init+0x40>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	4a0d      	ldr	r2, [pc, #52]	; (80011bc <HAL_Init+0x40>)
 8001186:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800118a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800118c:	4b0b      	ldr	r3, [pc, #44]	; (80011bc <HAL_Init+0x40>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	4a0a      	ldr	r2, [pc, #40]	; (80011bc <HAL_Init+0x40>)
 8001192:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001196:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001198:	4b08      	ldr	r3, [pc, #32]	; (80011bc <HAL_Init+0x40>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	4a07      	ldr	r2, [pc, #28]	; (80011bc <HAL_Init+0x40>)
 800119e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011a2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011a4:	2003      	movs	r0, #3
 80011a6:	f000 fbaf 	bl	8001908 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011aa:	2000      	movs	r0, #0
 80011ac:	f000 f808 	bl	80011c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011b0:	f7ff fe24 	bl	8000dfc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011b4:	2300      	movs	r3, #0
}
 80011b6:	4618      	mov	r0, r3
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	40023c00 	.word	0x40023c00

080011c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b082      	sub	sp, #8
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011c8:	4b12      	ldr	r3, [pc, #72]	; (8001214 <HAL_InitTick+0x54>)
 80011ca:	681a      	ldr	r2, [r3, #0]
 80011cc:	4b12      	ldr	r3, [pc, #72]	; (8001218 <HAL_InitTick+0x58>)
 80011ce:	781b      	ldrb	r3, [r3, #0]
 80011d0:	4619      	mov	r1, r3
 80011d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80011da:	fbb2 f3f3 	udiv	r3, r2, r3
 80011de:	4618      	mov	r0, r3
 80011e0:	f000 fbc7 	bl	8001972 <HAL_SYSTICK_Config>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d001      	beq.n	80011ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011ea:	2301      	movs	r3, #1
 80011ec:	e00e      	b.n	800120c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	2b0f      	cmp	r3, #15
 80011f2:	d80a      	bhi.n	800120a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011f4:	2200      	movs	r2, #0
 80011f6:	6879      	ldr	r1, [r7, #4]
 80011f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80011fc:	f000 fb8f 	bl	800191e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001200:	4a06      	ldr	r2, [pc, #24]	; (800121c <HAL_InitTick+0x5c>)
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001206:	2300      	movs	r3, #0
 8001208:	e000      	b.n	800120c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800120a:	2301      	movs	r3, #1
}
 800120c:	4618      	mov	r0, r3
 800120e:	3708      	adds	r7, #8
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}
 8001214:	20000000 	.word	0x20000000
 8001218:	20000008 	.word	0x20000008
 800121c:	20000004 	.word	0x20000004

08001220 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001220:	b480      	push	{r7}
 8001222:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001224:	4b06      	ldr	r3, [pc, #24]	; (8001240 <HAL_IncTick+0x20>)
 8001226:	781b      	ldrb	r3, [r3, #0]
 8001228:	461a      	mov	r2, r3
 800122a:	4b06      	ldr	r3, [pc, #24]	; (8001244 <HAL_IncTick+0x24>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	4413      	add	r3, r2
 8001230:	4a04      	ldr	r2, [pc, #16]	; (8001244 <HAL_IncTick+0x24>)
 8001232:	6013      	str	r3, [r2, #0]
}
 8001234:	bf00      	nop
 8001236:	46bd      	mov	sp, r7
 8001238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123c:	4770      	bx	lr
 800123e:	bf00      	nop
 8001240:	20000008 	.word	0x20000008
 8001244:	2000057c 	.word	0x2000057c

08001248 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0
  return uwTick;
 800124c:	4b03      	ldr	r3, [pc, #12]	; (800125c <HAL_GetTick+0x14>)
 800124e:	681b      	ldr	r3, [r3, #0]
}
 8001250:	4618      	mov	r0, r3
 8001252:	46bd      	mov	sp, r7
 8001254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001258:	4770      	bx	lr
 800125a:	bf00      	nop
 800125c:	2000057c 	.word	0x2000057c

08001260 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b084      	sub	sp, #16
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001268:	f7ff ffee 	bl	8001248 <HAL_GetTick>
 800126c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001278:	d005      	beq.n	8001286 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800127a:	4b09      	ldr	r3, [pc, #36]	; (80012a0 <HAL_Delay+0x40>)
 800127c:	781b      	ldrb	r3, [r3, #0]
 800127e:	461a      	mov	r2, r3
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	4413      	add	r3, r2
 8001284:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001286:	bf00      	nop
 8001288:	f7ff ffde 	bl	8001248 <HAL_GetTick>
 800128c:	4602      	mov	r2, r0
 800128e:	68bb      	ldr	r3, [r7, #8]
 8001290:	1ad3      	subs	r3, r2, r3
 8001292:	68fa      	ldr	r2, [r7, #12]
 8001294:	429a      	cmp	r2, r3
 8001296:	d8f7      	bhi.n	8001288 <HAL_Delay+0x28>
  {
  }
}
 8001298:	bf00      	nop
 800129a:	3710      	adds	r7, #16
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	20000008 	.word	0x20000008

080012a4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b084      	sub	sp, #16
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80012ac:	2300      	movs	r3, #0
 80012ae:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d101      	bne.n	80012ba <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80012b6:	2301      	movs	r3, #1
 80012b8:	e033      	b.n	8001322 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d109      	bne.n	80012d6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80012c2:	6878      	ldr	r0, [r7, #4]
 80012c4:	f7ff fdc2 	bl	8000e4c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	2200      	movs	r2, #0
 80012cc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	2200      	movs	r2, #0
 80012d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012da:	f003 0310 	and.w	r3, r3, #16
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d118      	bne.n	8001314 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012e6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80012ea:	f023 0302 	bic.w	r3, r3, #2
 80012ee:	f043 0202 	orr.w	r2, r3, #2
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80012f6:	6878      	ldr	r0, [r7, #4]
 80012f8:	f000 f93a 	bl	8001570 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	2200      	movs	r2, #0
 8001300:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001306:	f023 0303 	bic.w	r3, r3, #3
 800130a:	f043 0201 	orr.w	r2, r3, #1
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	641a      	str	r2, [r3, #64]	; 0x40
 8001312:	e001      	b.n	8001318 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001314:	2301      	movs	r3, #1
 8001316:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	2200      	movs	r2, #0
 800131c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001320:	7bfb      	ldrb	r3, [r7, #15]
}
 8001322:	4618      	mov	r0, r3
 8001324:	3710      	adds	r7, #16
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}
	...

0800132c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800132c:	b480      	push	{r7}
 800132e:	b085      	sub	sp, #20
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
 8001334:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001336:	2300      	movs	r3, #0
 8001338:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001340:	2b01      	cmp	r3, #1
 8001342:	d101      	bne.n	8001348 <HAL_ADC_ConfigChannel+0x1c>
 8001344:	2302      	movs	r3, #2
 8001346:	e105      	b.n	8001554 <HAL_ADC_ConfigChannel+0x228>
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	2201      	movs	r2, #1
 800134c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	2b09      	cmp	r3, #9
 8001356:	d925      	bls.n	80013a4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	68d9      	ldr	r1, [r3, #12]
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	b29b      	uxth	r3, r3
 8001364:	461a      	mov	r2, r3
 8001366:	4613      	mov	r3, r2
 8001368:	005b      	lsls	r3, r3, #1
 800136a:	4413      	add	r3, r2
 800136c:	3b1e      	subs	r3, #30
 800136e:	2207      	movs	r2, #7
 8001370:	fa02 f303 	lsl.w	r3, r2, r3
 8001374:	43da      	mvns	r2, r3
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	400a      	ands	r2, r1
 800137c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	68d9      	ldr	r1, [r3, #12]
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	689a      	ldr	r2, [r3, #8]
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	b29b      	uxth	r3, r3
 800138e:	4618      	mov	r0, r3
 8001390:	4603      	mov	r3, r0
 8001392:	005b      	lsls	r3, r3, #1
 8001394:	4403      	add	r3, r0
 8001396:	3b1e      	subs	r3, #30
 8001398:	409a      	lsls	r2, r3
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	430a      	orrs	r2, r1
 80013a0:	60da      	str	r2, [r3, #12]
 80013a2:	e022      	b.n	80013ea <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	6919      	ldr	r1, [r3, #16]
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	b29b      	uxth	r3, r3
 80013b0:	461a      	mov	r2, r3
 80013b2:	4613      	mov	r3, r2
 80013b4:	005b      	lsls	r3, r3, #1
 80013b6:	4413      	add	r3, r2
 80013b8:	2207      	movs	r2, #7
 80013ba:	fa02 f303 	lsl.w	r3, r2, r3
 80013be:	43da      	mvns	r2, r3
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	400a      	ands	r2, r1
 80013c6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	6919      	ldr	r1, [r3, #16]
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	689a      	ldr	r2, [r3, #8]
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	b29b      	uxth	r3, r3
 80013d8:	4618      	mov	r0, r3
 80013da:	4603      	mov	r3, r0
 80013dc:	005b      	lsls	r3, r3, #1
 80013de:	4403      	add	r3, r0
 80013e0:	409a      	lsls	r2, r3
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	430a      	orrs	r2, r1
 80013e8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	685b      	ldr	r3, [r3, #4]
 80013ee:	2b06      	cmp	r3, #6
 80013f0:	d824      	bhi.n	800143c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	685a      	ldr	r2, [r3, #4]
 80013fc:	4613      	mov	r3, r2
 80013fe:	009b      	lsls	r3, r3, #2
 8001400:	4413      	add	r3, r2
 8001402:	3b05      	subs	r3, #5
 8001404:	221f      	movs	r2, #31
 8001406:	fa02 f303 	lsl.w	r3, r2, r3
 800140a:	43da      	mvns	r2, r3
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	400a      	ands	r2, r1
 8001412:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	b29b      	uxth	r3, r3
 8001420:	4618      	mov	r0, r3
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	685a      	ldr	r2, [r3, #4]
 8001426:	4613      	mov	r3, r2
 8001428:	009b      	lsls	r3, r3, #2
 800142a:	4413      	add	r3, r2
 800142c:	3b05      	subs	r3, #5
 800142e:	fa00 f203 	lsl.w	r2, r0, r3
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	430a      	orrs	r2, r1
 8001438:	635a      	str	r2, [r3, #52]	; 0x34
 800143a:	e04c      	b.n	80014d6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	2b0c      	cmp	r3, #12
 8001442:	d824      	bhi.n	800148e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	685a      	ldr	r2, [r3, #4]
 800144e:	4613      	mov	r3, r2
 8001450:	009b      	lsls	r3, r3, #2
 8001452:	4413      	add	r3, r2
 8001454:	3b23      	subs	r3, #35	; 0x23
 8001456:	221f      	movs	r2, #31
 8001458:	fa02 f303 	lsl.w	r3, r2, r3
 800145c:	43da      	mvns	r2, r3
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	400a      	ands	r2, r1
 8001464:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	b29b      	uxth	r3, r3
 8001472:	4618      	mov	r0, r3
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	685a      	ldr	r2, [r3, #4]
 8001478:	4613      	mov	r3, r2
 800147a:	009b      	lsls	r3, r3, #2
 800147c:	4413      	add	r3, r2
 800147e:	3b23      	subs	r3, #35	; 0x23
 8001480:	fa00 f203 	lsl.w	r2, r0, r3
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	430a      	orrs	r2, r1
 800148a:	631a      	str	r2, [r3, #48]	; 0x30
 800148c:	e023      	b.n	80014d6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	685a      	ldr	r2, [r3, #4]
 8001498:	4613      	mov	r3, r2
 800149a:	009b      	lsls	r3, r3, #2
 800149c:	4413      	add	r3, r2
 800149e:	3b41      	subs	r3, #65	; 0x41
 80014a0:	221f      	movs	r2, #31
 80014a2:	fa02 f303 	lsl.w	r3, r2, r3
 80014a6:	43da      	mvns	r2, r3
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	400a      	ands	r2, r1
 80014ae:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	b29b      	uxth	r3, r3
 80014bc:	4618      	mov	r0, r3
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	685a      	ldr	r2, [r3, #4]
 80014c2:	4613      	mov	r3, r2
 80014c4:	009b      	lsls	r3, r3, #2
 80014c6:	4413      	add	r3, r2
 80014c8:	3b41      	subs	r3, #65	; 0x41
 80014ca:	fa00 f203 	lsl.w	r2, r0, r3
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	430a      	orrs	r2, r1
 80014d4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80014d6:	4b22      	ldr	r3, [pc, #136]	; (8001560 <HAL_ADC_ConfigChannel+0x234>)
 80014d8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	4a21      	ldr	r2, [pc, #132]	; (8001564 <HAL_ADC_ConfigChannel+0x238>)
 80014e0:	4293      	cmp	r3, r2
 80014e2:	d109      	bne.n	80014f8 <HAL_ADC_ConfigChannel+0x1cc>
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	2b12      	cmp	r3, #18
 80014ea:	d105      	bne.n	80014f8 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	4a19      	ldr	r2, [pc, #100]	; (8001564 <HAL_ADC_ConfigChannel+0x238>)
 80014fe:	4293      	cmp	r3, r2
 8001500:	d123      	bne.n	800154a <HAL_ADC_ConfigChannel+0x21e>
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	2b10      	cmp	r3, #16
 8001508:	d003      	beq.n	8001512 <HAL_ADC_ConfigChannel+0x1e6>
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	2b11      	cmp	r3, #17
 8001510:	d11b      	bne.n	800154a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	685b      	ldr	r3, [r3, #4]
 8001516:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	2b10      	cmp	r3, #16
 8001524:	d111      	bne.n	800154a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001526:	4b10      	ldr	r3, [pc, #64]	; (8001568 <HAL_ADC_ConfigChannel+0x23c>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	4a10      	ldr	r2, [pc, #64]	; (800156c <HAL_ADC_ConfigChannel+0x240>)
 800152c:	fba2 2303 	umull	r2, r3, r2, r3
 8001530:	0c9a      	lsrs	r2, r3, #18
 8001532:	4613      	mov	r3, r2
 8001534:	009b      	lsls	r3, r3, #2
 8001536:	4413      	add	r3, r2
 8001538:	005b      	lsls	r3, r3, #1
 800153a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800153c:	e002      	b.n	8001544 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800153e:	68bb      	ldr	r3, [r7, #8]
 8001540:	3b01      	subs	r3, #1
 8001542:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001544:	68bb      	ldr	r3, [r7, #8]
 8001546:	2b00      	cmp	r3, #0
 8001548:	d1f9      	bne.n	800153e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	2200      	movs	r2, #0
 800154e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001552:	2300      	movs	r3, #0
}
 8001554:	4618      	mov	r0, r3
 8001556:	3714      	adds	r7, #20
 8001558:	46bd      	mov	sp, r7
 800155a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155e:	4770      	bx	lr
 8001560:	40012300 	.word	0x40012300
 8001564:	40012000 	.word	0x40012000
 8001568:	20000000 	.word	0x20000000
 800156c:	431bde83 	.word	0x431bde83

08001570 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001570:	b480      	push	{r7}
 8001572:	b085      	sub	sp, #20
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001578:	4b79      	ldr	r3, [pc, #484]	; (8001760 <ADC_Init+0x1f0>)
 800157a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	685b      	ldr	r3, [r3, #4]
 8001580:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	685a      	ldr	r2, [r3, #4]
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	431a      	orrs	r2, r3
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	685a      	ldr	r2, [r3, #4]
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80015a4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	6859      	ldr	r1, [r3, #4]
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	691b      	ldr	r3, [r3, #16]
 80015b0:	021a      	lsls	r2, r3, #8
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	430a      	orrs	r2, r1
 80015b8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	685a      	ldr	r2, [r3, #4]
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80015c8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	6859      	ldr	r1, [r3, #4]
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	689a      	ldr	r2, [r3, #8]
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	430a      	orrs	r2, r1
 80015da:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	689a      	ldr	r2, [r3, #8]
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80015ea:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	6899      	ldr	r1, [r3, #8]
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	68da      	ldr	r2, [r3, #12]
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	430a      	orrs	r2, r1
 80015fc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001602:	4a58      	ldr	r2, [pc, #352]	; (8001764 <ADC_Init+0x1f4>)
 8001604:	4293      	cmp	r3, r2
 8001606:	d022      	beq.n	800164e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	689a      	ldr	r2, [r3, #8]
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001616:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	6899      	ldr	r1, [r3, #8]
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	430a      	orrs	r2, r1
 8001628:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	689a      	ldr	r2, [r3, #8]
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001638:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	6899      	ldr	r1, [r3, #8]
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	430a      	orrs	r2, r1
 800164a:	609a      	str	r2, [r3, #8]
 800164c:	e00f      	b.n	800166e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	689a      	ldr	r2, [r3, #8]
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800165c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	689a      	ldr	r2, [r3, #8]
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800166c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	689a      	ldr	r2, [r3, #8]
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f022 0202 	bic.w	r2, r2, #2
 800167c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	6899      	ldr	r1, [r3, #8]
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	7e1b      	ldrb	r3, [r3, #24]
 8001688:	005a      	lsls	r2, r3, #1
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	430a      	orrs	r2, r1
 8001690:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001698:	2b00      	cmp	r3, #0
 800169a:	d01b      	beq.n	80016d4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	685a      	ldr	r2, [r3, #4]
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80016aa:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	685a      	ldr	r2, [r3, #4]
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80016ba:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	6859      	ldr	r1, [r3, #4]
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016c6:	3b01      	subs	r3, #1
 80016c8:	035a      	lsls	r2, r3, #13
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	430a      	orrs	r2, r1
 80016d0:	605a      	str	r2, [r3, #4]
 80016d2:	e007      	b.n	80016e4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	685a      	ldr	r2, [r3, #4]
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80016e2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80016f2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	69db      	ldr	r3, [r3, #28]
 80016fe:	3b01      	subs	r3, #1
 8001700:	051a      	lsls	r2, r3, #20
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	430a      	orrs	r2, r1
 8001708:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	689a      	ldr	r2, [r3, #8]
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001718:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	6899      	ldr	r1, [r3, #8]
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001726:	025a      	lsls	r2, r3, #9
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	430a      	orrs	r2, r1
 800172e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	689a      	ldr	r2, [r3, #8]
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800173e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	6899      	ldr	r1, [r3, #8]
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	695b      	ldr	r3, [r3, #20]
 800174a:	029a      	lsls	r2, r3, #10
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	430a      	orrs	r2, r1
 8001752:	609a      	str	r2, [r3, #8]
}
 8001754:	bf00      	nop
 8001756:	3714      	adds	r7, #20
 8001758:	46bd      	mov	sp, r7
 800175a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175e:	4770      	bx	lr
 8001760:	40012300 	.word	0x40012300
 8001764:	0f000001 	.word	0x0f000001

08001768 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001768:	b480      	push	{r7}
 800176a:	b085      	sub	sp, #20
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	f003 0307 	and.w	r3, r3, #7
 8001776:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001778:	4b0c      	ldr	r3, [pc, #48]	; (80017ac <__NVIC_SetPriorityGrouping+0x44>)
 800177a:	68db      	ldr	r3, [r3, #12]
 800177c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800177e:	68ba      	ldr	r2, [r7, #8]
 8001780:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001784:	4013      	ands	r3, r2
 8001786:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800178c:	68bb      	ldr	r3, [r7, #8]
 800178e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001790:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001794:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001798:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800179a:	4a04      	ldr	r2, [pc, #16]	; (80017ac <__NVIC_SetPriorityGrouping+0x44>)
 800179c:	68bb      	ldr	r3, [r7, #8]
 800179e:	60d3      	str	r3, [r2, #12]
}
 80017a0:	bf00      	nop
 80017a2:	3714      	adds	r7, #20
 80017a4:	46bd      	mov	sp, r7
 80017a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017aa:	4770      	bx	lr
 80017ac:	e000ed00 	.word	0xe000ed00

080017b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017b0:	b480      	push	{r7}
 80017b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017b4:	4b04      	ldr	r3, [pc, #16]	; (80017c8 <__NVIC_GetPriorityGrouping+0x18>)
 80017b6:	68db      	ldr	r3, [r3, #12]
 80017b8:	0a1b      	lsrs	r3, r3, #8
 80017ba:	f003 0307 	and.w	r3, r3, #7
}
 80017be:	4618      	mov	r0, r3
 80017c0:	46bd      	mov	sp, r7
 80017c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c6:	4770      	bx	lr
 80017c8:	e000ed00 	.word	0xe000ed00

080017cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017cc:	b480      	push	{r7}
 80017ce:	b083      	sub	sp, #12
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	4603      	mov	r3, r0
 80017d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	db0b      	blt.n	80017f6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017de:	79fb      	ldrb	r3, [r7, #7]
 80017e0:	f003 021f 	and.w	r2, r3, #31
 80017e4:	4907      	ldr	r1, [pc, #28]	; (8001804 <__NVIC_EnableIRQ+0x38>)
 80017e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ea:	095b      	lsrs	r3, r3, #5
 80017ec:	2001      	movs	r0, #1
 80017ee:	fa00 f202 	lsl.w	r2, r0, r2
 80017f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80017f6:	bf00      	nop
 80017f8:	370c      	adds	r7, #12
 80017fa:	46bd      	mov	sp, r7
 80017fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001800:	4770      	bx	lr
 8001802:	bf00      	nop
 8001804:	e000e100 	.word	0xe000e100

08001808 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001808:	b480      	push	{r7}
 800180a:	b083      	sub	sp, #12
 800180c:	af00      	add	r7, sp, #0
 800180e:	4603      	mov	r3, r0
 8001810:	6039      	str	r1, [r7, #0]
 8001812:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001814:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001818:	2b00      	cmp	r3, #0
 800181a:	db0a      	blt.n	8001832 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	b2da      	uxtb	r2, r3
 8001820:	490c      	ldr	r1, [pc, #48]	; (8001854 <__NVIC_SetPriority+0x4c>)
 8001822:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001826:	0112      	lsls	r2, r2, #4
 8001828:	b2d2      	uxtb	r2, r2
 800182a:	440b      	add	r3, r1
 800182c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001830:	e00a      	b.n	8001848 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	b2da      	uxtb	r2, r3
 8001836:	4908      	ldr	r1, [pc, #32]	; (8001858 <__NVIC_SetPriority+0x50>)
 8001838:	79fb      	ldrb	r3, [r7, #7]
 800183a:	f003 030f 	and.w	r3, r3, #15
 800183e:	3b04      	subs	r3, #4
 8001840:	0112      	lsls	r2, r2, #4
 8001842:	b2d2      	uxtb	r2, r2
 8001844:	440b      	add	r3, r1
 8001846:	761a      	strb	r2, [r3, #24]
}
 8001848:	bf00      	nop
 800184a:	370c      	adds	r7, #12
 800184c:	46bd      	mov	sp, r7
 800184e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001852:	4770      	bx	lr
 8001854:	e000e100 	.word	0xe000e100
 8001858:	e000ed00 	.word	0xe000ed00

0800185c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800185c:	b480      	push	{r7}
 800185e:	b089      	sub	sp, #36	; 0x24
 8001860:	af00      	add	r7, sp, #0
 8001862:	60f8      	str	r0, [r7, #12]
 8001864:	60b9      	str	r1, [r7, #8]
 8001866:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	f003 0307 	and.w	r3, r3, #7
 800186e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001870:	69fb      	ldr	r3, [r7, #28]
 8001872:	f1c3 0307 	rsb	r3, r3, #7
 8001876:	2b04      	cmp	r3, #4
 8001878:	bf28      	it	cs
 800187a:	2304      	movcs	r3, #4
 800187c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800187e:	69fb      	ldr	r3, [r7, #28]
 8001880:	3304      	adds	r3, #4
 8001882:	2b06      	cmp	r3, #6
 8001884:	d902      	bls.n	800188c <NVIC_EncodePriority+0x30>
 8001886:	69fb      	ldr	r3, [r7, #28]
 8001888:	3b03      	subs	r3, #3
 800188a:	e000      	b.n	800188e <NVIC_EncodePriority+0x32>
 800188c:	2300      	movs	r3, #0
 800188e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001890:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001894:	69bb      	ldr	r3, [r7, #24]
 8001896:	fa02 f303 	lsl.w	r3, r2, r3
 800189a:	43da      	mvns	r2, r3
 800189c:	68bb      	ldr	r3, [r7, #8]
 800189e:	401a      	ands	r2, r3
 80018a0:	697b      	ldr	r3, [r7, #20]
 80018a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018a4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80018a8:	697b      	ldr	r3, [r7, #20]
 80018aa:	fa01 f303 	lsl.w	r3, r1, r3
 80018ae:	43d9      	mvns	r1, r3
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018b4:	4313      	orrs	r3, r2
         );
}
 80018b6:	4618      	mov	r0, r3
 80018b8:	3724      	adds	r7, #36	; 0x24
 80018ba:	46bd      	mov	sp, r7
 80018bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c0:	4770      	bx	lr
	...

080018c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b082      	sub	sp, #8
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	3b01      	subs	r3, #1
 80018d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018d4:	d301      	bcc.n	80018da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018d6:	2301      	movs	r3, #1
 80018d8:	e00f      	b.n	80018fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018da:	4a0a      	ldr	r2, [pc, #40]	; (8001904 <SysTick_Config+0x40>)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	3b01      	subs	r3, #1
 80018e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018e2:	210f      	movs	r1, #15
 80018e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80018e8:	f7ff ff8e 	bl	8001808 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018ec:	4b05      	ldr	r3, [pc, #20]	; (8001904 <SysTick_Config+0x40>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018f2:	4b04      	ldr	r3, [pc, #16]	; (8001904 <SysTick_Config+0x40>)
 80018f4:	2207      	movs	r2, #7
 80018f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018f8:	2300      	movs	r3, #0
}
 80018fa:	4618      	mov	r0, r3
 80018fc:	3708      	adds	r7, #8
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	e000e010 	.word	0xe000e010

08001908 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b082      	sub	sp, #8
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001910:	6878      	ldr	r0, [r7, #4]
 8001912:	f7ff ff29 	bl	8001768 <__NVIC_SetPriorityGrouping>
}
 8001916:	bf00      	nop
 8001918:	3708      	adds	r7, #8
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}

0800191e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800191e:	b580      	push	{r7, lr}
 8001920:	b086      	sub	sp, #24
 8001922:	af00      	add	r7, sp, #0
 8001924:	4603      	mov	r3, r0
 8001926:	60b9      	str	r1, [r7, #8]
 8001928:	607a      	str	r2, [r7, #4]
 800192a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800192c:	2300      	movs	r3, #0
 800192e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001930:	f7ff ff3e 	bl	80017b0 <__NVIC_GetPriorityGrouping>
 8001934:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001936:	687a      	ldr	r2, [r7, #4]
 8001938:	68b9      	ldr	r1, [r7, #8]
 800193a:	6978      	ldr	r0, [r7, #20]
 800193c:	f7ff ff8e 	bl	800185c <NVIC_EncodePriority>
 8001940:	4602      	mov	r2, r0
 8001942:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001946:	4611      	mov	r1, r2
 8001948:	4618      	mov	r0, r3
 800194a:	f7ff ff5d 	bl	8001808 <__NVIC_SetPriority>
}
 800194e:	bf00      	nop
 8001950:	3718      	adds	r7, #24
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}

08001956 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001956:	b580      	push	{r7, lr}
 8001958:	b082      	sub	sp, #8
 800195a:	af00      	add	r7, sp, #0
 800195c:	4603      	mov	r3, r0
 800195e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001960:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001964:	4618      	mov	r0, r3
 8001966:	f7ff ff31 	bl	80017cc <__NVIC_EnableIRQ>
}
 800196a:	bf00      	nop
 800196c:	3708      	adds	r7, #8
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}

08001972 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001972:	b580      	push	{r7, lr}
 8001974:	b082      	sub	sp, #8
 8001976:	af00      	add	r7, sp, #0
 8001978:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800197a:	6878      	ldr	r0, [r7, #4]
 800197c:	f7ff ffa2 	bl	80018c4 <SysTick_Config>
 8001980:	4603      	mov	r3, r0
}
 8001982:	4618      	mov	r0, r3
 8001984:	3708      	adds	r7, #8
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}
	...

0800198c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800198c:	b480      	push	{r7}
 800198e:	b089      	sub	sp, #36	; 0x24
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
 8001994:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001996:	2300      	movs	r3, #0
 8001998:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800199a:	2300      	movs	r3, #0
 800199c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800199e:	2300      	movs	r3, #0
 80019a0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019a2:	2300      	movs	r3, #0
 80019a4:	61fb      	str	r3, [r7, #28]
 80019a6:	e159      	b.n	8001c5c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80019a8:	2201      	movs	r2, #1
 80019aa:	69fb      	ldr	r3, [r7, #28]
 80019ac:	fa02 f303 	lsl.w	r3, r2, r3
 80019b0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	697a      	ldr	r2, [r7, #20]
 80019b8:	4013      	ands	r3, r2
 80019ba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80019bc:	693a      	ldr	r2, [r7, #16]
 80019be:	697b      	ldr	r3, [r7, #20]
 80019c0:	429a      	cmp	r2, r3
 80019c2:	f040 8148 	bne.w	8001c56 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	2b01      	cmp	r3, #1
 80019cc:	d00b      	beq.n	80019e6 <HAL_GPIO_Init+0x5a>
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	2b02      	cmp	r3, #2
 80019d4:	d007      	beq.n	80019e6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80019da:	2b11      	cmp	r3, #17
 80019dc:	d003      	beq.n	80019e6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	2b12      	cmp	r3, #18
 80019e4:	d130      	bne.n	8001a48 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	689b      	ldr	r3, [r3, #8]
 80019ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80019ec:	69fb      	ldr	r3, [r7, #28]
 80019ee:	005b      	lsls	r3, r3, #1
 80019f0:	2203      	movs	r2, #3
 80019f2:	fa02 f303 	lsl.w	r3, r2, r3
 80019f6:	43db      	mvns	r3, r3
 80019f8:	69ba      	ldr	r2, [r7, #24]
 80019fa:	4013      	ands	r3, r2
 80019fc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	68da      	ldr	r2, [r3, #12]
 8001a02:	69fb      	ldr	r3, [r7, #28]
 8001a04:	005b      	lsls	r3, r3, #1
 8001a06:	fa02 f303 	lsl.w	r3, r2, r3
 8001a0a:	69ba      	ldr	r2, [r7, #24]
 8001a0c:	4313      	orrs	r3, r2
 8001a0e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	69ba      	ldr	r2, [r7, #24]
 8001a14:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a1c:	2201      	movs	r2, #1
 8001a1e:	69fb      	ldr	r3, [r7, #28]
 8001a20:	fa02 f303 	lsl.w	r3, r2, r3
 8001a24:	43db      	mvns	r3, r3
 8001a26:	69ba      	ldr	r2, [r7, #24]
 8001a28:	4013      	ands	r3, r2
 8001a2a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	091b      	lsrs	r3, r3, #4
 8001a32:	f003 0201 	and.w	r2, r3, #1
 8001a36:	69fb      	ldr	r3, [r7, #28]
 8001a38:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3c:	69ba      	ldr	r2, [r7, #24]
 8001a3e:	4313      	orrs	r3, r2
 8001a40:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	69ba      	ldr	r2, [r7, #24]
 8001a46:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	68db      	ldr	r3, [r3, #12]
 8001a4c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001a4e:	69fb      	ldr	r3, [r7, #28]
 8001a50:	005b      	lsls	r3, r3, #1
 8001a52:	2203      	movs	r2, #3
 8001a54:	fa02 f303 	lsl.w	r3, r2, r3
 8001a58:	43db      	mvns	r3, r3
 8001a5a:	69ba      	ldr	r2, [r7, #24]
 8001a5c:	4013      	ands	r3, r2
 8001a5e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	689a      	ldr	r2, [r3, #8]
 8001a64:	69fb      	ldr	r3, [r7, #28]
 8001a66:	005b      	lsls	r3, r3, #1
 8001a68:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6c:	69ba      	ldr	r2, [r7, #24]
 8001a6e:	4313      	orrs	r3, r2
 8001a70:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	69ba      	ldr	r2, [r7, #24]
 8001a76:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	2b02      	cmp	r3, #2
 8001a7e:	d003      	beq.n	8001a88 <HAL_GPIO_Init+0xfc>
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	2b12      	cmp	r3, #18
 8001a86:	d123      	bne.n	8001ad0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a88:	69fb      	ldr	r3, [r7, #28]
 8001a8a:	08da      	lsrs	r2, r3, #3
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	3208      	adds	r2, #8
 8001a90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a94:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001a96:	69fb      	ldr	r3, [r7, #28]
 8001a98:	f003 0307 	and.w	r3, r3, #7
 8001a9c:	009b      	lsls	r3, r3, #2
 8001a9e:	220f      	movs	r2, #15
 8001aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa4:	43db      	mvns	r3, r3
 8001aa6:	69ba      	ldr	r2, [r7, #24]
 8001aa8:	4013      	ands	r3, r2
 8001aaa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	691a      	ldr	r2, [r3, #16]
 8001ab0:	69fb      	ldr	r3, [r7, #28]
 8001ab2:	f003 0307 	and.w	r3, r3, #7
 8001ab6:	009b      	lsls	r3, r3, #2
 8001ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8001abc:	69ba      	ldr	r2, [r7, #24]
 8001abe:	4313      	orrs	r3, r2
 8001ac0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001ac2:	69fb      	ldr	r3, [r7, #28]
 8001ac4:	08da      	lsrs	r2, r3, #3
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	3208      	adds	r2, #8
 8001aca:	69b9      	ldr	r1, [r7, #24]
 8001acc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001ad6:	69fb      	ldr	r3, [r7, #28]
 8001ad8:	005b      	lsls	r3, r3, #1
 8001ada:	2203      	movs	r2, #3
 8001adc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae0:	43db      	mvns	r3, r3
 8001ae2:	69ba      	ldr	r2, [r7, #24]
 8001ae4:	4013      	ands	r3, r2
 8001ae6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	f003 0203 	and.w	r2, r3, #3
 8001af0:	69fb      	ldr	r3, [r7, #28]
 8001af2:	005b      	lsls	r3, r3, #1
 8001af4:	fa02 f303 	lsl.w	r3, r2, r3
 8001af8:	69ba      	ldr	r2, [r7, #24]
 8001afa:	4313      	orrs	r3, r2
 8001afc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	69ba      	ldr	r2, [r7, #24]
 8001b02:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	f000 80a2 	beq.w	8001c56 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b12:	2300      	movs	r3, #0
 8001b14:	60fb      	str	r3, [r7, #12]
 8001b16:	4b56      	ldr	r3, [pc, #344]	; (8001c70 <HAL_GPIO_Init+0x2e4>)
 8001b18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b1a:	4a55      	ldr	r2, [pc, #340]	; (8001c70 <HAL_GPIO_Init+0x2e4>)
 8001b1c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b20:	6453      	str	r3, [r2, #68]	; 0x44
 8001b22:	4b53      	ldr	r3, [pc, #332]	; (8001c70 <HAL_GPIO_Init+0x2e4>)
 8001b24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b2a:	60fb      	str	r3, [r7, #12]
 8001b2c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b2e:	4a51      	ldr	r2, [pc, #324]	; (8001c74 <HAL_GPIO_Init+0x2e8>)
 8001b30:	69fb      	ldr	r3, [r7, #28]
 8001b32:	089b      	lsrs	r3, r3, #2
 8001b34:	3302      	adds	r3, #2
 8001b36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001b3c:	69fb      	ldr	r3, [r7, #28]
 8001b3e:	f003 0303 	and.w	r3, r3, #3
 8001b42:	009b      	lsls	r3, r3, #2
 8001b44:	220f      	movs	r2, #15
 8001b46:	fa02 f303 	lsl.w	r3, r2, r3
 8001b4a:	43db      	mvns	r3, r3
 8001b4c:	69ba      	ldr	r2, [r7, #24]
 8001b4e:	4013      	ands	r3, r2
 8001b50:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	4a48      	ldr	r2, [pc, #288]	; (8001c78 <HAL_GPIO_Init+0x2ec>)
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d019      	beq.n	8001b8e <HAL_GPIO_Init+0x202>
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	4a47      	ldr	r2, [pc, #284]	; (8001c7c <HAL_GPIO_Init+0x2f0>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d013      	beq.n	8001b8a <HAL_GPIO_Init+0x1fe>
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	4a46      	ldr	r2, [pc, #280]	; (8001c80 <HAL_GPIO_Init+0x2f4>)
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d00d      	beq.n	8001b86 <HAL_GPIO_Init+0x1fa>
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	4a45      	ldr	r2, [pc, #276]	; (8001c84 <HAL_GPIO_Init+0x2f8>)
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d007      	beq.n	8001b82 <HAL_GPIO_Init+0x1f6>
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	4a44      	ldr	r2, [pc, #272]	; (8001c88 <HAL_GPIO_Init+0x2fc>)
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d101      	bne.n	8001b7e <HAL_GPIO_Init+0x1f2>
 8001b7a:	2304      	movs	r3, #4
 8001b7c:	e008      	b.n	8001b90 <HAL_GPIO_Init+0x204>
 8001b7e:	2307      	movs	r3, #7
 8001b80:	e006      	b.n	8001b90 <HAL_GPIO_Init+0x204>
 8001b82:	2303      	movs	r3, #3
 8001b84:	e004      	b.n	8001b90 <HAL_GPIO_Init+0x204>
 8001b86:	2302      	movs	r3, #2
 8001b88:	e002      	b.n	8001b90 <HAL_GPIO_Init+0x204>
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	e000      	b.n	8001b90 <HAL_GPIO_Init+0x204>
 8001b8e:	2300      	movs	r3, #0
 8001b90:	69fa      	ldr	r2, [r7, #28]
 8001b92:	f002 0203 	and.w	r2, r2, #3
 8001b96:	0092      	lsls	r2, r2, #2
 8001b98:	4093      	lsls	r3, r2
 8001b9a:	69ba      	ldr	r2, [r7, #24]
 8001b9c:	4313      	orrs	r3, r2
 8001b9e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ba0:	4934      	ldr	r1, [pc, #208]	; (8001c74 <HAL_GPIO_Init+0x2e8>)
 8001ba2:	69fb      	ldr	r3, [r7, #28]
 8001ba4:	089b      	lsrs	r3, r3, #2
 8001ba6:	3302      	adds	r3, #2
 8001ba8:	69ba      	ldr	r2, [r7, #24]
 8001baa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001bae:	4b37      	ldr	r3, [pc, #220]	; (8001c8c <HAL_GPIO_Init+0x300>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bb4:	693b      	ldr	r3, [r7, #16]
 8001bb6:	43db      	mvns	r3, r3
 8001bb8:	69ba      	ldr	r2, [r7, #24]
 8001bba:	4013      	ands	r3, r2
 8001bbc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d003      	beq.n	8001bd2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001bca:	69ba      	ldr	r2, [r7, #24]
 8001bcc:	693b      	ldr	r3, [r7, #16]
 8001bce:	4313      	orrs	r3, r2
 8001bd0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001bd2:	4a2e      	ldr	r2, [pc, #184]	; (8001c8c <HAL_GPIO_Init+0x300>)
 8001bd4:	69bb      	ldr	r3, [r7, #24]
 8001bd6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001bd8:	4b2c      	ldr	r3, [pc, #176]	; (8001c8c <HAL_GPIO_Init+0x300>)
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bde:	693b      	ldr	r3, [r7, #16]
 8001be0:	43db      	mvns	r3, r3
 8001be2:	69ba      	ldr	r2, [r7, #24]
 8001be4:	4013      	ands	r3, r2
 8001be6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d003      	beq.n	8001bfc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001bf4:	69ba      	ldr	r2, [r7, #24]
 8001bf6:	693b      	ldr	r3, [r7, #16]
 8001bf8:	4313      	orrs	r3, r2
 8001bfa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001bfc:	4a23      	ldr	r2, [pc, #140]	; (8001c8c <HAL_GPIO_Init+0x300>)
 8001bfe:	69bb      	ldr	r3, [r7, #24]
 8001c00:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c02:	4b22      	ldr	r3, [pc, #136]	; (8001c8c <HAL_GPIO_Init+0x300>)
 8001c04:	689b      	ldr	r3, [r3, #8]
 8001c06:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c08:	693b      	ldr	r3, [r7, #16]
 8001c0a:	43db      	mvns	r3, r3
 8001c0c:	69ba      	ldr	r2, [r7, #24]
 8001c0e:	4013      	ands	r3, r2
 8001c10:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d003      	beq.n	8001c26 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001c1e:	69ba      	ldr	r2, [r7, #24]
 8001c20:	693b      	ldr	r3, [r7, #16]
 8001c22:	4313      	orrs	r3, r2
 8001c24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c26:	4a19      	ldr	r2, [pc, #100]	; (8001c8c <HAL_GPIO_Init+0x300>)
 8001c28:	69bb      	ldr	r3, [r7, #24]
 8001c2a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c2c:	4b17      	ldr	r3, [pc, #92]	; (8001c8c <HAL_GPIO_Init+0x300>)
 8001c2e:	68db      	ldr	r3, [r3, #12]
 8001c30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c32:	693b      	ldr	r3, [r7, #16]
 8001c34:	43db      	mvns	r3, r3
 8001c36:	69ba      	ldr	r2, [r7, #24]
 8001c38:	4013      	ands	r3, r2
 8001c3a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d003      	beq.n	8001c50 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001c48:	69ba      	ldr	r2, [r7, #24]
 8001c4a:	693b      	ldr	r3, [r7, #16]
 8001c4c:	4313      	orrs	r3, r2
 8001c4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c50:	4a0e      	ldr	r2, [pc, #56]	; (8001c8c <HAL_GPIO_Init+0x300>)
 8001c52:	69bb      	ldr	r3, [r7, #24]
 8001c54:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c56:	69fb      	ldr	r3, [r7, #28]
 8001c58:	3301      	adds	r3, #1
 8001c5a:	61fb      	str	r3, [r7, #28]
 8001c5c:	69fb      	ldr	r3, [r7, #28]
 8001c5e:	2b0f      	cmp	r3, #15
 8001c60:	f67f aea2 	bls.w	80019a8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001c64:	bf00      	nop
 8001c66:	3724      	adds	r7, #36	; 0x24
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6e:	4770      	bx	lr
 8001c70:	40023800 	.word	0x40023800
 8001c74:	40013800 	.word	0x40013800
 8001c78:	40020000 	.word	0x40020000
 8001c7c:	40020400 	.word	0x40020400
 8001c80:	40020800 	.word	0x40020800
 8001c84:	40020c00 	.word	0x40020c00
 8001c88:	40021000 	.word	0x40021000
 8001c8c:	40013c00 	.word	0x40013c00

08001c90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c90:	b480      	push	{r7}
 8001c92:	b083      	sub	sp, #12
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
 8001c98:	460b      	mov	r3, r1
 8001c9a:	807b      	strh	r3, [r7, #2]
 8001c9c:	4613      	mov	r3, r2
 8001c9e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ca0:	787b      	ldrb	r3, [r7, #1]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d003      	beq.n	8001cae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ca6:	887a      	ldrh	r2, [r7, #2]
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001cac:	e003      	b.n	8001cb6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001cae:	887b      	ldrh	r3, [r7, #2]
 8001cb0:	041a      	lsls	r2, r3, #16
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	619a      	str	r2, [r3, #24]
}
 8001cb6:	bf00      	nop
 8001cb8:	370c      	adds	r7, #12
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc0:	4770      	bx	lr

08001cc2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001cc2:	b480      	push	{r7}
 8001cc4:	b083      	sub	sp, #12
 8001cc6:	af00      	add	r7, sp, #0
 8001cc8:	6078      	str	r0, [r7, #4]
 8001cca:	460b      	mov	r3, r1
 8001ccc:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	695a      	ldr	r2, [r3, #20]
 8001cd2:	887b      	ldrh	r3, [r7, #2]
 8001cd4:	401a      	ands	r2, r3
 8001cd6:	887b      	ldrh	r3, [r7, #2]
 8001cd8:	429a      	cmp	r2, r3
 8001cda:	d104      	bne.n	8001ce6 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001cdc:	887b      	ldrh	r3, [r7, #2]
 8001cde:	041a      	lsls	r2, r3, #16
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8001ce4:	e002      	b.n	8001cec <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8001ce6:	887a      	ldrh	r2, [r7, #2]
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	619a      	str	r2, [r3, #24]
}
 8001cec:	bf00      	nop
 8001cee:	370c      	adds	r7, #12
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf6:	4770      	bx	lr

08001cf8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b082      	sub	sp, #8
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	4603      	mov	r3, r0
 8001d00:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001d02:	4b08      	ldr	r3, [pc, #32]	; (8001d24 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001d04:	695a      	ldr	r2, [r3, #20]
 8001d06:	88fb      	ldrh	r3, [r7, #6]
 8001d08:	4013      	ands	r3, r2
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d006      	beq.n	8001d1c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001d0e:	4a05      	ldr	r2, [pc, #20]	; (8001d24 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001d10:	88fb      	ldrh	r3, [r7, #6]
 8001d12:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001d14:	88fb      	ldrh	r3, [r7, #6]
 8001d16:	4618      	mov	r0, r3
 8001d18:	f000 f806 	bl	8001d28 <HAL_GPIO_EXTI_Callback>
  }
}
 8001d1c:	bf00      	nop
 8001d1e:	3708      	adds	r7, #8
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bd80      	pop	{r7, pc}
 8001d24:	40013c00 	.word	0x40013c00

08001d28 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	b083      	sub	sp, #12
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	4603      	mov	r3, r0
 8001d30:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001d32:	bf00      	nop
 8001d34:	370c      	adds	r7, #12
 8001d36:	46bd      	mov	sp, r7
 8001d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3c:	4770      	bx	lr
	...

08001d40 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b084      	sub	sp, #16
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d101      	bne.n	8001d52 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001d4e:	2301      	movs	r3, #1
 8001d50:	e11f      	b.n	8001f92 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d58:	b2db      	uxtb	r3, r3
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d106      	bne.n	8001d6c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	2200      	movs	r2, #0
 8001d62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001d66:	6878      	ldr	r0, [r7, #4]
 8001d68:	f7ff f8d0 	bl	8000f0c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2224      	movs	r2, #36	; 0x24
 8001d70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	681a      	ldr	r2, [r3, #0]
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f022 0201 	bic.w	r2, r2, #1
 8001d82:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	681a      	ldr	r2, [r3, #0]
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001d92:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	681a      	ldr	r2, [r3, #0]
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001da2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001da4:	f001 f95e 	bl	8003064 <HAL_RCC_GetPCLK1Freq>
 8001da8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	685b      	ldr	r3, [r3, #4]
 8001dae:	4a7b      	ldr	r2, [pc, #492]	; (8001f9c <HAL_I2C_Init+0x25c>)
 8001db0:	4293      	cmp	r3, r2
 8001db2:	d807      	bhi.n	8001dc4 <HAL_I2C_Init+0x84>
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	4a7a      	ldr	r2, [pc, #488]	; (8001fa0 <HAL_I2C_Init+0x260>)
 8001db8:	4293      	cmp	r3, r2
 8001dba:	bf94      	ite	ls
 8001dbc:	2301      	movls	r3, #1
 8001dbe:	2300      	movhi	r3, #0
 8001dc0:	b2db      	uxtb	r3, r3
 8001dc2:	e006      	b.n	8001dd2 <HAL_I2C_Init+0x92>
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	4a77      	ldr	r2, [pc, #476]	; (8001fa4 <HAL_I2C_Init+0x264>)
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	bf94      	ite	ls
 8001dcc:	2301      	movls	r3, #1
 8001dce:	2300      	movhi	r3, #0
 8001dd0:	b2db      	uxtb	r3, r3
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d001      	beq.n	8001dda <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	e0db      	b.n	8001f92 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	4a72      	ldr	r2, [pc, #456]	; (8001fa8 <HAL_I2C_Init+0x268>)
 8001dde:	fba2 2303 	umull	r2, r3, r2, r3
 8001de2:	0c9b      	lsrs	r3, r3, #18
 8001de4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	68ba      	ldr	r2, [r7, #8]
 8001df6:	430a      	orrs	r2, r1
 8001df8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	6a1b      	ldr	r3, [r3, #32]
 8001e00:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	4a64      	ldr	r2, [pc, #400]	; (8001f9c <HAL_I2C_Init+0x25c>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d802      	bhi.n	8001e14 <HAL_I2C_Init+0xd4>
 8001e0e:	68bb      	ldr	r3, [r7, #8]
 8001e10:	3301      	adds	r3, #1
 8001e12:	e009      	b.n	8001e28 <HAL_I2C_Init+0xe8>
 8001e14:	68bb      	ldr	r3, [r7, #8]
 8001e16:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001e1a:	fb02 f303 	mul.w	r3, r2, r3
 8001e1e:	4a63      	ldr	r2, [pc, #396]	; (8001fac <HAL_I2C_Init+0x26c>)
 8001e20:	fba2 2303 	umull	r2, r3, r2, r3
 8001e24:	099b      	lsrs	r3, r3, #6
 8001e26:	3301      	adds	r3, #1
 8001e28:	687a      	ldr	r2, [r7, #4]
 8001e2a:	6812      	ldr	r2, [r2, #0]
 8001e2c:	430b      	orrs	r3, r1
 8001e2e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	69db      	ldr	r3, [r3, #28]
 8001e36:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001e3a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	4956      	ldr	r1, [pc, #344]	; (8001f9c <HAL_I2C_Init+0x25c>)
 8001e44:	428b      	cmp	r3, r1
 8001e46:	d80d      	bhi.n	8001e64 <HAL_I2C_Init+0x124>
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	1e59      	subs	r1, r3, #1
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	005b      	lsls	r3, r3, #1
 8001e52:	fbb1 f3f3 	udiv	r3, r1, r3
 8001e56:	3301      	adds	r3, #1
 8001e58:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e5c:	2b04      	cmp	r3, #4
 8001e5e:	bf38      	it	cc
 8001e60:	2304      	movcc	r3, #4
 8001e62:	e04f      	b.n	8001f04 <HAL_I2C_Init+0x1c4>
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	689b      	ldr	r3, [r3, #8]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d111      	bne.n	8001e90 <HAL_I2C_Init+0x150>
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	1e58      	subs	r0, r3, #1
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6859      	ldr	r1, [r3, #4]
 8001e74:	460b      	mov	r3, r1
 8001e76:	005b      	lsls	r3, r3, #1
 8001e78:	440b      	add	r3, r1
 8001e7a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e7e:	3301      	adds	r3, #1
 8001e80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	bf0c      	ite	eq
 8001e88:	2301      	moveq	r3, #1
 8001e8a:	2300      	movne	r3, #0
 8001e8c:	b2db      	uxtb	r3, r3
 8001e8e:	e012      	b.n	8001eb6 <HAL_I2C_Init+0x176>
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	1e58      	subs	r0, r3, #1
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6859      	ldr	r1, [r3, #4]
 8001e98:	460b      	mov	r3, r1
 8001e9a:	009b      	lsls	r3, r3, #2
 8001e9c:	440b      	add	r3, r1
 8001e9e:	0099      	lsls	r1, r3, #2
 8001ea0:	440b      	add	r3, r1
 8001ea2:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ea6:	3301      	adds	r3, #1
 8001ea8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	bf0c      	ite	eq
 8001eb0:	2301      	moveq	r3, #1
 8001eb2:	2300      	movne	r3, #0
 8001eb4:	b2db      	uxtb	r3, r3
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d001      	beq.n	8001ebe <HAL_I2C_Init+0x17e>
 8001eba:	2301      	movs	r3, #1
 8001ebc:	e022      	b.n	8001f04 <HAL_I2C_Init+0x1c4>
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	689b      	ldr	r3, [r3, #8]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d10e      	bne.n	8001ee4 <HAL_I2C_Init+0x1a4>
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	1e58      	subs	r0, r3, #1
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6859      	ldr	r1, [r3, #4]
 8001ece:	460b      	mov	r3, r1
 8001ed0:	005b      	lsls	r3, r3, #1
 8001ed2:	440b      	add	r3, r1
 8001ed4:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ed8:	3301      	adds	r3, #1
 8001eda:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ede:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ee2:	e00f      	b.n	8001f04 <HAL_I2C_Init+0x1c4>
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	1e58      	subs	r0, r3, #1
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6859      	ldr	r1, [r3, #4]
 8001eec:	460b      	mov	r3, r1
 8001eee:	009b      	lsls	r3, r3, #2
 8001ef0:	440b      	add	r3, r1
 8001ef2:	0099      	lsls	r1, r3, #2
 8001ef4:	440b      	add	r3, r1
 8001ef6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001efa:	3301      	adds	r3, #1
 8001efc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f00:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001f04:	6879      	ldr	r1, [r7, #4]
 8001f06:	6809      	ldr	r1, [r1, #0]
 8001f08:	4313      	orrs	r3, r2
 8001f0a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	69da      	ldr	r2, [r3, #28]
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6a1b      	ldr	r3, [r3, #32]
 8001f1e:	431a      	orrs	r2, r3
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	430a      	orrs	r2, r1
 8001f26:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	689b      	ldr	r3, [r3, #8]
 8001f2e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001f32:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001f36:	687a      	ldr	r2, [r7, #4]
 8001f38:	6911      	ldr	r1, [r2, #16]
 8001f3a:	687a      	ldr	r2, [r7, #4]
 8001f3c:	68d2      	ldr	r2, [r2, #12]
 8001f3e:	4311      	orrs	r1, r2
 8001f40:	687a      	ldr	r2, [r7, #4]
 8001f42:	6812      	ldr	r2, [r2, #0]
 8001f44:	430b      	orrs	r3, r1
 8001f46:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	68db      	ldr	r3, [r3, #12]
 8001f4e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	695a      	ldr	r2, [r3, #20]
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	699b      	ldr	r3, [r3, #24]
 8001f5a:	431a      	orrs	r2, r3
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	430a      	orrs	r2, r1
 8001f62:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	681a      	ldr	r2, [r3, #0]
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f042 0201 	orr.w	r2, r2, #1
 8001f72:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2200      	movs	r2, #0
 8001f78:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2220      	movs	r2, #32
 8001f7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2200      	movs	r2, #0
 8001f86:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001f90:	2300      	movs	r3, #0
}
 8001f92:	4618      	mov	r0, r3
 8001f94:	3710      	adds	r7, #16
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}
 8001f9a:	bf00      	nop
 8001f9c:	000186a0 	.word	0x000186a0
 8001fa0:	001e847f 	.word	0x001e847f
 8001fa4:	003d08ff 	.word	0x003d08ff
 8001fa8:	431bde83 	.word	0x431bde83
 8001fac:	10624dd3 	.word	0x10624dd3

08001fb0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b088      	sub	sp, #32
 8001fb4:	af02      	add	r7, sp, #8
 8001fb6:	60f8      	str	r0, [r7, #12]
 8001fb8:	4608      	mov	r0, r1
 8001fba:	4611      	mov	r1, r2
 8001fbc:	461a      	mov	r2, r3
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	817b      	strh	r3, [r7, #10]
 8001fc2:	460b      	mov	r3, r1
 8001fc4:	813b      	strh	r3, [r7, #8]
 8001fc6:	4613      	mov	r3, r2
 8001fc8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001fca:	f7ff f93d 	bl	8001248 <HAL_GetTick>
 8001fce:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fd6:	b2db      	uxtb	r3, r3
 8001fd8:	2b20      	cmp	r3, #32
 8001fda:	f040 80d9 	bne.w	8002190 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001fde:	697b      	ldr	r3, [r7, #20]
 8001fe0:	9300      	str	r3, [sp, #0]
 8001fe2:	2319      	movs	r3, #25
 8001fe4:	2201      	movs	r2, #1
 8001fe6:	496d      	ldr	r1, [pc, #436]	; (800219c <HAL_I2C_Mem_Write+0x1ec>)
 8001fe8:	68f8      	ldr	r0, [r7, #12]
 8001fea:	f000 fa9f 	bl	800252c <I2C_WaitOnFlagUntilTimeout>
 8001fee:	4603      	mov	r3, r0
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d001      	beq.n	8001ff8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001ff4:	2302      	movs	r3, #2
 8001ff6:	e0cc      	b.n	8002192 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ffe:	2b01      	cmp	r3, #1
 8002000:	d101      	bne.n	8002006 <HAL_I2C_Mem_Write+0x56>
 8002002:	2302      	movs	r3, #2
 8002004:	e0c5      	b.n	8002192 <HAL_I2C_Mem_Write+0x1e2>
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	2201      	movs	r2, #1
 800200a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f003 0301 	and.w	r3, r3, #1
 8002018:	2b01      	cmp	r3, #1
 800201a:	d007      	beq.n	800202c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	681a      	ldr	r2, [r3, #0]
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f042 0201 	orr.w	r2, r2, #1
 800202a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	681a      	ldr	r2, [r3, #0]
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800203a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	2221      	movs	r2, #33	; 0x21
 8002040:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	2240      	movs	r2, #64	; 0x40
 8002048:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	2200      	movs	r2, #0
 8002050:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	6a3a      	ldr	r2, [r7, #32]
 8002056:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800205c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002062:	b29a      	uxth	r2, r3
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	4a4d      	ldr	r2, [pc, #308]	; (80021a0 <HAL_I2C_Mem_Write+0x1f0>)
 800206c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800206e:	88f8      	ldrh	r0, [r7, #6]
 8002070:	893a      	ldrh	r2, [r7, #8]
 8002072:	8979      	ldrh	r1, [r7, #10]
 8002074:	697b      	ldr	r3, [r7, #20]
 8002076:	9301      	str	r3, [sp, #4]
 8002078:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800207a:	9300      	str	r3, [sp, #0]
 800207c:	4603      	mov	r3, r0
 800207e:	68f8      	ldr	r0, [r7, #12]
 8002080:	f000 f9be 	bl	8002400 <I2C_RequestMemoryWrite>
 8002084:	4603      	mov	r3, r0
 8002086:	2b00      	cmp	r3, #0
 8002088:	d052      	beq.n	8002130 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800208a:	2301      	movs	r3, #1
 800208c:	e081      	b.n	8002192 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800208e:	697a      	ldr	r2, [r7, #20]
 8002090:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002092:	68f8      	ldr	r0, [r7, #12]
 8002094:	f000 fb20 	bl	80026d8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002098:	4603      	mov	r3, r0
 800209a:	2b00      	cmp	r3, #0
 800209c:	d00d      	beq.n	80020ba <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a2:	2b04      	cmp	r3, #4
 80020a4:	d107      	bne.n	80020b6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	681a      	ldr	r2, [r3, #0]
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80020b4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80020b6:	2301      	movs	r3, #1
 80020b8:	e06b      	b.n	8002192 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020be:	781a      	ldrb	r2, [r3, #0]
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ca:	1c5a      	adds	r2, r3, #1
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020d4:	3b01      	subs	r3, #1
 80020d6:	b29a      	uxth	r2, r3
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020e0:	b29b      	uxth	r3, r3
 80020e2:	3b01      	subs	r3, #1
 80020e4:	b29a      	uxth	r2, r3
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	695b      	ldr	r3, [r3, #20]
 80020f0:	f003 0304 	and.w	r3, r3, #4
 80020f4:	2b04      	cmp	r3, #4
 80020f6:	d11b      	bne.n	8002130 <HAL_I2C_Mem_Write+0x180>
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d017      	beq.n	8002130 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002104:	781a      	ldrb	r2, [r3, #0]
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002110:	1c5a      	adds	r2, r3, #1
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800211a:	3b01      	subs	r3, #1
 800211c:	b29a      	uxth	r2, r3
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002126:	b29b      	uxth	r3, r3
 8002128:	3b01      	subs	r3, #1
 800212a:	b29a      	uxth	r2, r3
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002134:	2b00      	cmp	r3, #0
 8002136:	d1aa      	bne.n	800208e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002138:	697a      	ldr	r2, [r7, #20]
 800213a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800213c:	68f8      	ldr	r0, [r7, #12]
 800213e:	f000 fb0c 	bl	800275a <I2C_WaitOnBTFFlagUntilTimeout>
 8002142:	4603      	mov	r3, r0
 8002144:	2b00      	cmp	r3, #0
 8002146:	d00d      	beq.n	8002164 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800214c:	2b04      	cmp	r3, #4
 800214e:	d107      	bne.n	8002160 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	681a      	ldr	r2, [r3, #0]
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800215e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002160:	2301      	movs	r3, #1
 8002162:	e016      	b.n	8002192 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	681a      	ldr	r2, [r3, #0]
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002172:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	2220      	movs	r2, #32
 8002178:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	2200      	movs	r2, #0
 8002180:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	2200      	movs	r2, #0
 8002188:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800218c:	2300      	movs	r3, #0
 800218e:	e000      	b.n	8002192 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002190:	2302      	movs	r3, #2
  }
}
 8002192:	4618      	mov	r0, r3
 8002194:	3718      	adds	r7, #24
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}
 800219a:	bf00      	nop
 800219c:	00100002 	.word	0x00100002
 80021a0:	ffff0000 	.word	0xffff0000

080021a4 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b08a      	sub	sp, #40	; 0x28
 80021a8:	af02      	add	r7, sp, #8
 80021aa:	60f8      	str	r0, [r7, #12]
 80021ac:	607a      	str	r2, [r7, #4]
 80021ae:	603b      	str	r3, [r7, #0]
 80021b0:	460b      	mov	r3, r1
 80021b2:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80021b4:	f7ff f848 	bl	8001248 <HAL_GetTick>
 80021b8:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 80021ba:	2301      	movs	r3, #1
 80021bc:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021c4:	b2db      	uxtb	r3, r3
 80021c6:	2b20      	cmp	r3, #32
 80021c8:	f040 8111 	bne.w	80023ee <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80021cc:	69fb      	ldr	r3, [r7, #28]
 80021ce:	9300      	str	r3, [sp, #0]
 80021d0:	2319      	movs	r3, #25
 80021d2:	2201      	movs	r2, #1
 80021d4:	4988      	ldr	r1, [pc, #544]	; (80023f8 <HAL_I2C_IsDeviceReady+0x254>)
 80021d6:	68f8      	ldr	r0, [r7, #12]
 80021d8:	f000 f9a8 	bl	800252c <I2C_WaitOnFlagUntilTimeout>
 80021dc:	4603      	mov	r3, r0
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d001      	beq.n	80021e6 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80021e2:	2302      	movs	r3, #2
 80021e4:	e104      	b.n	80023f0 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80021ec:	2b01      	cmp	r3, #1
 80021ee:	d101      	bne.n	80021f4 <HAL_I2C_IsDeviceReady+0x50>
 80021f0:	2302      	movs	r3, #2
 80021f2:	e0fd      	b.n	80023f0 <HAL_I2C_IsDeviceReady+0x24c>
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	2201      	movs	r2, #1
 80021f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f003 0301 	and.w	r3, r3, #1
 8002206:	2b01      	cmp	r3, #1
 8002208:	d007      	beq.n	800221a <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	681a      	ldr	r2, [r3, #0]
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f042 0201 	orr.w	r2, r2, #1
 8002218:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	681a      	ldr	r2, [r3, #0]
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002228:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	2224      	movs	r2, #36	; 0x24
 800222e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	2200      	movs	r2, #0
 8002236:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	4a70      	ldr	r2, [pc, #448]	; (80023fc <HAL_I2C_IsDeviceReady+0x258>)
 800223c:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	681a      	ldr	r2, [r3, #0]
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800224c:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800224e:	69fb      	ldr	r3, [r7, #28]
 8002250:	9300      	str	r3, [sp, #0]
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	2200      	movs	r2, #0
 8002256:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800225a:	68f8      	ldr	r0, [r7, #12]
 800225c:	f000 f966 	bl	800252c <I2C_WaitOnFlagUntilTimeout>
 8002260:	4603      	mov	r3, r0
 8002262:	2b00      	cmp	r3, #0
 8002264:	d00d      	beq.n	8002282 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002270:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002274:	d103      	bne.n	800227e <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	f44f 7200 	mov.w	r2, #512	; 0x200
 800227c:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 800227e:	2303      	movs	r3, #3
 8002280:	e0b6      	b.n	80023f0 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002282:	897b      	ldrh	r3, [r7, #10]
 8002284:	b2db      	uxtb	r3, r3
 8002286:	461a      	mov	r2, r3
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002290:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002292:	f7fe ffd9 	bl	8001248 <HAL_GetTick>
 8002296:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	695b      	ldr	r3, [r3, #20]
 800229e:	f003 0302 	and.w	r3, r3, #2
 80022a2:	2b02      	cmp	r3, #2
 80022a4:	bf0c      	ite	eq
 80022a6:	2301      	moveq	r3, #1
 80022a8:	2300      	movne	r3, #0
 80022aa:	b2db      	uxtb	r3, r3
 80022ac:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	695b      	ldr	r3, [r3, #20]
 80022b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022bc:	bf0c      	ite	eq
 80022be:	2301      	moveq	r3, #1
 80022c0:	2300      	movne	r3, #0
 80022c2:	b2db      	uxtb	r3, r3
 80022c4:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80022c6:	e025      	b.n	8002314 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80022c8:	f7fe ffbe 	bl	8001248 <HAL_GetTick>
 80022cc:	4602      	mov	r2, r0
 80022ce:	69fb      	ldr	r3, [r7, #28]
 80022d0:	1ad3      	subs	r3, r2, r3
 80022d2:	683a      	ldr	r2, [r7, #0]
 80022d4:	429a      	cmp	r2, r3
 80022d6:	d302      	bcc.n	80022de <HAL_I2C_IsDeviceReady+0x13a>
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d103      	bne.n	80022e6 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	22a0      	movs	r2, #160	; 0xa0
 80022e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	695b      	ldr	r3, [r3, #20]
 80022ec:	f003 0302 	and.w	r3, r3, #2
 80022f0:	2b02      	cmp	r3, #2
 80022f2:	bf0c      	ite	eq
 80022f4:	2301      	moveq	r3, #1
 80022f6:	2300      	movne	r3, #0
 80022f8:	b2db      	uxtb	r3, r3
 80022fa:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	695b      	ldr	r3, [r3, #20]
 8002302:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002306:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800230a:	bf0c      	ite	eq
 800230c:	2301      	moveq	r3, #1
 800230e:	2300      	movne	r3, #0
 8002310:	b2db      	uxtb	r3, r3
 8002312:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800231a:	b2db      	uxtb	r3, r3
 800231c:	2ba0      	cmp	r3, #160	; 0xa0
 800231e:	d005      	beq.n	800232c <HAL_I2C_IsDeviceReady+0x188>
 8002320:	7dfb      	ldrb	r3, [r7, #23]
 8002322:	2b00      	cmp	r3, #0
 8002324:	d102      	bne.n	800232c <HAL_I2C_IsDeviceReady+0x188>
 8002326:	7dbb      	ldrb	r3, [r7, #22]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d0cd      	beq.n	80022c8 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	2220      	movs	r2, #32
 8002330:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	695b      	ldr	r3, [r3, #20]
 800233a:	f003 0302 	and.w	r3, r3, #2
 800233e:	2b02      	cmp	r3, #2
 8002340:	d129      	bne.n	8002396 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	681a      	ldr	r2, [r3, #0]
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002350:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002352:	2300      	movs	r3, #0
 8002354:	613b      	str	r3, [r7, #16]
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	695b      	ldr	r3, [r3, #20]
 800235c:	613b      	str	r3, [r7, #16]
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	699b      	ldr	r3, [r3, #24]
 8002364:	613b      	str	r3, [r7, #16]
 8002366:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002368:	69fb      	ldr	r3, [r7, #28]
 800236a:	9300      	str	r3, [sp, #0]
 800236c:	2319      	movs	r3, #25
 800236e:	2201      	movs	r2, #1
 8002370:	4921      	ldr	r1, [pc, #132]	; (80023f8 <HAL_I2C_IsDeviceReady+0x254>)
 8002372:	68f8      	ldr	r0, [r7, #12]
 8002374:	f000 f8da 	bl	800252c <I2C_WaitOnFlagUntilTimeout>
 8002378:	4603      	mov	r3, r0
 800237a:	2b00      	cmp	r3, #0
 800237c:	d001      	beq.n	8002382 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800237e:	2301      	movs	r3, #1
 8002380:	e036      	b.n	80023f0 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	2220      	movs	r2, #32
 8002386:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	2200      	movs	r2, #0
 800238e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8002392:	2300      	movs	r3, #0
 8002394:	e02c      	b.n	80023f0 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	681a      	ldr	r2, [r3, #0]
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023a4:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80023ae:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80023b0:	69fb      	ldr	r3, [r7, #28]
 80023b2:	9300      	str	r3, [sp, #0]
 80023b4:	2319      	movs	r3, #25
 80023b6:	2201      	movs	r2, #1
 80023b8:	490f      	ldr	r1, [pc, #60]	; (80023f8 <HAL_I2C_IsDeviceReady+0x254>)
 80023ba:	68f8      	ldr	r0, [r7, #12]
 80023bc:	f000 f8b6 	bl	800252c <I2C_WaitOnFlagUntilTimeout>
 80023c0:	4603      	mov	r3, r0
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d001      	beq.n	80023ca <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80023c6:	2301      	movs	r3, #1
 80023c8:	e012      	b.n	80023f0 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80023ca:	69bb      	ldr	r3, [r7, #24]
 80023cc:	3301      	adds	r3, #1
 80023ce:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80023d0:	69ba      	ldr	r2, [r7, #24]
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	429a      	cmp	r2, r3
 80023d6:	f4ff af32 	bcc.w	800223e <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	2220      	movs	r2, #32
 80023de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	2200      	movs	r2, #0
 80023e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80023ea:	2301      	movs	r3, #1
 80023ec:	e000      	b.n	80023f0 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80023ee:	2302      	movs	r3, #2
  }
}
 80023f0:	4618      	mov	r0, r3
 80023f2:	3720      	adds	r7, #32
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bd80      	pop	{r7, pc}
 80023f8:	00100002 	.word	0x00100002
 80023fc:	ffff0000 	.word	0xffff0000

08002400 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b088      	sub	sp, #32
 8002404:	af02      	add	r7, sp, #8
 8002406:	60f8      	str	r0, [r7, #12]
 8002408:	4608      	mov	r0, r1
 800240a:	4611      	mov	r1, r2
 800240c:	461a      	mov	r2, r3
 800240e:	4603      	mov	r3, r0
 8002410:	817b      	strh	r3, [r7, #10]
 8002412:	460b      	mov	r3, r1
 8002414:	813b      	strh	r3, [r7, #8]
 8002416:	4613      	mov	r3, r2
 8002418:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	681a      	ldr	r2, [r3, #0]
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002428:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800242a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800242c:	9300      	str	r3, [sp, #0]
 800242e:	6a3b      	ldr	r3, [r7, #32]
 8002430:	2200      	movs	r2, #0
 8002432:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002436:	68f8      	ldr	r0, [r7, #12]
 8002438:	f000 f878 	bl	800252c <I2C_WaitOnFlagUntilTimeout>
 800243c:	4603      	mov	r3, r0
 800243e:	2b00      	cmp	r3, #0
 8002440:	d00d      	beq.n	800245e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800244c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002450:	d103      	bne.n	800245a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002458:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800245a:	2303      	movs	r3, #3
 800245c:	e05f      	b.n	800251e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800245e:	897b      	ldrh	r3, [r7, #10]
 8002460:	b2db      	uxtb	r3, r3
 8002462:	461a      	mov	r2, r3
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800246c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800246e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002470:	6a3a      	ldr	r2, [r7, #32]
 8002472:	492d      	ldr	r1, [pc, #180]	; (8002528 <I2C_RequestMemoryWrite+0x128>)
 8002474:	68f8      	ldr	r0, [r7, #12]
 8002476:	f000 f8b0 	bl	80025da <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800247a:	4603      	mov	r3, r0
 800247c:	2b00      	cmp	r3, #0
 800247e:	d001      	beq.n	8002484 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002480:	2301      	movs	r3, #1
 8002482:	e04c      	b.n	800251e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002484:	2300      	movs	r3, #0
 8002486:	617b      	str	r3, [r7, #20]
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	695b      	ldr	r3, [r3, #20]
 800248e:	617b      	str	r3, [r7, #20]
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	699b      	ldr	r3, [r3, #24]
 8002496:	617b      	str	r3, [r7, #20]
 8002498:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800249a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800249c:	6a39      	ldr	r1, [r7, #32]
 800249e:	68f8      	ldr	r0, [r7, #12]
 80024a0:	f000 f91a 	bl	80026d8 <I2C_WaitOnTXEFlagUntilTimeout>
 80024a4:	4603      	mov	r3, r0
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d00d      	beq.n	80024c6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ae:	2b04      	cmp	r3, #4
 80024b0:	d107      	bne.n	80024c2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	681a      	ldr	r2, [r3, #0]
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024c0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80024c2:	2301      	movs	r3, #1
 80024c4:	e02b      	b.n	800251e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80024c6:	88fb      	ldrh	r3, [r7, #6]
 80024c8:	2b01      	cmp	r3, #1
 80024ca:	d105      	bne.n	80024d8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80024cc:	893b      	ldrh	r3, [r7, #8]
 80024ce:	b2da      	uxtb	r2, r3
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	611a      	str	r2, [r3, #16]
 80024d6:	e021      	b.n	800251c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80024d8:	893b      	ldrh	r3, [r7, #8]
 80024da:	0a1b      	lsrs	r3, r3, #8
 80024dc:	b29b      	uxth	r3, r3
 80024de:	b2da      	uxtb	r2, r3
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80024e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024e8:	6a39      	ldr	r1, [r7, #32]
 80024ea:	68f8      	ldr	r0, [r7, #12]
 80024ec:	f000 f8f4 	bl	80026d8 <I2C_WaitOnTXEFlagUntilTimeout>
 80024f0:	4603      	mov	r3, r0
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d00d      	beq.n	8002512 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024fa:	2b04      	cmp	r3, #4
 80024fc:	d107      	bne.n	800250e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	681a      	ldr	r2, [r3, #0]
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800250c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800250e:	2301      	movs	r3, #1
 8002510:	e005      	b.n	800251e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002512:	893b      	ldrh	r3, [r7, #8]
 8002514:	b2da      	uxtb	r2, r3
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800251c:	2300      	movs	r3, #0
}
 800251e:	4618      	mov	r0, r3
 8002520:	3718      	adds	r7, #24
 8002522:	46bd      	mov	sp, r7
 8002524:	bd80      	pop	{r7, pc}
 8002526:	bf00      	nop
 8002528:	00010002 	.word	0x00010002

0800252c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b084      	sub	sp, #16
 8002530:	af00      	add	r7, sp, #0
 8002532:	60f8      	str	r0, [r7, #12]
 8002534:	60b9      	str	r1, [r7, #8]
 8002536:	603b      	str	r3, [r7, #0]
 8002538:	4613      	mov	r3, r2
 800253a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800253c:	e025      	b.n	800258a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002544:	d021      	beq.n	800258a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002546:	f7fe fe7f 	bl	8001248 <HAL_GetTick>
 800254a:	4602      	mov	r2, r0
 800254c:	69bb      	ldr	r3, [r7, #24]
 800254e:	1ad3      	subs	r3, r2, r3
 8002550:	683a      	ldr	r2, [r7, #0]
 8002552:	429a      	cmp	r2, r3
 8002554:	d302      	bcc.n	800255c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d116      	bne.n	800258a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	2200      	movs	r2, #0
 8002560:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	2220      	movs	r2, #32
 8002566:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	2200      	movs	r2, #0
 800256e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002576:	f043 0220 	orr.w	r2, r3, #32
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	2200      	movs	r2, #0
 8002582:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002586:	2301      	movs	r3, #1
 8002588:	e023      	b.n	80025d2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800258a:	68bb      	ldr	r3, [r7, #8]
 800258c:	0c1b      	lsrs	r3, r3, #16
 800258e:	b2db      	uxtb	r3, r3
 8002590:	2b01      	cmp	r3, #1
 8002592:	d10d      	bne.n	80025b0 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	695b      	ldr	r3, [r3, #20]
 800259a:	43da      	mvns	r2, r3
 800259c:	68bb      	ldr	r3, [r7, #8]
 800259e:	4013      	ands	r3, r2
 80025a0:	b29b      	uxth	r3, r3
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	bf0c      	ite	eq
 80025a6:	2301      	moveq	r3, #1
 80025a8:	2300      	movne	r3, #0
 80025aa:	b2db      	uxtb	r3, r3
 80025ac:	461a      	mov	r2, r3
 80025ae:	e00c      	b.n	80025ca <I2C_WaitOnFlagUntilTimeout+0x9e>
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	699b      	ldr	r3, [r3, #24]
 80025b6:	43da      	mvns	r2, r3
 80025b8:	68bb      	ldr	r3, [r7, #8]
 80025ba:	4013      	ands	r3, r2
 80025bc:	b29b      	uxth	r3, r3
 80025be:	2b00      	cmp	r3, #0
 80025c0:	bf0c      	ite	eq
 80025c2:	2301      	moveq	r3, #1
 80025c4:	2300      	movne	r3, #0
 80025c6:	b2db      	uxtb	r3, r3
 80025c8:	461a      	mov	r2, r3
 80025ca:	79fb      	ldrb	r3, [r7, #7]
 80025cc:	429a      	cmp	r2, r3
 80025ce:	d0b6      	beq.n	800253e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80025d0:	2300      	movs	r3, #0
}
 80025d2:	4618      	mov	r0, r3
 80025d4:	3710      	adds	r7, #16
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bd80      	pop	{r7, pc}

080025da <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80025da:	b580      	push	{r7, lr}
 80025dc:	b084      	sub	sp, #16
 80025de:	af00      	add	r7, sp, #0
 80025e0:	60f8      	str	r0, [r7, #12]
 80025e2:	60b9      	str	r1, [r7, #8]
 80025e4:	607a      	str	r2, [r7, #4]
 80025e6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80025e8:	e051      	b.n	800268e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	695b      	ldr	r3, [r3, #20]
 80025f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025f8:	d123      	bne.n	8002642 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	681a      	ldr	r2, [r3, #0]
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002608:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002612:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	2200      	movs	r2, #0
 8002618:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	2220      	movs	r2, #32
 800261e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	2200      	movs	r2, #0
 8002626:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800262e:	f043 0204 	orr.w	r2, r3, #4
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	2200      	movs	r2, #0
 800263a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800263e:	2301      	movs	r3, #1
 8002640:	e046      	b.n	80026d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002648:	d021      	beq.n	800268e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800264a:	f7fe fdfd 	bl	8001248 <HAL_GetTick>
 800264e:	4602      	mov	r2, r0
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	1ad3      	subs	r3, r2, r3
 8002654:	687a      	ldr	r2, [r7, #4]
 8002656:	429a      	cmp	r2, r3
 8002658:	d302      	bcc.n	8002660 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d116      	bne.n	800268e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	2200      	movs	r2, #0
 8002664:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	2220      	movs	r2, #32
 800266a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	2200      	movs	r2, #0
 8002672:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800267a:	f043 0220 	orr.w	r2, r3, #32
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	2200      	movs	r2, #0
 8002686:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800268a:	2301      	movs	r3, #1
 800268c:	e020      	b.n	80026d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800268e:	68bb      	ldr	r3, [r7, #8]
 8002690:	0c1b      	lsrs	r3, r3, #16
 8002692:	b2db      	uxtb	r3, r3
 8002694:	2b01      	cmp	r3, #1
 8002696:	d10c      	bne.n	80026b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	695b      	ldr	r3, [r3, #20]
 800269e:	43da      	mvns	r2, r3
 80026a0:	68bb      	ldr	r3, [r7, #8]
 80026a2:	4013      	ands	r3, r2
 80026a4:	b29b      	uxth	r3, r3
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	bf14      	ite	ne
 80026aa:	2301      	movne	r3, #1
 80026ac:	2300      	moveq	r3, #0
 80026ae:	b2db      	uxtb	r3, r3
 80026b0:	e00b      	b.n	80026ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	699b      	ldr	r3, [r3, #24]
 80026b8:	43da      	mvns	r2, r3
 80026ba:	68bb      	ldr	r3, [r7, #8]
 80026bc:	4013      	ands	r3, r2
 80026be:	b29b      	uxth	r3, r3
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	bf14      	ite	ne
 80026c4:	2301      	movne	r3, #1
 80026c6:	2300      	moveq	r3, #0
 80026c8:	b2db      	uxtb	r3, r3
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d18d      	bne.n	80025ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80026ce:	2300      	movs	r3, #0
}
 80026d0:	4618      	mov	r0, r3
 80026d2:	3710      	adds	r7, #16
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bd80      	pop	{r7, pc}

080026d8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b084      	sub	sp, #16
 80026dc:	af00      	add	r7, sp, #0
 80026de:	60f8      	str	r0, [r7, #12]
 80026e0:	60b9      	str	r1, [r7, #8]
 80026e2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80026e4:	e02d      	b.n	8002742 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80026e6:	68f8      	ldr	r0, [r7, #12]
 80026e8:	f000 f878 	bl	80027dc <I2C_IsAcknowledgeFailed>
 80026ec:	4603      	mov	r3, r0
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d001      	beq.n	80026f6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80026f2:	2301      	movs	r3, #1
 80026f4:	e02d      	b.n	8002752 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026f6:	68bb      	ldr	r3, [r7, #8]
 80026f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80026fc:	d021      	beq.n	8002742 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026fe:	f7fe fda3 	bl	8001248 <HAL_GetTick>
 8002702:	4602      	mov	r2, r0
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	1ad3      	subs	r3, r2, r3
 8002708:	68ba      	ldr	r2, [r7, #8]
 800270a:	429a      	cmp	r2, r3
 800270c:	d302      	bcc.n	8002714 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800270e:	68bb      	ldr	r3, [r7, #8]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d116      	bne.n	8002742 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	2200      	movs	r2, #0
 8002718:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	2220      	movs	r2, #32
 800271e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	2200      	movs	r2, #0
 8002726:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800272e:	f043 0220 	orr.w	r2, r3, #32
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	2200      	movs	r2, #0
 800273a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800273e:	2301      	movs	r3, #1
 8002740:	e007      	b.n	8002752 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	695b      	ldr	r3, [r3, #20]
 8002748:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800274c:	2b80      	cmp	r3, #128	; 0x80
 800274e:	d1ca      	bne.n	80026e6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002750:	2300      	movs	r3, #0
}
 8002752:	4618      	mov	r0, r3
 8002754:	3710      	adds	r7, #16
 8002756:	46bd      	mov	sp, r7
 8002758:	bd80      	pop	{r7, pc}

0800275a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800275a:	b580      	push	{r7, lr}
 800275c:	b084      	sub	sp, #16
 800275e:	af00      	add	r7, sp, #0
 8002760:	60f8      	str	r0, [r7, #12]
 8002762:	60b9      	str	r1, [r7, #8]
 8002764:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002766:	e02d      	b.n	80027c4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002768:	68f8      	ldr	r0, [r7, #12]
 800276a:	f000 f837 	bl	80027dc <I2C_IsAcknowledgeFailed>
 800276e:	4603      	mov	r3, r0
 8002770:	2b00      	cmp	r3, #0
 8002772:	d001      	beq.n	8002778 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002774:	2301      	movs	r3, #1
 8002776:	e02d      	b.n	80027d4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002778:	68bb      	ldr	r3, [r7, #8]
 800277a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800277e:	d021      	beq.n	80027c4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002780:	f7fe fd62 	bl	8001248 <HAL_GetTick>
 8002784:	4602      	mov	r2, r0
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	1ad3      	subs	r3, r2, r3
 800278a:	68ba      	ldr	r2, [r7, #8]
 800278c:	429a      	cmp	r2, r3
 800278e:	d302      	bcc.n	8002796 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002790:	68bb      	ldr	r3, [r7, #8]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d116      	bne.n	80027c4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	2200      	movs	r2, #0
 800279a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	2220      	movs	r2, #32
 80027a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	2200      	movs	r2, #0
 80027a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027b0:	f043 0220 	orr.w	r2, r3, #32
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	2200      	movs	r2, #0
 80027bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80027c0:	2301      	movs	r3, #1
 80027c2:	e007      	b.n	80027d4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	695b      	ldr	r3, [r3, #20]
 80027ca:	f003 0304 	and.w	r3, r3, #4
 80027ce:	2b04      	cmp	r3, #4
 80027d0:	d1ca      	bne.n	8002768 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80027d2:	2300      	movs	r3, #0
}
 80027d4:	4618      	mov	r0, r3
 80027d6:	3710      	adds	r7, #16
 80027d8:	46bd      	mov	sp, r7
 80027da:	bd80      	pop	{r7, pc}

080027dc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80027dc:	b480      	push	{r7}
 80027de:	b083      	sub	sp, #12
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	695b      	ldr	r3, [r3, #20]
 80027ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027f2:	d11b      	bne.n	800282c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80027fc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2200      	movs	r2, #0
 8002802:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2220      	movs	r2, #32
 8002808:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2200      	movs	r2, #0
 8002810:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002818:	f043 0204 	orr.w	r2, r3, #4
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2200      	movs	r2, #0
 8002824:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002828:	2301      	movs	r3, #1
 800282a:	e000      	b.n	800282e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800282c:	2300      	movs	r3, #0
}
 800282e:	4618      	mov	r0, r3
 8002830:	370c      	adds	r7, #12
 8002832:	46bd      	mov	sp, r7
 8002834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002838:	4770      	bx	lr
	...

0800283c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b086      	sub	sp, #24
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d101      	bne.n	800284e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800284a:	2301      	movs	r3, #1
 800284c:	e25b      	b.n	8002d06 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f003 0301 	and.w	r3, r3, #1
 8002856:	2b00      	cmp	r3, #0
 8002858:	d075      	beq.n	8002946 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800285a:	4ba3      	ldr	r3, [pc, #652]	; (8002ae8 <HAL_RCC_OscConfig+0x2ac>)
 800285c:	689b      	ldr	r3, [r3, #8]
 800285e:	f003 030c 	and.w	r3, r3, #12
 8002862:	2b04      	cmp	r3, #4
 8002864:	d00c      	beq.n	8002880 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002866:	4ba0      	ldr	r3, [pc, #640]	; (8002ae8 <HAL_RCC_OscConfig+0x2ac>)
 8002868:	689b      	ldr	r3, [r3, #8]
 800286a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800286e:	2b08      	cmp	r3, #8
 8002870:	d112      	bne.n	8002898 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002872:	4b9d      	ldr	r3, [pc, #628]	; (8002ae8 <HAL_RCC_OscConfig+0x2ac>)
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800287a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800287e:	d10b      	bne.n	8002898 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002880:	4b99      	ldr	r3, [pc, #612]	; (8002ae8 <HAL_RCC_OscConfig+0x2ac>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002888:	2b00      	cmp	r3, #0
 800288a:	d05b      	beq.n	8002944 <HAL_RCC_OscConfig+0x108>
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	2b00      	cmp	r3, #0
 8002892:	d157      	bne.n	8002944 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002894:	2301      	movs	r3, #1
 8002896:	e236      	b.n	8002d06 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028a0:	d106      	bne.n	80028b0 <HAL_RCC_OscConfig+0x74>
 80028a2:	4b91      	ldr	r3, [pc, #580]	; (8002ae8 <HAL_RCC_OscConfig+0x2ac>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4a90      	ldr	r2, [pc, #576]	; (8002ae8 <HAL_RCC_OscConfig+0x2ac>)
 80028a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028ac:	6013      	str	r3, [r2, #0]
 80028ae:	e01d      	b.n	80028ec <HAL_RCC_OscConfig+0xb0>
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80028b8:	d10c      	bne.n	80028d4 <HAL_RCC_OscConfig+0x98>
 80028ba:	4b8b      	ldr	r3, [pc, #556]	; (8002ae8 <HAL_RCC_OscConfig+0x2ac>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4a8a      	ldr	r2, [pc, #552]	; (8002ae8 <HAL_RCC_OscConfig+0x2ac>)
 80028c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80028c4:	6013      	str	r3, [r2, #0]
 80028c6:	4b88      	ldr	r3, [pc, #544]	; (8002ae8 <HAL_RCC_OscConfig+0x2ac>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4a87      	ldr	r2, [pc, #540]	; (8002ae8 <HAL_RCC_OscConfig+0x2ac>)
 80028cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028d0:	6013      	str	r3, [r2, #0]
 80028d2:	e00b      	b.n	80028ec <HAL_RCC_OscConfig+0xb0>
 80028d4:	4b84      	ldr	r3, [pc, #528]	; (8002ae8 <HAL_RCC_OscConfig+0x2ac>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4a83      	ldr	r2, [pc, #524]	; (8002ae8 <HAL_RCC_OscConfig+0x2ac>)
 80028da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028de:	6013      	str	r3, [r2, #0]
 80028e0:	4b81      	ldr	r3, [pc, #516]	; (8002ae8 <HAL_RCC_OscConfig+0x2ac>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a80      	ldr	r2, [pc, #512]	; (8002ae8 <HAL_RCC_OscConfig+0x2ac>)
 80028e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d013      	beq.n	800291c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028f4:	f7fe fca8 	bl	8001248 <HAL_GetTick>
 80028f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028fa:	e008      	b.n	800290e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80028fc:	f7fe fca4 	bl	8001248 <HAL_GetTick>
 8002900:	4602      	mov	r2, r0
 8002902:	693b      	ldr	r3, [r7, #16]
 8002904:	1ad3      	subs	r3, r2, r3
 8002906:	2b64      	cmp	r3, #100	; 0x64
 8002908:	d901      	bls.n	800290e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800290a:	2303      	movs	r3, #3
 800290c:	e1fb      	b.n	8002d06 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800290e:	4b76      	ldr	r3, [pc, #472]	; (8002ae8 <HAL_RCC_OscConfig+0x2ac>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002916:	2b00      	cmp	r3, #0
 8002918:	d0f0      	beq.n	80028fc <HAL_RCC_OscConfig+0xc0>
 800291a:	e014      	b.n	8002946 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800291c:	f7fe fc94 	bl	8001248 <HAL_GetTick>
 8002920:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002922:	e008      	b.n	8002936 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002924:	f7fe fc90 	bl	8001248 <HAL_GetTick>
 8002928:	4602      	mov	r2, r0
 800292a:	693b      	ldr	r3, [r7, #16]
 800292c:	1ad3      	subs	r3, r2, r3
 800292e:	2b64      	cmp	r3, #100	; 0x64
 8002930:	d901      	bls.n	8002936 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002932:	2303      	movs	r3, #3
 8002934:	e1e7      	b.n	8002d06 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002936:	4b6c      	ldr	r3, [pc, #432]	; (8002ae8 <HAL_RCC_OscConfig+0x2ac>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800293e:	2b00      	cmp	r3, #0
 8002940:	d1f0      	bne.n	8002924 <HAL_RCC_OscConfig+0xe8>
 8002942:	e000      	b.n	8002946 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002944:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f003 0302 	and.w	r3, r3, #2
 800294e:	2b00      	cmp	r3, #0
 8002950:	d063      	beq.n	8002a1a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002952:	4b65      	ldr	r3, [pc, #404]	; (8002ae8 <HAL_RCC_OscConfig+0x2ac>)
 8002954:	689b      	ldr	r3, [r3, #8]
 8002956:	f003 030c 	and.w	r3, r3, #12
 800295a:	2b00      	cmp	r3, #0
 800295c:	d00b      	beq.n	8002976 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800295e:	4b62      	ldr	r3, [pc, #392]	; (8002ae8 <HAL_RCC_OscConfig+0x2ac>)
 8002960:	689b      	ldr	r3, [r3, #8]
 8002962:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002966:	2b08      	cmp	r3, #8
 8002968:	d11c      	bne.n	80029a4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800296a:	4b5f      	ldr	r3, [pc, #380]	; (8002ae8 <HAL_RCC_OscConfig+0x2ac>)
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002972:	2b00      	cmp	r3, #0
 8002974:	d116      	bne.n	80029a4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002976:	4b5c      	ldr	r3, [pc, #368]	; (8002ae8 <HAL_RCC_OscConfig+0x2ac>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f003 0302 	and.w	r3, r3, #2
 800297e:	2b00      	cmp	r3, #0
 8002980:	d005      	beq.n	800298e <HAL_RCC_OscConfig+0x152>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	68db      	ldr	r3, [r3, #12]
 8002986:	2b01      	cmp	r3, #1
 8002988:	d001      	beq.n	800298e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800298a:	2301      	movs	r3, #1
 800298c:	e1bb      	b.n	8002d06 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800298e:	4b56      	ldr	r3, [pc, #344]	; (8002ae8 <HAL_RCC_OscConfig+0x2ac>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	691b      	ldr	r3, [r3, #16]
 800299a:	00db      	lsls	r3, r3, #3
 800299c:	4952      	ldr	r1, [pc, #328]	; (8002ae8 <HAL_RCC_OscConfig+0x2ac>)
 800299e:	4313      	orrs	r3, r2
 80029a0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029a2:	e03a      	b.n	8002a1a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	68db      	ldr	r3, [r3, #12]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d020      	beq.n	80029ee <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80029ac:	4b4f      	ldr	r3, [pc, #316]	; (8002aec <HAL_RCC_OscConfig+0x2b0>)
 80029ae:	2201      	movs	r2, #1
 80029b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029b2:	f7fe fc49 	bl	8001248 <HAL_GetTick>
 80029b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029b8:	e008      	b.n	80029cc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80029ba:	f7fe fc45 	bl	8001248 <HAL_GetTick>
 80029be:	4602      	mov	r2, r0
 80029c0:	693b      	ldr	r3, [r7, #16]
 80029c2:	1ad3      	subs	r3, r2, r3
 80029c4:	2b02      	cmp	r3, #2
 80029c6:	d901      	bls.n	80029cc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80029c8:	2303      	movs	r3, #3
 80029ca:	e19c      	b.n	8002d06 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029cc:	4b46      	ldr	r3, [pc, #280]	; (8002ae8 <HAL_RCC_OscConfig+0x2ac>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f003 0302 	and.w	r3, r3, #2
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d0f0      	beq.n	80029ba <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029d8:	4b43      	ldr	r3, [pc, #268]	; (8002ae8 <HAL_RCC_OscConfig+0x2ac>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	691b      	ldr	r3, [r3, #16]
 80029e4:	00db      	lsls	r3, r3, #3
 80029e6:	4940      	ldr	r1, [pc, #256]	; (8002ae8 <HAL_RCC_OscConfig+0x2ac>)
 80029e8:	4313      	orrs	r3, r2
 80029ea:	600b      	str	r3, [r1, #0]
 80029ec:	e015      	b.n	8002a1a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80029ee:	4b3f      	ldr	r3, [pc, #252]	; (8002aec <HAL_RCC_OscConfig+0x2b0>)
 80029f0:	2200      	movs	r2, #0
 80029f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029f4:	f7fe fc28 	bl	8001248 <HAL_GetTick>
 80029f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029fa:	e008      	b.n	8002a0e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80029fc:	f7fe fc24 	bl	8001248 <HAL_GetTick>
 8002a00:	4602      	mov	r2, r0
 8002a02:	693b      	ldr	r3, [r7, #16]
 8002a04:	1ad3      	subs	r3, r2, r3
 8002a06:	2b02      	cmp	r3, #2
 8002a08:	d901      	bls.n	8002a0e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002a0a:	2303      	movs	r3, #3
 8002a0c:	e17b      	b.n	8002d06 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a0e:	4b36      	ldr	r3, [pc, #216]	; (8002ae8 <HAL_RCC_OscConfig+0x2ac>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f003 0302 	and.w	r3, r3, #2
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d1f0      	bne.n	80029fc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f003 0308 	and.w	r3, r3, #8
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d030      	beq.n	8002a88 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	695b      	ldr	r3, [r3, #20]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d016      	beq.n	8002a5c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a2e:	4b30      	ldr	r3, [pc, #192]	; (8002af0 <HAL_RCC_OscConfig+0x2b4>)
 8002a30:	2201      	movs	r2, #1
 8002a32:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a34:	f7fe fc08 	bl	8001248 <HAL_GetTick>
 8002a38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a3a:	e008      	b.n	8002a4e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a3c:	f7fe fc04 	bl	8001248 <HAL_GetTick>
 8002a40:	4602      	mov	r2, r0
 8002a42:	693b      	ldr	r3, [r7, #16]
 8002a44:	1ad3      	subs	r3, r2, r3
 8002a46:	2b02      	cmp	r3, #2
 8002a48:	d901      	bls.n	8002a4e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002a4a:	2303      	movs	r3, #3
 8002a4c:	e15b      	b.n	8002d06 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a4e:	4b26      	ldr	r3, [pc, #152]	; (8002ae8 <HAL_RCC_OscConfig+0x2ac>)
 8002a50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a52:	f003 0302 	and.w	r3, r3, #2
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d0f0      	beq.n	8002a3c <HAL_RCC_OscConfig+0x200>
 8002a5a:	e015      	b.n	8002a88 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a5c:	4b24      	ldr	r3, [pc, #144]	; (8002af0 <HAL_RCC_OscConfig+0x2b4>)
 8002a5e:	2200      	movs	r2, #0
 8002a60:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a62:	f7fe fbf1 	bl	8001248 <HAL_GetTick>
 8002a66:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a68:	e008      	b.n	8002a7c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a6a:	f7fe fbed 	bl	8001248 <HAL_GetTick>
 8002a6e:	4602      	mov	r2, r0
 8002a70:	693b      	ldr	r3, [r7, #16]
 8002a72:	1ad3      	subs	r3, r2, r3
 8002a74:	2b02      	cmp	r3, #2
 8002a76:	d901      	bls.n	8002a7c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002a78:	2303      	movs	r3, #3
 8002a7a:	e144      	b.n	8002d06 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a7c:	4b1a      	ldr	r3, [pc, #104]	; (8002ae8 <HAL_RCC_OscConfig+0x2ac>)
 8002a7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a80:	f003 0302 	and.w	r3, r3, #2
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d1f0      	bne.n	8002a6a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f003 0304 	and.w	r3, r3, #4
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	f000 80a0 	beq.w	8002bd6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a96:	2300      	movs	r3, #0
 8002a98:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a9a:	4b13      	ldr	r3, [pc, #76]	; (8002ae8 <HAL_RCC_OscConfig+0x2ac>)
 8002a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d10f      	bne.n	8002ac6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	60bb      	str	r3, [r7, #8]
 8002aaa:	4b0f      	ldr	r3, [pc, #60]	; (8002ae8 <HAL_RCC_OscConfig+0x2ac>)
 8002aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aae:	4a0e      	ldr	r2, [pc, #56]	; (8002ae8 <HAL_RCC_OscConfig+0x2ac>)
 8002ab0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ab4:	6413      	str	r3, [r2, #64]	; 0x40
 8002ab6:	4b0c      	ldr	r3, [pc, #48]	; (8002ae8 <HAL_RCC_OscConfig+0x2ac>)
 8002ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002abe:	60bb      	str	r3, [r7, #8]
 8002ac0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ac6:	4b0b      	ldr	r3, [pc, #44]	; (8002af4 <HAL_RCC_OscConfig+0x2b8>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d121      	bne.n	8002b16 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ad2:	4b08      	ldr	r3, [pc, #32]	; (8002af4 <HAL_RCC_OscConfig+0x2b8>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4a07      	ldr	r2, [pc, #28]	; (8002af4 <HAL_RCC_OscConfig+0x2b8>)
 8002ad8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002adc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ade:	f7fe fbb3 	bl	8001248 <HAL_GetTick>
 8002ae2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ae4:	e011      	b.n	8002b0a <HAL_RCC_OscConfig+0x2ce>
 8002ae6:	bf00      	nop
 8002ae8:	40023800 	.word	0x40023800
 8002aec:	42470000 	.word	0x42470000
 8002af0:	42470e80 	.word	0x42470e80
 8002af4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002af8:	f7fe fba6 	bl	8001248 <HAL_GetTick>
 8002afc:	4602      	mov	r2, r0
 8002afe:	693b      	ldr	r3, [r7, #16]
 8002b00:	1ad3      	subs	r3, r2, r3
 8002b02:	2b02      	cmp	r3, #2
 8002b04:	d901      	bls.n	8002b0a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002b06:	2303      	movs	r3, #3
 8002b08:	e0fd      	b.n	8002d06 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b0a:	4b81      	ldr	r3, [pc, #516]	; (8002d10 <HAL_RCC_OscConfig+0x4d4>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d0f0      	beq.n	8002af8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	689b      	ldr	r3, [r3, #8]
 8002b1a:	2b01      	cmp	r3, #1
 8002b1c:	d106      	bne.n	8002b2c <HAL_RCC_OscConfig+0x2f0>
 8002b1e:	4b7d      	ldr	r3, [pc, #500]	; (8002d14 <HAL_RCC_OscConfig+0x4d8>)
 8002b20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b22:	4a7c      	ldr	r2, [pc, #496]	; (8002d14 <HAL_RCC_OscConfig+0x4d8>)
 8002b24:	f043 0301 	orr.w	r3, r3, #1
 8002b28:	6713      	str	r3, [r2, #112]	; 0x70
 8002b2a:	e01c      	b.n	8002b66 <HAL_RCC_OscConfig+0x32a>
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	689b      	ldr	r3, [r3, #8]
 8002b30:	2b05      	cmp	r3, #5
 8002b32:	d10c      	bne.n	8002b4e <HAL_RCC_OscConfig+0x312>
 8002b34:	4b77      	ldr	r3, [pc, #476]	; (8002d14 <HAL_RCC_OscConfig+0x4d8>)
 8002b36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b38:	4a76      	ldr	r2, [pc, #472]	; (8002d14 <HAL_RCC_OscConfig+0x4d8>)
 8002b3a:	f043 0304 	orr.w	r3, r3, #4
 8002b3e:	6713      	str	r3, [r2, #112]	; 0x70
 8002b40:	4b74      	ldr	r3, [pc, #464]	; (8002d14 <HAL_RCC_OscConfig+0x4d8>)
 8002b42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b44:	4a73      	ldr	r2, [pc, #460]	; (8002d14 <HAL_RCC_OscConfig+0x4d8>)
 8002b46:	f043 0301 	orr.w	r3, r3, #1
 8002b4a:	6713      	str	r3, [r2, #112]	; 0x70
 8002b4c:	e00b      	b.n	8002b66 <HAL_RCC_OscConfig+0x32a>
 8002b4e:	4b71      	ldr	r3, [pc, #452]	; (8002d14 <HAL_RCC_OscConfig+0x4d8>)
 8002b50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b52:	4a70      	ldr	r2, [pc, #448]	; (8002d14 <HAL_RCC_OscConfig+0x4d8>)
 8002b54:	f023 0301 	bic.w	r3, r3, #1
 8002b58:	6713      	str	r3, [r2, #112]	; 0x70
 8002b5a:	4b6e      	ldr	r3, [pc, #440]	; (8002d14 <HAL_RCC_OscConfig+0x4d8>)
 8002b5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b5e:	4a6d      	ldr	r2, [pc, #436]	; (8002d14 <HAL_RCC_OscConfig+0x4d8>)
 8002b60:	f023 0304 	bic.w	r3, r3, #4
 8002b64:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	689b      	ldr	r3, [r3, #8]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d015      	beq.n	8002b9a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b6e:	f7fe fb6b 	bl	8001248 <HAL_GetTick>
 8002b72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b74:	e00a      	b.n	8002b8c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b76:	f7fe fb67 	bl	8001248 <HAL_GetTick>
 8002b7a:	4602      	mov	r2, r0
 8002b7c:	693b      	ldr	r3, [r7, #16]
 8002b7e:	1ad3      	subs	r3, r2, r3
 8002b80:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d901      	bls.n	8002b8c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002b88:	2303      	movs	r3, #3
 8002b8a:	e0bc      	b.n	8002d06 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b8c:	4b61      	ldr	r3, [pc, #388]	; (8002d14 <HAL_RCC_OscConfig+0x4d8>)
 8002b8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b90:	f003 0302 	and.w	r3, r3, #2
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d0ee      	beq.n	8002b76 <HAL_RCC_OscConfig+0x33a>
 8002b98:	e014      	b.n	8002bc4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b9a:	f7fe fb55 	bl	8001248 <HAL_GetTick>
 8002b9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ba0:	e00a      	b.n	8002bb8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ba2:	f7fe fb51 	bl	8001248 <HAL_GetTick>
 8002ba6:	4602      	mov	r2, r0
 8002ba8:	693b      	ldr	r3, [r7, #16]
 8002baa:	1ad3      	subs	r3, r2, r3
 8002bac:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bb0:	4293      	cmp	r3, r2
 8002bb2:	d901      	bls.n	8002bb8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002bb4:	2303      	movs	r3, #3
 8002bb6:	e0a6      	b.n	8002d06 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bb8:	4b56      	ldr	r3, [pc, #344]	; (8002d14 <HAL_RCC_OscConfig+0x4d8>)
 8002bba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bbc:	f003 0302 	and.w	r3, r3, #2
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d1ee      	bne.n	8002ba2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002bc4:	7dfb      	ldrb	r3, [r7, #23]
 8002bc6:	2b01      	cmp	r3, #1
 8002bc8:	d105      	bne.n	8002bd6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bca:	4b52      	ldr	r3, [pc, #328]	; (8002d14 <HAL_RCC_OscConfig+0x4d8>)
 8002bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bce:	4a51      	ldr	r2, [pc, #324]	; (8002d14 <HAL_RCC_OscConfig+0x4d8>)
 8002bd0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002bd4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	699b      	ldr	r3, [r3, #24]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	f000 8092 	beq.w	8002d04 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002be0:	4b4c      	ldr	r3, [pc, #304]	; (8002d14 <HAL_RCC_OscConfig+0x4d8>)
 8002be2:	689b      	ldr	r3, [r3, #8]
 8002be4:	f003 030c 	and.w	r3, r3, #12
 8002be8:	2b08      	cmp	r3, #8
 8002bea:	d05c      	beq.n	8002ca6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	699b      	ldr	r3, [r3, #24]
 8002bf0:	2b02      	cmp	r3, #2
 8002bf2:	d141      	bne.n	8002c78 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bf4:	4b48      	ldr	r3, [pc, #288]	; (8002d18 <HAL_RCC_OscConfig+0x4dc>)
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bfa:	f7fe fb25 	bl	8001248 <HAL_GetTick>
 8002bfe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c00:	e008      	b.n	8002c14 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c02:	f7fe fb21 	bl	8001248 <HAL_GetTick>
 8002c06:	4602      	mov	r2, r0
 8002c08:	693b      	ldr	r3, [r7, #16]
 8002c0a:	1ad3      	subs	r3, r2, r3
 8002c0c:	2b02      	cmp	r3, #2
 8002c0e:	d901      	bls.n	8002c14 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002c10:	2303      	movs	r3, #3
 8002c12:	e078      	b.n	8002d06 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c14:	4b3f      	ldr	r3, [pc, #252]	; (8002d14 <HAL_RCC_OscConfig+0x4d8>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d1f0      	bne.n	8002c02 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	69da      	ldr	r2, [r3, #28]
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6a1b      	ldr	r3, [r3, #32]
 8002c28:	431a      	orrs	r2, r3
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c2e:	019b      	lsls	r3, r3, #6
 8002c30:	431a      	orrs	r2, r3
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c36:	085b      	lsrs	r3, r3, #1
 8002c38:	3b01      	subs	r3, #1
 8002c3a:	041b      	lsls	r3, r3, #16
 8002c3c:	431a      	orrs	r2, r3
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c42:	061b      	lsls	r3, r3, #24
 8002c44:	4933      	ldr	r1, [pc, #204]	; (8002d14 <HAL_RCC_OscConfig+0x4d8>)
 8002c46:	4313      	orrs	r3, r2
 8002c48:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c4a:	4b33      	ldr	r3, [pc, #204]	; (8002d18 <HAL_RCC_OscConfig+0x4dc>)
 8002c4c:	2201      	movs	r2, #1
 8002c4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c50:	f7fe fafa 	bl	8001248 <HAL_GetTick>
 8002c54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c56:	e008      	b.n	8002c6a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c58:	f7fe faf6 	bl	8001248 <HAL_GetTick>
 8002c5c:	4602      	mov	r2, r0
 8002c5e:	693b      	ldr	r3, [r7, #16]
 8002c60:	1ad3      	subs	r3, r2, r3
 8002c62:	2b02      	cmp	r3, #2
 8002c64:	d901      	bls.n	8002c6a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002c66:	2303      	movs	r3, #3
 8002c68:	e04d      	b.n	8002d06 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c6a:	4b2a      	ldr	r3, [pc, #168]	; (8002d14 <HAL_RCC_OscConfig+0x4d8>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d0f0      	beq.n	8002c58 <HAL_RCC_OscConfig+0x41c>
 8002c76:	e045      	b.n	8002d04 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c78:	4b27      	ldr	r3, [pc, #156]	; (8002d18 <HAL_RCC_OscConfig+0x4dc>)
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c7e:	f7fe fae3 	bl	8001248 <HAL_GetTick>
 8002c82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c84:	e008      	b.n	8002c98 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c86:	f7fe fadf 	bl	8001248 <HAL_GetTick>
 8002c8a:	4602      	mov	r2, r0
 8002c8c:	693b      	ldr	r3, [r7, #16]
 8002c8e:	1ad3      	subs	r3, r2, r3
 8002c90:	2b02      	cmp	r3, #2
 8002c92:	d901      	bls.n	8002c98 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002c94:	2303      	movs	r3, #3
 8002c96:	e036      	b.n	8002d06 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c98:	4b1e      	ldr	r3, [pc, #120]	; (8002d14 <HAL_RCC_OscConfig+0x4d8>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d1f0      	bne.n	8002c86 <HAL_RCC_OscConfig+0x44a>
 8002ca4:	e02e      	b.n	8002d04 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	699b      	ldr	r3, [r3, #24]
 8002caa:	2b01      	cmp	r3, #1
 8002cac:	d101      	bne.n	8002cb2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002cae:	2301      	movs	r3, #1
 8002cb0:	e029      	b.n	8002d06 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002cb2:	4b18      	ldr	r3, [pc, #96]	; (8002d14 <HAL_RCC_OscConfig+0x4d8>)
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	69db      	ldr	r3, [r3, #28]
 8002cc2:	429a      	cmp	r2, r3
 8002cc4:	d11c      	bne.n	8002d00 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cd0:	429a      	cmp	r2, r3
 8002cd2:	d115      	bne.n	8002d00 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002cd4:	68fa      	ldr	r2, [r7, #12]
 8002cd6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002cda:	4013      	ands	r3, r2
 8002cdc:	687a      	ldr	r2, [r7, #4]
 8002cde:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d10d      	bne.n	8002d00 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002cee:	429a      	cmp	r2, r3
 8002cf0:	d106      	bne.n	8002d00 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002cfc:	429a      	cmp	r2, r3
 8002cfe:	d001      	beq.n	8002d04 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8002d00:	2301      	movs	r3, #1
 8002d02:	e000      	b.n	8002d06 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8002d04:	2300      	movs	r3, #0
}
 8002d06:	4618      	mov	r0, r3
 8002d08:	3718      	adds	r7, #24
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd80      	pop	{r7, pc}
 8002d0e:	bf00      	nop
 8002d10:	40007000 	.word	0x40007000
 8002d14:	40023800 	.word	0x40023800
 8002d18:	42470060 	.word	0x42470060

08002d1c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b084      	sub	sp, #16
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
 8002d24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d101      	bne.n	8002d30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	e0cc      	b.n	8002eca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002d30:	4b68      	ldr	r3, [pc, #416]	; (8002ed4 <HAL_RCC_ClockConfig+0x1b8>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f003 030f 	and.w	r3, r3, #15
 8002d38:	683a      	ldr	r2, [r7, #0]
 8002d3a:	429a      	cmp	r2, r3
 8002d3c:	d90c      	bls.n	8002d58 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d3e:	4b65      	ldr	r3, [pc, #404]	; (8002ed4 <HAL_RCC_ClockConfig+0x1b8>)
 8002d40:	683a      	ldr	r2, [r7, #0]
 8002d42:	b2d2      	uxtb	r2, r2
 8002d44:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d46:	4b63      	ldr	r3, [pc, #396]	; (8002ed4 <HAL_RCC_ClockConfig+0x1b8>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f003 030f 	and.w	r3, r3, #15
 8002d4e:	683a      	ldr	r2, [r7, #0]
 8002d50:	429a      	cmp	r2, r3
 8002d52:	d001      	beq.n	8002d58 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002d54:	2301      	movs	r3, #1
 8002d56:	e0b8      	b.n	8002eca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f003 0302 	and.w	r3, r3, #2
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d020      	beq.n	8002da6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f003 0304 	and.w	r3, r3, #4
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d005      	beq.n	8002d7c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d70:	4b59      	ldr	r3, [pc, #356]	; (8002ed8 <HAL_RCC_ClockConfig+0x1bc>)
 8002d72:	689b      	ldr	r3, [r3, #8]
 8002d74:	4a58      	ldr	r2, [pc, #352]	; (8002ed8 <HAL_RCC_ClockConfig+0x1bc>)
 8002d76:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002d7a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f003 0308 	and.w	r3, r3, #8
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d005      	beq.n	8002d94 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d88:	4b53      	ldr	r3, [pc, #332]	; (8002ed8 <HAL_RCC_ClockConfig+0x1bc>)
 8002d8a:	689b      	ldr	r3, [r3, #8]
 8002d8c:	4a52      	ldr	r2, [pc, #328]	; (8002ed8 <HAL_RCC_ClockConfig+0x1bc>)
 8002d8e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002d92:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d94:	4b50      	ldr	r3, [pc, #320]	; (8002ed8 <HAL_RCC_ClockConfig+0x1bc>)
 8002d96:	689b      	ldr	r3, [r3, #8]
 8002d98:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	689b      	ldr	r3, [r3, #8]
 8002da0:	494d      	ldr	r1, [pc, #308]	; (8002ed8 <HAL_RCC_ClockConfig+0x1bc>)
 8002da2:	4313      	orrs	r3, r2
 8002da4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f003 0301 	and.w	r3, r3, #1
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d044      	beq.n	8002e3c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	685b      	ldr	r3, [r3, #4]
 8002db6:	2b01      	cmp	r3, #1
 8002db8:	d107      	bne.n	8002dca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dba:	4b47      	ldr	r3, [pc, #284]	; (8002ed8 <HAL_RCC_ClockConfig+0x1bc>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d119      	bne.n	8002dfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	e07f      	b.n	8002eca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	2b02      	cmp	r3, #2
 8002dd0:	d003      	beq.n	8002dda <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002dd6:	2b03      	cmp	r3, #3
 8002dd8:	d107      	bne.n	8002dea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002dda:	4b3f      	ldr	r3, [pc, #252]	; (8002ed8 <HAL_RCC_ClockConfig+0x1bc>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d109      	bne.n	8002dfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002de6:	2301      	movs	r3, #1
 8002de8:	e06f      	b.n	8002eca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dea:	4b3b      	ldr	r3, [pc, #236]	; (8002ed8 <HAL_RCC_ClockConfig+0x1bc>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f003 0302 	and.w	r3, r3, #2
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d101      	bne.n	8002dfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002df6:	2301      	movs	r3, #1
 8002df8:	e067      	b.n	8002eca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002dfa:	4b37      	ldr	r3, [pc, #220]	; (8002ed8 <HAL_RCC_ClockConfig+0x1bc>)
 8002dfc:	689b      	ldr	r3, [r3, #8]
 8002dfe:	f023 0203 	bic.w	r2, r3, #3
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	4934      	ldr	r1, [pc, #208]	; (8002ed8 <HAL_RCC_ClockConfig+0x1bc>)
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e0c:	f7fe fa1c 	bl	8001248 <HAL_GetTick>
 8002e10:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e12:	e00a      	b.n	8002e2a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e14:	f7fe fa18 	bl	8001248 <HAL_GetTick>
 8002e18:	4602      	mov	r2, r0
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	1ad3      	subs	r3, r2, r3
 8002e1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d901      	bls.n	8002e2a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002e26:	2303      	movs	r3, #3
 8002e28:	e04f      	b.n	8002eca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e2a:	4b2b      	ldr	r3, [pc, #172]	; (8002ed8 <HAL_RCC_ClockConfig+0x1bc>)
 8002e2c:	689b      	ldr	r3, [r3, #8]
 8002e2e:	f003 020c 	and.w	r2, r3, #12
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	009b      	lsls	r3, r3, #2
 8002e38:	429a      	cmp	r2, r3
 8002e3a:	d1eb      	bne.n	8002e14 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002e3c:	4b25      	ldr	r3, [pc, #148]	; (8002ed4 <HAL_RCC_ClockConfig+0x1b8>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f003 030f 	and.w	r3, r3, #15
 8002e44:	683a      	ldr	r2, [r7, #0]
 8002e46:	429a      	cmp	r2, r3
 8002e48:	d20c      	bcs.n	8002e64 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e4a:	4b22      	ldr	r3, [pc, #136]	; (8002ed4 <HAL_RCC_ClockConfig+0x1b8>)
 8002e4c:	683a      	ldr	r2, [r7, #0]
 8002e4e:	b2d2      	uxtb	r2, r2
 8002e50:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e52:	4b20      	ldr	r3, [pc, #128]	; (8002ed4 <HAL_RCC_ClockConfig+0x1b8>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f003 030f 	and.w	r3, r3, #15
 8002e5a:	683a      	ldr	r2, [r7, #0]
 8002e5c:	429a      	cmp	r2, r3
 8002e5e:	d001      	beq.n	8002e64 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002e60:	2301      	movs	r3, #1
 8002e62:	e032      	b.n	8002eca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f003 0304 	and.w	r3, r3, #4
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d008      	beq.n	8002e82 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e70:	4b19      	ldr	r3, [pc, #100]	; (8002ed8 <HAL_RCC_ClockConfig+0x1bc>)
 8002e72:	689b      	ldr	r3, [r3, #8]
 8002e74:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	68db      	ldr	r3, [r3, #12]
 8002e7c:	4916      	ldr	r1, [pc, #88]	; (8002ed8 <HAL_RCC_ClockConfig+0x1bc>)
 8002e7e:	4313      	orrs	r3, r2
 8002e80:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f003 0308 	and.w	r3, r3, #8
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d009      	beq.n	8002ea2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e8e:	4b12      	ldr	r3, [pc, #72]	; (8002ed8 <HAL_RCC_ClockConfig+0x1bc>)
 8002e90:	689b      	ldr	r3, [r3, #8]
 8002e92:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	691b      	ldr	r3, [r3, #16]
 8002e9a:	00db      	lsls	r3, r3, #3
 8002e9c:	490e      	ldr	r1, [pc, #56]	; (8002ed8 <HAL_RCC_ClockConfig+0x1bc>)
 8002e9e:	4313      	orrs	r3, r2
 8002ea0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002ea2:	f000 f821 	bl	8002ee8 <HAL_RCC_GetSysClockFreq>
 8002ea6:	4601      	mov	r1, r0
 8002ea8:	4b0b      	ldr	r3, [pc, #44]	; (8002ed8 <HAL_RCC_ClockConfig+0x1bc>)
 8002eaa:	689b      	ldr	r3, [r3, #8]
 8002eac:	091b      	lsrs	r3, r3, #4
 8002eae:	f003 030f 	and.w	r3, r3, #15
 8002eb2:	4a0a      	ldr	r2, [pc, #40]	; (8002edc <HAL_RCC_ClockConfig+0x1c0>)
 8002eb4:	5cd3      	ldrb	r3, [r2, r3]
 8002eb6:	fa21 f303 	lsr.w	r3, r1, r3
 8002eba:	4a09      	ldr	r2, [pc, #36]	; (8002ee0 <HAL_RCC_ClockConfig+0x1c4>)
 8002ebc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002ebe:	4b09      	ldr	r3, [pc, #36]	; (8002ee4 <HAL_RCC_ClockConfig+0x1c8>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	f7fe f97c 	bl	80011c0 <HAL_InitTick>

  return HAL_OK;
 8002ec8:	2300      	movs	r3, #0
}
 8002eca:	4618      	mov	r0, r3
 8002ecc:	3710      	adds	r7, #16
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bd80      	pop	{r7, pc}
 8002ed2:	bf00      	nop
 8002ed4:	40023c00 	.word	0x40023c00
 8002ed8:	40023800 	.word	0x40023800
 8002edc:	08004510 	.word	0x08004510
 8002ee0:	20000000 	.word	0x20000000
 8002ee4:	20000004 	.word	0x20000004

08002ee8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ee8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002eea:	b085      	sub	sp, #20
 8002eec:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002eee:	2300      	movs	r3, #0
 8002ef0:	607b      	str	r3, [r7, #4]
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	60fb      	str	r3, [r7, #12]
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002efa:	2300      	movs	r3, #0
 8002efc:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002efe:	4b50      	ldr	r3, [pc, #320]	; (8003040 <HAL_RCC_GetSysClockFreq+0x158>)
 8002f00:	689b      	ldr	r3, [r3, #8]
 8002f02:	f003 030c 	and.w	r3, r3, #12
 8002f06:	2b04      	cmp	r3, #4
 8002f08:	d007      	beq.n	8002f1a <HAL_RCC_GetSysClockFreq+0x32>
 8002f0a:	2b08      	cmp	r3, #8
 8002f0c:	d008      	beq.n	8002f20 <HAL_RCC_GetSysClockFreq+0x38>
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	f040 808d 	bne.w	800302e <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002f14:	4b4b      	ldr	r3, [pc, #300]	; (8003044 <HAL_RCC_GetSysClockFreq+0x15c>)
 8002f16:	60bb      	str	r3, [r7, #8]
       break;
 8002f18:	e08c      	b.n	8003034 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002f1a:	4b4b      	ldr	r3, [pc, #300]	; (8003048 <HAL_RCC_GetSysClockFreq+0x160>)
 8002f1c:	60bb      	str	r3, [r7, #8]
      break;
 8002f1e:	e089      	b.n	8003034 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002f20:	4b47      	ldr	r3, [pc, #284]	; (8003040 <HAL_RCC_GetSysClockFreq+0x158>)
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002f28:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002f2a:	4b45      	ldr	r3, [pc, #276]	; (8003040 <HAL_RCC_GetSysClockFreq+0x158>)
 8002f2c:	685b      	ldr	r3, [r3, #4]
 8002f2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d023      	beq.n	8002f7e <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f36:	4b42      	ldr	r3, [pc, #264]	; (8003040 <HAL_RCC_GetSysClockFreq+0x158>)
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	099b      	lsrs	r3, r3, #6
 8002f3c:	f04f 0400 	mov.w	r4, #0
 8002f40:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002f44:	f04f 0200 	mov.w	r2, #0
 8002f48:	ea03 0501 	and.w	r5, r3, r1
 8002f4c:	ea04 0602 	and.w	r6, r4, r2
 8002f50:	4a3d      	ldr	r2, [pc, #244]	; (8003048 <HAL_RCC_GetSysClockFreq+0x160>)
 8002f52:	fb02 f106 	mul.w	r1, r2, r6
 8002f56:	2200      	movs	r2, #0
 8002f58:	fb02 f205 	mul.w	r2, r2, r5
 8002f5c:	440a      	add	r2, r1
 8002f5e:	493a      	ldr	r1, [pc, #232]	; (8003048 <HAL_RCC_GetSysClockFreq+0x160>)
 8002f60:	fba5 0101 	umull	r0, r1, r5, r1
 8002f64:	1853      	adds	r3, r2, r1
 8002f66:	4619      	mov	r1, r3
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	f04f 0400 	mov.w	r4, #0
 8002f6e:	461a      	mov	r2, r3
 8002f70:	4623      	mov	r3, r4
 8002f72:	f7fd f98d 	bl	8000290 <__aeabi_uldivmod>
 8002f76:	4603      	mov	r3, r0
 8002f78:	460c      	mov	r4, r1
 8002f7a:	60fb      	str	r3, [r7, #12]
 8002f7c:	e049      	b.n	8003012 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f7e:	4b30      	ldr	r3, [pc, #192]	; (8003040 <HAL_RCC_GetSysClockFreq+0x158>)
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	099b      	lsrs	r3, r3, #6
 8002f84:	f04f 0400 	mov.w	r4, #0
 8002f88:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002f8c:	f04f 0200 	mov.w	r2, #0
 8002f90:	ea03 0501 	and.w	r5, r3, r1
 8002f94:	ea04 0602 	and.w	r6, r4, r2
 8002f98:	4629      	mov	r1, r5
 8002f9a:	4632      	mov	r2, r6
 8002f9c:	f04f 0300 	mov.w	r3, #0
 8002fa0:	f04f 0400 	mov.w	r4, #0
 8002fa4:	0154      	lsls	r4, r2, #5
 8002fa6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002faa:	014b      	lsls	r3, r1, #5
 8002fac:	4619      	mov	r1, r3
 8002fae:	4622      	mov	r2, r4
 8002fb0:	1b49      	subs	r1, r1, r5
 8002fb2:	eb62 0206 	sbc.w	r2, r2, r6
 8002fb6:	f04f 0300 	mov.w	r3, #0
 8002fba:	f04f 0400 	mov.w	r4, #0
 8002fbe:	0194      	lsls	r4, r2, #6
 8002fc0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002fc4:	018b      	lsls	r3, r1, #6
 8002fc6:	1a5b      	subs	r3, r3, r1
 8002fc8:	eb64 0402 	sbc.w	r4, r4, r2
 8002fcc:	f04f 0100 	mov.w	r1, #0
 8002fd0:	f04f 0200 	mov.w	r2, #0
 8002fd4:	00e2      	lsls	r2, r4, #3
 8002fd6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002fda:	00d9      	lsls	r1, r3, #3
 8002fdc:	460b      	mov	r3, r1
 8002fde:	4614      	mov	r4, r2
 8002fe0:	195b      	adds	r3, r3, r5
 8002fe2:	eb44 0406 	adc.w	r4, r4, r6
 8002fe6:	f04f 0100 	mov.w	r1, #0
 8002fea:	f04f 0200 	mov.w	r2, #0
 8002fee:	02a2      	lsls	r2, r4, #10
 8002ff0:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002ff4:	0299      	lsls	r1, r3, #10
 8002ff6:	460b      	mov	r3, r1
 8002ff8:	4614      	mov	r4, r2
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	4621      	mov	r1, r4
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	f04f 0400 	mov.w	r4, #0
 8003004:	461a      	mov	r2, r3
 8003006:	4623      	mov	r3, r4
 8003008:	f7fd f942 	bl	8000290 <__aeabi_uldivmod>
 800300c:	4603      	mov	r3, r0
 800300e:	460c      	mov	r4, r1
 8003010:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003012:	4b0b      	ldr	r3, [pc, #44]	; (8003040 <HAL_RCC_GetSysClockFreq+0x158>)
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	0c1b      	lsrs	r3, r3, #16
 8003018:	f003 0303 	and.w	r3, r3, #3
 800301c:	3301      	adds	r3, #1
 800301e:	005b      	lsls	r3, r3, #1
 8003020:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003022:	68fa      	ldr	r2, [r7, #12]
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	fbb2 f3f3 	udiv	r3, r2, r3
 800302a:	60bb      	str	r3, [r7, #8]
      break;
 800302c:	e002      	b.n	8003034 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800302e:	4b05      	ldr	r3, [pc, #20]	; (8003044 <HAL_RCC_GetSysClockFreq+0x15c>)
 8003030:	60bb      	str	r3, [r7, #8]
      break;
 8003032:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003034:	68bb      	ldr	r3, [r7, #8]
}
 8003036:	4618      	mov	r0, r3
 8003038:	3714      	adds	r7, #20
 800303a:	46bd      	mov	sp, r7
 800303c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800303e:	bf00      	nop
 8003040:	40023800 	.word	0x40023800
 8003044:	00f42400 	.word	0x00f42400
 8003048:	017d7840 	.word	0x017d7840

0800304c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800304c:	b480      	push	{r7}
 800304e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003050:	4b03      	ldr	r3, [pc, #12]	; (8003060 <HAL_RCC_GetHCLKFreq+0x14>)
 8003052:	681b      	ldr	r3, [r3, #0]
}
 8003054:	4618      	mov	r0, r3
 8003056:	46bd      	mov	sp, r7
 8003058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305c:	4770      	bx	lr
 800305e:	bf00      	nop
 8003060:	20000000 	.word	0x20000000

08003064 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003068:	f7ff fff0 	bl	800304c <HAL_RCC_GetHCLKFreq>
 800306c:	4601      	mov	r1, r0
 800306e:	4b05      	ldr	r3, [pc, #20]	; (8003084 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003070:	689b      	ldr	r3, [r3, #8]
 8003072:	0a9b      	lsrs	r3, r3, #10
 8003074:	f003 0307 	and.w	r3, r3, #7
 8003078:	4a03      	ldr	r2, [pc, #12]	; (8003088 <HAL_RCC_GetPCLK1Freq+0x24>)
 800307a:	5cd3      	ldrb	r3, [r2, r3]
 800307c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003080:	4618      	mov	r0, r3
 8003082:	bd80      	pop	{r7, pc}
 8003084:	40023800 	.word	0x40023800
 8003088:	08004520 	.word	0x08004520

0800308c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003090:	f7ff ffdc 	bl	800304c <HAL_RCC_GetHCLKFreq>
 8003094:	4601      	mov	r1, r0
 8003096:	4b05      	ldr	r3, [pc, #20]	; (80030ac <HAL_RCC_GetPCLK2Freq+0x20>)
 8003098:	689b      	ldr	r3, [r3, #8]
 800309a:	0b5b      	lsrs	r3, r3, #13
 800309c:	f003 0307 	and.w	r3, r3, #7
 80030a0:	4a03      	ldr	r2, [pc, #12]	; (80030b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80030a2:	5cd3      	ldrb	r3, [r2, r3]
 80030a4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80030a8:	4618      	mov	r0, r3
 80030aa:	bd80      	pop	{r7, pc}
 80030ac:	40023800 	.word	0x40023800
 80030b0:	08004520 	.word	0x08004520

080030b4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b082      	sub	sp, #8
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d101      	bne.n	80030c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80030c2:	2301      	movs	r3, #1
 80030c4:	e03f      	b.n	8003146 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80030cc:	b2db      	uxtb	r3, r3
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d106      	bne.n	80030e0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2200      	movs	r2, #0
 80030d6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80030da:	6878      	ldr	r0, [r7, #4]
 80030dc:	f7fd ff5e 	bl	8000f9c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2224      	movs	r2, #36	; 0x24
 80030e4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	68da      	ldr	r2, [r3, #12]
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80030f6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80030f8:	6878      	ldr	r0, [r7, #4]
 80030fa:	f000 f90b 	bl	8003314 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	691a      	ldr	r2, [r3, #16]
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800310c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	695a      	ldr	r2, [r3, #20]
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800311c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	68da      	ldr	r2, [r3, #12]
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800312c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2200      	movs	r2, #0
 8003132:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2220      	movs	r2, #32
 8003138:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2220      	movs	r2, #32
 8003140:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003144:	2300      	movs	r3, #0
}
 8003146:	4618      	mov	r0, r3
 8003148:	3708      	adds	r7, #8
 800314a:	46bd      	mov	sp, r7
 800314c:	bd80      	pop	{r7, pc}

0800314e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800314e:	b580      	push	{r7, lr}
 8003150:	b088      	sub	sp, #32
 8003152:	af02      	add	r7, sp, #8
 8003154:	60f8      	str	r0, [r7, #12]
 8003156:	60b9      	str	r1, [r7, #8]
 8003158:	603b      	str	r3, [r7, #0]
 800315a:	4613      	mov	r3, r2
 800315c:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800315e:	2300      	movs	r3, #0
 8003160:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003168:	b2db      	uxtb	r3, r3
 800316a:	2b20      	cmp	r3, #32
 800316c:	f040 8083 	bne.w	8003276 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8003170:	68bb      	ldr	r3, [r7, #8]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d002      	beq.n	800317c <HAL_UART_Transmit+0x2e>
 8003176:	88fb      	ldrh	r3, [r7, #6]
 8003178:	2b00      	cmp	r3, #0
 800317a:	d101      	bne.n	8003180 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 800317c:	2301      	movs	r3, #1
 800317e:	e07b      	b.n	8003278 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003186:	2b01      	cmp	r3, #1
 8003188:	d101      	bne.n	800318e <HAL_UART_Transmit+0x40>
 800318a:	2302      	movs	r3, #2
 800318c:	e074      	b.n	8003278 <HAL_UART_Transmit+0x12a>
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	2201      	movs	r2, #1
 8003192:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	2200      	movs	r2, #0
 800319a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	2221      	movs	r2, #33	; 0x21
 80031a0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80031a4:	f7fe f850 	bl	8001248 <HAL_GetTick>
 80031a8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	88fa      	ldrh	r2, [r7, #6]
 80031ae:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	88fa      	ldrh	r2, [r7, #6]
 80031b4:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	2200      	movs	r2, #0
 80031ba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80031be:	e042      	b.n	8003246 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80031c4:	b29b      	uxth	r3, r3
 80031c6:	3b01      	subs	r3, #1
 80031c8:	b29a      	uxth	r2, r3
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	689b      	ldr	r3, [r3, #8]
 80031d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031d6:	d122      	bne.n	800321e <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	9300      	str	r3, [sp, #0]
 80031dc:	697b      	ldr	r3, [r7, #20]
 80031de:	2200      	movs	r2, #0
 80031e0:	2180      	movs	r1, #128	; 0x80
 80031e2:	68f8      	ldr	r0, [r7, #12]
 80031e4:	f000 f84c 	bl	8003280 <UART_WaitOnFlagUntilTimeout>
 80031e8:	4603      	mov	r3, r0
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d001      	beq.n	80031f2 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 80031ee:	2303      	movs	r3, #3
 80031f0:	e042      	b.n	8003278 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80031f2:	68bb      	ldr	r3, [r7, #8]
 80031f4:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80031f6:	693b      	ldr	r3, [r7, #16]
 80031f8:	881b      	ldrh	r3, [r3, #0]
 80031fa:	461a      	mov	r2, r3
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003204:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	691b      	ldr	r3, [r3, #16]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d103      	bne.n	8003216 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 800320e:	68bb      	ldr	r3, [r7, #8]
 8003210:	3302      	adds	r3, #2
 8003212:	60bb      	str	r3, [r7, #8]
 8003214:	e017      	b.n	8003246 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8003216:	68bb      	ldr	r3, [r7, #8]
 8003218:	3301      	adds	r3, #1
 800321a:	60bb      	str	r3, [r7, #8]
 800321c:	e013      	b.n	8003246 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	9300      	str	r3, [sp, #0]
 8003222:	697b      	ldr	r3, [r7, #20]
 8003224:	2200      	movs	r2, #0
 8003226:	2180      	movs	r1, #128	; 0x80
 8003228:	68f8      	ldr	r0, [r7, #12]
 800322a:	f000 f829 	bl	8003280 <UART_WaitOnFlagUntilTimeout>
 800322e:	4603      	mov	r3, r0
 8003230:	2b00      	cmp	r3, #0
 8003232:	d001      	beq.n	8003238 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8003234:	2303      	movs	r3, #3
 8003236:	e01f      	b.n	8003278 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8003238:	68bb      	ldr	r3, [r7, #8]
 800323a:	1c5a      	adds	r2, r3, #1
 800323c:	60ba      	str	r2, [r7, #8]
 800323e:	781a      	ldrb	r2, [r3, #0]
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800324a:	b29b      	uxth	r3, r3
 800324c:	2b00      	cmp	r3, #0
 800324e:	d1b7      	bne.n	80031c0 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	9300      	str	r3, [sp, #0]
 8003254:	697b      	ldr	r3, [r7, #20]
 8003256:	2200      	movs	r2, #0
 8003258:	2140      	movs	r1, #64	; 0x40
 800325a:	68f8      	ldr	r0, [r7, #12]
 800325c:	f000 f810 	bl	8003280 <UART_WaitOnFlagUntilTimeout>
 8003260:	4603      	mov	r3, r0
 8003262:	2b00      	cmp	r3, #0
 8003264:	d001      	beq.n	800326a <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8003266:	2303      	movs	r3, #3
 8003268:	e006      	b.n	8003278 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	2220      	movs	r2, #32
 800326e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8003272:	2300      	movs	r3, #0
 8003274:	e000      	b.n	8003278 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8003276:	2302      	movs	r3, #2
  }
}
 8003278:	4618      	mov	r0, r3
 800327a:	3718      	adds	r7, #24
 800327c:	46bd      	mov	sp, r7
 800327e:	bd80      	pop	{r7, pc}

08003280 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b084      	sub	sp, #16
 8003284:	af00      	add	r7, sp, #0
 8003286:	60f8      	str	r0, [r7, #12]
 8003288:	60b9      	str	r1, [r7, #8]
 800328a:	603b      	str	r3, [r7, #0]
 800328c:	4613      	mov	r3, r2
 800328e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003290:	e02c      	b.n	80032ec <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003292:	69bb      	ldr	r3, [r7, #24]
 8003294:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003298:	d028      	beq.n	80032ec <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800329a:	69bb      	ldr	r3, [r7, #24]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d007      	beq.n	80032b0 <UART_WaitOnFlagUntilTimeout+0x30>
 80032a0:	f7fd ffd2 	bl	8001248 <HAL_GetTick>
 80032a4:	4602      	mov	r2, r0
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	1ad3      	subs	r3, r2, r3
 80032aa:	69ba      	ldr	r2, [r7, #24]
 80032ac:	429a      	cmp	r2, r3
 80032ae:	d21d      	bcs.n	80032ec <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	68da      	ldr	r2, [r3, #12]
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80032be:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	695a      	ldr	r2, [r3, #20]
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f022 0201 	bic.w	r2, r2, #1
 80032ce:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	2220      	movs	r2, #32
 80032d4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	2220      	movs	r2, #32
 80032dc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	2200      	movs	r2, #0
 80032e4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80032e8:	2303      	movs	r3, #3
 80032ea:	e00f      	b.n	800330c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	681a      	ldr	r2, [r3, #0]
 80032f2:	68bb      	ldr	r3, [r7, #8]
 80032f4:	4013      	ands	r3, r2
 80032f6:	68ba      	ldr	r2, [r7, #8]
 80032f8:	429a      	cmp	r2, r3
 80032fa:	bf0c      	ite	eq
 80032fc:	2301      	moveq	r3, #1
 80032fe:	2300      	movne	r3, #0
 8003300:	b2db      	uxtb	r3, r3
 8003302:	461a      	mov	r2, r3
 8003304:	79fb      	ldrb	r3, [r7, #7]
 8003306:	429a      	cmp	r2, r3
 8003308:	d0c3      	beq.n	8003292 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800330a:	2300      	movs	r3, #0
}
 800330c:	4618      	mov	r0, r3
 800330e:	3710      	adds	r7, #16
 8003310:	46bd      	mov	sp, r7
 8003312:	bd80      	pop	{r7, pc}

08003314 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003314:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003318:	b085      	sub	sp, #20
 800331a:	af00      	add	r7, sp, #0
 800331c:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	691b      	ldr	r3, [r3, #16]
 8003324:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	68da      	ldr	r2, [r3, #12]
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	430a      	orrs	r2, r1
 8003332:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	689a      	ldr	r2, [r3, #8]
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	691b      	ldr	r3, [r3, #16]
 800333c:	431a      	orrs	r2, r3
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	695b      	ldr	r3, [r3, #20]
 8003342:	431a      	orrs	r2, r3
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	69db      	ldr	r3, [r3, #28]
 8003348:	4313      	orrs	r3, r2
 800334a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	68db      	ldr	r3, [r3, #12]
 8003352:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003356:	f023 030c 	bic.w	r3, r3, #12
 800335a:	687a      	ldr	r2, [r7, #4]
 800335c:	6812      	ldr	r2, [r2, #0]
 800335e:	68f9      	ldr	r1, [r7, #12]
 8003360:	430b      	orrs	r3, r1
 8003362:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	695b      	ldr	r3, [r3, #20]
 800336a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	699a      	ldr	r2, [r3, #24]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	430a      	orrs	r2, r1
 8003378:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	69db      	ldr	r3, [r3, #28]
 800337e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003382:	f040 818b 	bne.w	800369c <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4ac1      	ldr	r2, [pc, #772]	; (8003690 <UART_SetConfig+0x37c>)
 800338c:	4293      	cmp	r3, r2
 800338e:	d005      	beq.n	800339c <UART_SetConfig+0x88>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4abf      	ldr	r2, [pc, #764]	; (8003694 <UART_SetConfig+0x380>)
 8003396:	4293      	cmp	r3, r2
 8003398:	f040 80bd 	bne.w	8003516 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800339c:	f7ff fe76 	bl	800308c <HAL_RCC_GetPCLK2Freq>
 80033a0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80033a2:	68bb      	ldr	r3, [r7, #8]
 80033a4:	461d      	mov	r5, r3
 80033a6:	f04f 0600 	mov.w	r6, #0
 80033aa:	46a8      	mov	r8, r5
 80033ac:	46b1      	mov	r9, r6
 80033ae:	eb18 0308 	adds.w	r3, r8, r8
 80033b2:	eb49 0409 	adc.w	r4, r9, r9
 80033b6:	4698      	mov	r8, r3
 80033b8:	46a1      	mov	r9, r4
 80033ba:	eb18 0805 	adds.w	r8, r8, r5
 80033be:	eb49 0906 	adc.w	r9, r9, r6
 80033c2:	f04f 0100 	mov.w	r1, #0
 80033c6:	f04f 0200 	mov.w	r2, #0
 80033ca:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80033ce:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80033d2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80033d6:	4688      	mov	r8, r1
 80033d8:	4691      	mov	r9, r2
 80033da:	eb18 0005 	adds.w	r0, r8, r5
 80033de:	eb49 0106 	adc.w	r1, r9, r6
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	685b      	ldr	r3, [r3, #4]
 80033e6:	461d      	mov	r5, r3
 80033e8:	f04f 0600 	mov.w	r6, #0
 80033ec:	196b      	adds	r3, r5, r5
 80033ee:	eb46 0406 	adc.w	r4, r6, r6
 80033f2:	461a      	mov	r2, r3
 80033f4:	4623      	mov	r3, r4
 80033f6:	f7fc ff4b 	bl	8000290 <__aeabi_uldivmod>
 80033fa:	4603      	mov	r3, r0
 80033fc:	460c      	mov	r4, r1
 80033fe:	461a      	mov	r2, r3
 8003400:	4ba5      	ldr	r3, [pc, #660]	; (8003698 <UART_SetConfig+0x384>)
 8003402:	fba3 2302 	umull	r2, r3, r3, r2
 8003406:	095b      	lsrs	r3, r3, #5
 8003408:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800340c:	68bb      	ldr	r3, [r7, #8]
 800340e:	461d      	mov	r5, r3
 8003410:	f04f 0600 	mov.w	r6, #0
 8003414:	46a9      	mov	r9, r5
 8003416:	46b2      	mov	sl, r6
 8003418:	eb19 0309 	adds.w	r3, r9, r9
 800341c:	eb4a 040a 	adc.w	r4, sl, sl
 8003420:	4699      	mov	r9, r3
 8003422:	46a2      	mov	sl, r4
 8003424:	eb19 0905 	adds.w	r9, r9, r5
 8003428:	eb4a 0a06 	adc.w	sl, sl, r6
 800342c:	f04f 0100 	mov.w	r1, #0
 8003430:	f04f 0200 	mov.w	r2, #0
 8003434:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003438:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800343c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003440:	4689      	mov	r9, r1
 8003442:	4692      	mov	sl, r2
 8003444:	eb19 0005 	adds.w	r0, r9, r5
 8003448:	eb4a 0106 	adc.w	r1, sl, r6
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	461d      	mov	r5, r3
 8003452:	f04f 0600 	mov.w	r6, #0
 8003456:	196b      	adds	r3, r5, r5
 8003458:	eb46 0406 	adc.w	r4, r6, r6
 800345c:	461a      	mov	r2, r3
 800345e:	4623      	mov	r3, r4
 8003460:	f7fc ff16 	bl	8000290 <__aeabi_uldivmod>
 8003464:	4603      	mov	r3, r0
 8003466:	460c      	mov	r4, r1
 8003468:	461a      	mov	r2, r3
 800346a:	4b8b      	ldr	r3, [pc, #556]	; (8003698 <UART_SetConfig+0x384>)
 800346c:	fba3 1302 	umull	r1, r3, r3, r2
 8003470:	095b      	lsrs	r3, r3, #5
 8003472:	2164      	movs	r1, #100	; 0x64
 8003474:	fb01 f303 	mul.w	r3, r1, r3
 8003478:	1ad3      	subs	r3, r2, r3
 800347a:	00db      	lsls	r3, r3, #3
 800347c:	3332      	adds	r3, #50	; 0x32
 800347e:	4a86      	ldr	r2, [pc, #536]	; (8003698 <UART_SetConfig+0x384>)
 8003480:	fba2 2303 	umull	r2, r3, r2, r3
 8003484:	095b      	lsrs	r3, r3, #5
 8003486:	005b      	lsls	r3, r3, #1
 8003488:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800348c:	4498      	add	r8, r3
 800348e:	68bb      	ldr	r3, [r7, #8]
 8003490:	461d      	mov	r5, r3
 8003492:	f04f 0600 	mov.w	r6, #0
 8003496:	46a9      	mov	r9, r5
 8003498:	46b2      	mov	sl, r6
 800349a:	eb19 0309 	adds.w	r3, r9, r9
 800349e:	eb4a 040a 	adc.w	r4, sl, sl
 80034a2:	4699      	mov	r9, r3
 80034a4:	46a2      	mov	sl, r4
 80034a6:	eb19 0905 	adds.w	r9, r9, r5
 80034aa:	eb4a 0a06 	adc.w	sl, sl, r6
 80034ae:	f04f 0100 	mov.w	r1, #0
 80034b2:	f04f 0200 	mov.w	r2, #0
 80034b6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80034ba:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80034be:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80034c2:	4689      	mov	r9, r1
 80034c4:	4692      	mov	sl, r2
 80034c6:	eb19 0005 	adds.w	r0, r9, r5
 80034ca:	eb4a 0106 	adc.w	r1, sl, r6
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	685b      	ldr	r3, [r3, #4]
 80034d2:	461d      	mov	r5, r3
 80034d4:	f04f 0600 	mov.w	r6, #0
 80034d8:	196b      	adds	r3, r5, r5
 80034da:	eb46 0406 	adc.w	r4, r6, r6
 80034de:	461a      	mov	r2, r3
 80034e0:	4623      	mov	r3, r4
 80034e2:	f7fc fed5 	bl	8000290 <__aeabi_uldivmod>
 80034e6:	4603      	mov	r3, r0
 80034e8:	460c      	mov	r4, r1
 80034ea:	461a      	mov	r2, r3
 80034ec:	4b6a      	ldr	r3, [pc, #424]	; (8003698 <UART_SetConfig+0x384>)
 80034ee:	fba3 1302 	umull	r1, r3, r3, r2
 80034f2:	095b      	lsrs	r3, r3, #5
 80034f4:	2164      	movs	r1, #100	; 0x64
 80034f6:	fb01 f303 	mul.w	r3, r1, r3
 80034fa:	1ad3      	subs	r3, r2, r3
 80034fc:	00db      	lsls	r3, r3, #3
 80034fe:	3332      	adds	r3, #50	; 0x32
 8003500:	4a65      	ldr	r2, [pc, #404]	; (8003698 <UART_SetConfig+0x384>)
 8003502:	fba2 2303 	umull	r2, r3, r2, r3
 8003506:	095b      	lsrs	r3, r3, #5
 8003508:	f003 0207 	and.w	r2, r3, #7
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4442      	add	r2, r8
 8003512:	609a      	str	r2, [r3, #8]
 8003514:	e26f      	b.n	80039f6 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003516:	f7ff fda5 	bl	8003064 <HAL_RCC_GetPCLK1Freq>
 800351a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800351c:	68bb      	ldr	r3, [r7, #8]
 800351e:	461d      	mov	r5, r3
 8003520:	f04f 0600 	mov.w	r6, #0
 8003524:	46a8      	mov	r8, r5
 8003526:	46b1      	mov	r9, r6
 8003528:	eb18 0308 	adds.w	r3, r8, r8
 800352c:	eb49 0409 	adc.w	r4, r9, r9
 8003530:	4698      	mov	r8, r3
 8003532:	46a1      	mov	r9, r4
 8003534:	eb18 0805 	adds.w	r8, r8, r5
 8003538:	eb49 0906 	adc.w	r9, r9, r6
 800353c:	f04f 0100 	mov.w	r1, #0
 8003540:	f04f 0200 	mov.w	r2, #0
 8003544:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003548:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800354c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003550:	4688      	mov	r8, r1
 8003552:	4691      	mov	r9, r2
 8003554:	eb18 0005 	adds.w	r0, r8, r5
 8003558:	eb49 0106 	adc.w	r1, r9, r6
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	461d      	mov	r5, r3
 8003562:	f04f 0600 	mov.w	r6, #0
 8003566:	196b      	adds	r3, r5, r5
 8003568:	eb46 0406 	adc.w	r4, r6, r6
 800356c:	461a      	mov	r2, r3
 800356e:	4623      	mov	r3, r4
 8003570:	f7fc fe8e 	bl	8000290 <__aeabi_uldivmod>
 8003574:	4603      	mov	r3, r0
 8003576:	460c      	mov	r4, r1
 8003578:	461a      	mov	r2, r3
 800357a:	4b47      	ldr	r3, [pc, #284]	; (8003698 <UART_SetConfig+0x384>)
 800357c:	fba3 2302 	umull	r2, r3, r3, r2
 8003580:	095b      	lsrs	r3, r3, #5
 8003582:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003586:	68bb      	ldr	r3, [r7, #8]
 8003588:	461d      	mov	r5, r3
 800358a:	f04f 0600 	mov.w	r6, #0
 800358e:	46a9      	mov	r9, r5
 8003590:	46b2      	mov	sl, r6
 8003592:	eb19 0309 	adds.w	r3, r9, r9
 8003596:	eb4a 040a 	adc.w	r4, sl, sl
 800359a:	4699      	mov	r9, r3
 800359c:	46a2      	mov	sl, r4
 800359e:	eb19 0905 	adds.w	r9, r9, r5
 80035a2:	eb4a 0a06 	adc.w	sl, sl, r6
 80035a6:	f04f 0100 	mov.w	r1, #0
 80035aa:	f04f 0200 	mov.w	r2, #0
 80035ae:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80035b2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80035b6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80035ba:	4689      	mov	r9, r1
 80035bc:	4692      	mov	sl, r2
 80035be:	eb19 0005 	adds.w	r0, r9, r5
 80035c2:	eb4a 0106 	adc.w	r1, sl, r6
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	461d      	mov	r5, r3
 80035cc:	f04f 0600 	mov.w	r6, #0
 80035d0:	196b      	adds	r3, r5, r5
 80035d2:	eb46 0406 	adc.w	r4, r6, r6
 80035d6:	461a      	mov	r2, r3
 80035d8:	4623      	mov	r3, r4
 80035da:	f7fc fe59 	bl	8000290 <__aeabi_uldivmod>
 80035de:	4603      	mov	r3, r0
 80035e0:	460c      	mov	r4, r1
 80035e2:	461a      	mov	r2, r3
 80035e4:	4b2c      	ldr	r3, [pc, #176]	; (8003698 <UART_SetConfig+0x384>)
 80035e6:	fba3 1302 	umull	r1, r3, r3, r2
 80035ea:	095b      	lsrs	r3, r3, #5
 80035ec:	2164      	movs	r1, #100	; 0x64
 80035ee:	fb01 f303 	mul.w	r3, r1, r3
 80035f2:	1ad3      	subs	r3, r2, r3
 80035f4:	00db      	lsls	r3, r3, #3
 80035f6:	3332      	adds	r3, #50	; 0x32
 80035f8:	4a27      	ldr	r2, [pc, #156]	; (8003698 <UART_SetConfig+0x384>)
 80035fa:	fba2 2303 	umull	r2, r3, r2, r3
 80035fe:	095b      	lsrs	r3, r3, #5
 8003600:	005b      	lsls	r3, r3, #1
 8003602:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003606:	4498      	add	r8, r3
 8003608:	68bb      	ldr	r3, [r7, #8]
 800360a:	461d      	mov	r5, r3
 800360c:	f04f 0600 	mov.w	r6, #0
 8003610:	46a9      	mov	r9, r5
 8003612:	46b2      	mov	sl, r6
 8003614:	eb19 0309 	adds.w	r3, r9, r9
 8003618:	eb4a 040a 	adc.w	r4, sl, sl
 800361c:	4699      	mov	r9, r3
 800361e:	46a2      	mov	sl, r4
 8003620:	eb19 0905 	adds.w	r9, r9, r5
 8003624:	eb4a 0a06 	adc.w	sl, sl, r6
 8003628:	f04f 0100 	mov.w	r1, #0
 800362c:	f04f 0200 	mov.w	r2, #0
 8003630:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003634:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003638:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800363c:	4689      	mov	r9, r1
 800363e:	4692      	mov	sl, r2
 8003640:	eb19 0005 	adds.w	r0, r9, r5
 8003644:	eb4a 0106 	adc.w	r1, sl, r6
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	685b      	ldr	r3, [r3, #4]
 800364c:	461d      	mov	r5, r3
 800364e:	f04f 0600 	mov.w	r6, #0
 8003652:	196b      	adds	r3, r5, r5
 8003654:	eb46 0406 	adc.w	r4, r6, r6
 8003658:	461a      	mov	r2, r3
 800365a:	4623      	mov	r3, r4
 800365c:	f7fc fe18 	bl	8000290 <__aeabi_uldivmod>
 8003660:	4603      	mov	r3, r0
 8003662:	460c      	mov	r4, r1
 8003664:	461a      	mov	r2, r3
 8003666:	4b0c      	ldr	r3, [pc, #48]	; (8003698 <UART_SetConfig+0x384>)
 8003668:	fba3 1302 	umull	r1, r3, r3, r2
 800366c:	095b      	lsrs	r3, r3, #5
 800366e:	2164      	movs	r1, #100	; 0x64
 8003670:	fb01 f303 	mul.w	r3, r1, r3
 8003674:	1ad3      	subs	r3, r2, r3
 8003676:	00db      	lsls	r3, r3, #3
 8003678:	3332      	adds	r3, #50	; 0x32
 800367a:	4a07      	ldr	r2, [pc, #28]	; (8003698 <UART_SetConfig+0x384>)
 800367c:	fba2 2303 	umull	r2, r3, r2, r3
 8003680:	095b      	lsrs	r3, r3, #5
 8003682:	f003 0207 	and.w	r2, r3, #7
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4442      	add	r2, r8
 800368c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800368e:	e1b2      	b.n	80039f6 <UART_SetConfig+0x6e2>
 8003690:	40011000 	.word	0x40011000
 8003694:	40011400 	.word	0x40011400
 8003698:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4ad7      	ldr	r2, [pc, #860]	; (8003a00 <UART_SetConfig+0x6ec>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d005      	beq.n	80036b2 <UART_SetConfig+0x39e>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4ad6      	ldr	r2, [pc, #856]	; (8003a04 <UART_SetConfig+0x6f0>)
 80036ac:	4293      	cmp	r3, r2
 80036ae:	f040 80d1 	bne.w	8003854 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80036b2:	f7ff fceb 	bl	800308c <HAL_RCC_GetPCLK2Freq>
 80036b6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80036b8:	68bb      	ldr	r3, [r7, #8]
 80036ba:	469a      	mov	sl, r3
 80036bc:	f04f 0b00 	mov.w	fp, #0
 80036c0:	46d0      	mov	r8, sl
 80036c2:	46d9      	mov	r9, fp
 80036c4:	eb18 0308 	adds.w	r3, r8, r8
 80036c8:	eb49 0409 	adc.w	r4, r9, r9
 80036cc:	4698      	mov	r8, r3
 80036ce:	46a1      	mov	r9, r4
 80036d0:	eb18 080a 	adds.w	r8, r8, sl
 80036d4:	eb49 090b 	adc.w	r9, r9, fp
 80036d8:	f04f 0100 	mov.w	r1, #0
 80036dc:	f04f 0200 	mov.w	r2, #0
 80036e0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80036e4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80036e8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80036ec:	4688      	mov	r8, r1
 80036ee:	4691      	mov	r9, r2
 80036f0:	eb1a 0508 	adds.w	r5, sl, r8
 80036f4:	eb4b 0609 	adc.w	r6, fp, r9
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	685b      	ldr	r3, [r3, #4]
 80036fc:	4619      	mov	r1, r3
 80036fe:	f04f 0200 	mov.w	r2, #0
 8003702:	f04f 0300 	mov.w	r3, #0
 8003706:	f04f 0400 	mov.w	r4, #0
 800370a:	0094      	lsls	r4, r2, #2
 800370c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003710:	008b      	lsls	r3, r1, #2
 8003712:	461a      	mov	r2, r3
 8003714:	4623      	mov	r3, r4
 8003716:	4628      	mov	r0, r5
 8003718:	4631      	mov	r1, r6
 800371a:	f7fc fdb9 	bl	8000290 <__aeabi_uldivmod>
 800371e:	4603      	mov	r3, r0
 8003720:	460c      	mov	r4, r1
 8003722:	461a      	mov	r2, r3
 8003724:	4bb8      	ldr	r3, [pc, #736]	; (8003a08 <UART_SetConfig+0x6f4>)
 8003726:	fba3 2302 	umull	r2, r3, r3, r2
 800372a:	095b      	lsrs	r3, r3, #5
 800372c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003730:	68bb      	ldr	r3, [r7, #8]
 8003732:	469b      	mov	fp, r3
 8003734:	f04f 0c00 	mov.w	ip, #0
 8003738:	46d9      	mov	r9, fp
 800373a:	46e2      	mov	sl, ip
 800373c:	eb19 0309 	adds.w	r3, r9, r9
 8003740:	eb4a 040a 	adc.w	r4, sl, sl
 8003744:	4699      	mov	r9, r3
 8003746:	46a2      	mov	sl, r4
 8003748:	eb19 090b 	adds.w	r9, r9, fp
 800374c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003750:	f04f 0100 	mov.w	r1, #0
 8003754:	f04f 0200 	mov.w	r2, #0
 8003758:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800375c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003760:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003764:	4689      	mov	r9, r1
 8003766:	4692      	mov	sl, r2
 8003768:	eb1b 0509 	adds.w	r5, fp, r9
 800376c:	eb4c 060a 	adc.w	r6, ip, sl
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	4619      	mov	r1, r3
 8003776:	f04f 0200 	mov.w	r2, #0
 800377a:	f04f 0300 	mov.w	r3, #0
 800377e:	f04f 0400 	mov.w	r4, #0
 8003782:	0094      	lsls	r4, r2, #2
 8003784:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003788:	008b      	lsls	r3, r1, #2
 800378a:	461a      	mov	r2, r3
 800378c:	4623      	mov	r3, r4
 800378e:	4628      	mov	r0, r5
 8003790:	4631      	mov	r1, r6
 8003792:	f7fc fd7d 	bl	8000290 <__aeabi_uldivmod>
 8003796:	4603      	mov	r3, r0
 8003798:	460c      	mov	r4, r1
 800379a:	461a      	mov	r2, r3
 800379c:	4b9a      	ldr	r3, [pc, #616]	; (8003a08 <UART_SetConfig+0x6f4>)
 800379e:	fba3 1302 	umull	r1, r3, r3, r2
 80037a2:	095b      	lsrs	r3, r3, #5
 80037a4:	2164      	movs	r1, #100	; 0x64
 80037a6:	fb01 f303 	mul.w	r3, r1, r3
 80037aa:	1ad3      	subs	r3, r2, r3
 80037ac:	011b      	lsls	r3, r3, #4
 80037ae:	3332      	adds	r3, #50	; 0x32
 80037b0:	4a95      	ldr	r2, [pc, #596]	; (8003a08 <UART_SetConfig+0x6f4>)
 80037b2:	fba2 2303 	umull	r2, r3, r2, r3
 80037b6:	095b      	lsrs	r3, r3, #5
 80037b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80037bc:	4498      	add	r8, r3
 80037be:	68bb      	ldr	r3, [r7, #8]
 80037c0:	469b      	mov	fp, r3
 80037c2:	f04f 0c00 	mov.w	ip, #0
 80037c6:	46d9      	mov	r9, fp
 80037c8:	46e2      	mov	sl, ip
 80037ca:	eb19 0309 	adds.w	r3, r9, r9
 80037ce:	eb4a 040a 	adc.w	r4, sl, sl
 80037d2:	4699      	mov	r9, r3
 80037d4:	46a2      	mov	sl, r4
 80037d6:	eb19 090b 	adds.w	r9, r9, fp
 80037da:	eb4a 0a0c 	adc.w	sl, sl, ip
 80037de:	f04f 0100 	mov.w	r1, #0
 80037e2:	f04f 0200 	mov.w	r2, #0
 80037e6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80037ea:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80037ee:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80037f2:	4689      	mov	r9, r1
 80037f4:	4692      	mov	sl, r2
 80037f6:	eb1b 0509 	adds.w	r5, fp, r9
 80037fa:	eb4c 060a 	adc.w	r6, ip, sl
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	685b      	ldr	r3, [r3, #4]
 8003802:	4619      	mov	r1, r3
 8003804:	f04f 0200 	mov.w	r2, #0
 8003808:	f04f 0300 	mov.w	r3, #0
 800380c:	f04f 0400 	mov.w	r4, #0
 8003810:	0094      	lsls	r4, r2, #2
 8003812:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003816:	008b      	lsls	r3, r1, #2
 8003818:	461a      	mov	r2, r3
 800381a:	4623      	mov	r3, r4
 800381c:	4628      	mov	r0, r5
 800381e:	4631      	mov	r1, r6
 8003820:	f7fc fd36 	bl	8000290 <__aeabi_uldivmod>
 8003824:	4603      	mov	r3, r0
 8003826:	460c      	mov	r4, r1
 8003828:	461a      	mov	r2, r3
 800382a:	4b77      	ldr	r3, [pc, #476]	; (8003a08 <UART_SetConfig+0x6f4>)
 800382c:	fba3 1302 	umull	r1, r3, r3, r2
 8003830:	095b      	lsrs	r3, r3, #5
 8003832:	2164      	movs	r1, #100	; 0x64
 8003834:	fb01 f303 	mul.w	r3, r1, r3
 8003838:	1ad3      	subs	r3, r2, r3
 800383a:	011b      	lsls	r3, r3, #4
 800383c:	3332      	adds	r3, #50	; 0x32
 800383e:	4a72      	ldr	r2, [pc, #456]	; (8003a08 <UART_SetConfig+0x6f4>)
 8003840:	fba2 2303 	umull	r2, r3, r2, r3
 8003844:	095b      	lsrs	r3, r3, #5
 8003846:	f003 020f 	and.w	r2, r3, #15
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	4442      	add	r2, r8
 8003850:	609a      	str	r2, [r3, #8]
 8003852:	e0d0      	b.n	80039f6 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8003854:	f7ff fc06 	bl	8003064 <HAL_RCC_GetPCLK1Freq>
 8003858:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800385a:	68bb      	ldr	r3, [r7, #8]
 800385c:	469a      	mov	sl, r3
 800385e:	f04f 0b00 	mov.w	fp, #0
 8003862:	46d0      	mov	r8, sl
 8003864:	46d9      	mov	r9, fp
 8003866:	eb18 0308 	adds.w	r3, r8, r8
 800386a:	eb49 0409 	adc.w	r4, r9, r9
 800386e:	4698      	mov	r8, r3
 8003870:	46a1      	mov	r9, r4
 8003872:	eb18 080a 	adds.w	r8, r8, sl
 8003876:	eb49 090b 	adc.w	r9, r9, fp
 800387a:	f04f 0100 	mov.w	r1, #0
 800387e:	f04f 0200 	mov.w	r2, #0
 8003882:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003886:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800388a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800388e:	4688      	mov	r8, r1
 8003890:	4691      	mov	r9, r2
 8003892:	eb1a 0508 	adds.w	r5, sl, r8
 8003896:	eb4b 0609 	adc.w	r6, fp, r9
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	685b      	ldr	r3, [r3, #4]
 800389e:	4619      	mov	r1, r3
 80038a0:	f04f 0200 	mov.w	r2, #0
 80038a4:	f04f 0300 	mov.w	r3, #0
 80038a8:	f04f 0400 	mov.w	r4, #0
 80038ac:	0094      	lsls	r4, r2, #2
 80038ae:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80038b2:	008b      	lsls	r3, r1, #2
 80038b4:	461a      	mov	r2, r3
 80038b6:	4623      	mov	r3, r4
 80038b8:	4628      	mov	r0, r5
 80038ba:	4631      	mov	r1, r6
 80038bc:	f7fc fce8 	bl	8000290 <__aeabi_uldivmod>
 80038c0:	4603      	mov	r3, r0
 80038c2:	460c      	mov	r4, r1
 80038c4:	461a      	mov	r2, r3
 80038c6:	4b50      	ldr	r3, [pc, #320]	; (8003a08 <UART_SetConfig+0x6f4>)
 80038c8:	fba3 2302 	umull	r2, r3, r3, r2
 80038cc:	095b      	lsrs	r3, r3, #5
 80038ce:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80038d2:	68bb      	ldr	r3, [r7, #8]
 80038d4:	469b      	mov	fp, r3
 80038d6:	f04f 0c00 	mov.w	ip, #0
 80038da:	46d9      	mov	r9, fp
 80038dc:	46e2      	mov	sl, ip
 80038de:	eb19 0309 	adds.w	r3, r9, r9
 80038e2:	eb4a 040a 	adc.w	r4, sl, sl
 80038e6:	4699      	mov	r9, r3
 80038e8:	46a2      	mov	sl, r4
 80038ea:	eb19 090b 	adds.w	r9, r9, fp
 80038ee:	eb4a 0a0c 	adc.w	sl, sl, ip
 80038f2:	f04f 0100 	mov.w	r1, #0
 80038f6:	f04f 0200 	mov.w	r2, #0
 80038fa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80038fe:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003902:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003906:	4689      	mov	r9, r1
 8003908:	4692      	mov	sl, r2
 800390a:	eb1b 0509 	adds.w	r5, fp, r9
 800390e:	eb4c 060a 	adc.w	r6, ip, sl
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	685b      	ldr	r3, [r3, #4]
 8003916:	4619      	mov	r1, r3
 8003918:	f04f 0200 	mov.w	r2, #0
 800391c:	f04f 0300 	mov.w	r3, #0
 8003920:	f04f 0400 	mov.w	r4, #0
 8003924:	0094      	lsls	r4, r2, #2
 8003926:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800392a:	008b      	lsls	r3, r1, #2
 800392c:	461a      	mov	r2, r3
 800392e:	4623      	mov	r3, r4
 8003930:	4628      	mov	r0, r5
 8003932:	4631      	mov	r1, r6
 8003934:	f7fc fcac 	bl	8000290 <__aeabi_uldivmod>
 8003938:	4603      	mov	r3, r0
 800393a:	460c      	mov	r4, r1
 800393c:	461a      	mov	r2, r3
 800393e:	4b32      	ldr	r3, [pc, #200]	; (8003a08 <UART_SetConfig+0x6f4>)
 8003940:	fba3 1302 	umull	r1, r3, r3, r2
 8003944:	095b      	lsrs	r3, r3, #5
 8003946:	2164      	movs	r1, #100	; 0x64
 8003948:	fb01 f303 	mul.w	r3, r1, r3
 800394c:	1ad3      	subs	r3, r2, r3
 800394e:	011b      	lsls	r3, r3, #4
 8003950:	3332      	adds	r3, #50	; 0x32
 8003952:	4a2d      	ldr	r2, [pc, #180]	; (8003a08 <UART_SetConfig+0x6f4>)
 8003954:	fba2 2303 	umull	r2, r3, r2, r3
 8003958:	095b      	lsrs	r3, r3, #5
 800395a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800395e:	4498      	add	r8, r3
 8003960:	68bb      	ldr	r3, [r7, #8]
 8003962:	469b      	mov	fp, r3
 8003964:	f04f 0c00 	mov.w	ip, #0
 8003968:	46d9      	mov	r9, fp
 800396a:	46e2      	mov	sl, ip
 800396c:	eb19 0309 	adds.w	r3, r9, r9
 8003970:	eb4a 040a 	adc.w	r4, sl, sl
 8003974:	4699      	mov	r9, r3
 8003976:	46a2      	mov	sl, r4
 8003978:	eb19 090b 	adds.w	r9, r9, fp
 800397c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003980:	f04f 0100 	mov.w	r1, #0
 8003984:	f04f 0200 	mov.w	r2, #0
 8003988:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800398c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003990:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003994:	4689      	mov	r9, r1
 8003996:	4692      	mov	sl, r2
 8003998:	eb1b 0509 	adds.w	r5, fp, r9
 800399c:	eb4c 060a 	adc.w	r6, ip, sl
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	685b      	ldr	r3, [r3, #4]
 80039a4:	4619      	mov	r1, r3
 80039a6:	f04f 0200 	mov.w	r2, #0
 80039aa:	f04f 0300 	mov.w	r3, #0
 80039ae:	f04f 0400 	mov.w	r4, #0
 80039b2:	0094      	lsls	r4, r2, #2
 80039b4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80039b8:	008b      	lsls	r3, r1, #2
 80039ba:	461a      	mov	r2, r3
 80039bc:	4623      	mov	r3, r4
 80039be:	4628      	mov	r0, r5
 80039c0:	4631      	mov	r1, r6
 80039c2:	f7fc fc65 	bl	8000290 <__aeabi_uldivmod>
 80039c6:	4603      	mov	r3, r0
 80039c8:	460c      	mov	r4, r1
 80039ca:	461a      	mov	r2, r3
 80039cc:	4b0e      	ldr	r3, [pc, #56]	; (8003a08 <UART_SetConfig+0x6f4>)
 80039ce:	fba3 1302 	umull	r1, r3, r3, r2
 80039d2:	095b      	lsrs	r3, r3, #5
 80039d4:	2164      	movs	r1, #100	; 0x64
 80039d6:	fb01 f303 	mul.w	r3, r1, r3
 80039da:	1ad3      	subs	r3, r2, r3
 80039dc:	011b      	lsls	r3, r3, #4
 80039de:	3332      	adds	r3, #50	; 0x32
 80039e0:	4a09      	ldr	r2, [pc, #36]	; (8003a08 <UART_SetConfig+0x6f4>)
 80039e2:	fba2 2303 	umull	r2, r3, r2, r3
 80039e6:	095b      	lsrs	r3, r3, #5
 80039e8:	f003 020f 	and.w	r2, r3, #15
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4442      	add	r2, r8
 80039f2:	609a      	str	r2, [r3, #8]
}
 80039f4:	e7ff      	b.n	80039f6 <UART_SetConfig+0x6e2>
 80039f6:	bf00      	nop
 80039f8:	3714      	adds	r7, #20
 80039fa:	46bd      	mov	sp, r7
 80039fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a00:	40011000 	.word	0x40011000
 8003a04:	40011400 	.word	0x40011400
 8003a08:	51eb851f 	.word	0x51eb851f

08003a0c <__errno>:
 8003a0c:	4b01      	ldr	r3, [pc, #4]	; (8003a14 <__errno+0x8>)
 8003a0e:	6818      	ldr	r0, [r3, #0]
 8003a10:	4770      	bx	lr
 8003a12:	bf00      	nop
 8003a14:	2000000c 	.word	0x2000000c

08003a18 <__libc_init_array>:
 8003a18:	b570      	push	{r4, r5, r6, lr}
 8003a1a:	4e0d      	ldr	r6, [pc, #52]	; (8003a50 <__libc_init_array+0x38>)
 8003a1c:	4c0d      	ldr	r4, [pc, #52]	; (8003a54 <__libc_init_array+0x3c>)
 8003a1e:	1ba4      	subs	r4, r4, r6
 8003a20:	10a4      	asrs	r4, r4, #2
 8003a22:	2500      	movs	r5, #0
 8003a24:	42a5      	cmp	r5, r4
 8003a26:	d109      	bne.n	8003a3c <__libc_init_array+0x24>
 8003a28:	4e0b      	ldr	r6, [pc, #44]	; (8003a58 <__libc_init_array+0x40>)
 8003a2a:	4c0c      	ldr	r4, [pc, #48]	; (8003a5c <__libc_init_array+0x44>)
 8003a2c:	f000 fc26 	bl	800427c <_init>
 8003a30:	1ba4      	subs	r4, r4, r6
 8003a32:	10a4      	asrs	r4, r4, #2
 8003a34:	2500      	movs	r5, #0
 8003a36:	42a5      	cmp	r5, r4
 8003a38:	d105      	bne.n	8003a46 <__libc_init_array+0x2e>
 8003a3a:	bd70      	pop	{r4, r5, r6, pc}
 8003a3c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003a40:	4798      	blx	r3
 8003a42:	3501      	adds	r5, #1
 8003a44:	e7ee      	b.n	8003a24 <__libc_init_array+0xc>
 8003a46:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003a4a:	4798      	blx	r3
 8003a4c:	3501      	adds	r5, #1
 8003a4e:	e7f2      	b.n	8003a36 <__libc_init_array+0x1e>
 8003a50:	08004564 	.word	0x08004564
 8003a54:	08004564 	.word	0x08004564
 8003a58:	08004564 	.word	0x08004564
 8003a5c:	08004568 	.word	0x08004568

08003a60 <memcpy>:
 8003a60:	b510      	push	{r4, lr}
 8003a62:	1e43      	subs	r3, r0, #1
 8003a64:	440a      	add	r2, r1
 8003a66:	4291      	cmp	r1, r2
 8003a68:	d100      	bne.n	8003a6c <memcpy+0xc>
 8003a6a:	bd10      	pop	{r4, pc}
 8003a6c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003a70:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003a74:	e7f7      	b.n	8003a66 <memcpy+0x6>

08003a76 <memmove>:
 8003a76:	4288      	cmp	r0, r1
 8003a78:	b510      	push	{r4, lr}
 8003a7a:	eb01 0302 	add.w	r3, r1, r2
 8003a7e:	d807      	bhi.n	8003a90 <memmove+0x1a>
 8003a80:	1e42      	subs	r2, r0, #1
 8003a82:	4299      	cmp	r1, r3
 8003a84:	d00a      	beq.n	8003a9c <memmove+0x26>
 8003a86:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003a8a:	f802 4f01 	strb.w	r4, [r2, #1]!
 8003a8e:	e7f8      	b.n	8003a82 <memmove+0xc>
 8003a90:	4283      	cmp	r3, r0
 8003a92:	d9f5      	bls.n	8003a80 <memmove+0xa>
 8003a94:	1881      	adds	r1, r0, r2
 8003a96:	1ad2      	subs	r2, r2, r3
 8003a98:	42d3      	cmn	r3, r2
 8003a9a:	d100      	bne.n	8003a9e <memmove+0x28>
 8003a9c:	bd10      	pop	{r4, pc}
 8003a9e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003aa2:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8003aa6:	e7f7      	b.n	8003a98 <memmove+0x22>

08003aa8 <memset>:
 8003aa8:	4402      	add	r2, r0
 8003aaa:	4603      	mov	r3, r0
 8003aac:	4293      	cmp	r3, r2
 8003aae:	d100      	bne.n	8003ab2 <memset+0xa>
 8003ab0:	4770      	bx	lr
 8003ab2:	f803 1b01 	strb.w	r1, [r3], #1
 8003ab6:	e7f9      	b.n	8003aac <memset+0x4>

08003ab8 <_vsiprintf_r>:
 8003ab8:	b500      	push	{lr}
 8003aba:	b09b      	sub	sp, #108	; 0x6c
 8003abc:	9100      	str	r1, [sp, #0]
 8003abe:	9104      	str	r1, [sp, #16]
 8003ac0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003ac4:	9105      	str	r1, [sp, #20]
 8003ac6:	9102      	str	r1, [sp, #8]
 8003ac8:	4905      	ldr	r1, [pc, #20]	; (8003ae0 <_vsiprintf_r+0x28>)
 8003aca:	9103      	str	r1, [sp, #12]
 8003acc:	4669      	mov	r1, sp
 8003ace:	f000 f86d 	bl	8003bac <_svfiprintf_r>
 8003ad2:	9b00      	ldr	r3, [sp, #0]
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	701a      	strb	r2, [r3, #0]
 8003ad8:	b01b      	add	sp, #108	; 0x6c
 8003ada:	f85d fb04 	ldr.w	pc, [sp], #4
 8003ade:	bf00      	nop
 8003ae0:	ffff0208 	.word	0xffff0208

08003ae4 <vsiprintf>:
 8003ae4:	4613      	mov	r3, r2
 8003ae6:	460a      	mov	r2, r1
 8003ae8:	4601      	mov	r1, r0
 8003aea:	4802      	ldr	r0, [pc, #8]	; (8003af4 <vsiprintf+0x10>)
 8003aec:	6800      	ldr	r0, [r0, #0]
 8003aee:	f7ff bfe3 	b.w	8003ab8 <_vsiprintf_r>
 8003af2:	bf00      	nop
 8003af4:	2000000c 	.word	0x2000000c

08003af8 <__ssputs_r>:
 8003af8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003afc:	688e      	ldr	r6, [r1, #8]
 8003afe:	429e      	cmp	r6, r3
 8003b00:	4682      	mov	sl, r0
 8003b02:	460c      	mov	r4, r1
 8003b04:	4690      	mov	r8, r2
 8003b06:	4699      	mov	r9, r3
 8003b08:	d837      	bhi.n	8003b7a <__ssputs_r+0x82>
 8003b0a:	898a      	ldrh	r2, [r1, #12]
 8003b0c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003b10:	d031      	beq.n	8003b76 <__ssputs_r+0x7e>
 8003b12:	6825      	ldr	r5, [r4, #0]
 8003b14:	6909      	ldr	r1, [r1, #16]
 8003b16:	1a6f      	subs	r7, r5, r1
 8003b18:	6965      	ldr	r5, [r4, #20]
 8003b1a:	2302      	movs	r3, #2
 8003b1c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003b20:	fb95 f5f3 	sdiv	r5, r5, r3
 8003b24:	f109 0301 	add.w	r3, r9, #1
 8003b28:	443b      	add	r3, r7
 8003b2a:	429d      	cmp	r5, r3
 8003b2c:	bf38      	it	cc
 8003b2e:	461d      	movcc	r5, r3
 8003b30:	0553      	lsls	r3, r2, #21
 8003b32:	d530      	bpl.n	8003b96 <__ssputs_r+0x9e>
 8003b34:	4629      	mov	r1, r5
 8003b36:	f000 fb07 	bl	8004148 <_malloc_r>
 8003b3a:	4606      	mov	r6, r0
 8003b3c:	b950      	cbnz	r0, 8003b54 <__ssputs_r+0x5c>
 8003b3e:	230c      	movs	r3, #12
 8003b40:	f8ca 3000 	str.w	r3, [sl]
 8003b44:	89a3      	ldrh	r3, [r4, #12]
 8003b46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003b4a:	81a3      	strh	r3, [r4, #12]
 8003b4c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003b50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b54:	463a      	mov	r2, r7
 8003b56:	6921      	ldr	r1, [r4, #16]
 8003b58:	f7ff ff82 	bl	8003a60 <memcpy>
 8003b5c:	89a3      	ldrh	r3, [r4, #12]
 8003b5e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003b62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b66:	81a3      	strh	r3, [r4, #12]
 8003b68:	6126      	str	r6, [r4, #16]
 8003b6a:	6165      	str	r5, [r4, #20]
 8003b6c:	443e      	add	r6, r7
 8003b6e:	1bed      	subs	r5, r5, r7
 8003b70:	6026      	str	r6, [r4, #0]
 8003b72:	60a5      	str	r5, [r4, #8]
 8003b74:	464e      	mov	r6, r9
 8003b76:	454e      	cmp	r6, r9
 8003b78:	d900      	bls.n	8003b7c <__ssputs_r+0x84>
 8003b7a:	464e      	mov	r6, r9
 8003b7c:	4632      	mov	r2, r6
 8003b7e:	4641      	mov	r1, r8
 8003b80:	6820      	ldr	r0, [r4, #0]
 8003b82:	f7ff ff78 	bl	8003a76 <memmove>
 8003b86:	68a3      	ldr	r3, [r4, #8]
 8003b88:	1b9b      	subs	r3, r3, r6
 8003b8a:	60a3      	str	r3, [r4, #8]
 8003b8c:	6823      	ldr	r3, [r4, #0]
 8003b8e:	441e      	add	r6, r3
 8003b90:	6026      	str	r6, [r4, #0]
 8003b92:	2000      	movs	r0, #0
 8003b94:	e7dc      	b.n	8003b50 <__ssputs_r+0x58>
 8003b96:	462a      	mov	r2, r5
 8003b98:	f000 fb30 	bl	80041fc <_realloc_r>
 8003b9c:	4606      	mov	r6, r0
 8003b9e:	2800      	cmp	r0, #0
 8003ba0:	d1e2      	bne.n	8003b68 <__ssputs_r+0x70>
 8003ba2:	6921      	ldr	r1, [r4, #16]
 8003ba4:	4650      	mov	r0, sl
 8003ba6:	f000 fa81 	bl	80040ac <_free_r>
 8003baa:	e7c8      	b.n	8003b3e <__ssputs_r+0x46>

08003bac <_svfiprintf_r>:
 8003bac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003bb0:	461d      	mov	r5, r3
 8003bb2:	898b      	ldrh	r3, [r1, #12]
 8003bb4:	061f      	lsls	r7, r3, #24
 8003bb6:	b09d      	sub	sp, #116	; 0x74
 8003bb8:	4680      	mov	r8, r0
 8003bba:	460c      	mov	r4, r1
 8003bbc:	4616      	mov	r6, r2
 8003bbe:	d50f      	bpl.n	8003be0 <_svfiprintf_r+0x34>
 8003bc0:	690b      	ldr	r3, [r1, #16]
 8003bc2:	b96b      	cbnz	r3, 8003be0 <_svfiprintf_r+0x34>
 8003bc4:	2140      	movs	r1, #64	; 0x40
 8003bc6:	f000 fabf 	bl	8004148 <_malloc_r>
 8003bca:	6020      	str	r0, [r4, #0]
 8003bcc:	6120      	str	r0, [r4, #16]
 8003bce:	b928      	cbnz	r0, 8003bdc <_svfiprintf_r+0x30>
 8003bd0:	230c      	movs	r3, #12
 8003bd2:	f8c8 3000 	str.w	r3, [r8]
 8003bd6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003bda:	e0c8      	b.n	8003d6e <_svfiprintf_r+0x1c2>
 8003bdc:	2340      	movs	r3, #64	; 0x40
 8003bde:	6163      	str	r3, [r4, #20]
 8003be0:	2300      	movs	r3, #0
 8003be2:	9309      	str	r3, [sp, #36]	; 0x24
 8003be4:	2320      	movs	r3, #32
 8003be6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003bea:	2330      	movs	r3, #48	; 0x30
 8003bec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003bf0:	9503      	str	r5, [sp, #12]
 8003bf2:	f04f 0b01 	mov.w	fp, #1
 8003bf6:	4637      	mov	r7, r6
 8003bf8:	463d      	mov	r5, r7
 8003bfa:	f815 3b01 	ldrb.w	r3, [r5], #1
 8003bfe:	b10b      	cbz	r3, 8003c04 <_svfiprintf_r+0x58>
 8003c00:	2b25      	cmp	r3, #37	; 0x25
 8003c02:	d13e      	bne.n	8003c82 <_svfiprintf_r+0xd6>
 8003c04:	ebb7 0a06 	subs.w	sl, r7, r6
 8003c08:	d00b      	beq.n	8003c22 <_svfiprintf_r+0x76>
 8003c0a:	4653      	mov	r3, sl
 8003c0c:	4632      	mov	r2, r6
 8003c0e:	4621      	mov	r1, r4
 8003c10:	4640      	mov	r0, r8
 8003c12:	f7ff ff71 	bl	8003af8 <__ssputs_r>
 8003c16:	3001      	adds	r0, #1
 8003c18:	f000 80a4 	beq.w	8003d64 <_svfiprintf_r+0x1b8>
 8003c1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003c1e:	4453      	add	r3, sl
 8003c20:	9309      	str	r3, [sp, #36]	; 0x24
 8003c22:	783b      	ldrb	r3, [r7, #0]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	f000 809d 	beq.w	8003d64 <_svfiprintf_r+0x1b8>
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003c30:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003c34:	9304      	str	r3, [sp, #16]
 8003c36:	9307      	str	r3, [sp, #28]
 8003c38:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003c3c:	931a      	str	r3, [sp, #104]	; 0x68
 8003c3e:	462f      	mov	r7, r5
 8003c40:	2205      	movs	r2, #5
 8003c42:	f817 1b01 	ldrb.w	r1, [r7], #1
 8003c46:	4850      	ldr	r0, [pc, #320]	; (8003d88 <_svfiprintf_r+0x1dc>)
 8003c48:	f7fc fad2 	bl	80001f0 <memchr>
 8003c4c:	9b04      	ldr	r3, [sp, #16]
 8003c4e:	b9d0      	cbnz	r0, 8003c86 <_svfiprintf_r+0xda>
 8003c50:	06d9      	lsls	r1, r3, #27
 8003c52:	bf44      	itt	mi
 8003c54:	2220      	movmi	r2, #32
 8003c56:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003c5a:	071a      	lsls	r2, r3, #28
 8003c5c:	bf44      	itt	mi
 8003c5e:	222b      	movmi	r2, #43	; 0x2b
 8003c60:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003c64:	782a      	ldrb	r2, [r5, #0]
 8003c66:	2a2a      	cmp	r2, #42	; 0x2a
 8003c68:	d015      	beq.n	8003c96 <_svfiprintf_r+0xea>
 8003c6a:	9a07      	ldr	r2, [sp, #28]
 8003c6c:	462f      	mov	r7, r5
 8003c6e:	2000      	movs	r0, #0
 8003c70:	250a      	movs	r5, #10
 8003c72:	4639      	mov	r1, r7
 8003c74:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003c78:	3b30      	subs	r3, #48	; 0x30
 8003c7a:	2b09      	cmp	r3, #9
 8003c7c:	d94d      	bls.n	8003d1a <_svfiprintf_r+0x16e>
 8003c7e:	b1b8      	cbz	r0, 8003cb0 <_svfiprintf_r+0x104>
 8003c80:	e00f      	b.n	8003ca2 <_svfiprintf_r+0xf6>
 8003c82:	462f      	mov	r7, r5
 8003c84:	e7b8      	b.n	8003bf8 <_svfiprintf_r+0x4c>
 8003c86:	4a40      	ldr	r2, [pc, #256]	; (8003d88 <_svfiprintf_r+0x1dc>)
 8003c88:	1a80      	subs	r0, r0, r2
 8003c8a:	fa0b f000 	lsl.w	r0, fp, r0
 8003c8e:	4318      	orrs	r0, r3
 8003c90:	9004      	str	r0, [sp, #16]
 8003c92:	463d      	mov	r5, r7
 8003c94:	e7d3      	b.n	8003c3e <_svfiprintf_r+0x92>
 8003c96:	9a03      	ldr	r2, [sp, #12]
 8003c98:	1d11      	adds	r1, r2, #4
 8003c9a:	6812      	ldr	r2, [r2, #0]
 8003c9c:	9103      	str	r1, [sp, #12]
 8003c9e:	2a00      	cmp	r2, #0
 8003ca0:	db01      	blt.n	8003ca6 <_svfiprintf_r+0xfa>
 8003ca2:	9207      	str	r2, [sp, #28]
 8003ca4:	e004      	b.n	8003cb0 <_svfiprintf_r+0x104>
 8003ca6:	4252      	negs	r2, r2
 8003ca8:	f043 0302 	orr.w	r3, r3, #2
 8003cac:	9207      	str	r2, [sp, #28]
 8003cae:	9304      	str	r3, [sp, #16]
 8003cb0:	783b      	ldrb	r3, [r7, #0]
 8003cb2:	2b2e      	cmp	r3, #46	; 0x2e
 8003cb4:	d10c      	bne.n	8003cd0 <_svfiprintf_r+0x124>
 8003cb6:	787b      	ldrb	r3, [r7, #1]
 8003cb8:	2b2a      	cmp	r3, #42	; 0x2a
 8003cba:	d133      	bne.n	8003d24 <_svfiprintf_r+0x178>
 8003cbc:	9b03      	ldr	r3, [sp, #12]
 8003cbe:	1d1a      	adds	r2, r3, #4
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	9203      	str	r2, [sp, #12]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	bfb8      	it	lt
 8003cc8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8003ccc:	3702      	adds	r7, #2
 8003cce:	9305      	str	r3, [sp, #20]
 8003cd0:	4d2e      	ldr	r5, [pc, #184]	; (8003d8c <_svfiprintf_r+0x1e0>)
 8003cd2:	7839      	ldrb	r1, [r7, #0]
 8003cd4:	2203      	movs	r2, #3
 8003cd6:	4628      	mov	r0, r5
 8003cd8:	f7fc fa8a 	bl	80001f0 <memchr>
 8003cdc:	b138      	cbz	r0, 8003cee <_svfiprintf_r+0x142>
 8003cde:	2340      	movs	r3, #64	; 0x40
 8003ce0:	1b40      	subs	r0, r0, r5
 8003ce2:	fa03 f000 	lsl.w	r0, r3, r0
 8003ce6:	9b04      	ldr	r3, [sp, #16]
 8003ce8:	4303      	orrs	r3, r0
 8003cea:	3701      	adds	r7, #1
 8003cec:	9304      	str	r3, [sp, #16]
 8003cee:	7839      	ldrb	r1, [r7, #0]
 8003cf0:	4827      	ldr	r0, [pc, #156]	; (8003d90 <_svfiprintf_r+0x1e4>)
 8003cf2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003cf6:	2206      	movs	r2, #6
 8003cf8:	1c7e      	adds	r6, r7, #1
 8003cfa:	f7fc fa79 	bl	80001f0 <memchr>
 8003cfe:	2800      	cmp	r0, #0
 8003d00:	d038      	beq.n	8003d74 <_svfiprintf_r+0x1c8>
 8003d02:	4b24      	ldr	r3, [pc, #144]	; (8003d94 <_svfiprintf_r+0x1e8>)
 8003d04:	bb13      	cbnz	r3, 8003d4c <_svfiprintf_r+0x1a0>
 8003d06:	9b03      	ldr	r3, [sp, #12]
 8003d08:	3307      	adds	r3, #7
 8003d0a:	f023 0307 	bic.w	r3, r3, #7
 8003d0e:	3308      	adds	r3, #8
 8003d10:	9303      	str	r3, [sp, #12]
 8003d12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003d14:	444b      	add	r3, r9
 8003d16:	9309      	str	r3, [sp, #36]	; 0x24
 8003d18:	e76d      	b.n	8003bf6 <_svfiprintf_r+0x4a>
 8003d1a:	fb05 3202 	mla	r2, r5, r2, r3
 8003d1e:	2001      	movs	r0, #1
 8003d20:	460f      	mov	r7, r1
 8003d22:	e7a6      	b.n	8003c72 <_svfiprintf_r+0xc6>
 8003d24:	2300      	movs	r3, #0
 8003d26:	3701      	adds	r7, #1
 8003d28:	9305      	str	r3, [sp, #20]
 8003d2a:	4619      	mov	r1, r3
 8003d2c:	250a      	movs	r5, #10
 8003d2e:	4638      	mov	r0, r7
 8003d30:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003d34:	3a30      	subs	r2, #48	; 0x30
 8003d36:	2a09      	cmp	r2, #9
 8003d38:	d903      	bls.n	8003d42 <_svfiprintf_r+0x196>
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d0c8      	beq.n	8003cd0 <_svfiprintf_r+0x124>
 8003d3e:	9105      	str	r1, [sp, #20]
 8003d40:	e7c6      	b.n	8003cd0 <_svfiprintf_r+0x124>
 8003d42:	fb05 2101 	mla	r1, r5, r1, r2
 8003d46:	2301      	movs	r3, #1
 8003d48:	4607      	mov	r7, r0
 8003d4a:	e7f0      	b.n	8003d2e <_svfiprintf_r+0x182>
 8003d4c:	ab03      	add	r3, sp, #12
 8003d4e:	9300      	str	r3, [sp, #0]
 8003d50:	4622      	mov	r2, r4
 8003d52:	4b11      	ldr	r3, [pc, #68]	; (8003d98 <_svfiprintf_r+0x1ec>)
 8003d54:	a904      	add	r1, sp, #16
 8003d56:	4640      	mov	r0, r8
 8003d58:	f3af 8000 	nop.w
 8003d5c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8003d60:	4681      	mov	r9, r0
 8003d62:	d1d6      	bne.n	8003d12 <_svfiprintf_r+0x166>
 8003d64:	89a3      	ldrh	r3, [r4, #12]
 8003d66:	065b      	lsls	r3, r3, #25
 8003d68:	f53f af35 	bmi.w	8003bd6 <_svfiprintf_r+0x2a>
 8003d6c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003d6e:	b01d      	add	sp, #116	; 0x74
 8003d70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d74:	ab03      	add	r3, sp, #12
 8003d76:	9300      	str	r3, [sp, #0]
 8003d78:	4622      	mov	r2, r4
 8003d7a:	4b07      	ldr	r3, [pc, #28]	; (8003d98 <_svfiprintf_r+0x1ec>)
 8003d7c:	a904      	add	r1, sp, #16
 8003d7e:	4640      	mov	r0, r8
 8003d80:	f000 f882 	bl	8003e88 <_printf_i>
 8003d84:	e7ea      	b.n	8003d5c <_svfiprintf_r+0x1b0>
 8003d86:	bf00      	nop
 8003d88:	08004528 	.word	0x08004528
 8003d8c:	0800452e 	.word	0x0800452e
 8003d90:	08004532 	.word	0x08004532
 8003d94:	00000000 	.word	0x00000000
 8003d98:	08003af9 	.word	0x08003af9

08003d9c <_printf_common>:
 8003d9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003da0:	4691      	mov	r9, r2
 8003da2:	461f      	mov	r7, r3
 8003da4:	688a      	ldr	r2, [r1, #8]
 8003da6:	690b      	ldr	r3, [r1, #16]
 8003da8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003dac:	4293      	cmp	r3, r2
 8003dae:	bfb8      	it	lt
 8003db0:	4613      	movlt	r3, r2
 8003db2:	f8c9 3000 	str.w	r3, [r9]
 8003db6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003dba:	4606      	mov	r6, r0
 8003dbc:	460c      	mov	r4, r1
 8003dbe:	b112      	cbz	r2, 8003dc6 <_printf_common+0x2a>
 8003dc0:	3301      	adds	r3, #1
 8003dc2:	f8c9 3000 	str.w	r3, [r9]
 8003dc6:	6823      	ldr	r3, [r4, #0]
 8003dc8:	0699      	lsls	r1, r3, #26
 8003dca:	bf42      	ittt	mi
 8003dcc:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003dd0:	3302      	addmi	r3, #2
 8003dd2:	f8c9 3000 	strmi.w	r3, [r9]
 8003dd6:	6825      	ldr	r5, [r4, #0]
 8003dd8:	f015 0506 	ands.w	r5, r5, #6
 8003ddc:	d107      	bne.n	8003dee <_printf_common+0x52>
 8003dde:	f104 0a19 	add.w	sl, r4, #25
 8003de2:	68e3      	ldr	r3, [r4, #12]
 8003de4:	f8d9 2000 	ldr.w	r2, [r9]
 8003de8:	1a9b      	subs	r3, r3, r2
 8003dea:	42ab      	cmp	r3, r5
 8003dec:	dc28      	bgt.n	8003e40 <_printf_common+0xa4>
 8003dee:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003df2:	6822      	ldr	r2, [r4, #0]
 8003df4:	3300      	adds	r3, #0
 8003df6:	bf18      	it	ne
 8003df8:	2301      	movne	r3, #1
 8003dfa:	0692      	lsls	r2, r2, #26
 8003dfc:	d42d      	bmi.n	8003e5a <_printf_common+0xbe>
 8003dfe:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003e02:	4639      	mov	r1, r7
 8003e04:	4630      	mov	r0, r6
 8003e06:	47c0      	blx	r8
 8003e08:	3001      	adds	r0, #1
 8003e0a:	d020      	beq.n	8003e4e <_printf_common+0xb2>
 8003e0c:	6823      	ldr	r3, [r4, #0]
 8003e0e:	68e5      	ldr	r5, [r4, #12]
 8003e10:	f8d9 2000 	ldr.w	r2, [r9]
 8003e14:	f003 0306 	and.w	r3, r3, #6
 8003e18:	2b04      	cmp	r3, #4
 8003e1a:	bf08      	it	eq
 8003e1c:	1aad      	subeq	r5, r5, r2
 8003e1e:	68a3      	ldr	r3, [r4, #8]
 8003e20:	6922      	ldr	r2, [r4, #16]
 8003e22:	bf0c      	ite	eq
 8003e24:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003e28:	2500      	movne	r5, #0
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	bfc4      	itt	gt
 8003e2e:	1a9b      	subgt	r3, r3, r2
 8003e30:	18ed      	addgt	r5, r5, r3
 8003e32:	f04f 0900 	mov.w	r9, #0
 8003e36:	341a      	adds	r4, #26
 8003e38:	454d      	cmp	r5, r9
 8003e3a:	d11a      	bne.n	8003e72 <_printf_common+0xd6>
 8003e3c:	2000      	movs	r0, #0
 8003e3e:	e008      	b.n	8003e52 <_printf_common+0xb6>
 8003e40:	2301      	movs	r3, #1
 8003e42:	4652      	mov	r2, sl
 8003e44:	4639      	mov	r1, r7
 8003e46:	4630      	mov	r0, r6
 8003e48:	47c0      	blx	r8
 8003e4a:	3001      	adds	r0, #1
 8003e4c:	d103      	bne.n	8003e56 <_printf_common+0xba>
 8003e4e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003e52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e56:	3501      	adds	r5, #1
 8003e58:	e7c3      	b.n	8003de2 <_printf_common+0x46>
 8003e5a:	18e1      	adds	r1, r4, r3
 8003e5c:	1c5a      	adds	r2, r3, #1
 8003e5e:	2030      	movs	r0, #48	; 0x30
 8003e60:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003e64:	4422      	add	r2, r4
 8003e66:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003e6a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003e6e:	3302      	adds	r3, #2
 8003e70:	e7c5      	b.n	8003dfe <_printf_common+0x62>
 8003e72:	2301      	movs	r3, #1
 8003e74:	4622      	mov	r2, r4
 8003e76:	4639      	mov	r1, r7
 8003e78:	4630      	mov	r0, r6
 8003e7a:	47c0      	blx	r8
 8003e7c:	3001      	adds	r0, #1
 8003e7e:	d0e6      	beq.n	8003e4e <_printf_common+0xb2>
 8003e80:	f109 0901 	add.w	r9, r9, #1
 8003e84:	e7d8      	b.n	8003e38 <_printf_common+0x9c>
	...

08003e88 <_printf_i>:
 8003e88:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003e8c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8003e90:	460c      	mov	r4, r1
 8003e92:	7e09      	ldrb	r1, [r1, #24]
 8003e94:	b085      	sub	sp, #20
 8003e96:	296e      	cmp	r1, #110	; 0x6e
 8003e98:	4617      	mov	r7, r2
 8003e9a:	4606      	mov	r6, r0
 8003e9c:	4698      	mov	r8, r3
 8003e9e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003ea0:	f000 80b3 	beq.w	800400a <_printf_i+0x182>
 8003ea4:	d822      	bhi.n	8003eec <_printf_i+0x64>
 8003ea6:	2963      	cmp	r1, #99	; 0x63
 8003ea8:	d036      	beq.n	8003f18 <_printf_i+0x90>
 8003eaa:	d80a      	bhi.n	8003ec2 <_printf_i+0x3a>
 8003eac:	2900      	cmp	r1, #0
 8003eae:	f000 80b9 	beq.w	8004024 <_printf_i+0x19c>
 8003eb2:	2958      	cmp	r1, #88	; 0x58
 8003eb4:	f000 8083 	beq.w	8003fbe <_printf_i+0x136>
 8003eb8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003ebc:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8003ec0:	e032      	b.n	8003f28 <_printf_i+0xa0>
 8003ec2:	2964      	cmp	r1, #100	; 0x64
 8003ec4:	d001      	beq.n	8003eca <_printf_i+0x42>
 8003ec6:	2969      	cmp	r1, #105	; 0x69
 8003ec8:	d1f6      	bne.n	8003eb8 <_printf_i+0x30>
 8003eca:	6820      	ldr	r0, [r4, #0]
 8003ecc:	6813      	ldr	r3, [r2, #0]
 8003ece:	0605      	lsls	r5, r0, #24
 8003ed0:	f103 0104 	add.w	r1, r3, #4
 8003ed4:	d52a      	bpl.n	8003f2c <_printf_i+0xa4>
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	6011      	str	r1, [r2, #0]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	da03      	bge.n	8003ee6 <_printf_i+0x5e>
 8003ede:	222d      	movs	r2, #45	; 0x2d
 8003ee0:	425b      	negs	r3, r3
 8003ee2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003ee6:	486f      	ldr	r0, [pc, #444]	; (80040a4 <_printf_i+0x21c>)
 8003ee8:	220a      	movs	r2, #10
 8003eea:	e039      	b.n	8003f60 <_printf_i+0xd8>
 8003eec:	2973      	cmp	r1, #115	; 0x73
 8003eee:	f000 809d 	beq.w	800402c <_printf_i+0x1a4>
 8003ef2:	d808      	bhi.n	8003f06 <_printf_i+0x7e>
 8003ef4:	296f      	cmp	r1, #111	; 0x6f
 8003ef6:	d020      	beq.n	8003f3a <_printf_i+0xb2>
 8003ef8:	2970      	cmp	r1, #112	; 0x70
 8003efa:	d1dd      	bne.n	8003eb8 <_printf_i+0x30>
 8003efc:	6823      	ldr	r3, [r4, #0]
 8003efe:	f043 0320 	orr.w	r3, r3, #32
 8003f02:	6023      	str	r3, [r4, #0]
 8003f04:	e003      	b.n	8003f0e <_printf_i+0x86>
 8003f06:	2975      	cmp	r1, #117	; 0x75
 8003f08:	d017      	beq.n	8003f3a <_printf_i+0xb2>
 8003f0a:	2978      	cmp	r1, #120	; 0x78
 8003f0c:	d1d4      	bne.n	8003eb8 <_printf_i+0x30>
 8003f0e:	2378      	movs	r3, #120	; 0x78
 8003f10:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003f14:	4864      	ldr	r0, [pc, #400]	; (80040a8 <_printf_i+0x220>)
 8003f16:	e055      	b.n	8003fc4 <_printf_i+0x13c>
 8003f18:	6813      	ldr	r3, [r2, #0]
 8003f1a:	1d19      	adds	r1, r3, #4
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	6011      	str	r1, [r2, #0]
 8003f20:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003f24:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003f28:	2301      	movs	r3, #1
 8003f2a:	e08c      	b.n	8004046 <_printf_i+0x1be>
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	6011      	str	r1, [r2, #0]
 8003f30:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003f34:	bf18      	it	ne
 8003f36:	b21b      	sxthne	r3, r3
 8003f38:	e7cf      	b.n	8003eda <_printf_i+0x52>
 8003f3a:	6813      	ldr	r3, [r2, #0]
 8003f3c:	6825      	ldr	r5, [r4, #0]
 8003f3e:	1d18      	adds	r0, r3, #4
 8003f40:	6010      	str	r0, [r2, #0]
 8003f42:	0628      	lsls	r0, r5, #24
 8003f44:	d501      	bpl.n	8003f4a <_printf_i+0xc2>
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	e002      	b.n	8003f50 <_printf_i+0xc8>
 8003f4a:	0668      	lsls	r0, r5, #25
 8003f4c:	d5fb      	bpl.n	8003f46 <_printf_i+0xbe>
 8003f4e:	881b      	ldrh	r3, [r3, #0]
 8003f50:	4854      	ldr	r0, [pc, #336]	; (80040a4 <_printf_i+0x21c>)
 8003f52:	296f      	cmp	r1, #111	; 0x6f
 8003f54:	bf14      	ite	ne
 8003f56:	220a      	movne	r2, #10
 8003f58:	2208      	moveq	r2, #8
 8003f5a:	2100      	movs	r1, #0
 8003f5c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003f60:	6865      	ldr	r5, [r4, #4]
 8003f62:	60a5      	str	r5, [r4, #8]
 8003f64:	2d00      	cmp	r5, #0
 8003f66:	f2c0 8095 	blt.w	8004094 <_printf_i+0x20c>
 8003f6a:	6821      	ldr	r1, [r4, #0]
 8003f6c:	f021 0104 	bic.w	r1, r1, #4
 8003f70:	6021      	str	r1, [r4, #0]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d13d      	bne.n	8003ff2 <_printf_i+0x16a>
 8003f76:	2d00      	cmp	r5, #0
 8003f78:	f040 808e 	bne.w	8004098 <_printf_i+0x210>
 8003f7c:	4665      	mov	r5, ip
 8003f7e:	2a08      	cmp	r2, #8
 8003f80:	d10b      	bne.n	8003f9a <_printf_i+0x112>
 8003f82:	6823      	ldr	r3, [r4, #0]
 8003f84:	07db      	lsls	r3, r3, #31
 8003f86:	d508      	bpl.n	8003f9a <_printf_i+0x112>
 8003f88:	6923      	ldr	r3, [r4, #16]
 8003f8a:	6862      	ldr	r2, [r4, #4]
 8003f8c:	429a      	cmp	r2, r3
 8003f8e:	bfde      	ittt	le
 8003f90:	2330      	movle	r3, #48	; 0x30
 8003f92:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003f96:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8003f9a:	ebac 0305 	sub.w	r3, ip, r5
 8003f9e:	6123      	str	r3, [r4, #16]
 8003fa0:	f8cd 8000 	str.w	r8, [sp]
 8003fa4:	463b      	mov	r3, r7
 8003fa6:	aa03      	add	r2, sp, #12
 8003fa8:	4621      	mov	r1, r4
 8003faa:	4630      	mov	r0, r6
 8003fac:	f7ff fef6 	bl	8003d9c <_printf_common>
 8003fb0:	3001      	adds	r0, #1
 8003fb2:	d14d      	bne.n	8004050 <_printf_i+0x1c8>
 8003fb4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003fb8:	b005      	add	sp, #20
 8003fba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003fbe:	4839      	ldr	r0, [pc, #228]	; (80040a4 <_printf_i+0x21c>)
 8003fc0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8003fc4:	6813      	ldr	r3, [r2, #0]
 8003fc6:	6821      	ldr	r1, [r4, #0]
 8003fc8:	1d1d      	adds	r5, r3, #4
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	6015      	str	r5, [r2, #0]
 8003fce:	060a      	lsls	r2, r1, #24
 8003fd0:	d50b      	bpl.n	8003fea <_printf_i+0x162>
 8003fd2:	07ca      	lsls	r2, r1, #31
 8003fd4:	bf44      	itt	mi
 8003fd6:	f041 0120 	orrmi.w	r1, r1, #32
 8003fda:	6021      	strmi	r1, [r4, #0]
 8003fdc:	b91b      	cbnz	r3, 8003fe6 <_printf_i+0x15e>
 8003fde:	6822      	ldr	r2, [r4, #0]
 8003fe0:	f022 0220 	bic.w	r2, r2, #32
 8003fe4:	6022      	str	r2, [r4, #0]
 8003fe6:	2210      	movs	r2, #16
 8003fe8:	e7b7      	b.n	8003f5a <_printf_i+0xd2>
 8003fea:	064d      	lsls	r5, r1, #25
 8003fec:	bf48      	it	mi
 8003fee:	b29b      	uxthmi	r3, r3
 8003ff0:	e7ef      	b.n	8003fd2 <_printf_i+0x14a>
 8003ff2:	4665      	mov	r5, ip
 8003ff4:	fbb3 f1f2 	udiv	r1, r3, r2
 8003ff8:	fb02 3311 	mls	r3, r2, r1, r3
 8003ffc:	5cc3      	ldrb	r3, [r0, r3]
 8003ffe:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004002:	460b      	mov	r3, r1
 8004004:	2900      	cmp	r1, #0
 8004006:	d1f5      	bne.n	8003ff4 <_printf_i+0x16c>
 8004008:	e7b9      	b.n	8003f7e <_printf_i+0xf6>
 800400a:	6813      	ldr	r3, [r2, #0]
 800400c:	6825      	ldr	r5, [r4, #0]
 800400e:	6961      	ldr	r1, [r4, #20]
 8004010:	1d18      	adds	r0, r3, #4
 8004012:	6010      	str	r0, [r2, #0]
 8004014:	0628      	lsls	r0, r5, #24
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	d501      	bpl.n	800401e <_printf_i+0x196>
 800401a:	6019      	str	r1, [r3, #0]
 800401c:	e002      	b.n	8004024 <_printf_i+0x19c>
 800401e:	066a      	lsls	r2, r5, #25
 8004020:	d5fb      	bpl.n	800401a <_printf_i+0x192>
 8004022:	8019      	strh	r1, [r3, #0]
 8004024:	2300      	movs	r3, #0
 8004026:	6123      	str	r3, [r4, #16]
 8004028:	4665      	mov	r5, ip
 800402a:	e7b9      	b.n	8003fa0 <_printf_i+0x118>
 800402c:	6813      	ldr	r3, [r2, #0]
 800402e:	1d19      	adds	r1, r3, #4
 8004030:	6011      	str	r1, [r2, #0]
 8004032:	681d      	ldr	r5, [r3, #0]
 8004034:	6862      	ldr	r2, [r4, #4]
 8004036:	2100      	movs	r1, #0
 8004038:	4628      	mov	r0, r5
 800403a:	f7fc f8d9 	bl	80001f0 <memchr>
 800403e:	b108      	cbz	r0, 8004044 <_printf_i+0x1bc>
 8004040:	1b40      	subs	r0, r0, r5
 8004042:	6060      	str	r0, [r4, #4]
 8004044:	6863      	ldr	r3, [r4, #4]
 8004046:	6123      	str	r3, [r4, #16]
 8004048:	2300      	movs	r3, #0
 800404a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800404e:	e7a7      	b.n	8003fa0 <_printf_i+0x118>
 8004050:	6923      	ldr	r3, [r4, #16]
 8004052:	462a      	mov	r2, r5
 8004054:	4639      	mov	r1, r7
 8004056:	4630      	mov	r0, r6
 8004058:	47c0      	blx	r8
 800405a:	3001      	adds	r0, #1
 800405c:	d0aa      	beq.n	8003fb4 <_printf_i+0x12c>
 800405e:	6823      	ldr	r3, [r4, #0]
 8004060:	079b      	lsls	r3, r3, #30
 8004062:	d413      	bmi.n	800408c <_printf_i+0x204>
 8004064:	68e0      	ldr	r0, [r4, #12]
 8004066:	9b03      	ldr	r3, [sp, #12]
 8004068:	4298      	cmp	r0, r3
 800406a:	bfb8      	it	lt
 800406c:	4618      	movlt	r0, r3
 800406e:	e7a3      	b.n	8003fb8 <_printf_i+0x130>
 8004070:	2301      	movs	r3, #1
 8004072:	464a      	mov	r2, r9
 8004074:	4639      	mov	r1, r7
 8004076:	4630      	mov	r0, r6
 8004078:	47c0      	blx	r8
 800407a:	3001      	adds	r0, #1
 800407c:	d09a      	beq.n	8003fb4 <_printf_i+0x12c>
 800407e:	3501      	adds	r5, #1
 8004080:	68e3      	ldr	r3, [r4, #12]
 8004082:	9a03      	ldr	r2, [sp, #12]
 8004084:	1a9b      	subs	r3, r3, r2
 8004086:	42ab      	cmp	r3, r5
 8004088:	dcf2      	bgt.n	8004070 <_printf_i+0x1e8>
 800408a:	e7eb      	b.n	8004064 <_printf_i+0x1dc>
 800408c:	2500      	movs	r5, #0
 800408e:	f104 0919 	add.w	r9, r4, #25
 8004092:	e7f5      	b.n	8004080 <_printf_i+0x1f8>
 8004094:	2b00      	cmp	r3, #0
 8004096:	d1ac      	bne.n	8003ff2 <_printf_i+0x16a>
 8004098:	7803      	ldrb	r3, [r0, #0]
 800409a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800409e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80040a2:	e76c      	b.n	8003f7e <_printf_i+0xf6>
 80040a4:	08004539 	.word	0x08004539
 80040a8:	0800454a 	.word	0x0800454a

080040ac <_free_r>:
 80040ac:	b538      	push	{r3, r4, r5, lr}
 80040ae:	4605      	mov	r5, r0
 80040b0:	2900      	cmp	r1, #0
 80040b2:	d045      	beq.n	8004140 <_free_r+0x94>
 80040b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80040b8:	1f0c      	subs	r4, r1, #4
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	bfb8      	it	lt
 80040be:	18e4      	addlt	r4, r4, r3
 80040c0:	f000 f8d2 	bl	8004268 <__malloc_lock>
 80040c4:	4a1f      	ldr	r2, [pc, #124]	; (8004144 <_free_r+0x98>)
 80040c6:	6813      	ldr	r3, [r2, #0]
 80040c8:	4610      	mov	r0, r2
 80040ca:	b933      	cbnz	r3, 80040da <_free_r+0x2e>
 80040cc:	6063      	str	r3, [r4, #4]
 80040ce:	6014      	str	r4, [r2, #0]
 80040d0:	4628      	mov	r0, r5
 80040d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80040d6:	f000 b8c8 	b.w	800426a <__malloc_unlock>
 80040da:	42a3      	cmp	r3, r4
 80040dc:	d90c      	bls.n	80040f8 <_free_r+0x4c>
 80040de:	6821      	ldr	r1, [r4, #0]
 80040e0:	1862      	adds	r2, r4, r1
 80040e2:	4293      	cmp	r3, r2
 80040e4:	bf04      	itt	eq
 80040e6:	681a      	ldreq	r2, [r3, #0]
 80040e8:	685b      	ldreq	r3, [r3, #4]
 80040ea:	6063      	str	r3, [r4, #4]
 80040ec:	bf04      	itt	eq
 80040ee:	1852      	addeq	r2, r2, r1
 80040f0:	6022      	streq	r2, [r4, #0]
 80040f2:	6004      	str	r4, [r0, #0]
 80040f4:	e7ec      	b.n	80040d0 <_free_r+0x24>
 80040f6:	4613      	mov	r3, r2
 80040f8:	685a      	ldr	r2, [r3, #4]
 80040fa:	b10a      	cbz	r2, 8004100 <_free_r+0x54>
 80040fc:	42a2      	cmp	r2, r4
 80040fe:	d9fa      	bls.n	80040f6 <_free_r+0x4a>
 8004100:	6819      	ldr	r1, [r3, #0]
 8004102:	1858      	adds	r0, r3, r1
 8004104:	42a0      	cmp	r0, r4
 8004106:	d10b      	bne.n	8004120 <_free_r+0x74>
 8004108:	6820      	ldr	r0, [r4, #0]
 800410a:	4401      	add	r1, r0
 800410c:	1858      	adds	r0, r3, r1
 800410e:	4282      	cmp	r2, r0
 8004110:	6019      	str	r1, [r3, #0]
 8004112:	d1dd      	bne.n	80040d0 <_free_r+0x24>
 8004114:	6810      	ldr	r0, [r2, #0]
 8004116:	6852      	ldr	r2, [r2, #4]
 8004118:	605a      	str	r2, [r3, #4]
 800411a:	4401      	add	r1, r0
 800411c:	6019      	str	r1, [r3, #0]
 800411e:	e7d7      	b.n	80040d0 <_free_r+0x24>
 8004120:	d902      	bls.n	8004128 <_free_r+0x7c>
 8004122:	230c      	movs	r3, #12
 8004124:	602b      	str	r3, [r5, #0]
 8004126:	e7d3      	b.n	80040d0 <_free_r+0x24>
 8004128:	6820      	ldr	r0, [r4, #0]
 800412a:	1821      	adds	r1, r4, r0
 800412c:	428a      	cmp	r2, r1
 800412e:	bf04      	itt	eq
 8004130:	6811      	ldreq	r1, [r2, #0]
 8004132:	6852      	ldreq	r2, [r2, #4]
 8004134:	6062      	str	r2, [r4, #4]
 8004136:	bf04      	itt	eq
 8004138:	1809      	addeq	r1, r1, r0
 800413a:	6021      	streq	r1, [r4, #0]
 800413c:	605c      	str	r4, [r3, #4]
 800413e:	e7c7      	b.n	80040d0 <_free_r+0x24>
 8004140:	bd38      	pop	{r3, r4, r5, pc}
 8004142:	bf00      	nop
 8004144:	20000498 	.word	0x20000498

08004148 <_malloc_r>:
 8004148:	b570      	push	{r4, r5, r6, lr}
 800414a:	1ccd      	adds	r5, r1, #3
 800414c:	f025 0503 	bic.w	r5, r5, #3
 8004150:	3508      	adds	r5, #8
 8004152:	2d0c      	cmp	r5, #12
 8004154:	bf38      	it	cc
 8004156:	250c      	movcc	r5, #12
 8004158:	2d00      	cmp	r5, #0
 800415a:	4606      	mov	r6, r0
 800415c:	db01      	blt.n	8004162 <_malloc_r+0x1a>
 800415e:	42a9      	cmp	r1, r5
 8004160:	d903      	bls.n	800416a <_malloc_r+0x22>
 8004162:	230c      	movs	r3, #12
 8004164:	6033      	str	r3, [r6, #0]
 8004166:	2000      	movs	r0, #0
 8004168:	bd70      	pop	{r4, r5, r6, pc}
 800416a:	f000 f87d 	bl	8004268 <__malloc_lock>
 800416e:	4a21      	ldr	r2, [pc, #132]	; (80041f4 <_malloc_r+0xac>)
 8004170:	6814      	ldr	r4, [r2, #0]
 8004172:	4621      	mov	r1, r4
 8004174:	b991      	cbnz	r1, 800419c <_malloc_r+0x54>
 8004176:	4c20      	ldr	r4, [pc, #128]	; (80041f8 <_malloc_r+0xb0>)
 8004178:	6823      	ldr	r3, [r4, #0]
 800417a:	b91b      	cbnz	r3, 8004184 <_malloc_r+0x3c>
 800417c:	4630      	mov	r0, r6
 800417e:	f000 f863 	bl	8004248 <_sbrk_r>
 8004182:	6020      	str	r0, [r4, #0]
 8004184:	4629      	mov	r1, r5
 8004186:	4630      	mov	r0, r6
 8004188:	f000 f85e 	bl	8004248 <_sbrk_r>
 800418c:	1c43      	adds	r3, r0, #1
 800418e:	d124      	bne.n	80041da <_malloc_r+0x92>
 8004190:	230c      	movs	r3, #12
 8004192:	6033      	str	r3, [r6, #0]
 8004194:	4630      	mov	r0, r6
 8004196:	f000 f868 	bl	800426a <__malloc_unlock>
 800419a:	e7e4      	b.n	8004166 <_malloc_r+0x1e>
 800419c:	680b      	ldr	r3, [r1, #0]
 800419e:	1b5b      	subs	r3, r3, r5
 80041a0:	d418      	bmi.n	80041d4 <_malloc_r+0x8c>
 80041a2:	2b0b      	cmp	r3, #11
 80041a4:	d90f      	bls.n	80041c6 <_malloc_r+0x7e>
 80041a6:	600b      	str	r3, [r1, #0]
 80041a8:	50cd      	str	r5, [r1, r3]
 80041aa:	18cc      	adds	r4, r1, r3
 80041ac:	4630      	mov	r0, r6
 80041ae:	f000 f85c 	bl	800426a <__malloc_unlock>
 80041b2:	f104 000b 	add.w	r0, r4, #11
 80041b6:	1d23      	adds	r3, r4, #4
 80041b8:	f020 0007 	bic.w	r0, r0, #7
 80041bc:	1ac3      	subs	r3, r0, r3
 80041be:	d0d3      	beq.n	8004168 <_malloc_r+0x20>
 80041c0:	425a      	negs	r2, r3
 80041c2:	50e2      	str	r2, [r4, r3]
 80041c4:	e7d0      	b.n	8004168 <_malloc_r+0x20>
 80041c6:	428c      	cmp	r4, r1
 80041c8:	684b      	ldr	r3, [r1, #4]
 80041ca:	bf16      	itet	ne
 80041cc:	6063      	strne	r3, [r4, #4]
 80041ce:	6013      	streq	r3, [r2, #0]
 80041d0:	460c      	movne	r4, r1
 80041d2:	e7eb      	b.n	80041ac <_malloc_r+0x64>
 80041d4:	460c      	mov	r4, r1
 80041d6:	6849      	ldr	r1, [r1, #4]
 80041d8:	e7cc      	b.n	8004174 <_malloc_r+0x2c>
 80041da:	1cc4      	adds	r4, r0, #3
 80041dc:	f024 0403 	bic.w	r4, r4, #3
 80041e0:	42a0      	cmp	r0, r4
 80041e2:	d005      	beq.n	80041f0 <_malloc_r+0xa8>
 80041e4:	1a21      	subs	r1, r4, r0
 80041e6:	4630      	mov	r0, r6
 80041e8:	f000 f82e 	bl	8004248 <_sbrk_r>
 80041ec:	3001      	adds	r0, #1
 80041ee:	d0cf      	beq.n	8004190 <_malloc_r+0x48>
 80041f0:	6025      	str	r5, [r4, #0]
 80041f2:	e7db      	b.n	80041ac <_malloc_r+0x64>
 80041f4:	20000498 	.word	0x20000498
 80041f8:	2000049c 	.word	0x2000049c

080041fc <_realloc_r>:
 80041fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041fe:	4607      	mov	r7, r0
 8004200:	4614      	mov	r4, r2
 8004202:	460e      	mov	r6, r1
 8004204:	b921      	cbnz	r1, 8004210 <_realloc_r+0x14>
 8004206:	4611      	mov	r1, r2
 8004208:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800420c:	f7ff bf9c 	b.w	8004148 <_malloc_r>
 8004210:	b922      	cbnz	r2, 800421c <_realloc_r+0x20>
 8004212:	f7ff ff4b 	bl	80040ac <_free_r>
 8004216:	4625      	mov	r5, r4
 8004218:	4628      	mov	r0, r5
 800421a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800421c:	f000 f826 	bl	800426c <_malloc_usable_size_r>
 8004220:	42a0      	cmp	r0, r4
 8004222:	d20f      	bcs.n	8004244 <_realloc_r+0x48>
 8004224:	4621      	mov	r1, r4
 8004226:	4638      	mov	r0, r7
 8004228:	f7ff ff8e 	bl	8004148 <_malloc_r>
 800422c:	4605      	mov	r5, r0
 800422e:	2800      	cmp	r0, #0
 8004230:	d0f2      	beq.n	8004218 <_realloc_r+0x1c>
 8004232:	4631      	mov	r1, r6
 8004234:	4622      	mov	r2, r4
 8004236:	f7ff fc13 	bl	8003a60 <memcpy>
 800423a:	4631      	mov	r1, r6
 800423c:	4638      	mov	r0, r7
 800423e:	f7ff ff35 	bl	80040ac <_free_r>
 8004242:	e7e9      	b.n	8004218 <_realloc_r+0x1c>
 8004244:	4635      	mov	r5, r6
 8004246:	e7e7      	b.n	8004218 <_realloc_r+0x1c>

08004248 <_sbrk_r>:
 8004248:	b538      	push	{r3, r4, r5, lr}
 800424a:	4c06      	ldr	r4, [pc, #24]	; (8004264 <_sbrk_r+0x1c>)
 800424c:	2300      	movs	r3, #0
 800424e:	4605      	mov	r5, r0
 8004250:	4608      	mov	r0, r1
 8004252:	6023      	str	r3, [r4, #0]
 8004254:	f7fc ff1c 	bl	8001090 <_sbrk>
 8004258:	1c43      	adds	r3, r0, #1
 800425a:	d102      	bne.n	8004262 <_sbrk_r+0x1a>
 800425c:	6823      	ldr	r3, [r4, #0]
 800425e:	b103      	cbz	r3, 8004262 <_sbrk_r+0x1a>
 8004260:	602b      	str	r3, [r5, #0]
 8004262:	bd38      	pop	{r3, r4, r5, pc}
 8004264:	20000580 	.word	0x20000580

08004268 <__malloc_lock>:
 8004268:	4770      	bx	lr

0800426a <__malloc_unlock>:
 800426a:	4770      	bx	lr

0800426c <_malloc_usable_size_r>:
 800426c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004270:	1f18      	subs	r0, r3, #4
 8004272:	2b00      	cmp	r3, #0
 8004274:	bfbc      	itt	lt
 8004276:	580b      	ldrlt	r3, [r1, r0]
 8004278:	18c0      	addlt	r0, r0, r3
 800427a:	4770      	bx	lr

0800427c <_init>:
 800427c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800427e:	bf00      	nop
 8004280:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004282:	bc08      	pop	{r3}
 8004284:	469e      	mov	lr, r3
 8004286:	4770      	bx	lr

08004288 <_fini>:
 8004288:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800428a:	bf00      	nop
 800428c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800428e:	bc08      	pop	{r3}
 8004290:	469e      	mov	lr, r3
 8004292:	4770      	bx	lr
