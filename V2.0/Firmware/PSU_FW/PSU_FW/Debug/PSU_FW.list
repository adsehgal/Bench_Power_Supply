
PSU_FW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007564  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000cc0  08007708  08007708  00017708  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080083c8  080083c8  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  080083c8  080083c8  000183c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080083d0  080083d0  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080083d0  080083d0  000183d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080083d4  080083d4  000183d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  080083d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000520  200001e4  080085bc  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000704  080085bc  00020704  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ea7b  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000234c  00000000  00000000  0002ec8f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000bf8  00000000  00000000  00030fe0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ae0  00000000  00000000  00031bd8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000179c8  00000000  00000000  000326b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000bc46  00000000  00000000  0004a080  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008cef1  00000000  00000000  00055cc6  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e2bb7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000039e4  00000000  00000000  000e2c34  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e4 	.word	0x200001e4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080076ec 	.word	0x080076ec

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e8 	.word	0x200001e8
 80001dc:	080076ec 	.word	0x080076ec

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ce:	f1a4 0401 	sub.w	r4, r4, #1
 80003d2:	d1e9      	bne.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bcc:	f000 b972 	b.w	8000eb4 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9e08      	ldr	r6, [sp, #32]
 8000bee:	4604      	mov	r4, r0
 8000bf0:	4688      	mov	r8, r1
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d14b      	bne.n	8000c8e <__udivmoddi4+0xa6>
 8000bf6:	428a      	cmp	r2, r1
 8000bf8:	4615      	mov	r5, r2
 8000bfa:	d967      	bls.n	8000ccc <__udivmoddi4+0xe4>
 8000bfc:	fab2 f282 	clz	r2, r2
 8000c00:	b14a      	cbz	r2, 8000c16 <__udivmoddi4+0x2e>
 8000c02:	f1c2 0720 	rsb	r7, r2, #32
 8000c06:	fa01 f302 	lsl.w	r3, r1, r2
 8000c0a:	fa20 f707 	lsr.w	r7, r0, r7
 8000c0e:	4095      	lsls	r5, r2
 8000c10:	ea47 0803 	orr.w	r8, r7, r3
 8000c14:	4094      	lsls	r4, r2
 8000c16:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c1a:	0c23      	lsrs	r3, r4, #16
 8000c1c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c20:	fa1f fc85 	uxth.w	ip, r5
 8000c24:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c28:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c2c:	fb07 f10c 	mul.w	r1, r7, ip
 8000c30:	4299      	cmp	r1, r3
 8000c32:	d909      	bls.n	8000c48 <__udivmoddi4+0x60>
 8000c34:	18eb      	adds	r3, r5, r3
 8000c36:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000c3a:	f080 811b 	bcs.w	8000e74 <__udivmoddi4+0x28c>
 8000c3e:	4299      	cmp	r1, r3
 8000c40:	f240 8118 	bls.w	8000e74 <__udivmoddi4+0x28c>
 8000c44:	3f02      	subs	r7, #2
 8000c46:	442b      	add	r3, r5
 8000c48:	1a5b      	subs	r3, r3, r1
 8000c4a:	b2a4      	uxth	r4, r4
 8000c4c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c50:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c58:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c5c:	45a4      	cmp	ip, r4
 8000c5e:	d909      	bls.n	8000c74 <__udivmoddi4+0x8c>
 8000c60:	192c      	adds	r4, r5, r4
 8000c62:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c66:	f080 8107 	bcs.w	8000e78 <__udivmoddi4+0x290>
 8000c6a:	45a4      	cmp	ip, r4
 8000c6c:	f240 8104 	bls.w	8000e78 <__udivmoddi4+0x290>
 8000c70:	3802      	subs	r0, #2
 8000c72:	442c      	add	r4, r5
 8000c74:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c78:	eba4 040c 	sub.w	r4, r4, ip
 8000c7c:	2700      	movs	r7, #0
 8000c7e:	b11e      	cbz	r6, 8000c88 <__udivmoddi4+0xa0>
 8000c80:	40d4      	lsrs	r4, r2
 8000c82:	2300      	movs	r3, #0
 8000c84:	e9c6 4300 	strd	r4, r3, [r6]
 8000c88:	4639      	mov	r1, r7
 8000c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8e:	428b      	cmp	r3, r1
 8000c90:	d909      	bls.n	8000ca6 <__udivmoddi4+0xbe>
 8000c92:	2e00      	cmp	r6, #0
 8000c94:	f000 80eb 	beq.w	8000e6e <__udivmoddi4+0x286>
 8000c98:	2700      	movs	r7, #0
 8000c9a:	e9c6 0100 	strd	r0, r1, [r6]
 8000c9e:	4638      	mov	r0, r7
 8000ca0:	4639      	mov	r1, r7
 8000ca2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca6:	fab3 f783 	clz	r7, r3
 8000caa:	2f00      	cmp	r7, #0
 8000cac:	d147      	bne.n	8000d3e <__udivmoddi4+0x156>
 8000cae:	428b      	cmp	r3, r1
 8000cb0:	d302      	bcc.n	8000cb8 <__udivmoddi4+0xd0>
 8000cb2:	4282      	cmp	r2, r0
 8000cb4:	f200 80fa 	bhi.w	8000eac <__udivmoddi4+0x2c4>
 8000cb8:	1a84      	subs	r4, r0, r2
 8000cba:	eb61 0303 	sbc.w	r3, r1, r3
 8000cbe:	2001      	movs	r0, #1
 8000cc0:	4698      	mov	r8, r3
 8000cc2:	2e00      	cmp	r6, #0
 8000cc4:	d0e0      	beq.n	8000c88 <__udivmoddi4+0xa0>
 8000cc6:	e9c6 4800 	strd	r4, r8, [r6]
 8000cca:	e7dd      	b.n	8000c88 <__udivmoddi4+0xa0>
 8000ccc:	b902      	cbnz	r2, 8000cd0 <__udivmoddi4+0xe8>
 8000cce:	deff      	udf	#255	; 0xff
 8000cd0:	fab2 f282 	clz	r2, r2
 8000cd4:	2a00      	cmp	r2, #0
 8000cd6:	f040 808f 	bne.w	8000df8 <__udivmoddi4+0x210>
 8000cda:	1b49      	subs	r1, r1, r5
 8000cdc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ce0:	fa1f f885 	uxth.w	r8, r5
 8000ce4:	2701      	movs	r7, #1
 8000ce6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000cea:	0c23      	lsrs	r3, r4, #16
 8000cec:	fb0e 111c 	mls	r1, lr, ip, r1
 8000cf0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cf4:	fb08 f10c 	mul.w	r1, r8, ip
 8000cf8:	4299      	cmp	r1, r3
 8000cfa:	d907      	bls.n	8000d0c <__udivmoddi4+0x124>
 8000cfc:	18eb      	adds	r3, r5, r3
 8000cfe:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000d02:	d202      	bcs.n	8000d0a <__udivmoddi4+0x122>
 8000d04:	4299      	cmp	r1, r3
 8000d06:	f200 80cd 	bhi.w	8000ea4 <__udivmoddi4+0x2bc>
 8000d0a:	4684      	mov	ip, r0
 8000d0c:	1a59      	subs	r1, r3, r1
 8000d0e:	b2a3      	uxth	r3, r4
 8000d10:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d14:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d18:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d1c:	fb08 f800 	mul.w	r8, r8, r0
 8000d20:	45a0      	cmp	r8, r4
 8000d22:	d907      	bls.n	8000d34 <__udivmoddi4+0x14c>
 8000d24:	192c      	adds	r4, r5, r4
 8000d26:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0x14a>
 8000d2c:	45a0      	cmp	r8, r4
 8000d2e:	f200 80b6 	bhi.w	8000e9e <__udivmoddi4+0x2b6>
 8000d32:	4618      	mov	r0, r3
 8000d34:	eba4 0408 	sub.w	r4, r4, r8
 8000d38:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d3c:	e79f      	b.n	8000c7e <__udivmoddi4+0x96>
 8000d3e:	f1c7 0c20 	rsb	ip, r7, #32
 8000d42:	40bb      	lsls	r3, r7
 8000d44:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d48:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d4c:	fa01 f407 	lsl.w	r4, r1, r7
 8000d50:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d54:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d58:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d5c:	4325      	orrs	r5, r4
 8000d5e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d62:	0c2c      	lsrs	r4, r5, #16
 8000d64:	fb08 3319 	mls	r3, r8, r9, r3
 8000d68:	fa1f fa8e 	uxth.w	sl, lr
 8000d6c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d70:	fb09 f40a 	mul.w	r4, r9, sl
 8000d74:	429c      	cmp	r4, r3
 8000d76:	fa02 f207 	lsl.w	r2, r2, r7
 8000d7a:	fa00 f107 	lsl.w	r1, r0, r7
 8000d7e:	d90b      	bls.n	8000d98 <__udivmoddi4+0x1b0>
 8000d80:	eb1e 0303 	adds.w	r3, lr, r3
 8000d84:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000d88:	f080 8087 	bcs.w	8000e9a <__udivmoddi4+0x2b2>
 8000d8c:	429c      	cmp	r4, r3
 8000d8e:	f240 8084 	bls.w	8000e9a <__udivmoddi4+0x2b2>
 8000d92:	f1a9 0902 	sub.w	r9, r9, #2
 8000d96:	4473      	add	r3, lr
 8000d98:	1b1b      	subs	r3, r3, r4
 8000d9a:	b2ad      	uxth	r5, r5
 8000d9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000da0:	fb08 3310 	mls	r3, r8, r0, r3
 8000da4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000da8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000dac:	45a2      	cmp	sl, r4
 8000dae:	d908      	bls.n	8000dc2 <__udivmoddi4+0x1da>
 8000db0:	eb1e 0404 	adds.w	r4, lr, r4
 8000db4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000db8:	d26b      	bcs.n	8000e92 <__udivmoddi4+0x2aa>
 8000dba:	45a2      	cmp	sl, r4
 8000dbc:	d969      	bls.n	8000e92 <__udivmoddi4+0x2aa>
 8000dbe:	3802      	subs	r0, #2
 8000dc0:	4474      	add	r4, lr
 8000dc2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000dc6:	fba0 8902 	umull	r8, r9, r0, r2
 8000dca:	eba4 040a 	sub.w	r4, r4, sl
 8000dce:	454c      	cmp	r4, r9
 8000dd0:	46c2      	mov	sl, r8
 8000dd2:	464b      	mov	r3, r9
 8000dd4:	d354      	bcc.n	8000e80 <__udivmoddi4+0x298>
 8000dd6:	d051      	beq.n	8000e7c <__udivmoddi4+0x294>
 8000dd8:	2e00      	cmp	r6, #0
 8000dda:	d069      	beq.n	8000eb0 <__udivmoddi4+0x2c8>
 8000ddc:	ebb1 050a 	subs.w	r5, r1, sl
 8000de0:	eb64 0403 	sbc.w	r4, r4, r3
 8000de4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000de8:	40fd      	lsrs	r5, r7
 8000dea:	40fc      	lsrs	r4, r7
 8000dec:	ea4c 0505 	orr.w	r5, ip, r5
 8000df0:	e9c6 5400 	strd	r5, r4, [r6]
 8000df4:	2700      	movs	r7, #0
 8000df6:	e747      	b.n	8000c88 <__udivmoddi4+0xa0>
 8000df8:	f1c2 0320 	rsb	r3, r2, #32
 8000dfc:	fa20 f703 	lsr.w	r7, r0, r3
 8000e00:	4095      	lsls	r5, r2
 8000e02:	fa01 f002 	lsl.w	r0, r1, r2
 8000e06:	fa21 f303 	lsr.w	r3, r1, r3
 8000e0a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e0e:	4338      	orrs	r0, r7
 8000e10:	0c01      	lsrs	r1, r0, #16
 8000e12:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e16:	fa1f f885 	uxth.w	r8, r5
 8000e1a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e1e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e22:	fb07 f308 	mul.w	r3, r7, r8
 8000e26:	428b      	cmp	r3, r1
 8000e28:	fa04 f402 	lsl.w	r4, r4, r2
 8000e2c:	d907      	bls.n	8000e3e <__udivmoddi4+0x256>
 8000e2e:	1869      	adds	r1, r5, r1
 8000e30:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000e34:	d22f      	bcs.n	8000e96 <__udivmoddi4+0x2ae>
 8000e36:	428b      	cmp	r3, r1
 8000e38:	d92d      	bls.n	8000e96 <__udivmoddi4+0x2ae>
 8000e3a:	3f02      	subs	r7, #2
 8000e3c:	4429      	add	r1, r5
 8000e3e:	1acb      	subs	r3, r1, r3
 8000e40:	b281      	uxth	r1, r0
 8000e42:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e46:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e4a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e4e:	fb00 f308 	mul.w	r3, r0, r8
 8000e52:	428b      	cmp	r3, r1
 8000e54:	d907      	bls.n	8000e66 <__udivmoddi4+0x27e>
 8000e56:	1869      	adds	r1, r5, r1
 8000e58:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000e5c:	d217      	bcs.n	8000e8e <__udivmoddi4+0x2a6>
 8000e5e:	428b      	cmp	r3, r1
 8000e60:	d915      	bls.n	8000e8e <__udivmoddi4+0x2a6>
 8000e62:	3802      	subs	r0, #2
 8000e64:	4429      	add	r1, r5
 8000e66:	1ac9      	subs	r1, r1, r3
 8000e68:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e6c:	e73b      	b.n	8000ce6 <__udivmoddi4+0xfe>
 8000e6e:	4637      	mov	r7, r6
 8000e70:	4630      	mov	r0, r6
 8000e72:	e709      	b.n	8000c88 <__udivmoddi4+0xa0>
 8000e74:	4607      	mov	r7, r0
 8000e76:	e6e7      	b.n	8000c48 <__udivmoddi4+0x60>
 8000e78:	4618      	mov	r0, r3
 8000e7a:	e6fb      	b.n	8000c74 <__udivmoddi4+0x8c>
 8000e7c:	4541      	cmp	r1, r8
 8000e7e:	d2ab      	bcs.n	8000dd8 <__udivmoddi4+0x1f0>
 8000e80:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e84:	eb69 020e 	sbc.w	r2, r9, lr
 8000e88:	3801      	subs	r0, #1
 8000e8a:	4613      	mov	r3, r2
 8000e8c:	e7a4      	b.n	8000dd8 <__udivmoddi4+0x1f0>
 8000e8e:	4660      	mov	r0, ip
 8000e90:	e7e9      	b.n	8000e66 <__udivmoddi4+0x27e>
 8000e92:	4618      	mov	r0, r3
 8000e94:	e795      	b.n	8000dc2 <__udivmoddi4+0x1da>
 8000e96:	4667      	mov	r7, ip
 8000e98:	e7d1      	b.n	8000e3e <__udivmoddi4+0x256>
 8000e9a:	4681      	mov	r9, r0
 8000e9c:	e77c      	b.n	8000d98 <__udivmoddi4+0x1b0>
 8000e9e:	3802      	subs	r0, #2
 8000ea0:	442c      	add	r4, r5
 8000ea2:	e747      	b.n	8000d34 <__udivmoddi4+0x14c>
 8000ea4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ea8:	442b      	add	r3, r5
 8000eaa:	e72f      	b.n	8000d0c <__udivmoddi4+0x124>
 8000eac:	4638      	mov	r0, r7
 8000eae:	e708      	b.n	8000cc2 <__udivmoddi4+0xda>
 8000eb0:	4637      	mov	r7, r6
 8000eb2:	e6e9      	b.n	8000c88 <__udivmoddi4+0xa0>

08000eb4 <__aeabi_idiv0>:
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop

08000eb8 <readVin>:
const uint8_t IDLE_I_LOW = 100;    //mA
const uint8_t RESISTOR_TOP_VIN = 29;    //KOhm
const uint8_t RESISTOR_TOP_VOUT = 26;    //KOhm
const uint8_t RESISTOR_BOT = 10;    //KOhm

double readVin(void) {
 8000eb8:	b5b0      	push	{r4, r5, r7, lr}
 8000eba:	b088      	sub	sp, #32
 8000ebc:	af00      	add	r7, sp, #0
	uint32_t retVal = 0;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	61fb      	str	r3, [r7, #28]

	ADC_ChannelConfTypeDef sConfig = { 0 };
 8000ec2:	463b      	mov	r3, r7
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	601a      	str	r2, [r3, #0]
 8000ec8:	605a      	str	r2, [r3, #4]
 8000eca:	609a      	str	r2, [r3, #8]
 8000ecc:	60da      	str	r2, [r3, #12]
	sConfig.Channel = ADC_CHANNEL_1;
 8000ece:	2301      	movs	r3, #1
 8000ed0:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 8000ed2:	2301      	movs	r3, #1
 8000ed4:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 8000ed6:	2302      	movs	r3, #2
 8000ed8:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8000eda:	463b      	mov	r3, r7
 8000edc:	4619      	mov	r1, r3
 8000ede:	4832      	ldr	r0, [pc, #200]	; (8000fa8 <readVin+0xf0>)
 8000ee0:	f001 fe6c 	bl	8002bbc <HAL_ADC_ConfigChannel>
		//error handle
	}
	HAL_ADC_Start(&hadc1);
 8000ee4:	4830      	ldr	r0, [pc, #192]	; (8000fa8 <readVin+0xf0>)
 8000ee6:	f001 fcff 	bl	80028e8 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000eea:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000eee:	482e      	ldr	r0, [pc, #184]	; (8000fa8 <readVin+0xf0>)
 8000ef0:	f001 fdd3 	bl	8002a9a <HAL_ADC_PollForConversion>
	retVal = HAL_ADC_GetValue(&hadc1);
 8000ef4:	482c      	ldr	r0, [pc, #176]	; (8000fa8 <readVin+0xf0>)
 8000ef6:	f001 fe54 	bl	8002ba2 <HAL_ADC_GetValue>
 8000efa:	61f8      	str	r0, [r7, #28]
	HAL_ADC_Stop(&hadc1);
 8000efc:	482a      	ldr	r0, [pc, #168]	; (8000fa8 <readVin+0xf0>)
 8000efe:	f001 fd99 	bl	8002a34 <HAL_ADC_Stop>

	double tempV = ((double) retVal / maxADCVal) * sysVolt;
 8000f02:	69f8      	ldr	r0, [r7, #28]
 8000f04:	f7ff fb06 	bl	8000514 <__aeabi_ui2d>
 8000f08:	a423      	add	r4, pc, #140	; (adr r4, 8000f98 <readVin+0xe0>)
 8000f0a:	e9d4 3400 	ldrd	r3, r4, [r4]
 8000f0e:	461a      	mov	r2, r3
 8000f10:	4623      	mov	r3, r4
 8000f12:	f7ff fca3 	bl	800085c <__aeabi_ddiv>
 8000f16:	4603      	mov	r3, r0
 8000f18:	460c      	mov	r4, r1
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	4621      	mov	r1, r4
 8000f1e:	a420      	add	r4, pc, #128	; (adr r4, 8000fa0 <readVin+0xe8>)
 8000f20:	e9d4 3400 	ldrd	r3, r4, [r4]
 8000f24:	461a      	mov	r2, r3
 8000f26:	4623      	mov	r3, r4
 8000f28:	f7ff fb6e 	bl	8000608 <__aeabi_dmul>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	460c      	mov	r4, r1
 8000f30:	e9c7 3404 	strd	r3, r4, [r7, #16]
	tempV = (double) ((tempV * (RESISTOR_TOP_VIN + RESISTOR_BOT)) / (RESISTOR_BOT))
 8000f34:	231d      	movs	r3, #29
 8000f36:	461a      	mov	r2, r3
 8000f38:	230a      	movs	r3, #10
 8000f3a:	4413      	add	r3, r2
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f7ff faf9 	bl	8000534 <__aeabi_i2d>
 8000f42:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000f46:	f7ff fb5f 	bl	8000608 <__aeabi_dmul>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	460c      	mov	r4, r1
 8000f4e:	4625      	mov	r5, r4
 8000f50:	461c      	mov	r4, r3
 8000f52:	230a      	movs	r3, #10
 8000f54:	4618      	mov	r0, r3
 8000f56:	f7ff faed 	bl	8000534 <__aeabi_i2d>
 8000f5a:	4602      	mov	r2, r0
 8000f5c:	460b      	mov	r3, r1
 8000f5e:	4620      	mov	r0, r4
 8000f60:	4629      	mov	r1, r5
 8000f62:	f7ff fc7b 	bl	800085c <__aeabi_ddiv>
 8000f66:	4603      	mov	r3, r0
 8000f68:	460c      	mov	r4, r1
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	4621      	mov	r1, r4
 8000f6e:	f04f 0200 	mov.w	r2, #0
 8000f72:	4b0e      	ldr	r3, [pc, #56]	; (8000fac <readVin+0xf4>)
 8000f74:	f7ff fb48 	bl	8000608 <__aeabi_dmul>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	460c      	mov	r4, r1
 8000f7c:	e9c7 3404 	strd	r3, r4, [r7, #16]
			* 1000.00;
	return tempV;
 8000f80:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8000f84:	ec44 3b17 	vmov	d7, r3, r4

}
 8000f88:	eeb0 0a47 	vmov.f32	s0, s14
 8000f8c:	eef0 0a67 	vmov.f32	s1, s15
 8000f90:	3720      	adds	r7, #32
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bdb0      	pop	{r4, r5, r7, pc}
 8000f96:	bf00      	nop
 8000f98:	00000000 	.word	0x00000000
 8000f9c:	40affe00 	.word	0x40affe00
 8000fa0:	66666666 	.word	0x66666666
 8000fa4:	400a6666 	.word	0x400a6666
 8000fa8:	20000674 	.word	0x20000674
 8000fac:	408f4000 	.word	0x408f4000

08000fb0 <readVout>:

double readVout(void) {
 8000fb0:	b5b0      	push	{r4, r5, r7, lr}
 8000fb2:	b088      	sub	sp, #32
 8000fb4:	af00      	add	r7, sp, #0
	uint32_t retVal = 0;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	61fb      	str	r3, [r7, #28]

	ADC_ChannelConfTypeDef sConfig = { 0 };
 8000fba:	463b      	mov	r3, r7
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	601a      	str	r2, [r3, #0]
 8000fc0:	605a      	str	r2, [r3, #4]
 8000fc2:	609a      	str	r2, [r3, #8]
 8000fc4:	60da      	str	r2, [r3, #12]
	sConfig.Channel = ADC_CHANNEL_0;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 8000fca:	2301      	movs	r3, #1
 8000fcc:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 8000fce:	2302      	movs	r3, #2
 8000fd0:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8000fd2:	463b      	mov	r3, r7
 8000fd4:	4619      	mov	r1, r3
 8000fd6:	4832      	ldr	r0, [pc, #200]	; (80010a0 <readVout+0xf0>)
 8000fd8:	f001 fdf0 	bl	8002bbc <HAL_ADC_ConfigChannel>
		//error handle
	}
	HAL_ADC_Start(&hadc1);
 8000fdc:	4830      	ldr	r0, [pc, #192]	; (80010a0 <readVout+0xf0>)
 8000fde:	f001 fc83 	bl	80028e8 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000fe2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000fe6:	482e      	ldr	r0, [pc, #184]	; (80010a0 <readVout+0xf0>)
 8000fe8:	f001 fd57 	bl	8002a9a <HAL_ADC_PollForConversion>
	retVal = HAL_ADC_GetValue(&hadc1);
 8000fec:	482c      	ldr	r0, [pc, #176]	; (80010a0 <readVout+0xf0>)
 8000fee:	f001 fdd8 	bl	8002ba2 <HAL_ADC_GetValue>
 8000ff2:	61f8      	str	r0, [r7, #28]
	HAL_ADC_Stop(&hadc1);
 8000ff4:	482a      	ldr	r0, [pc, #168]	; (80010a0 <readVout+0xf0>)
 8000ff6:	f001 fd1d 	bl	8002a34 <HAL_ADC_Stop>

	double tempV = ((double) retVal / maxADCVal) * sysVolt;
 8000ffa:	69f8      	ldr	r0, [r7, #28]
 8000ffc:	f7ff fa8a 	bl	8000514 <__aeabi_ui2d>
 8001000:	a423      	add	r4, pc, #140	; (adr r4, 8001090 <readVout+0xe0>)
 8001002:	e9d4 3400 	ldrd	r3, r4, [r4]
 8001006:	461a      	mov	r2, r3
 8001008:	4623      	mov	r3, r4
 800100a:	f7ff fc27 	bl	800085c <__aeabi_ddiv>
 800100e:	4603      	mov	r3, r0
 8001010:	460c      	mov	r4, r1
 8001012:	4618      	mov	r0, r3
 8001014:	4621      	mov	r1, r4
 8001016:	a420      	add	r4, pc, #128	; (adr r4, 8001098 <readVout+0xe8>)
 8001018:	e9d4 3400 	ldrd	r3, r4, [r4]
 800101c:	461a      	mov	r2, r3
 800101e:	4623      	mov	r3, r4
 8001020:	f7ff faf2 	bl	8000608 <__aeabi_dmul>
 8001024:	4603      	mov	r3, r0
 8001026:	460c      	mov	r4, r1
 8001028:	e9c7 3404 	strd	r3, r4, [r7, #16]
	tempV = (double) ((tempV * (RESISTOR_TOP_VOUT + RESISTOR_BOT)) / (RESISTOR_BOT))
 800102c:	231a      	movs	r3, #26
 800102e:	461a      	mov	r2, r3
 8001030:	230a      	movs	r3, #10
 8001032:	4413      	add	r3, r2
 8001034:	4618      	mov	r0, r3
 8001036:	f7ff fa7d 	bl	8000534 <__aeabi_i2d>
 800103a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800103e:	f7ff fae3 	bl	8000608 <__aeabi_dmul>
 8001042:	4603      	mov	r3, r0
 8001044:	460c      	mov	r4, r1
 8001046:	4625      	mov	r5, r4
 8001048:	461c      	mov	r4, r3
 800104a:	230a      	movs	r3, #10
 800104c:	4618      	mov	r0, r3
 800104e:	f7ff fa71 	bl	8000534 <__aeabi_i2d>
 8001052:	4602      	mov	r2, r0
 8001054:	460b      	mov	r3, r1
 8001056:	4620      	mov	r0, r4
 8001058:	4629      	mov	r1, r5
 800105a:	f7ff fbff 	bl	800085c <__aeabi_ddiv>
 800105e:	4603      	mov	r3, r0
 8001060:	460c      	mov	r4, r1
 8001062:	4618      	mov	r0, r3
 8001064:	4621      	mov	r1, r4
 8001066:	f04f 0200 	mov.w	r2, #0
 800106a:	4b0e      	ldr	r3, [pc, #56]	; (80010a4 <readVout+0xf4>)
 800106c:	f7ff facc 	bl	8000608 <__aeabi_dmul>
 8001070:	4603      	mov	r3, r0
 8001072:	460c      	mov	r4, r1
 8001074:	e9c7 3404 	strd	r3, r4, [r7, #16]
			* 1000.00;
	return tempV;
 8001078:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800107c:	ec44 3b17 	vmov	d7, r3, r4
}
 8001080:	eeb0 0a47 	vmov.f32	s0, s14
 8001084:	eef0 0a67 	vmov.f32	s1, s15
 8001088:	3720      	adds	r7, #32
 800108a:	46bd      	mov	sp, r7
 800108c:	bdb0      	pop	{r4, r5, r7, pc}
 800108e:	bf00      	nop
 8001090:	00000000 	.word	0x00000000
 8001094:	40affe00 	.word	0x40affe00
 8001098:	66666666 	.word	0x66666666
 800109c:	400a6666 	.word	0x400a6666
 80010a0:	20000674 	.word	0x20000674
 80010a4:	408f4000 	.word	0x408f4000

080010a8 <readIOut>:

double readIOut(void) {
 80010a8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80010ac:	b088      	sub	sp, #32
 80010ae:	af00      	add	r7, sp, #0
	uint32_t retVal = 0;
 80010b0:	2300      	movs	r3, #0
 80010b2:	61fb      	str	r3, [r7, #28]

	ADC_ChannelConfTypeDef sConfig = { 0 };
 80010b4:	463b      	mov	r3, r7
 80010b6:	2200      	movs	r2, #0
 80010b8:	601a      	str	r2, [r3, #0]
 80010ba:	605a      	str	r2, [r3, #4]
 80010bc:	609a      	str	r2, [r3, #8]
 80010be:	60da      	str	r2, [r3, #12]
	sConfig.Channel = ADC_CHANNEL_13;
 80010c0:	230d      	movs	r3, #13
 80010c2:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 80010c4:	2301      	movs	r3, #1
 80010c6:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 80010c8:	2302      	movs	r3, #2
 80010ca:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80010cc:	463b      	mov	r3, r7
 80010ce:	4619      	mov	r1, r3
 80010d0:	484d      	ldr	r0, [pc, #308]	; (8001208 <readIOut+0x160>)
 80010d2:	f001 fd73 	bl	8002bbc <HAL_ADC_ConfigChannel>
		//error handle
	}
	HAL_ADC_Start(&hadc1);
 80010d6:	484c      	ldr	r0, [pc, #304]	; (8001208 <readIOut+0x160>)
 80010d8:	f001 fc06 	bl	80028e8 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80010dc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80010e0:	4849      	ldr	r0, [pc, #292]	; (8001208 <readIOut+0x160>)
 80010e2:	f001 fcda 	bl	8002a9a <HAL_ADC_PollForConversion>
	retVal = HAL_ADC_GetValue(&hadc1);
 80010e6:	4848      	ldr	r0, [pc, #288]	; (8001208 <readIOut+0x160>)
 80010e8:	f001 fd5b 	bl	8002ba2 <HAL_ADC_GetValue>
 80010ec:	61f8      	str	r0, [r7, #28]
	HAL_ADC_Stop(&hadc1);
 80010ee:	4846      	ldr	r0, [pc, #280]	; (8001208 <readIOut+0x160>)
 80010f0:	f001 fca0 	bl	8002a34 <HAL_ADC_Stop>

	if (retVal <= 30)
 80010f4:	69fb      	ldr	r3, [r7, #28]
 80010f6:	2b1e      	cmp	r3, #30
 80010f8:	d801      	bhi.n	80010fe <readIOut+0x56>
		retVal = 0;
 80010fa:	2300      	movs	r3, #0
 80010fc:	61fb      	str	r3, [r7, #28]
	double tempI = ((double) retVal / maxADCVal) * sysVolt;
 80010fe:	69f8      	ldr	r0, [r7, #28]
 8001100:	f7ff fa08 	bl	8000514 <__aeabi_ui2d>
 8001104:	a43c      	add	r4, pc, #240	; (adr r4, 80011f8 <readIOut+0x150>)
 8001106:	e9d4 3400 	ldrd	r3, r4, [r4]
 800110a:	461a      	mov	r2, r3
 800110c:	4623      	mov	r3, r4
 800110e:	f7ff fba5 	bl	800085c <__aeabi_ddiv>
 8001112:	4603      	mov	r3, r0
 8001114:	460c      	mov	r4, r1
 8001116:	4618      	mov	r0, r3
 8001118:	4621      	mov	r1, r4
 800111a:	a439      	add	r4, pc, #228	; (adr r4, 8001200 <readIOut+0x158>)
 800111c:	e9d4 3400 	ldrd	r3, r4, [r4]
 8001120:	461a      	mov	r2, r3
 8001122:	4623      	mov	r3, r4
 8001124:	f7ff fa70 	bl	8000608 <__aeabi_dmul>
 8001128:	4603      	mov	r3, r0
 800112a:	460c      	mov	r4, r1
 800112c:	e9c7 3404 	strd	r3, r4, [r7, #16]
	tempI = (tempI * 1000) / (SENSE_GAIN * (R_SENSE / 1000.00));
 8001130:	f04f 0200 	mov.w	r2, #0
 8001134:	4b35      	ldr	r3, [pc, #212]	; (800120c <readIOut+0x164>)
 8001136:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800113a:	f7ff fa65 	bl	8000608 <__aeabi_dmul>
 800113e:	4603      	mov	r3, r0
 8001140:	460c      	mov	r4, r1
 8001142:	4625      	mov	r5, r4
 8001144:	461c      	mov	r4, r3
 8001146:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800114a:	4618      	mov	r0, r3
 800114c:	f7ff f9f2 	bl	8000534 <__aeabi_i2d>
 8001150:	4680      	mov	r8, r0
 8001152:	4689      	mov	r9, r1
 8001154:	230a      	movs	r3, #10
 8001156:	4618      	mov	r0, r3
 8001158:	f7ff f9ec 	bl	8000534 <__aeabi_i2d>
 800115c:	f04f 0200 	mov.w	r2, #0
 8001160:	4b2a      	ldr	r3, [pc, #168]	; (800120c <readIOut+0x164>)
 8001162:	f7ff fb7b 	bl	800085c <__aeabi_ddiv>
 8001166:	4602      	mov	r2, r0
 8001168:	460b      	mov	r3, r1
 800116a:	4640      	mov	r0, r8
 800116c:	4649      	mov	r1, r9
 800116e:	f7ff fa4b 	bl	8000608 <__aeabi_dmul>
 8001172:	4602      	mov	r2, r0
 8001174:	460b      	mov	r3, r1
 8001176:	4620      	mov	r0, r4
 8001178:	4629      	mov	r1, r5
 800117a:	f7ff fb6f 	bl	800085c <__aeabi_ddiv>
 800117e:	4603      	mov	r3, r0
 8001180:	460c      	mov	r4, r1
 8001182:	e9c7 3404 	strd	r3, r4, [r7, #16]
	if ((tempI <= IDLE_I_HIGH) && (tempI >= IDLE_I_LOW))
 8001186:	2364      	movs	r3, #100	; 0x64
 8001188:	4618      	mov	r0, r3
 800118a:	f7ff f9d3 	bl	8000534 <__aeabi_i2d>
 800118e:	4603      	mov	r3, r0
 8001190:	460c      	mov	r4, r1
 8001192:	461a      	mov	r2, r3
 8001194:	4623      	mov	r3, r4
 8001196:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800119a:	f7ff fcb1 	bl	8000b00 <__aeabi_dcmple>
 800119e:	4603      	mov	r3, r0
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d013      	beq.n	80011cc <readIOut+0x124>
 80011a4:	2364      	movs	r3, #100	; 0x64
 80011a6:	4618      	mov	r0, r3
 80011a8:	f7ff f9c4 	bl	8000534 <__aeabi_i2d>
 80011ac:	4603      	mov	r3, r0
 80011ae:	460c      	mov	r4, r1
 80011b0:	461a      	mov	r2, r3
 80011b2:	4623      	mov	r3, r4
 80011b4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80011b8:	f7ff fcac 	bl	8000b14 <__aeabi_dcmpge>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d004      	beq.n	80011cc <readIOut+0x124>
		return 0;
 80011c2:	f04f 0300 	mov.w	r3, #0
 80011c6:	f04f 0400 	mov.w	r4, #0
 80011ca:	e008      	b.n	80011de <readIOut+0x136>
	return tempI - 2.500;
 80011cc:	f04f 0200 	mov.w	r2, #0
 80011d0:	4b0f      	ldr	r3, [pc, #60]	; (8001210 <readIOut+0x168>)
 80011d2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80011d6:	f7ff f85f 	bl	8000298 <__aeabi_dsub>
 80011da:	4603      	mov	r3, r0
 80011dc:	460c      	mov	r4, r1
 80011de:	ec44 3b17 	vmov	d7, r3, r4
}
 80011e2:	eeb0 0a47 	vmov.f32	s0, s14
 80011e6:	eef0 0a67 	vmov.f32	s1, s15
 80011ea:	3720      	adds	r7, #32
 80011ec:	46bd      	mov	sp, r7
 80011ee:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80011f2:	bf00      	nop
 80011f4:	f3af 8000 	nop.w
 80011f8:	00000000 	.word	0x00000000
 80011fc:	40affe00 	.word	0x40affe00
 8001200:	66666666 	.word	0x66666666
 8001204:	400a6666 	.word	0x400a6666
 8001208:	20000674 	.word	0x20000674
 800120c:	408f4000 	.word	0x408f4000
 8001210:	40040000 	.word	0x40040000

08001214 <readBtnUp>:

#include "buttons.h"

#define UNCONNECTED	//TODO: comment when buttons are connected

uint8_t readBtnUp(void){
 8001214:	b580      	push	{r7, lr}
 8001216:	af00      	add	r7, sp, #0
#ifdef UNCONNECTED
	return HAL_GPIO_ReadPin(nSW_UP_GPIO_Port, nSW_UP_Pin);
 8001218:	2110      	movs	r1, #16
 800121a:	4803      	ldr	r0, [pc, #12]	; (8001228 <readBtnUp+0x14>)
 800121c:	f002 f980 	bl	8003520 <HAL_GPIO_ReadPin>
 8001220:	4603      	mov	r3, r0
#endif
	return !HAL_GPIO_ReadPin(nSW_UP_GPIO_Port, nSW_UP_Pin);
}
 8001222:	4618      	mov	r0, r3
 8001224:	bd80      	pop	{r7, pc}
 8001226:	bf00      	nop
 8001228:	40020400 	.word	0x40020400

0800122c <readBtnDw>:

uint8_t readBtnDw(void){
 800122c:	b580      	push	{r7, lr}
 800122e:	af00      	add	r7, sp, #0
#ifdef UNCONNECTED
	return HAL_GPIO_ReadPin(nSW_DW_GPIO_Port, nSW_DW_Pin);
 8001230:	2104      	movs	r1, #4
 8001232:	4803      	ldr	r0, [pc, #12]	; (8001240 <readBtnDw+0x14>)
 8001234:	f002 f974 	bl	8003520 <HAL_GPIO_ReadPin>
 8001238:	4603      	mov	r3, r0
#endif
	return !HAL_GPIO_ReadPin(nSW_DW_GPIO_Port, nSW_DW_Pin);
}
 800123a:	4618      	mov	r0, r3
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	40020c00 	.word	0x40020c00

08001244 <readBtnVi>:

uint8_t readBtnVi(void){
 8001244:	b580      	push	{r7, lr}
 8001246:	af00      	add	r7, sp, #0
#ifdef UNCONNECTED
	return HAL_GPIO_ReadPin(nSW_VI_GPIO_Port, nSW_VI_Pin);
 8001248:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800124c:	4802      	ldr	r0, [pc, #8]	; (8001258 <readBtnVi+0x14>)
 800124e:	f002 f967 	bl	8003520 <HAL_GPIO_ReadPin>
 8001252:	4603      	mov	r3, r0
#endif
	return !HAL_GPIO_ReadPin(nSW_VI_GPIO_Port, nSW_VI_Pin);
}
 8001254:	4618      	mov	r0, r3
 8001256:	bd80      	pop	{r7, pc}
 8001258:	40020800 	.word	0x40020800

0800125c <readBtnOe>:

uint8_t readBtnOe(void){
 800125c:	b580      	push	{r7, lr}
 800125e:	af00      	add	r7, sp, #0
#ifdef UNCONNECTED
	return HAL_GPIO_ReadPin(nSW_OE_GPIO_Port, nSW_OE_Pin);
 8001260:	2120      	movs	r1, #32
 8001262:	4803      	ldr	r0, [pc, #12]	; (8001270 <readBtnOe+0x14>)
 8001264:	f002 f95c 	bl	8003520 <HAL_GPIO_ReadPin>
 8001268:	4603      	mov	r3, r0
#endif
	return !HAL_GPIO_ReadPin(nSW_OE_GPIO_Port, nSW_OE_Pin);
}
 800126a:	4618      	mov	r0, r3
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	40020400 	.word	0x40020400

08001274 <whichBtn>:


uint8_t whichBtn(void) {
 8001274:	b580      	push	{r7, lr}
 8001276:	b082      	sub	sp, #8
 8001278:	af00      	add	r7, sp, #0
	uint8_t ret = 0b0000;
 800127a:	2300      	movs	r3, #0
 800127c:	71fb      	strb	r3, [r7, #7]

	while (readBtnUp())
 800127e:	e003      	b.n	8001288 <whichBtn+0x14>
		ret |= UP_BTN;
 8001280:	79fb      	ldrb	r3, [r7, #7]
 8001282:	f043 0301 	orr.w	r3, r3, #1
 8001286:	71fb      	strb	r3, [r7, #7]
	while (readBtnUp())
 8001288:	f7ff ffc4 	bl	8001214 <readBtnUp>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d1f6      	bne.n	8001280 <whichBtn+0xc>
	while (readBtnDw())
 8001292:	e003      	b.n	800129c <whichBtn+0x28>
		ret |= DW_BTN;
 8001294:	79fb      	ldrb	r3, [r7, #7]
 8001296:	f043 0302 	orr.w	r3, r3, #2
 800129a:	71fb      	strb	r3, [r7, #7]
	while (readBtnDw())
 800129c:	f7ff ffc6 	bl	800122c <readBtnDw>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d1f6      	bne.n	8001294 <whichBtn+0x20>
	while (readBtnVi())
 80012a6:	e003      	b.n	80012b0 <whichBtn+0x3c>
		ret |= VI_BTN;
 80012a8:	79fb      	ldrb	r3, [r7, #7]
 80012aa:	f043 0304 	orr.w	r3, r3, #4
 80012ae:	71fb      	strb	r3, [r7, #7]
	while (readBtnVi())
 80012b0:	f7ff ffc8 	bl	8001244 <readBtnVi>
 80012b4:	4603      	mov	r3, r0
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d1f6      	bne.n	80012a8 <whichBtn+0x34>
	if (readBtnOe())
 80012ba:	f7ff ffcf 	bl	800125c <readBtnOe>
 80012be:	4603      	mov	r3, r0
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d003      	beq.n	80012cc <whichBtn+0x58>
		ret |= OE_BTN;
 80012c4:	79fb      	ldrb	r3, [r7, #7]
 80012c6:	f043 0308 	orr.w	r3, r3, #8
 80012ca:	71fb      	strb	r3, [r7, #7]

	return ret;
 80012cc:	79fb      	ldrb	r3, [r7, #7]
}
 80012ce:	4618      	mov	r0, r3
 80012d0:	3708      	adds	r7, #8
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
	...

080012d8 <printMsg>:
#include "stm32f4xx_hal_gpio.h"
#include "leds.h"
#include "ssd1306.h"

void printMsg(char *format, ...)
{
 80012d8:	b40f      	push	{r0, r1, r2, r3}
 80012da:	b580      	push	{r7, lr}
 80012dc:	b096      	sub	sp, #88	; 0x58
 80012de:	af00      	add	r7, sp, #0
	char str[80];

	/*Extract the the argument list using VA apis */
	va_list args;
	va_start(args, format);
 80012e0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80012e4:	607b      	str	r3, [r7, #4]
	vsprintf(str, format, args);
 80012e6:	f107 0308 	add.w	r3, r7, #8
 80012ea:	687a      	ldr	r2, [r7, #4]
 80012ec:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80012ee:	4618      	mov	r0, r3
 80012f0:	f004 fe3c 	bl	8005f6c <vsiprintf>
	HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen(str), HAL_MAX_DELAY);
 80012f4:	f107 0308 	add.w	r3, r7, #8
 80012f8:	4618      	mov	r0, r3
 80012fa:	f7fe ff71 	bl	80001e0 <strlen>
 80012fe:	4603      	mov	r3, r0
 8001300:	b29a      	uxth	r2, r3
 8001302:	f107 0108 	add.w	r1, r7, #8
 8001306:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800130a:	4805      	ldr	r0, [pc, #20]	; (8001320 <printMsg+0x48>)
 800130c:	f003 fcff 	bl	8004d0e <HAL_UART_Transmit>
	va_end(args);
}
 8001310:	bf00      	nop
 8001312:	3758      	adds	r7, #88	; 0x58
 8001314:	46bd      	mov	sp, r7
 8001316:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800131a:	b004      	add	sp, #16
 800131c:	4770      	bx	lr
 800131e:	bf00      	nop
 8001320:	200006bc 	.word	0x200006bc

08001324 <i2cScan>:

uint8_t i2cScan(void)
{
 8001324:	b5b0      	push	{r4, r5, r7, lr}
 8001326:	b088      	sub	sp, #32
 8001328:	af00      	add	r7, sp, #0
	char info[] = "Scanning I2C bus...\r\n";
 800132a:	4b31      	ldr	r3, [pc, #196]	; (80013f0 <i2cScan+0xcc>)
 800132c:	1d3c      	adds	r4, r7, #4
 800132e:	461d      	mov	r5, r3
 8001330:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001332:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001334:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001338:	6020      	str	r0, [r4, #0]
 800133a:	3404      	adds	r4, #4
 800133c:	8021      	strh	r1, [r4, #0]
	printMsg(info);
 800133e:	1d3b      	adds	r3, r7, #4
 8001340:	4618      	mov	r0, r3
 8001342:	f7ff ffc9 	bl	80012d8 <printMsg>

	uint8_t devices = 0;
 8001346:	2300      	movs	r3, #0
 8001348:	77fb      	strb	r3, [r7, #31]

	HAL_StatusTypeDef res;

	for (uint16_t i = 0; i < 128; i++)
 800134a:	2300      	movs	r3, #0
 800134c:	83bb      	strh	r3, [r7, #28]
 800134e:	e042      	b.n	80013d6 <i2cScan+0xb2>
	{
		res = HAL_I2C_IsDeviceReady(&hi2c1, i << 1, 1, 10);
 8001350:	8bbb      	ldrh	r3, [r7, #28]
 8001352:	005b      	lsls	r3, r3, #1
 8001354:	b299      	uxth	r1, r3
 8001356:	230a      	movs	r3, #10
 8001358:	2201      	movs	r2, #1
 800135a:	4826      	ldr	r0, [pc, #152]	; (80013f4 <i2cScan+0xd0>)
 800135c:	f002 fc80 	bl	8003c60 <HAL_I2C_IsDeviceReady>
 8001360:	4603      	mov	r3, r0
 8001362:	76fb      	strb	r3, [r7, #27]
		if (res == HAL_OK && (i << 1) == SSD1306_I2C_ADDR)
 8001364:	7efb      	ldrb	r3, [r7, #27]
 8001366:	2b00      	cmp	r3, #0
 8001368:	d10d      	bne.n	8001386 <i2cScan+0x62>
 800136a:	8bbb      	ldrh	r3, [r7, #28]
 800136c:	005b      	lsls	r3, r3, #1
 800136e:	2b78      	cmp	r3, #120	; 0x78
 8001370:	d109      	bne.n	8001386 <i2cScan+0x62>
		{
			devices |= OLED_FOUND;
 8001372:	7ffb      	ldrb	r3, [r7, #31]
 8001374:	f043 0301 	orr.w	r3, r3, #1
 8001378:	77fb      	strb	r3, [r7, #31]
			printMsg("OLED found at 0x%02X\n", i);
 800137a:	8bbb      	ldrh	r3, [r7, #28]
 800137c:	4619      	mov	r1, r3
 800137e:	481e      	ldr	r0, [pc, #120]	; (80013f8 <i2cScan+0xd4>)
 8001380:	f7ff ffaa 	bl	80012d8 <printMsg>
 8001384:	e024      	b.n	80013d0 <i2cScan+0xac>
		}
		else if (res == HAL_OK && (i << 1) == MCP4018_I2C_ADDR)
 8001386:	7efb      	ldrb	r3, [r7, #27]
 8001388:	2b00      	cmp	r3, #0
 800138a:	d10d      	bne.n	80013a8 <i2cScan+0x84>
 800138c:	8bbb      	ldrh	r3, [r7, #28]
 800138e:	005b      	lsls	r3, r3, #1
 8001390:	2b5e      	cmp	r3, #94	; 0x5e
 8001392:	d109      	bne.n	80013a8 <i2cScan+0x84>
		{
			devices |= POT_FOUND;
 8001394:	7ffb      	ldrb	r3, [r7, #31]
 8001396:	f043 0302 	orr.w	r3, r3, #2
 800139a:	77fb      	strb	r3, [r7, #31]
			printMsg("MCP4018 found at 0x%02X\n", i);
 800139c:	8bbb      	ldrh	r3, [r7, #28]
 800139e:	4619      	mov	r1, r3
 80013a0:	4816      	ldr	r0, [pc, #88]	; (80013fc <i2cScan+0xd8>)
 80013a2:	f7ff ff99 	bl	80012d8 <printMsg>
 80013a6:	e013      	b.n	80013d0 <i2cScan+0xac>
		}
		else if (res == HAL_OK)
 80013a8:	7efb      	ldrb	r3, [r7, #27]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d105      	bne.n	80013ba <i2cScan+0x96>
		{
			printMsg("Unknown device found at 0x%02X\n", i);
 80013ae:	8bbb      	ldrh	r3, [r7, #28]
 80013b0:	4619      	mov	r1, r3
 80013b2:	4813      	ldr	r0, [pc, #76]	; (8001400 <i2cScan+0xdc>)
 80013b4:	f7ff ff90 	bl	80012d8 <printMsg>
 80013b8:	e00a      	b.n	80013d0 <i2cScan+0xac>
		}
		else if (res == HAL_OK)
 80013ba:	7efb      	ldrb	r3, [r7, #27]
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d107      	bne.n	80013d0 <i2cScan+0xac>
		{
			printMsg("Unknown device found at 0x%02X\n", i);
 80013c0:	8bbb      	ldrh	r3, [r7, #28]
 80013c2:	4619      	mov	r1, r3
 80013c4:	480e      	ldr	r0, [pc, #56]	; (8001400 <i2cScan+0xdc>)
 80013c6:	f7ff ff87 	bl	80012d8 <printMsg>
			HAL_Delay(10);
 80013ca:	200a      	movs	r0, #10
 80013cc:	f001 fa26 	bl	800281c <HAL_Delay>
	for (uint16_t i = 0; i < 128; i++)
 80013d0:	8bbb      	ldrh	r3, [r7, #28]
 80013d2:	3301      	adds	r3, #1
 80013d4:	83bb      	strh	r3, [r7, #28]
 80013d6:	8bbb      	ldrh	r3, [r7, #28]
 80013d8:	2b7f      	cmp	r3, #127	; 0x7f
 80013da:	d9b9      	bls.n	8001350 <i2cScan+0x2c>
		}
	}
	printMsg("returning from scan %02X\n", devices);
 80013dc:	7ffb      	ldrb	r3, [r7, #31]
 80013de:	4619      	mov	r1, r3
 80013e0:	4808      	ldr	r0, [pc, #32]	; (8001404 <i2cScan+0xe0>)
 80013e2:	f7ff ff79 	bl	80012d8 <printMsg>
	return devices;
 80013e6:	7ffb      	ldrb	r3, [r7, #31]
}
 80013e8:	4618      	mov	r0, r3
 80013ea:	3720      	adds	r7, #32
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bdb0      	pop	{r4, r5, r7, pc}
 80013f0:	08007778 	.word	0x08007778
 80013f4:	20000614 	.word	0x20000614
 80013f8:	08007708 	.word	0x08007708
 80013fc:	08007720 	.word	0x08007720
 8001400:	0800773c 	.word	0x0800773c
 8001404:	0800775c 	.word	0x0800775c

08001408 <errorLEDs>:
 *      Author: adityasehgal
 */

#include "leds.h"

void errorLEDs(uint8_t error) {
 8001408:	b580      	push	{r7, lr}
 800140a:	b082      	sub	sp, #8
 800140c:	af00      	add	r7, sp, #0
 800140e:	4603      	mov	r3, r0
 8001410:	71fb      	strb	r3, [r7, #7]
	while (1) {
		if (error == OLED_FOUND) {
 8001412:	79fb      	ldrb	r3, [r7, #7]
 8001414:	2b01      	cmp	r3, #1
 8001416:	d114      	bne.n	8001442 <errorLEDs+0x3a>
			HAL_GPIO_TogglePin(CC_LED_PORT, CC_LED_PIN);
 8001418:	2120      	movs	r1, #32
 800141a:	4826      	ldr	r0, [pc, #152]	; (80014b4 <errorLEDs+0xac>)
 800141c:	f002 f8b1 	bl	8003582 <HAL_GPIO_TogglePin>
			HAL_Delay(FLASH_FREQ);
 8001420:	2064      	movs	r0, #100	; 0x64
 8001422:	f001 f9fb 	bl	800281c <HAL_Delay>
			HAL_GPIO_TogglePin(OE_LED_PORT, OE_LED_PIN);
 8001426:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800142a:	4822      	ldr	r0, [pc, #136]	; (80014b4 <errorLEDs+0xac>)
 800142c:	f002 f8a9 	bl	8003582 <HAL_GPIO_TogglePin>
			HAL_Delay(FLASH_FREQ >> 1);
 8001430:	2032      	movs	r0, #50	; 0x32
 8001432:	f001 f9f3 	bl	800281c <HAL_Delay>
			HAL_GPIO_TogglePin(OE_LED_PORT, OE_LED_PIN);
 8001436:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800143a:	481e      	ldr	r0, [pc, #120]	; (80014b4 <errorLEDs+0xac>)
 800143c:	f002 f8a1 	bl	8003582 <HAL_GPIO_TogglePin>
 8001440:	e7e7      	b.n	8001412 <errorLEDs+0xa>
		} else if (error == POT_FOUND) {
 8001442:	79fb      	ldrb	r3, [r7, #7]
 8001444:	2b02      	cmp	r3, #2
 8001446:	d113      	bne.n	8001470 <errorLEDs+0x68>
			HAL_GPIO_TogglePin(OE_LED_PORT, OE_LED_PIN);
 8001448:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800144c:	4819      	ldr	r0, [pc, #100]	; (80014b4 <errorLEDs+0xac>)
 800144e:	f002 f898 	bl	8003582 <HAL_GPIO_TogglePin>
			HAL_Delay(FLASH_FREQ);
 8001452:	2064      	movs	r0, #100	; 0x64
 8001454:	f001 f9e2 	bl	800281c <HAL_Delay>
			HAL_GPIO_TogglePin(CC_LED_PORT, CC_LED_PIN);
 8001458:	2120      	movs	r1, #32
 800145a:	4816      	ldr	r0, [pc, #88]	; (80014b4 <errorLEDs+0xac>)
 800145c:	f002 f891 	bl	8003582 <HAL_GPIO_TogglePin>
			HAL_Delay(FLASH_FREQ >> 1);
 8001460:	2032      	movs	r0, #50	; 0x32
 8001462:	f001 f9db 	bl	800281c <HAL_Delay>
			HAL_GPIO_TogglePin(CC_LED_PORT, CC_LED_PIN);
 8001466:	2120      	movs	r1, #32
 8001468:	4812      	ldr	r0, [pc, #72]	; (80014b4 <errorLEDs+0xac>)
 800146a:	f002 f88a 	bl	8003582 <HAL_GPIO_TogglePin>
 800146e:	e7d0      	b.n	8001412 <errorLEDs+0xa>
		} else if (error == 0) {
 8001470:	79fb      	ldrb	r3, [r7, #7]
 8001472:	2b00      	cmp	r3, #0
 8001474:	d118      	bne.n	80014a8 <errorLEDs+0xa0>
			HAL_GPIO_TogglePin(OE_LED_PORT, OE_LED_PIN);
 8001476:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800147a:	480e      	ldr	r0, [pc, #56]	; (80014b4 <errorLEDs+0xac>)
 800147c:	f002 f881 	bl	8003582 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(CC_LED_PORT, CC_LED_PIN);
 8001480:	2120      	movs	r1, #32
 8001482:	480c      	ldr	r0, [pc, #48]	; (80014b4 <errorLEDs+0xac>)
 8001484:	f002 f87d 	bl	8003582 <HAL_GPIO_TogglePin>
			HAL_Delay(FLASH_FREQ >> 1);
 8001488:	2032      	movs	r0, #50	; 0x32
 800148a:	f001 f9c7 	bl	800281c <HAL_Delay>
			HAL_GPIO_TogglePin(OE_LED_PORT, OE_LED_PIN);
 800148e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001492:	4808      	ldr	r0, [pc, #32]	; (80014b4 <errorLEDs+0xac>)
 8001494:	f002 f875 	bl	8003582 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(CC_LED_PORT, CC_LED_PIN);
 8001498:	2120      	movs	r1, #32
 800149a:	4806      	ldr	r0, [pc, #24]	; (80014b4 <errorLEDs+0xac>)
 800149c:	f002 f871 	bl	8003582 <HAL_GPIO_TogglePin>
			HAL_Delay(FLASH_FREQ >> 1);
 80014a0:	2032      	movs	r0, #50	; 0x32
 80014a2:	f001 f9bb 	bl	800281c <HAL_Delay>
		if (error == OLED_FOUND) {
 80014a6:	e7b4      	b.n	8001412 <errorLEDs+0xa>
		} else {
			break;
 80014a8:	bf00      	nop
		}
	}
}
 80014aa:	bf00      	nop
 80014ac:	3708      	adds	r7, #8
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	40020000 	.word	0x40020000

080014b8 <viLedOn>:

void viLedOn(void) {
 80014b8:	b580      	push	{r7, lr}
 80014ba:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(VI_LED_GPIO_Port, VI_LED_Pin, GPIO_PIN_SET);
 80014bc:	2201      	movs	r2, #1
 80014be:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80014c2:	4802      	ldr	r0, [pc, #8]	; (80014cc <viLedOn+0x14>)
 80014c4:	f002 f844 	bl	8003550 <HAL_GPIO_WritePin>
}
 80014c8:	bf00      	nop
 80014ca:	bd80      	pop	{r7, pc}
 80014cc:	40020000 	.word	0x40020000

080014d0 <viLedOff>:

void viLedOff(void) {
 80014d0:	b580      	push	{r7, lr}
 80014d2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(VI_LED_GPIO_Port, VI_LED_Pin, GPIO_PIN_RESET);
 80014d4:	2200      	movs	r2, #0
 80014d6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80014da:	4802      	ldr	r0, [pc, #8]	; (80014e4 <viLedOff+0x14>)
 80014dc:	f002 f838 	bl	8003550 <HAL_GPIO_WritePin>
}
 80014e0:	bf00      	nop
 80014e2:	bd80      	pop	{r7, pc}
 80014e4:	40020000 	.word	0x40020000

080014e8 <oeLedOn>:

void viLedToggle(void) {
	HAL_GPIO_TogglePin(VI_LED_GPIO_Port, VI_LED_Pin);
}

void oeLedOn(void) {
 80014e8:	b580      	push	{r7, lr}
 80014ea:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(OE_LED_GPIO_Port, OE_LED_Pin, GPIO_PIN_SET);
 80014ec:	2201      	movs	r2, #1
 80014ee:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80014f2:	4802      	ldr	r0, [pc, #8]	; (80014fc <oeLedOn+0x14>)
 80014f4:	f002 f82c 	bl	8003550 <HAL_GPIO_WritePin>
}
 80014f8:	bf00      	nop
 80014fa:	bd80      	pop	{r7, pc}
 80014fc:	40020000 	.word	0x40020000

08001500 <oeLedOff>:

void oeLedOff(void) {
 8001500:	b580      	push	{r7, lr}
 8001502:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(OE_LED_GPIO_Port, OE_LED_Pin, GPIO_PIN_RESET);
 8001504:	2200      	movs	r2, #0
 8001506:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800150a:	4802      	ldr	r0, [pc, #8]	; (8001514 <oeLedOff+0x14>)
 800150c:	f002 f820 	bl	8003550 <HAL_GPIO_WritePin>
}
 8001510:	bf00      	nop
 8001512:	bd80      	pop	{r7, pc}
 8001514:	40020000 	.word	0x40020000

08001518 <ccLedOn>:

void oeLedToggle(void) {
	HAL_GPIO_TogglePin(OE_LED_GPIO_Port, OE_LED_Pin);
}

void ccLedOn(void) {
 8001518:	b580      	push	{r7, lr}
 800151a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CC_LED_GPIO_Port, CC_LED_Pin, GPIO_PIN_SET);
 800151c:	2201      	movs	r2, #1
 800151e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001522:	4802      	ldr	r0, [pc, #8]	; (800152c <ccLedOn+0x14>)
 8001524:	f002 f814 	bl	8003550 <HAL_GPIO_WritePin>
}
 8001528:	bf00      	nop
 800152a:	bd80      	pop	{r7, pc}
 800152c:	40020800 	.word	0x40020800

08001530 <ccLedOff>:

void ccLedOff(void) {
 8001530:	b580      	push	{r7, lr}
 8001532:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CC_LED_GPIO_Port, CC_LED_Pin, GPIO_PIN_RESET);
 8001534:	2200      	movs	r2, #0
 8001536:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800153a:	4802      	ldr	r0, [pc, #8]	; (8001544 <ccLedOff+0x14>)
 800153c:	f002 f808 	bl	8003550 <HAL_GPIO_WritePin>
}
 8001540:	bf00      	nop
 8001542:	bd80      	pop	{r7, pc}
 8001544:	40020800 	.word	0x40020800

08001548 <setLeds>:

void ccLedToggle(void) {
	HAL_GPIO_TogglePin(CC_LED_GPIO_Port, CC_LED_Pin);
}

void setLeds(struct Stats psu) {
 8001548:	b580      	push	{r7, lr}
 800154a:	b084      	sub	sp, #16
 800154c:	af00      	add	r7, sp, #0
 800154e:	1d3b      	adds	r3, r7, #4
 8001550:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if (psu.OE == OE_ENABLED) {
 8001554:	7b7b      	ldrb	r3, [r7, #13]
 8001556:	2b01      	cmp	r3, #1
 8001558:	d102      	bne.n	8001560 <setLeds+0x18>
		oeLedOn();
 800155a:	f7ff ffc5 	bl	80014e8 <oeLedOn>
 800155e:	e001      	b.n	8001564 <setLeds+0x1c>
	} else {
		oeLedOff();
 8001560:	f7ff ffce 	bl	8001500 <oeLedOff>
	}

	if (psu.VI == VI_V_SEL) {
 8001564:	7bbb      	ldrb	r3, [r7, #14]
 8001566:	2b01      	cmp	r3, #1
 8001568:	d102      	bne.n	8001570 <setLeds+0x28>
		viLedOn();
 800156a:	f7ff ffa5 	bl	80014b8 <viLedOn>
 800156e:	e001      	b.n	8001574 <setLeds+0x2c>
	} else {
		viLedOff();
 8001570:	f7ff ffae 	bl	80014d0 <viLedOff>
	}

	if (psu.iLim == I_LIM_SET) {
 8001574:	7b3b      	ldrb	r3, [r7, #12]
 8001576:	2b01      	cmp	r3, #1
 8001578:	d102      	bne.n	8001580 <setLeds+0x38>
		ccLedOn();
 800157a:	f7ff ffcd 	bl	8001518 <ccLedOn>
	} else {
		ccLedOff();
	}
}
 800157e:	e001      	b.n	8001584 <setLeds+0x3c>
		ccLedOff();
 8001580:	f7ff ffd6 	bl	8001530 <ccLedOff>
}
 8001584:	bf00      	nop
 8001586:	3710      	adds	r7, #16
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}

0800158c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 800158c:	b590      	push	{r4, r7, lr}
 800158e:	b08b      	sub	sp, #44	; 0x2c
 8001590:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001592:	f001 f8d1 	bl	8002738 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001596:	f000 f8b9 	bl	800170c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800159a:	f000 f9dd 	bl	8001958 <MX_GPIO_Init>
	MX_ADC1_Init();
 800159e:	f000 f915 	bl	80017cc <MX_ADC1_Init>
	MX_I2C1_Init();
 80015a2:	f000 f981 	bl	80018a8 <MX_I2C1_Init>
	MX_USART2_UART_Init();
 80015a6:	f000 f9ad 	bl	8001904 <MX_USART2_UART_Init>
	/* USER CODE BEGIN 2 */

	uint8_t i2cScanRet = i2cScan();
 80015aa:	f7ff febb 	bl	8001324 <i2cScan>
 80015ae:	4603      	mov	r3, r0
 80015b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!i2cScanRet) {
 80015b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d104      	bne.n	80015c6 <main+0x3a>
		errorLEDs(i2cScanRet);
 80015bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80015c0:	4618      	mov	r0, r3
 80015c2:	f7ff ff21 	bl	8001408 <errorLEDs>
	}
	printMsg("no I2C errors\n\n");
 80015c6:	484f      	ldr	r0, [pc, #316]	; (8001704 <main+0x178>)
 80015c8:	f7ff fe86 	bl	80012d8 <printMsg>

	initPSU();
 80015cc:	f000 fa90 	bl	8001af0 <initPSU>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {

		double Vin = readVin();
 80015d0:	f7ff fc72 	bl	8000eb8 <readVin>
 80015d4:	ed87 0b06 	vstr	d0, [r7, #24]

		double Vout = readVout();
 80015d8:	f7ff fcea 	bl	8000fb0 <readVout>
 80015dc:	ed87 0b04 	vstr	d0, [r7, #16]

		double Iout = readIOut();
 80015e0:	f7ff fd62 	bl	80010a8 <readIOut>
 80015e4:	ed87 0b02 	vstr	d0, [r7, #8]

		displayVoltageCurrent(Vin, Vout, Iout);
 80015e8:	ed97 2b02 	vldr	d2, [r7, #8]
 80015ec:	ed97 1b04 	vldr	d1, [r7, #16]
 80015f0:	ed97 0b06 	vldr	d0, [r7, #24]
 80015f4:	f000 face 	bl	8001b94 <displayVoltageCurrent>

		uint8_t buttons = whichBtn();
 80015f8:	f7ff fe3c 	bl	8001274 <whichBtn>
 80015fc:	4603      	mov	r3, r0
 80015fe:	71fb      	strb	r3, [r7, #7]

		if (buttons & VI_BTN) {
 8001600:	79fb      	ldrb	r3, [r7, #7]
 8001602:	f003 0304 	and.w	r3, r3, #4
 8001606:	2b00      	cmp	r3, #0
 8001608:	d011      	beq.n	800162e <main+0xa2>
			if (psuStats.VI == VI_V_SEL) {
 800160a:	4b3f      	ldr	r3, [pc, #252]	; (8001708 <main+0x17c>)
 800160c:	7a9b      	ldrb	r3, [r3, #10]
 800160e:	2b01      	cmp	r3, #1
 8001610:	d103      	bne.n	800161a <main+0x8e>
				psuStats.VI = VI_I_SEL;
 8001612:	4b3d      	ldr	r3, [pc, #244]	; (8001708 <main+0x17c>)
 8001614:	2200      	movs	r2, #0
 8001616:	729a      	strb	r2, [r3, #10]
 8001618:	e009      	b.n	800162e <main+0xa2>
			} else if (psuStats.VI == VI_I_SEL) {
 800161a:	4b3b      	ldr	r3, [pc, #236]	; (8001708 <main+0x17c>)
 800161c:	7a9b      	ldrb	r3, [r3, #10]
 800161e:	2b00      	cmp	r3, #0
 8001620:	d103      	bne.n	800162a <main+0x9e>
				psuStats.VI = VI_V_SEL;
 8001622:	4b39      	ldr	r3, [pc, #228]	; (8001708 <main+0x17c>)
 8001624:	2201      	movs	r2, #1
 8001626:	729a      	strb	r2, [r3, #10]
 8001628:	e001      	b.n	800162e <main+0xa2>
			} else { //something went wrong, reinit psu
				initPSU();
 800162a:	f000 fa61 	bl	8001af0 <initPSU>
			}
		}

		if (buttons & UP_BTN) {
 800162e:	79fb      	ldrb	r3, [r7, #7]
 8001630:	f003 0301 	and.w	r3, r3, #1
 8001634:	2b00      	cmp	r3, #0
 8001636:	d013      	beq.n	8001660 <main+0xd4>
			if (psuStats.VI & VI_V_SEL) {
 8001638:	4b33      	ldr	r3, [pc, #204]	; (8001708 <main+0x17c>)
 800163a:	7a9b      	ldrb	r3, [r3, #10]
 800163c:	f003 0301 	and.w	r3, r3, #1
 8001640:	2b00      	cmp	r3, #0
 8001642:	d00b      	beq.n	800165c <main+0xd0>
				psuStats.vSet++;
 8001644:	4b30      	ldr	r3, [pc, #192]	; (8001708 <main+0x17c>)
 8001646:	781b      	ldrb	r3, [r3, #0]
 8001648:	3301      	adds	r3, #1
 800164a:	b2da      	uxtb	r2, r3
 800164c:	4b2e      	ldr	r3, [pc, #184]	; (8001708 <main+0x17c>)
 800164e:	701a      	strb	r2, [r3, #0]
				MCP4018_WriteVal(psuStats.vSet);
 8001650:	4b2d      	ldr	r3, [pc, #180]	; (8001708 <main+0x17c>)
 8001652:	781b      	ldrb	r3, [r3, #0]
 8001654:	4618      	mov	r0, r3
 8001656:	f000 fbb7 	bl	8001dc8 <MCP4018_WriteVal>
 800165a:	e001      	b.n	8001660 <main+0xd4>
			} else if (psuStats.VI & VI_I_SEL) {
				psuStats.iSet++;
			} else { //something went wrong, reinit psu
				initPSU();
 800165c:	f000 fa48 	bl	8001af0 <initPSU>
			}
		}

		if (buttons & DW_BTN) {
 8001660:	79fb      	ldrb	r3, [r7, #7]
 8001662:	f003 0302 	and.w	r3, r3, #2
 8001666:	2b00      	cmp	r3, #0
 8001668:	d013      	beq.n	8001692 <main+0x106>
			if (psuStats.VI & VI_V_SEL) {
 800166a:	4b27      	ldr	r3, [pc, #156]	; (8001708 <main+0x17c>)
 800166c:	7a9b      	ldrb	r3, [r3, #10]
 800166e:	f003 0301 	and.w	r3, r3, #1
 8001672:	2b00      	cmp	r3, #0
 8001674:	d00b      	beq.n	800168e <main+0x102>
				psuStats.vSet--;
 8001676:	4b24      	ldr	r3, [pc, #144]	; (8001708 <main+0x17c>)
 8001678:	781b      	ldrb	r3, [r3, #0]
 800167a:	3b01      	subs	r3, #1
 800167c:	b2da      	uxtb	r2, r3
 800167e:	4b22      	ldr	r3, [pc, #136]	; (8001708 <main+0x17c>)
 8001680:	701a      	strb	r2, [r3, #0]
				MCP4018_WriteVal(psuStats.vSet);
 8001682:	4b21      	ldr	r3, [pc, #132]	; (8001708 <main+0x17c>)
 8001684:	781b      	ldrb	r3, [r3, #0]
 8001686:	4618      	mov	r0, r3
 8001688:	f000 fb9e 	bl	8001dc8 <MCP4018_WriteVal>
 800168c:	e001      	b.n	8001692 <main+0x106>
			} else if (psuStats.VI & VI_I_SEL) {
				psuStats.iSet--;
			} else { //something went wrong, reinit psu
				initPSU();
 800168e:	f000 fa2f 	bl	8001af0 <initPSU>
			}
		}

		if (buttons & OE_BTN) {
 8001692:	79fb      	ldrb	r3, [r7, #7]
 8001694:	f003 0308 	and.w	r3, r3, #8
 8001698:	2b00      	cmp	r3, #0
 800169a:	d015      	beq.n	80016c8 <main+0x13c>
			if (psuStats.OE == OE_ENABLED) {
 800169c:	4b1a      	ldr	r3, [pc, #104]	; (8001708 <main+0x17c>)
 800169e:	7a5b      	ldrb	r3, [r3, #9]
 80016a0:	2b01      	cmp	r3, #1
 80016a2:	d105      	bne.n	80016b0 <main+0x124>
				psuStats.OE = OE_DISABLED;
 80016a4:	4b18      	ldr	r3, [pc, #96]	; (8001708 <main+0x17c>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	725a      	strb	r2, [r3, #9]
				disableOutput();
 80016aa:	f000 fb7d 	bl	8001da8 <disableOutput>
 80016ae:	e00b      	b.n	80016c8 <main+0x13c>
			} else if (psuStats.OE == OE_DISABLED) {
 80016b0:	4b15      	ldr	r3, [pc, #84]	; (8001708 <main+0x17c>)
 80016b2:	7a5b      	ldrb	r3, [r3, #9]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d105      	bne.n	80016c4 <main+0x138>
				psuStats.OE = OE_ENABLED;
 80016b8:	4b13      	ldr	r3, [pc, #76]	; (8001708 <main+0x17c>)
 80016ba:	2201      	movs	r2, #1
 80016bc:	725a      	strb	r2, [r3, #9]
				enableOutput();
 80016be:	f000 fb67 	bl	8001d90 <enableOutput>
 80016c2:	e001      	b.n	80016c8 <main+0x13c>
			} else { //something went wrong, reinit psu
				initPSU();
 80016c4:	f000 fa14 	bl	8001af0 <initPSU>
			}
		}

		if(Iout > psuStats.iSet){
 80016c8:	4b0f      	ldr	r3, [pc, #60]	; (8001708 <main+0x17c>)
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	4618      	mov	r0, r3
 80016ce:	f7fe ff21 	bl	8000514 <__aeabi_ui2d>
 80016d2:	4603      	mov	r3, r0
 80016d4:	460c      	mov	r4, r1
 80016d6:	461a      	mov	r2, r3
 80016d8:	4623      	mov	r3, r4
 80016da:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80016de:	f7ff fa23 	bl	8000b28 <__aeabi_dcmpgt>
 80016e2:	4603      	mov	r3, r0
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d003      	beq.n	80016f0 <main+0x164>
			psuStats.iLim = I_LIM_SET;
 80016e8:	4b07      	ldr	r3, [pc, #28]	; (8001708 <main+0x17c>)
 80016ea:	2201      	movs	r2, #1
 80016ec:	721a      	strb	r2, [r3, #8]
 80016ee:	e002      	b.n	80016f6 <main+0x16a>
		}else {
			psuStats.iLim = I_LIM_NSET;
 80016f0:	4b05      	ldr	r3, [pc, #20]	; (8001708 <main+0x17c>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	721a      	strb	r2, [r3, #8]
		}

		setLeds(psuStats);
 80016f6:	4b04      	ldr	r3, [pc, #16]	; (8001708 <main+0x17c>)
 80016f8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80016fc:	f7ff ff24 	bl	8001548 <setLeds>
	while (1) {
 8001700:	e766      	b.n	80015d0 <main+0x44>
 8001702:	bf00      	nop
 8001704:	08007790 	.word	0x08007790
 8001708:	20000668 	.word	0x20000668

0800170c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 800170c:	b580      	push	{r7, lr}
 800170e:	b094      	sub	sp, #80	; 0x50
 8001710:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001712:	f107 0320 	add.w	r3, r7, #32
 8001716:	2230      	movs	r2, #48	; 0x30
 8001718:	2100      	movs	r1, #0
 800171a:	4618      	mov	r0, r3
 800171c:	f003 ff8b 	bl	8005636 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001720:	f107 030c 	add.w	r3, r7, #12
 8001724:	2200      	movs	r2, #0
 8001726:	601a      	str	r2, [r3, #0]
 8001728:	605a      	str	r2, [r3, #4]
 800172a:	609a      	str	r2, [r3, #8]
 800172c:	60da      	str	r2, [r3, #12]
 800172e:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8001730:	2300      	movs	r3, #0
 8001732:	60bb      	str	r3, [r7, #8]
 8001734:	4b23      	ldr	r3, [pc, #140]	; (80017c4 <SystemClock_Config+0xb8>)
 8001736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001738:	4a22      	ldr	r2, [pc, #136]	; (80017c4 <SystemClock_Config+0xb8>)
 800173a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800173e:	6413      	str	r3, [r2, #64]	; 0x40
 8001740:	4b20      	ldr	r3, [pc, #128]	; (80017c4 <SystemClock_Config+0xb8>)
 8001742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001744:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001748:	60bb      	str	r3, [r7, #8]
 800174a:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800174c:	2300      	movs	r3, #0
 800174e:	607b      	str	r3, [r7, #4]
 8001750:	4b1d      	ldr	r3, [pc, #116]	; (80017c8 <SystemClock_Config+0xbc>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001758:	4a1b      	ldr	r2, [pc, #108]	; (80017c8 <SystemClock_Config+0xbc>)
 800175a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800175e:	6013      	str	r3, [r2, #0]
 8001760:	4b19      	ldr	r3, [pc, #100]	; (80017c8 <SystemClock_Config+0xbc>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001768:	607b      	str	r3, [r7, #4]
 800176a:	687b      	ldr	r3, [r7, #4]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800176c:	2302      	movs	r3, #2
 800176e:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001770:	2301      	movs	r3, #1
 8001772:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001774:	2310      	movs	r3, #16
 8001776:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001778:	2300      	movs	r3, #0
 800177a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800177c:	f107 0320 	add.w	r3, r7, #32
 8001780:	4618      	mov	r0, r3
 8001782:	f002 fe3b 	bl	80043fc <HAL_RCC_OscConfig>
 8001786:	4603      	mov	r3, r0
 8001788:	2b00      	cmp	r3, #0
 800178a:	d001      	beq.n	8001790 <SystemClock_Config+0x84>
		Error_Handler();
 800178c:	f000 fb18 	bl	8001dc0 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001790:	230f      	movs	r3, #15
 8001792:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001794:	2300      	movs	r3, #0
 8001796:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001798:	2300      	movs	r3, #0
 800179a:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800179c:	2300      	movs	r3, #0
 800179e:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80017a0:	2300      	movs	r3, #0
 80017a2:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 80017a4:	f107 030c 	add.w	r3, r7, #12
 80017a8:	2100      	movs	r1, #0
 80017aa:	4618      	mov	r0, r3
 80017ac:	f003 f896 	bl	80048dc <HAL_RCC_ClockConfig>
 80017b0:	4603      	mov	r3, r0
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d001      	beq.n	80017ba <SystemClock_Config+0xae>
		Error_Handler();
 80017b6:	f000 fb03 	bl	8001dc0 <Error_Handler>
	}
}
 80017ba:	bf00      	nop
 80017bc:	3750      	adds	r7, #80	; 0x50
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	40023800 	.word	0x40023800
 80017c8:	40007000 	.word	0x40007000

080017cc <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b084      	sub	sp, #16
 80017d0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 80017d2:	463b      	mov	r3, r7
 80017d4:	2200      	movs	r2, #0
 80017d6:	601a      	str	r2, [r3, #0]
 80017d8:	605a      	str	r2, [r3, #4]
 80017da:	609a      	str	r2, [r3, #8]
 80017dc:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN ADC1_Init 1 */

	/* USER CODE END ADC1_Init 1 */
	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc1.Instance = ADC1;
 80017de:	4b2f      	ldr	r3, [pc, #188]	; (800189c <MX_ADC1_Init+0xd0>)
 80017e0:	4a2f      	ldr	r2, [pc, #188]	; (80018a0 <MX_ADC1_Init+0xd4>)
 80017e2:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80017e4:	4b2d      	ldr	r3, [pc, #180]	; (800189c <MX_ADC1_Init+0xd0>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80017ea:	4b2c      	ldr	r3, [pc, #176]	; (800189c <MX_ADC1_Init+0xd0>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = ENABLE;
 80017f0:	4b2a      	ldr	r3, [pc, #168]	; (800189c <MX_ADC1_Init+0xd0>)
 80017f2:	2201      	movs	r2, #1
 80017f4:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = ENABLE;
 80017f6:	4b29      	ldr	r3, [pc, #164]	; (800189c <MX_ADC1_Init+0xd0>)
 80017f8:	2201      	movs	r2, #1
 80017fa:	761a      	strb	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 80017fc:	4b27      	ldr	r3, [pc, #156]	; (800189c <MX_ADC1_Init+0xd0>)
 80017fe:	2200      	movs	r2, #0
 8001800:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001804:	4b25      	ldr	r3, [pc, #148]	; (800189c <MX_ADC1_Init+0xd0>)
 8001806:	2200      	movs	r2, #0
 8001808:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800180a:	4b24      	ldr	r3, [pc, #144]	; (800189c <MX_ADC1_Init+0xd0>)
 800180c:	4a25      	ldr	r2, [pc, #148]	; (80018a4 <MX_ADC1_Init+0xd8>)
 800180e:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001810:	4b22      	ldr	r3, [pc, #136]	; (800189c <MX_ADC1_Init+0xd0>)
 8001812:	2200      	movs	r2, #0
 8001814:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 3;
 8001816:	4b21      	ldr	r3, [pc, #132]	; (800189c <MX_ADC1_Init+0xd0>)
 8001818:	2203      	movs	r2, #3
 800181a:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = DISABLE;
 800181c:	4b1f      	ldr	r3, [pc, #124]	; (800189c <MX_ADC1_Init+0xd0>)
 800181e:	2200      	movs	r2, #0
 8001820:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001824:	4b1d      	ldr	r3, [pc, #116]	; (800189c <MX_ADC1_Init+0xd0>)
 8001826:	2201      	movs	r2, #1
 8001828:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 800182a:	481c      	ldr	r0, [pc, #112]	; (800189c <MX_ADC1_Init+0xd0>)
 800182c:	f001 f818 	bl	8002860 <HAL_ADC_Init>
 8001830:	4603      	mov	r3, r0
 8001832:	2b00      	cmp	r3, #0
 8001834:	d001      	beq.n	800183a <MX_ADC1_Init+0x6e>
		Error_Handler();
 8001836:	f000 fac3 	bl	8001dc0 <Error_Handler>
	}
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_0;
 800183a:	2300      	movs	r3, #0
 800183c:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 800183e:	2301      	movs	r3, #1
 8001840:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001842:	2300      	movs	r3, #0
 8001844:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001846:	463b      	mov	r3, r7
 8001848:	4619      	mov	r1, r3
 800184a:	4814      	ldr	r0, [pc, #80]	; (800189c <MX_ADC1_Init+0xd0>)
 800184c:	f001 f9b6 	bl	8002bbc <HAL_ADC_ConfigChannel>
 8001850:	4603      	mov	r3, r0
 8001852:	2b00      	cmp	r3, #0
 8001854:	d001      	beq.n	800185a <MX_ADC1_Init+0x8e>
		Error_Handler();
 8001856:	f000 fab3 	bl	8001dc0 <Error_Handler>
	}
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_1;
 800185a:	2301      	movs	r3, #1
 800185c:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 2;
 800185e:	2302      	movs	r3, #2
 8001860:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001862:	463b      	mov	r3, r7
 8001864:	4619      	mov	r1, r3
 8001866:	480d      	ldr	r0, [pc, #52]	; (800189c <MX_ADC1_Init+0xd0>)
 8001868:	f001 f9a8 	bl	8002bbc <HAL_ADC_ConfigChannel>
 800186c:	4603      	mov	r3, r0
 800186e:	2b00      	cmp	r3, #0
 8001870:	d001      	beq.n	8001876 <MX_ADC1_Init+0xaa>
		Error_Handler();
 8001872:	f000 faa5 	bl	8001dc0 <Error_Handler>
	}
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_13;
 8001876:	230d      	movs	r3, #13
 8001878:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 3;
 800187a:	2303      	movs	r3, #3
 800187c:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 800187e:	463b      	mov	r3, r7
 8001880:	4619      	mov	r1, r3
 8001882:	4806      	ldr	r0, [pc, #24]	; (800189c <MX_ADC1_Init+0xd0>)
 8001884:	f001 f99a 	bl	8002bbc <HAL_ADC_ConfigChannel>
 8001888:	4603      	mov	r3, r0
 800188a:	2b00      	cmp	r3, #0
 800188c:	d001      	beq.n	8001892 <MX_ADC1_Init+0xc6>
		Error_Handler();
 800188e:	f000 fa97 	bl	8001dc0 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8001892:	bf00      	nop
 8001894:	3710      	adds	r7, #16
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	20000674 	.word	0x20000674
 80018a0:	40012000 	.word	0x40012000
 80018a4:	0f000001 	.word	0x0f000001

080018a8 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 80018a8:	b580      	push	{r7, lr}
 80018aa:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 80018ac:	4b12      	ldr	r3, [pc, #72]	; (80018f8 <MX_I2C1_Init+0x50>)
 80018ae:	4a13      	ldr	r2, [pc, #76]	; (80018fc <MX_I2C1_Init+0x54>)
 80018b0:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 400000;
 80018b2:	4b11      	ldr	r3, [pc, #68]	; (80018f8 <MX_I2C1_Init+0x50>)
 80018b4:	4a12      	ldr	r2, [pc, #72]	; (8001900 <MX_I2C1_Init+0x58>)
 80018b6:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80018b8:	4b0f      	ldr	r3, [pc, #60]	; (80018f8 <MX_I2C1_Init+0x50>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 80018be:	4b0e      	ldr	r3, [pc, #56]	; (80018f8 <MX_I2C1_Init+0x50>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80018c4:	4b0c      	ldr	r3, [pc, #48]	; (80018f8 <MX_I2C1_Init+0x50>)
 80018c6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80018ca:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80018cc:	4b0a      	ldr	r3, [pc, #40]	; (80018f8 <MX_I2C1_Init+0x50>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 80018d2:	4b09      	ldr	r3, [pc, #36]	; (80018f8 <MX_I2C1_Init+0x50>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80018d8:	4b07      	ldr	r3, [pc, #28]	; (80018f8 <MX_I2C1_Init+0x50>)
 80018da:	2200      	movs	r2, #0
 80018dc:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80018de:	4b06      	ldr	r3, [pc, #24]	; (80018f8 <MX_I2C1_Init+0x50>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 80018e4:	4804      	ldr	r0, [pc, #16]	; (80018f8 <MX_I2C1_Init+0x50>)
 80018e6:	f001 fe8b 	bl	8003600 <HAL_I2C_Init>
 80018ea:	4603      	mov	r3, r0
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d001      	beq.n	80018f4 <MX_I2C1_Init+0x4c>
		Error_Handler();
 80018f0:	f000 fa66 	bl	8001dc0 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */
	/* USER CODE END I2C1_Init 2 */

}
 80018f4:	bf00      	nop
 80018f6:	bd80      	pop	{r7, pc}
 80018f8:	20000614 	.word	0x20000614
 80018fc:	40005400 	.word	0x40005400
 8001900:	00061a80 	.word	0x00061a80

08001904 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8001904:	b580      	push	{r7, lr}
 8001906:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8001908:	4b11      	ldr	r3, [pc, #68]	; (8001950 <MX_USART2_UART_Init+0x4c>)
 800190a:	4a12      	ldr	r2, [pc, #72]	; (8001954 <MX_USART2_UART_Init+0x50>)
 800190c:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 800190e:	4b10      	ldr	r3, [pc, #64]	; (8001950 <MX_USART2_UART_Init+0x4c>)
 8001910:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001914:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001916:	4b0e      	ldr	r3, [pc, #56]	; (8001950 <MX_USART2_UART_Init+0x4c>)
 8001918:	2200      	movs	r2, #0
 800191a:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 800191c:	4b0c      	ldr	r3, [pc, #48]	; (8001950 <MX_USART2_UART_Init+0x4c>)
 800191e:	2200      	movs	r2, #0
 8001920:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8001922:	4b0b      	ldr	r3, [pc, #44]	; (8001950 <MX_USART2_UART_Init+0x4c>)
 8001924:	2200      	movs	r2, #0
 8001926:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8001928:	4b09      	ldr	r3, [pc, #36]	; (8001950 <MX_USART2_UART_Init+0x4c>)
 800192a:	220c      	movs	r2, #12
 800192c:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800192e:	4b08      	ldr	r3, [pc, #32]	; (8001950 <MX_USART2_UART_Init+0x4c>)
 8001930:	2200      	movs	r2, #0
 8001932:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001934:	4b06      	ldr	r3, [pc, #24]	; (8001950 <MX_USART2_UART_Init+0x4c>)
 8001936:	2200      	movs	r2, #0
 8001938:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 800193a:	4805      	ldr	r0, [pc, #20]	; (8001950 <MX_USART2_UART_Init+0x4c>)
 800193c:	f003 f99a 	bl	8004c74 <HAL_UART_Init>
 8001940:	4603      	mov	r3, r0
 8001942:	2b00      	cmp	r3, #0
 8001944:	d001      	beq.n	800194a <MX_USART2_UART_Init+0x46>
		Error_Handler();
 8001946:	f000 fa3b 	bl	8001dc0 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 800194a:	bf00      	nop
 800194c:	bd80      	pop	{r7, pc}
 800194e:	bf00      	nop
 8001950:	200006bc 	.word	0x200006bc
 8001954:	40004400 	.word	0x40004400

08001958 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001958:	b580      	push	{r7, lr}
 800195a:	b08a      	sub	sp, #40	; 0x28
 800195c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800195e:	f107 0314 	add.w	r3, r7, #20
 8001962:	2200      	movs	r2, #0
 8001964:	601a      	str	r2, [r3, #0]
 8001966:	605a      	str	r2, [r3, #4]
 8001968:	609a      	str	r2, [r3, #8]
 800196a:	60da      	str	r2, [r3, #12]
 800196c:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800196e:	2300      	movs	r3, #0
 8001970:	613b      	str	r3, [r7, #16]
 8001972:	4b59      	ldr	r3, [pc, #356]	; (8001ad8 <MX_GPIO_Init+0x180>)
 8001974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001976:	4a58      	ldr	r2, [pc, #352]	; (8001ad8 <MX_GPIO_Init+0x180>)
 8001978:	f043 0304 	orr.w	r3, r3, #4
 800197c:	6313      	str	r3, [r2, #48]	; 0x30
 800197e:	4b56      	ldr	r3, [pc, #344]	; (8001ad8 <MX_GPIO_Init+0x180>)
 8001980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001982:	f003 0304 	and.w	r3, r3, #4
 8001986:	613b      	str	r3, [r7, #16]
 8001988:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800198a:	2300      	movs	r3, #0
 800198c:	60fb      	str	r3, [r7, #12]
 800198e:	4b52      	ldr	r3, [pc, #328]	; (8001ad8 <MX_GPIO_Init+0x180>)
 8001990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001992:	4a51      	ldr	r2, [pc, #324]	; (8001ad8 <MX_GPIO_Init+0x180>)
 8001994:	f043 0301 	orr.w	r3, r3, #1
 8001998:	6313      	str	r3, [r2, #48]	; 0x30
 800199a:	4b4f      	ldr	r3, [pc, #316]	; (8001ad8 <MX_GPIO_Init+0x180>)
 800199c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800199e:	f003 0301 	and.w	r3, r3, #1
 80019a2:	60fb      	str	r3, [r7, #12]
 80019a4:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80019a6:	2300      	movs	r3, #0
 80019a8:	60bb      	str	r3, [r7, #8]
 80019aa:	4b4b      	ldr	r3, [pc, #300]	; (8001ad8 <MX_GPIO_Init+0x180>)
 80019ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ae:	4a4a      	ldr	r2, [pc, #296]	; (8001ad8 <MX_GPIO_Init+0x180>)
 80019b0:	f043 0308 	orr.w	r3, r3, #8
 80019b4:	6313      	str	r3, [r2, #48]	; 0x30
 80019b6:	4b48      	ldr	r3, [pc, #288]	; (8001ad8 <MX_GPIO_Init+0x180>)
 80019b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ba:	f003 0308 	and.w	r3, r3, #8
 80019be:	60bb      	str	r3, [r7, #8]
 80019c0:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80019c2:	2300      	movs	r3, #0
 80019c4:	607b      	str	r3, [r7, #4]
 80019c6:	4b44      	ldr	r3, [pc, #272]	; (8001ad8 <MX_GPIO_Init+0x180>)
 80019c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ca:	4a43      	ldr	r2, [pc, #268]	; (8001ad8 <MX_GPIO_Init+0x180>)
 80019cc:	f043 0302 	orr.w	r3, r3, #2
 80019d0:	6313      	str	r3, [r2, #48]	; 0x30
 80019d2:	4b41      	ldr	r3, [pc, #260]	; (8001ad8 <MX_GPIO_Init+0x180>)
 80019d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019d6:	f003 0302 	and.w	r3, r3, #2
 80019da:	607b      	str	r3, [r7, #4]
 80019dc:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, REG_EN_Pin | CC_LED_Pin, GPIO_PIN_RESET);
 80019de:	2200      	movs	r2, #0
 80019e0:	f240 4102 	movw	r1, #1026	; 0x402
 80019e4:	483d      	ldr	r0, [pc, #244]	; (8001adc <MX_GPIO_Init+0x184>)
 80019e6:	f001 fdb3 	bl	8003550 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5 | VI_LED_Pin | OE_LED_Pin,
 80019ea:	2200      	movs	r2, #0
 80019ec:	f249 0120 	movw	r1, #36896	; 0x9020
 80019f0:	483b      	ldr	r0, [pc, #236]	; (8001ae0 <MX_GPIO_Init+0x188>)
 80019f2:	f001 fdad 	bl	8003550 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, nSW_UP_Pin | OLED_RST_Pin, GPIO_PIN_RESET);
 80019f6:	2200      	movs	r2, #0
 80019f8:	f44f 7188 	mov.w	r1, #272	; 0x110
 80019fc:	4839      	ldr	r0, [pc, #228]	; (8001ae4 <MX_GPIO_Init+0x18c>)
 80019fe:	f001 fda7 	bl	8003550 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : REG_EN_Pin CC_LED_Pin */
	GPIO_InitStruct.Pin = REG_EN_Pin | CC_LED_Pin;
 8001a02:	f240 4302 	movw	r3, #1026	; 0x402
 8001a06:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a08:	2301      	movs	r3, #1
 8001a0a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a10:	2300      	movs	r3, #0
 8001a12:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a14:	f107 0314 	add.w	r3, r7, #20
 8001a18:	4619      	mov	r1, r3
 8001a1a:	4830      	ldr	r0, [pc, #192]	; (8001adc <MX_GPIO_Init+0x184>)
 8001a1c:	f001 fbfe 	bl	800321c <HAL_GPIO_Init>

	/*Configure GPIO pins : PA5 VI_LED_Pin OE_LED_Pin */
	GPIO_InitStruct.Pin = GPIO_PIN_5 | VI_LED_Pin | OE_LED_Pin;
 8001a20:	f249 0320 	movw	r3, #36896	; 0x9020
 8001a24:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a26:	2301      	movs	r3, #1
 8001a28:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a32:	f107 0314 	add.w	r3, r7, #20
 8001a36:	4619      	mov	r1, r3
 8001a38:	4829      	ldr	r0, [pc, #164]	; (8001ae0 <MX_GPIO_Init+0x188>)
 8001a3a:	f001 fbef 	bl	800321c <HAL_GPIO_Init>

	/*Configure GPIO pin : nSW_INT_Pin */
	GPIO_InitStruct.Pin = nSW_INT_Pin;
 8001a3e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001a42:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001a44:	4b28      	ldr	r3, [pc, #160]	; (8001ae8 <MX_GPIO_Init+0x190>)
 8001a46:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(nSW_INT_GPIO_Port, &GPIO_InitStruct);
 8001a4c:	f107 0314 	add.w	r3, r7, #20
 8001a50:	4619      	mov	r1, r3
 8001a52:	4822      	ldr	r0, [pc, #136]	; (8001adc <MX_GPIO_Init+0x184>)
 8001a54:	f001 fbe2 	bl	800321c <HAL_GPIO_Init>

	/*Configure GPIO pin : nSW_VI_Pin */
	GPIO_InitStruct.Pin = nSW_VI_Pin;
 8001a58:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a5c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a62:	2300      	movs	r3, #0
 8001a64:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(nSW_VI_GPIO_Port, &GPIO_InitStruct);
 8001a66:	f107 0314 	add.w	r3, r7, #20
 8001a6a:	4619      	mov	r1, r3
 8001a6c:	481b      	ldr	r0, [pc, #108]	; (8001adc <MX_GPIO_Init+0x184>)
 8001a6e:	f001 fbd5 	bl	800321c <HAL_GPIO_Init>

	/*Configure GPIO pin : nSW_DW_Pin */
	GPIO_InitStruct.Pin = nSW_DW_Pin;
 8001a72:	2304      	movs	r3, #4
 8001a74:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a76:	2300      	movs	r3, #0
 8001a78:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(nSW_DW_GPIO_Port, &GPIO_InitStruct);
 8001a7e:	f107 0314 	add.w	r3, r7, #20
 8001a82:	4619      	mov	r1, r3
 8001a84:	4819      	ldr	r0, [pc, #100]	; (8001aec <MX_GPIO_Init+0x194>)
 8001a86:	f001 fbc9 	bl	800321c <HAL_GPIO_Init>

	/*Configure GPIO pins : nSW_UP_Pin OLED_RST_Pin */
	GPIO_InitStruct.Pin = nSW_UP_Pin | OLED_RST_Pin;
 8001a8a:	f44f 7388 	mov.w	r3, #272	; 0x110
 8001a8e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a90:	2301      	movs	r3, #1
 8001a92:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a94:	2300      	movs	r3, #0
 8001a96:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a9c:	f107 0314 	add.w	r3, r7, #20
 8001aa0:	4619      	mov	r1, r3
 8001aa2:	4810      	ldr	r0, [pc, #64]	; (8001ae4 <MX_GPIO_Init+0x18c>)
 8001aa4:	f001 fbba 	bl	800321c <HAL_GPIO_Init>

	/*Configure GPIO pin : nSW_OE_Pin */
	GPIO_InitStruct.Pin = nSW_OE_Pin;
 8001aa8:	2320      	movs	r3, #32
 8001aaa:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001aac:	2300      	movs	r3, #0
 8001aae:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(nSW_OE_GPIO_Port, &GPIO_InitStruct);
 8001ab4:	f107 0314 	add.w	r3, r7, #20
 8001ab8:	4619      	mov	r1, r3
 8001aba:	480a      	ldr	r0, [pc, #40]	; (8001ae4 <MX_GPIO_Init+0x18c>)
 8001abc:	f001 fbae 	bl	800321c <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	2100      	movs	r1, #0
 8001ac4:	2028      	movs	r0, #40	; 0x28
 8001ac6:	f001 fb72 	bl	80031ae <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001aca:	2028      	movs	r0, #40	; 0x28
 8001acc:	f001 fb8b 	bl	80031e6 <HAL_NVIC_EnableIRQ>

}
 8001ad0:	bf00      	nop
 8001ad2:	3728      	adds	r7, #40	; 0x28
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd80      	pop	{r7, pc}
 8001ad8:	40023800 	.word	0x40023800
 8001adc:	40020800 	.word	0x40020800
 8001ae0:	40020000 	.word	0x40020000
 8001ae4:	40020400 	.word	0x40020400
 8001ae8:	10210000 	.word	0x10210000
 8001aec:	40020c00 	.word	0x40020c00

08001af0 <initPSU>:

/* USER CODE BEGIN 4 */
void initPSU(void) {
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b082      	sub	sp, #8
 8001af4:	af00      	add	r7, sp, #0
	//init struct for PSU
	psuStats.vSet = V_DEFAULT;
 8001af6:	4b19      	ldr	r3, [pc, #100]	; (8001b5c <initPSU+0x6c>)
 8001af8:	223f      	movs	r2, #63	; 0x3f
 8001afa:	701a      	strb	r2, [r3, #0]
	psuStats.iSet = I_DEFAULT;
 8001afc:	4b17      	ldr	r3, [pc, #92]	; (8001b5c <initPSU+0x6c>)
 8001afe:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001b02:	605a      	str	r2, [r3, #4]
	psuStats.iLim = I_LIM_DEFAULT;
 8001b04:	4b15      	ldr	r3, [pc, #84]	; (8001b5c <initPSU+0x6c>)
 8001b06:	2200      	movs	r2, #0
 8001b08:	721a      	strb	r2, [r3, #8]
	psuStats.VI = VI_DEFAULT;
 8001b0a:	4b14      	ldr	r3, [pc, #80]	; (8001b5c <initPSU+0x6c>)
 8001b0c:	2201      	movs	r2, #1
 8001b0e:	729a      	strb	r2, [r3, #10]
	psuStats.OE = OE_DEFAULT;
 8001b10:	4b12      	ldr	r3, [pc, #72]	; (8001b5c <initPSU+0x6c>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	725a      	strb	r2, [r3, #9]

	//show current settings on LEDs
	setLeds(psuStats);
 8001b16:	4b11      	ldr	r3, [pc, #68]	; (8001b5c <initPSU+0x6c>)
 8001b18:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001b1c:	f7ff fd14 	bl	8001548 <setLeds>

	//init and show logo on OLED
	ssd1306_Init();
 8001b20:	f000 f9b0 	bl	8001e84 <ssd1306_Init>
	ssd1306_Fill(SSD1306_BLACK);
 8001b24:	2000      	movs	r0, #0
 8001b26:	f000 fa17 	bl	8001f58 <ssd1306_Fill>
	showStartup();
 8001b2a:	f000 f81d 	bl	8001b68 <showStartup>
	HAL_StatusTypeDef adcRet = HAL_ADC_Start(&hadc1);
 8001b2e:	480c      	ldr	r0, [pc, #48]	; (8001b60 <initPSU+0x70>)
 8001b30:	f000 feda 	bl	80028e8 <HAL_ADC_Start>
 8001b34:	4603      	mov	r3, r0
 8001b36:	71fb      	strb	r3, [r7, #7]
	if (adcRet != HAL_OK) {
 8001b38:	79fb      	ldrb	r3, [r7, #7]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d004      	beq.n	8001b48 <initPSU+0x58>
		ssd1306_WriteErrorMsg(2, 12, "ADC start failed");
 8001b3e:	4a09      	ldr	r2, [pc, #36]	; (8001b64 <initPSU+0x74>)
 8001b40:	210c      	movs	r1, #12
 8001b42:	2002      	movs	r0, #2
 8001b44:	f000 fc14 	bl	8002370 <ssd1306_WriteErrorMsg>
	}

	//set pot value for Vout (half)
	MCP4018_WriteVal(psuStats.vSet);
 8001b48:	4b04      	ldr	r3, [pc, #16]	; (8001b5c <initPSU+0x6c>)
 8001b4a:	781b      	ldrb	r3, [r3, #0]
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	f000 f93b 	bl	8001dc8 <MCP4018_WriteVal>
}
 8001b52:	bf00      	nop
 8001b54:	3708      	adds	r7, #8
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}
 8001b5a:	bf00      	nop
 8001b5c:	20000668 	.word	0x20000668
 8001b60:	20000674 	.word	0x20000674
 8001b64:	080077a0 	.word	0x080077a0

08001b68 <showStartup>:

void showStartup(void) {
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b082      	sub	sp, #8
 8001b6c:	af02      	add	r7, sp, #8
	ssd1306_DrawBitMap(0, 0, BOOTSCREEN, 128, 32, SSD1306_WHITE);
 8001b6e:	2301      	movs	r3, #1
 8001b70:	9301      	str	r3, [sp, #4]
 8001b72:	2320      	movs	r3, #32
 8001b74:	9300      	str	r3, [sp, #0]
 8001b76:	2380      	movs	r3, #128	; 0x80
 8001b78:	4a05      	ldr	r2, [pc, #20]	; (8001b90 <showStartup+0x28>)
 8001b7a:	2100      	movs	r1, #0
 8001b7c:	2000      	movs	r0, #0
 8001b7e:	f000 fb8b 	bl	8002298 <ssd1306_DrawBitMap>
	HAL_Delay(2000);
 8001b82:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001b86:	f000 fe49 	bl	800281c <HAL_Delay>
}
 8001b8a:	bf00      	nop
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bd80      	pop	{r7, pc}
 8001b90:	080077e4 	.word	0x080077e4

08001b94 <displayVoltageCurrent>:

void displayVoltageCurrent(double Vin, double V, double I) {
 8001b94:	b590      	push	{r4, r7, lr}
 8001b96:	b08b      	sub	sp, #44	; 0x2c
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	ed87 0b04 	vstr	d0, [r7, #16]
 8001b9e:	ed87 1b02 	vstr	d1, [r7, #8]
 8001ba2:	ed87 2b00 	vstr	d2, [r7]
	ssd1306_Fill(SSD1306_BLACK);
 8001ba6:	2000      	movs	r0, #0
 8001ba8:	f000 f9d6 	bl	8001f58 <ssd1306_Fill>
	ssd1306_SetCursor(2, 12);
 8001bac:	210c      	movs	r1, #12
 8001bae:	2002      	movs	r0, #2
 8001bb0:	f000 fb28 	bl	8002204 <ssd1306_SetCursor>
	char buff[10] = { };
 8001bb4:	f107 031c 	add.w	r3, r7, #28
 8001bb8:	2200      	movs	r2, #0
 8001bba:	601a      	str	r2, [r3, #0]
 8001bbc:	605a      	str	r2, [r3, #4]
 8001bbe:	811a      	strh	r2, [r3, #8]

	ssd1306_WriteString("Vin = ", INFO_TEXT_SIZE, SSD1306_WHITE);
 8001bc0:	4a69      	ldr	r2, [pc, #420]	; (8001d68 <displayVoltageCurrent+0x1d4>)
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	ca06      	ldmia	r2, {r1, r2}
 8001bc6:	4869      	ldr	r0, [pc, #420]	; (8001d6c <displayVoltageCurrent+0x1d8>)
 8001bc8:	f000 faf6 	bl	80021b8 <ssd1306_WriteString>
	if (Vin > 1000) {
 8001bcc:	f04f 0200 	mov.w	r2, #0
 8001bd0:	4b67      	ldr	r3, [pc, #412]	; (8001d70 <displayVoltageCurrent+0x1dc>)
 8001bd2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001bd6:	f7fe ffa7 	bl	8000b28 <__aeabi_dcmpgt>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d01d      	beq.n	8001c1c <displayVoltageCurrent+0x88>
		sprintf(buff, "%4.2f", Vin / 1000);
 8001be0:	f04f 0200 	mov.w	r2, #0
 8001be4:	4b62      	ldr	r3, [pc, #392]	; (8001d70 <displayVoltageCurrent+0x1dc>)
 8001be6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001bea:	f7fe fe37 	bl	800085c <__aeabi_ddiv>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	460c      	mov	r4, r1
 8001bf2:	f107 001c 	add.w	r0, r7, #28
 8001bf6:	461a      	mov	r2, r3
 8001bf8:	4623      	mov	r3, r4
 8001bfa:	495e      	ldr	r1, [pc, #376]	; (8001d74 <displayVoltageCurrent+0x1e0>)
 8001bfc:	f004 f980 	bl	8005f00 <siprintf>
		ssd1306_WriteString(buff, INFO_TEXT_SIZE, SSD1306_WHITE);
 8001c00:	4a59      	ldr	r2, [pc, #356]	; (8001d68 <displayVoltageCurrent+0x1d4>)
 8001c02:	f107 001c 	add.w	r0, r7, #28
 8001c06:	2301      	movs	r3, #1
 8001c08:	ca06      	ldmia	r2, {r1, r2}
 8001c0a:	f000 fad5 	bl	80021b8 <ssd1306_WriteString>
		ssd1306_WriteString("V", INFO_TEXT_SIZE, SSD1306_WHITE);
 8001c0e:	4a56      	ldr	r2, [pc, #344]	; (8001d68 <displayVoltageCurrent+0x1d4>)
 8001c10:	2301      	movs	r3, #1
 8001c12:	ca06      	ldmia	r2, {r1, r2}
 8001c14:	4858      	ldr	r0, [pc, #352]	; (8001d78 <displayVoltageCurrent+0x1e4>)
 8001c16:	f000 facf 	bl	80021b8 <ssd1306_WriteString>
 8001c1a:	e013      	b.n	8001c44 <displayVoltageCurrent+0xb0>
	} else {
		sprintf(buff, "%4.2f", Vin);
 8001c1c:	f107 001c 	add.w	r0, r7, #28
 8001c20:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001c24:	4953      	ldr	r1, [pc, #332]	; (8001d74 <displayVoltageCurrent+0x1e0>)
 8001c26:	f004 f96b 	bl	8005f00 <siprintf>
		ssd1306_WriteString(buff, INFO_TEXT_SIZE, SSD1306_WHITE);
 8001c2a:	4a4f      	ldr	r2, [pc, #316]	; (8001d68 <displayVoltageCurrent+0x1d4>)
 8001c2c:	f107 001c 	add.w	r0, r7, #28
 8001c30:	2301      	movs	r3, #1
 8001c32:	ca06      	ldmia	r2, {r1, r2}
 8001c34:	f000 fac0 	bl	80021b8 <ssd1306_WriteString>
		ssd1306_WriteString("mV", INFO_TEXT_SIZE, SSD1306_WHITE);
 8001c38:	4a4b      	ldr	r2, [pc, #300]	; (8001d68 <displayVoltageCurrent+0x1d4>)
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	ca06      	ldmia	r2, {r1, r2}
 8001c3e:	484f      	ldr	r0, [pc, #316]	; (8001d7c <displayVoltageCurrent+0x1e8>)
 8001c40:	f000 faba 	bl	80021b8 <ssd1306_WriteString>
	}

	ssd1306_SetCursor(2, 24);
 8001c44:	2118      	movs	r1, #24
 8001c46:	2002      	movs	r0, #2
 8001c48:	f000 fadc 	bl	8002204 <ssd1306_SetCursor>
	ssd1306_WriteString("Vout = ", INFO_TEXT_SIZE, SSD1306_WHITE);
 8001c4c:	4a46      	ldr	r2, [pc, #280]	; (8001d68 <displayVoltageCurrent+0x1d4>)
 8001c4e:	2301      	movs	r3, #1
 8001c50:	ca06      	ldmia	r2, {r1, r2}
 8001c52:	484b      	ldr	r0, [pc, #300]	; (8001d80 <displayVoltageCurrent+0x1ec>)
 8001c54:	f000 fab0 	bl	80021b8 <ssd1306_WriteString>
	if (V > 1000) {
 8001c58:	f04f 0200 	mov.w	r2, #0
 8001c5c:	4b44      	ldr	r3, [pc, #272]	; (8001d70 <displayVoltageCurrent+0x1dc>)
 8001c5e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001c62:	f7fe ff61 	bl	8000b28 <__aeabi_dcmpgt>
 8001c66:	4603      	mov	r3, r0
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d01d      	beq.n	8001ca8 <displayVoltageCurrent+0x114>
		sprintf(buff, "%4.2f", V / 1000);
 8001c6c:	f04f 0200 	mov.w	r2, #0
 8001c70:	4b3f      	ldr	r3, [pc, #252]	; (8001d70 <displayVoltageCurrent+0x1dc>)
 8001c72:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001c76:	f7fe fdf1 	bl	800085c <__aeabi_ddiv>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	460c      	mov	r4, r1
 8001c7e:	f107 001c 	add.w	r0, r7, #28
 8001c82:	461a      	mov	r2, r3
 8001c84:	4623      	mov	r3, r4
 8001c86:	493b      	ldr	r1, [pc, #236]	; (8001d74 <displayVoltageCurrent+0x1e0>)
 8001c88:	f004 f93a 	bl	8005f00 <siprintf>
		ssd1306_WriteString(buff, INFO_TEXT_SIZE, SSD1306_WHITE);
 8001c8c:	4a36      	ldr	r2, [pc, #216]	; (8001d68 <displayVoltageCurrent+0x1d4>)
 8001c8e:	f107 001c 	add.w	r0, r7, #28
 8001c92:	2301      	movs	r3, #1
 8001c94:	ca06      	ldmia	r2, {r1, r2}
 8001c96:	f000 fa8f 	bl	80021b8 <ssd1306_WriteString>
		ssd1306_WriteString("V", INFO_TEXT_SIZE, SSD1306_WHITE);
 8001c9a:	4a33      	ldr	r2, [pc, #204]	; (8001d68 <displayVoltageCurrent+0x1d4>)
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	ca06      	ldmia	r2, {r1, r2}
 8001ca0:	4835      	ldr	r0, [pc, #212]	; (8001d78 <displayVoltageCurrent+0x1e4>)
 8001ca2:	f000 fa89 	bl	80021b8 <ssd1306_WriteString>
 8001ca6:	e013      	b.n	8001cd0 <displayVoltageCurrent+0x13c>
	} else {
		sprintf(buff, "%4.2f", V);
 8001ca8:	f107 001c 	add.w	r0, r7, #28
 8001cac:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001cb0:	4930      	ldr	r1, [pc, #192]	; (8001d74 <displayVoltageCurrent+0x1e0>)
 8001cb2:	f004 f925 	bl	8005f00 <siprintf>
		ssd1306_WriteString(buff, INFO_TEXT_SIZE, SSD1306_WHITE);
 8001cb6:	4a2c      	ldr	r2, [pc, #176]	; (8001d68 <displayVoltageCurrent+0x1d4>)
 8001cb8:	f107 001c 	add.w	r0, r7, #28
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	ca06      	ldmia	r2, {r1, r2}
 8001cc0:	f000 fa7a 	bl	80021b8 <ssd1306_WriteString>
		ssd1306_WriteString("mV", INFO_TEXT_SIZE, SSD1306_WHITE);
 8001cc4:	4a28      	ldr	r2, [pc, #160]	; (8001d68 <displayVoltageCurrent+0x1d4>)
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	ca06      	ldmia	r2, {r1, r2}
 8001cca:	482c      	ldr	r0, [pc, #176]	; (8001d7c <displayVoltageCurrent+0x1e8>)
 8001ccc:	f000 fa74 	bl	80021b8 <ssd1306_WriteString>
	}

	ssd1306_SetCursor(2, 36);
 8001cd0:	2124      	movs	r1, #36	; 0x24
 8001cd2:	2002      	movs	r0, #2
 8001cd4:	f000 fa96 	bl	8002204 <ssd1306_SetCursor>
	ssd1306_WriteString("Iout = ", INFO_TEXT_SIZE, SSD1306_WHITE);
 8001cd8:	4a23      	ldr	r2, [pc, #140]	; (8001d68 <displayVoltageCurrent+0x1d4>)
 8001cda:	2301      	movs	r3, #1
 8001cdc:	ca06      	ldmia	r2, {r1, r2}
 8001cde:	4829      	ldr	r0, [pc, #164]	; (8001d84 <displayVoltageCurrent+0x1f0>)
 8001ce0:	f000 fa6a 	bl	80021b8 <ssd1306_WriteString>
	if (I > 1000) {
 8001ce4:	f04f 0200 	mov.w	r2, #0
 8001ce8:	4b21      	ldr	r3, [pc, #132]	; (8001d70 <displayVoltageCurrent+0x1dc>)
 8001cea:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001cee:	f7fe ff1b 	bl	8000b28 <__aeabi_dcmpgt>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d01d      	beq.n	8001d34 <displayVoltageCurrent+0x1a0>
		sprintf(buff, "%4.2f", I / 1000);
 8001cf8:	f04f 0200 	mov.w	r2, #0
 8001cfc:	4b1c      	ldr	r3, [pc, #112]	; (8001d70 <displayVoltageCurrent+0x1dc>)
 8001cfe:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001d02:	f7fe fdab 	bl	800085c <__aeabi_ddiv>
 8001d06:	4603      	mov	r3, r0
 8001d08:	460c      	mov	r4, r1
 8001d0a:	f107 001c 	add.w	r0, r7, #28
 8001d0e:	461a      	mov	r2, r3
 8001d10:	4623      	mov	r3, r4
 8001d12:	4918      	ldr	r1, [pc, #96]	; (8001d74 <displayVoltageCurrent+0x1e0>)
 8001d14:	f004 f8f4 	bl	8005f00 <siprintf>
		ssd1306_WriteString(buff, INFO_TEXT_SIZE, SSD1306_WHITE);
 8001d18:	4a13      	ldr	r2, [pc, #76]	; (8001d68 <displayVoltageCurrent+0x1d4>)
 8001d1a:	f107 001c 	add.w	r0, r7, #28
 8001d1e:	2301      	movs	r3, #1
 8001d20:	ca06      	ldmia	r2, {r1, r2}
 8001d22:	f000 fa49 	bl	80021b8 <ssd1306_WriteString>
		ssd1306_WriteString("A", INFO_TEXT_SIZE, SSD1306_WHITE);
 8001d26:	4a10      	ldr	r2, [pc, #64]	; (8001d68 <displayVoltageCurrent+0x1d4>)
 8001d28:	2301      	movs	r3, #1
 8001d2a:	ca06      	ldmia	r2, {r1, r2}
 8001d2c:	4816      	ldr	r0, [pc, #88]	; (8001d88 <displayVoltageCurrent+0x1f4>)
 8001d2e:	f000 fa43 	bl	80021b8 <ssd1306_WriteString>
 8001d32:	e013      	b.n	8001d5c <displayVoltageCurrent+0x1c8>
	} else {
		sprintf(buff, "%4.2f", I);
 8001d34:	f107 001c 	add.w	r0, r7, #28
 8001d38:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001d3c:	490d      	ldr	r1, [pc, #52]	; (8001d74 <displayVoltageCurrent+0x1e0>)
 8001d3e:	f004 f8df 	bl	8005f00 <siprintf>
		ssd1306_WriteString(buff, INFO_TEXT_SIZE, SSD1306_WHITE);
 8001d42:	4a09      	ldr	r2, [pc, #36]	; (8001d68 <displayVoltageCurrent+0x1d4>)
 8001d44:	f107 001c 	add.w	r0, r7, #28
 8001d48:	2301      	movs	r3, #1
 8001d4a:	ca06      	ldmia	r2, {r1, r2}
 8001d4c:	f000 fa34 	bl	80021b8 <ssd1306_WriteString>
		ssd1306_WriteString("mA", INFO_TEXT_SIZE, SSD1306_WHITE);
 8001d50:	4a05      	ldr	r2, [pc, #20]	; (8001d68 <displayVoltageCurrent+0x1d4>)
 8001d52:	2301      	movs	r3, #1
 8001d54:	ca06      	ldmia	r2, {r1, r2}
 8001d56:	480d      	ldr	r0, [pc, #52]	; (8001d8c <displayVoltageCurrent+0x1f8>)
 8001d58:	f000 fa2e 	bl	80021b8 <ssd1306_WriteString>
	}

	ssd1306_UpdateScreen();
 8001d5c:	f000 f91e 	bl	8001f9c <ssd1306_UpdateScreen>
}
 8001d60:	bf00      	nop
 8001d62:	372c      	adds	r7, #44	; 0x2c
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bd90      	pop	{r4, r7, pc}
 8001d68:	20000000 	.word	0x20000000
 8001d6c:	080077b4 	.word	0x080077b4
 8001d70:	408f4000 	.word	0x408f4000
 8001d74:	080077bc 	.word	0x080077bc
 8001d78:	080077c4 	.word	0x080077c4
 8001d7c:	080077c8 	.word	0x080077c8
 8001d80:	080077cc 	.word	0x080077cc
 8001d84:	080077d4 	.word	0x080077d4
 8001d88:	080077dc 	.word	0x080077dc
 8001d8c:	080077e0 	.word	0x080077e0

08001d90 <enableOutput>:

void enableOutput(void){
 8001d90:	b580      	push	{r7, lr}
 8001d92:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(REG_EN_GPIO_Port, REG_EN_Pin, GPIO_PIN_RESET);
 8001d94:	2200      	movs	r2, #0
 8001d96:	2102      	movs	r1, #2
 8001d98:	4802      	ldr	r0, [pc, #8]	; (8001da4 <enableOutput+0x14>)
 8001d9a:	f001 fbd9 	bl	8003550 <HAL_GPIO_WritePin>
}
 8001d9e:	bf00      	nop
 8001da0:	bd80      	pop	{r7, pc}
 8001da2:	bf00      	nop
 8001da4:	40020800 	.word	0x40020800

08001da8 <disableOutput>:

void disableOutput(void){
 8001da8:	b580      	push	{r7, lr}
 8001daa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(REG_EN_GPIO_Port, REG_EN_Pin, GPIO_PIN_SET);
 8001dac:	2201      	movs	r2, #1
 8001dae:	2102      	movs	r1, #2
 8001db0:	4802      	ldr	r0, [pc, #8]	; (8001dbc <disableOutput+0x14>)
 8001db2:	f001 fbcd 	bl	8003550 <HAL_GPIO_WritePin>
}
 8001db6:	bf00      	nop
 8001db8:	bd80      	pop	{r7, pc}
 8001dba:	bf00      	nop
 8001dbc:	40020800 	.word	0x40020800

08001dc0 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001dc0:	b480      	push	{r7}
 8001dc2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001dc4:	b672      	cpsid	i
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001dc6:	e7fe      	b.n	8001dc6 <Error_Handler+0x6>

08001dc8 <MCP4018_WriteVal>:
	uint8_t retVal = 0;
	HAL_I2C_Master_Receive(&hi2c1, MCP4018_I2C_ADDR, &retVal, 1, HAL_MAX_DELAY);
	return retVal;
}

void MCP4018_WriteVal(uint8_t val){
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b084      	sub	sp, #16
 8001dcc:	af02      	add	r7, sp, #8
 8001dce:	4603      	mov	r3, r0
 8001dd0:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Master_Transmit(&hi2c1, MCP4018_I2C_ADDR, &val, 1, HAL_MAX_DELAY);
 8001dd2:	1dfa      	adds	r2, r7, #7
 8001dd4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001dd8:	9300      	str	r3, [sp, #0]
 8001dda:	2301      	movs	r3, #1
 8001ddc:	215e      	movs	r1, #94	; 0x5e
 8001dde:	4803      	ldr	r0, [pc, #12]	; (8001dec <MCP4018_WriteVal+0x24>)
 8001de0:	f001 fd46 	bl	8003870 <HAL_I2C_Master_Transmit>
}
 8001de4:	bf00      	nop
 8001de6:	3708      	adds	r7, #8
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bd80      	pop	{r7, pc}
 8001dec:	20000614 	.word	0x20000614

08001df0 <ssd1306_Reset>:
#include <math.h>
#include <stdlib.h>
#include <string.h> // For memcpy

void ssd1306_Reset(void)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(OLED_RST_GPIO_Port, OLED_RST_Pin, GPIO_PIN_RESET);
 8001df4:	2200      	movs	r2, #0
 8001df6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001dfa:	4808      	ldr	r0, [pc, #32]	; (8001e1c <ssd1306_Reset+0x2c>)
 8001dfc:	f001 fba8 	bl	8003550 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 8001e00:	200a      	movs	r0, #10
 8001e02:	f000 fd0b 	bl	800281c <HAL_Delay>
    HAL_GPIO_WritePin(OLED_RST_GPIO_Port, OLED_RST_Pin, GPIO_PIN_SET);
 8001e06:	2201      	movs	r2, #1
 8001e08:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001e0c:	4803      	ldr	r0, [pc, #12]	; (8001e1c <ssd1306_Reset+0x2c>)
 8001e0e:	f001 fb9f 	bl	8003550 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 8001e12:	200a      	movs	r0, #10
 8001e14:	f000 fd02 	bl	800281c <HAL_Delay>
}
 8001e18:	bf00      	nop
 8001e1a:	bd80      	pop	{r7, pc}
 8001e1c:	40020400 	.word	0x40020400

08001e20 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b086      	sub	sp, #24
 8001e24:	af04      	add	r7, sp, #16
 8001e26:	4603      	mov	r3, r0
 8001e28:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&hi2c1, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8001e2a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001e2e:	9302      	str	r3, [sp, #8]
 8001e30:	2301      	movs	r3, #1
 8001e32:	9301      	str	r3, [sp, #4]
 8001e34:	1dfb      	adds	r3, r7, #7
 8001e36:	9300      	str	r3, [sp, #0]
 8001e38:	2301      	movs	r3, #1
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	2178      	movs	r1, #120	; 0x78
 8001e3e:	4803      	ldr	r0, [pc, #12]	; (8001e4c <ssd1306_WriteCommand+0x2c>)
 8001e40:	f001 fe14 	bl	8003a6c <HAL_I2C_Mem_Write>
}
 8001e44:	bf00      	nop
 8001e46:	3708      	adds	r7, #8
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bd80      	pop	{r7, pc}
 8001e4c:	20000614 	.word	0x20000614

08001e50 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t *buffer, size_t buff_size)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b086      	sub	sp, #24
 8001e54:	af04      	add	r7, sp, #16
 8001e56:	6078      	str	r0, [r7, #4]
 8001e58:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&hi2c1, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	b29b      	uxth	r3, r3
 8001e5e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001e62:	9202      	str	r2, [sp, #8]
 8001e64:	9301      	str	r3, [sp, #4]
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	9300      	str	r3, [sp, #0]
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	2240      	movs	r2, #64	; 0x40
 8001e6e:	2178      	movs	r1, #120	; 0x78
 8001e70:	4803      	ldr	r0, [pc, #12]	; (8001e80 <ssd1306_WriteData+0x30>)
 8001e72:	f001 fdfb 	bl	8003a6c <HAL_I2C_Mem_Write>
}
 8001e76:	bf00      	nop
 8001e78:	3708      	adds	r7, #8
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}
 8001e7e:	bf00      	nop
 8001e80:	20000614 	.word	0x20000614

08001e84 <ssd1306_Init>:
    return ret;
}

// Initialize the oled screen
void ssd1306_Init(void)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8001e88:	f7ff ffb2 	bl	8001df0 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8001e8c:	2064      	movs	r0, #100	; 0x64
 8001e8e:	f000 fcc5 	bl	800281c <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8001e92:	2000      	movs	r0, #0
 8001e94:	f000 f9e2 	bl	800225c <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8001e98:	2020      	movs	r0, #32
 8001e9a:	f7ff ffc1 	bl	8001e20 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8001e9e:	2000      	movs	r0, #0
 8001ea0:	f7ff ffbe 	bl	8001e20 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001ea4:	20b0      	movs	r0, #176	; 0xb0
 8001ea6:	f7ff ffbb 	bl	8001e20 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8001eaa:	20c8      	movs	r0, #200	; 0xc8
 8001eac:	f7ff ffb8 	bl	8001e20 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8001eb0:	2000      	movs	r0, #0
 8001eb2:	f7ff ffb5 	bl	8001e20 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8001eb6:	2010      	movs	r0, #16
 8001eb8:	f7ff ffb2 	bl	8001e20 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8001ebc:	2040      	movs	r0, #64	; 0x40
 8001ebe:	f7ff ffaf 	bl	8001e20 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8001ec2:	20ff      	movs	r0, #255	; 0xff
 8001ec4:	f000 f9b6 	bl	8002234 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8001ec8:	20a1      	movs	r0, #161	; 0xa1
 8001eca:	f7ff ffa9 	bl	8001e20 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8001ece:	20a6      	movs	r0, #166	; 0xa6
 8001ed0:	f7ff ffa6 	bl	8001e20 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8001ed4:	20a8      	movs	r0, #168	; 0xa8
 8001ed6:	f7ff ffa3 	bl	8001e20 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8001eda:	203f      	movs	r0, #63	; 0x3f
 8001edc:	f7ff ffa0 	bl	8001e20 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001ee0:	20a4      	movs	r0, #164	; 0xa4
 8001ee2:	f7ff ff9d 	bl	8001e20 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8001ee6:	20d3      	movs	r0, #211	; 0xd3
 8001ee8:	f7ff ff9a 	bl	8001e20 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8001eec:	2000      	movs	r0, #0
 8001eee:	f7ff ff97 	bl	8001e20 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8001ef2:	20d5      	movs	r0, #213	; 0xd5
 8001ef4:	f7ff ff94 	bl	8001e20 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8001ef8:	20f0      	movs	r0, #240	; 0xf0
 8001efa:	f7ff ff91 	bl	8001e20 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8001efe:	20d9      	movs	r0, #217	; 0xd9
 8001f00:	f7ff ff8e 	bl	8001e20 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8001f04:	2022      	movs	r0, #34	; 0x22
 8001f06:	f7ff ff8b 	bl	8001e20 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8001f0a:	20da      	movs	r0, #218	; 0xda
 8001f0c:	f7ff ff88 	bl	8001e20 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8001f10:	2012      	movs	r0, #18
 8001f12:	f7ff ff85 	bl	8001e20 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8001f16:	20db      	movs	r0, #219	; 0xdb
 8001f18:	f7ff ff82 	bl	8001e20 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8001f1c:	2020      	movs	r0, #32
 8001f1e:	f7ff ff7f 	bl	8001e20 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8001f22:	208d      	movs	r0, #141	; 0x8d
 8001f24:	f7ff ff7c 	bl	8001e20 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8001f28:	2014      	movs	r0, #20
 8001f2a:	f7ff ff79 	bl	8001e20 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1);    //--turn on SSD1306 panel
 8001f2e:	2001      	movs	r0, #1
 8001f30:	f000 f994 	bl	800225c <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(SSD1306_BLACK);
 8001f34:	2000      	movs	r0, #0
 8001f36:	f000 f80f 	bl	8001f58 <ssd1306_Fill>

    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8001f3a:	f000 f82f 	bl	8001f9c <ssd1306_UpdateScreen>

    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8001f3e:	4b05      	ldr	r3, [pc, #20]	; (8001f54 <ssd1306_Init+0xd0>)
 8001f40:	2200      	movs	r2, #0
 8001f42:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8001f44:	4b03      	ldr	r3, [pc, #12]	; (8001f54 <ssd1306_Init+0xd0>)
 8001f46:	2200      	movs	r2, #0
 8001f48:	805a      	strh	r2, [r3, #2]

    SSD1306.Initialized = 1;
 8001f4a:	4b02      	ldr	r3, [pc, #8]	; (8001f54 <ssd1306_Init+0xd0>)
 8001f4c:	2201      	movs	r2, #1
 8001f4e:	715a      	strb	r2, [r3, #5]
}
 8001f50:	bf00      	nop
 8001f52:	bd80      	pop	{r7, pc}
 8001f54:	20000600 	.word	0x20000600

08001f58 <ssd1306_Fill>:

// Fill the whole screen with the given color
void ssd1306_Fill(SSD1306_COLOR color)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	b085      	sub	sp, #20
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	4603      	mov	r3, r0
 8001f60:	71fb      	strb	r3, [r7, #7]
    /* Set memory */
    uint32_t i;

    for (i = 0; i < sizeof(SSD1306_Buffer); i++)
 8001f62:	2300      	movs	r3, #0
 8001f64:	60fb      	str	r3, [r7, #12]
 8001f66:	e00d      	b.n	8001f84 <ssd1306_Fill+0x2c>
    {
        SSD1306_Buffer[i] = (color == SSD1306_BLACK) ? 0x00 : 0xFF;
 8001f68:	79fb      	ldrb	r3, [r7, #7]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d101      	bne.n	8001f72 <ssd1306_Fill+0x1a>
 8001f6e:	2100      	movs	r1, #0
 8001f70:	e000      	b.n	8001f74 <ssd1306_Fill+0x1c>
 8001f72:	21ff      	movs	r1, #255	; 0xff
 8001f74:	4a08      	ldr	r2, [pc, #32]	; (8001f98 <ssd1306_Fill+0x40>)
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	4413      	add	r3, r2
 8001f7a:	460a      	mov	r2, r1
 8001f7c:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < sizeof(SSD1306_Buffer); i++)
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	3301      	adds	r3, #1
 8001f82:	60fb      	str	r3, [r7, #12]
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f8a:	d3ed      	bcc.n	8001f68 <ssd1306_Fill+0x10>
    }
}
 8001f8c:	bf00      	nop
 8001f8e:	3714      	adds	r7, #20
 8001f90:	46bd      	mov	sp, r7
 8001f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f96:	4770      	bx	lr
 8001f98:	20000200 	.word	0x20000200

08001f9c <ssd1306_UpdateScreen>:

// Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen(void)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b082      	sub	sp, #8
 8001fa0:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for (uint8_t i = 0; i < SSD1306_HEIGHT / 8; i++)
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	71fb      	strb	r3, [r7, #7]
 8001fa6:	e016      	b.n	8001fd6 <ssd1306_UpdateScreen+0x3a>
    {
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8001fa8:	79fb      	ldrb	r3, [r7, #7]
 8001faa:	3b50      	subs	r3, #80	; 0x50
 8001fac:	b2db      	uxtb	r3, r3
 8001fae:	4618      	mov	r0, r3
 8001fb0:	f7ff ff36 	bl	8001e20 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00);
 8001fb4:	2000      	movs	r0, #0
 8001fb6:	f7ff ff33 	bl	8001e20 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10);
 8001fba:	2010      	movs	r0, #16
 8001fbc:	f7ff ff30 	bl	8001e20 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH * i], SSD1306_WIDTH);
 8001fc0:	79fb      	ldrb	r3, [r7, #7]
 8001fc2:	01db      	lsls	r3, r3, #7
 8001fc4:	4a07      	ldr	r2, [pc, #28]	; (8001fe4 <ssd1306_UpdateScreen+0x48>)
 8001fc6:	4413      	add	r3, r2
 8001fc8:	2180      	movs	r1, #128	; 0x80
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f7ff ff40 	bl	8001e50 <ssd1306_WriteData>
    for (uint8_t i = 0; i < SSD1306_HEIGHT / 8; i++)
 8001fd0:	79fb      	ldrb	r3, [r7, #7]
 8001fd2:	3301      	adds	r3, #1
 8001fd4:	71fb      	strb	r3, [r7, #7]
 8001fd6:	79fb      	ldrb	r3, [r7, #7]
 8001fd8:	2b07      	cmp	r3, #7
 8001fda:	d9e5      	bls.n	8001fa8 <ssd1306_UpdateScreen+0xc>
    }
}
 8001fdc:	bf00      	nop
 8001fde:	3708      	adds	r7, #8
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bd80      	pop	{r7, pc}
 8001fe4:	20000200 	.word	0x20000200

08001fe8 <ssd1306_DrawPixel>:
//    Draw one pixel in the screenbuffer
//    X => X Coordinate
//    Y => Y Coordinate
//    color => Pixel color
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	b083      	sub	sp, #12
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	4603      	mov	r3, r0
 8001ff0:	71fb      	strb	r3, [r7, #7]
 8001ff2:	460b      	mov	r3, r1
 8001ff4:	71bb      	strb	r3, [r7, #6]
 8001ff6:	4613      	mov	r3, r2
 8001ff8:	717b      	strb	r3, [r7, #5]
    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT)
 8001ffa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	db48      	blt.n	8002094 <ssd1306_DrawPixel+0xac>
 8002002:	79bb      	ldrb	r3, [r7, #6]
 8002004:	2b3f      	cmp	r3, #63	; 0x3f
 8002006:	d845      	bhi.n	8002094 <ssd1306_DrawPixel+0xac>
        // Don't write outside the buffer
        return;
    }

    // Check if pixel should be inverted
    if (SSD1306.Inverted)
 8002008:	4b25      	ldr	r3, [pc, #148]	; (80020a0 <ssd1306_DrawPixel+0xb8>)
 800200a:	791b      	ldrb	r3, [r3, #4]
 800200c:	2b00      	cmp	r3, #0
 800200e:	d006      	beq.n	800201e <ssd1306_DrawPixel+0x36>
    {
        color = (SSD1306_COLOR)!color;
 8002010:	797b      	ldrb	r3, [r7, #5]
 8002012:	2b00      	cmp	r3, #0
 8002014:	bf0c      	ite	eq
 8002016:	2301      	moveq	r3, #1
 8002018:	2300      	movne	r3, #0
 800201a:	b2db      	uxtb	r3, r3
 800201c:	717b      	strb	r3, [r7, #5]
    }

    // Draw in the right color
    if (color == SSD1306_WHITE)
 800201e:	797b      	ldrb	r3, [r7, #5]
 8002020:	2b01      	cmp	r3, #1
 8002022:	d11a      	bne.n	800205a <ssd1306_DrawPixel+0x72>
    {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8002024:	79fa      	ldrb	r2, [r7, #7]
 8002026:	79bb      	ldrb	r3, [r7, #6]
 8002028:	08db      	lsrs	r3, r3, #3
 800202a:	b2d8      	uxtb	r0, r3
 800202c:	4603      	mov	r3, r0
 800202e:	01db      	lsls	r3, r3, #7
 8002030:	4413      	add	r3, r2
 8002032:	4a1c      	ldr	r2, [pc, #112]	; (80020a4 <ssd1306_DrawPixel+0xbc>)
 8002034:	5cd3      	ldrb	r3, [r2, r3]
 8002036:	b25a      	sxtb	r2, r3
 8002038:	79bb      	ldrb	r3, [r7, #6]
 800203a:	f003 0307 	and.w	r3, r3, #7
 800203e:	2101      	movs	r1, #1
 8002040:	fa01 f303 	lsl.w	r3, r1, r3
 8002044:	b25b      	sxtb	r3, r3
 8002046:	4313      	orrs	r3, r2
 8002048:	b259      	sxtb	r1, r3
 800204a:	79fa      	ldrb	r2, [r7, #7]
 800204c:	4603      	mov	r3, r0
 800204e:	01db      	lsls	r3, r3, #7
 8002050:	4413      	add	r3, r2
 8002052:	b2c9      	uxtb	r1, r1
 8002054:	4a13      	ldr	r2, [pc, #76]	; (80020a4 <ssd1306_DrawPixel+0xbc>)
 8002056:	54d1      	strb	r1, [r2, r3]
 8002058:	e01d      	b.n	8002096 <ssd1306_DrawPixel+0xae>
    }
    else
    {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 800205a:	79fa      	ldrb	r2, [r7, #7]
 800205c:	79bb      	ldrb	r3, [r7, #6]
 800205e:	08db      	lsrs	r3, r3, #3
 8002060:	b2d8      	uxtb	r0, r3
 8002062:	4603      	mov	r3, r0
 8002064:	01db      	lsls	r3, r3, #7
 8002066:	4413      	add	r3, r2
 8002068:	4a0e      	ldr	r2, [pc, #56]	; (80020a4 <ssd1306_DrawPixel+0xbc>)
 800206a:	5cd3      	ldrb	r3, [r2, r3]
 800206c:	b25a      	sxtb	r2, r3
 800206e:	79bb      	ldrb	r3, [r7, #6]
 8002070:	f003 0307 	and.w	r3, r3, #7
 8002074:	2101      	movs	r1, #1
 8002076:	fa01 f303 	lsl.w	r3, r1, r3
 800207a:	b25b      	sxtb	r3, r3
 800207c:	43db      	mvns	r3, r3
 800207e:	b25b      	sxtb	r3, r3
 8002080:	4013      	ands	r3, r2
 8002082:	b259      	sxtb	r1, r3
 8002084:	79fa      	ldrb	r2, [r7, #7]
 8002086:	4603      	mov	r3, r0
 8002088:	01db      	lsls	r3, r3, #7
 800208a:	4413      	add	r3, r2
 800208c:	b2c9      	uxtb	r1, r1
 800208e:	4a05      	ldr	r2, [pc, #20]	; (80020a4 <ssd1306_DrawPixel+0xbc>)
 8002090:	54d1      	strb	r1, [r2, r3]
 8002092:	e000      	b.n	8002096 <ssd1306_DrawPixel+0xae>
        return;
 8002094:	bf00      	nop
    }
}
 8002096:	370c      	adds	r7, #12
 8002098:	46bd      	mov	sp, r7
 800209a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209e:	4770      	bx	lr
 80020a0:	20000600 	.word	0x20000600
 80020a4:	20000200 	.word	0x20000200

080020a8 <ssd1306_WriteChar>:
// Draw 1 char to the screen buffer
// ch       => char om weg te schrijven
// Font     => Font waarmee we gaan schrijven
// color    => SSD1306_BLACK or SSD1306_WHITE
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color)
{
 80020a8:	b590      	push	{r4, r7, lr}
 80020aa:	b089      	sub	sp, #36	; 0x24
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	4604      	mov	r4, r0
 80020b0:	1d38      	adds	r0, r7, #4
 80020b2:	e880 0006 	stmia.w	r0, {r1, r2}
 80020b6:	461a      	mov	r2, r3
 80020b8:	4623      	mov	r3, r4
 80020ba:	73fb      	strb	r3, [r7, #15]
 80020bc:	4613      	mov	r3, r2
 80020be:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;

    // Check if character is valid
    if (ch < 32 || ch > 126)
 80020c0:	7bfb      	ldrb	r3, [r7, #15]
 80020c2:	2b1f      	cmp	r3, #31
 80020c4:	d902      	bls.n	80020cc <ssd1306_WriteChar+0x24>
 80020c6:	7bfb      	ldrb	r3, [r7, #15]
 80020c8:	2b7e      	cmp	r3, #126	; 0x7e
 80020ca:	d901      	bls.n	80020d0 <ssd1306_WriteChar+0x28>
        return 0;
 80020cc:	2300      	movs	r3, #0
 80020ce:	e06d      	b.n	80021ac <ssd1306_WriteChar+0x104>

    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 80020d0:	4b38      	ldr	r3, [pc, #224]	; (80021b4 <ssd1306_WriteChar+0x10c>)
 80020d2:	881b      	ldrh	r3, [r3, #0]
 80020d4:	461a      	mov	r2, r3
 80020d6:	793b      	ldrb	r3, [r7, #4]
 80020d8:	4413      	add	r3, r2
 80020da:	2b80      	cmp	r3, #128	; 0x80
 80020dc:	dc06      	bgt.n	80020ec <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 80020de:	4b35      	ldr	r3, [pc, #212]	; (80021b4 <ssd1306_WriteChar+0x10c>)
 80020e0:	885b      	ldrh	r3, [r3, #2]
 80020e2:	461a      	mov	r2, r3
 80020e4:	797b      	ldrb	r3, [r7, #5]
 80020e6:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 80020e8:	2b40      	cmp	r3, #64	; 0x40
 80020ea:	dd01      	ble.n	80020f0 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 80020ec:	2300      	movs	r3, #0
 80020ee:	e05d      	b.n	80021ac <ssd1306_WriteChar+0x104>
    }

    // Use the font to write
    for (i = 0; i < Font.FontHeight; i++)
 80020f0:	2300      	movs	r3, #0
 80020f2:	61fb      	str	r3, [r7, #28]
 80020f4:	e04c      	b.n	8002190 <ssd1306_WriteChar+0xe8>
    {
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 80020f6:	68ba      	ldr	r2, [r7, #8]
 80020f8:	7bfb      	ldrb	r3, [r7, #15]
 80020fa:	3b20      	subs	r3, #32
 80020fc:	7979      	ldrb	r1, [r7, #5]
 80020fe:	fb01 f303 	mul.w	r3, r1, r3
 8002102:	4619      	mov	r1, r3
 8002104:	69fb      	ldr	r3, [r7, #28]
 8002106:	440b      	add	r3, r1
 8002108:	005b      	lsls	r3, r3, #1
 800210a:	4413      	add	r3, r2
 800210c:	881b      	ldrh	r3, [r3, #0]
 800210e:	617b      	str	r3, [r7, #20]
        for (j = 0; j < Font.FontWidth; j++)
 8002110:	2300      	movs	r3, #0
 8002112:	61bb      	str	r3, [r7, #24]
 8002114:	e034      	b.n	8002180 <ssd1306_WriteChar+0xd8>
        {
            if ((b << j) & 0x8000)
 8002116:	697a      	ldr	r2, [r7, #20]
 8002118:	69bb      	ldr	r3, [r7, #24]
 800211a:	fa02 f303 	lsl.w	r3, r2, r3
 800211e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002122:	2b00      	cmp	r3, #0
 8002124:	d012      	beq.n	800214c <ssd1306_WriteChar+0xa4>
            {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)color);
 8002126:	4b23      	ldr	r3, [pc, #140]	; (80021b4 <ssd1306_WriteChar+0x10c>)
 8002128:	881b      	ldrh	r3, [r3, #0]
 800212a:	b2da      	uxtb	r2, r3
 800212c:	69bb      	ldr	r3, [r7, #24]
 800212e:	b2db      	uxtb	r3, r3
 8002130:	4413      	add	r3, r2
 8002132:	b2d8      	uxtb	r0, r3
 8002134:	4b1f      	ldr	r3, [pc, #124]	; (80021b4 <ssd1306_WriteChar+0x10c>)
 8002136:	885b      	ldrh	r3, [r3, #2]
 8002138:	b2da      	uxtb	r2, r3
 800213a:	69fb      	ldr	r3, [r7, #28]
 800213c:	b2db      	uxtb	r3, r3
 800213e:	4413      	add	r3, r2
 8002140:	b2db      	uxtb	r3, r3
 8002142:	7bba      	ldrb	r2, [r7, #14]
 8002144:	4619      	mov	r1, r3
 8002146:	f7ff ff4f 	bl	8001fe8 <ssd1306_DrawPixel>
 800214a:	e016      	b.n	800217a <ssd1306_WriteChar+0xd2>
            }
            else
            {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 800214c:	4b19      	ldr	r3, [pc, #100]	; (80021b4 <ssd1306_WriteChar+0x10c>)
 800214e:	881b      	ldrh	r3, [r3, #0]
 8002150:	b2da      	uxtb	r2, r3
 8002152:	69bb      	ldr	r3, [r7, #24]
 8002154:	b2db      	uxtb	r3, r3
 8002156:	4413      	add	r3, r2
 8002158:	b2d8      	uxtb	r0, r3
 800215a:	4b16      	ldr	r3, [pc, #88]	; (80021b4 <ssd1306_WriteChar+0x10c>)
 800215c:	885b      	ldrh	r3, [r3, #2]
 800215e:	b2da      	uxtb	r2, r3
 8002160:	69fb      	ldr	r3, [r7, #28]
 8002162:	b2db      	uxtb	r3, r3
 8002164:	4413      	add	r3, r2
 8002166:	b2d9      	uxtb	r1, r3
 8002168:	7bbb      	ldrb	r3, [r7, #14]
 800216a:	2b00      	cmp	r3, #0
 800216c:	bf0c      	ite	eq
 800216e:	2301      	moveq	r3, #1
 8002170:	2300      	movne	r3, #0
 8002172:	b2db      	uxtb	r3, r3
 8002174:	461a      	mov	r2, r3
 8002176:	f7ff ff37 	bl	8001fe8 <ssd1306_DrawPixel>
        for (j = 0; j < Font.FontWidth; j++)
 800217a:	69bb      	ldr	r3, [r7, #24]
 800217c:	3301      	adds	r3, #1
 800217e:	61bb      	str	r3, [r7, #24]
 8002180:	793b      	ldrb	r3, [r7, #4]
 8002182:	461a      	mov	r2, r3
 8002184:	69bb      	ldr	r3, [r7, #24]
 8002186:	4293      	cmp	r3, r2
 8002188:	d3c5      	bcc.n	8002116 <ssd1306_WriteChar+0x6e>
    for (i = 0; i < Font.FontHeight; i++)
 800218a:	69fb      	ldr	r3, [r7, #28]
 800218c:	3301      	adds	r3, #1
 800218e:	61fb      	str	r3, [r7, #28]
 8002190:	797b      	ldrb	r3, [r7, #5]
 8002192:	461a      	mov	r2, r3
 8002194:	69fb      	ldr	r3, [r7, #28]
 8002196:	4293      	cmp	r3, r2
 8002198:	d3ad      	bcc.n	80020f6 <ssd1306_WriteChar+0x4e>
            }
        }
    }

    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 800219a:	4b06      	ldr	r3, [pc, #24]	; (80021b4 <ssd1306_WriteChar+0x10c>)
 800219c:	881a      	ldrh	r2, [r3, #0]
 800219e:	793b      	ldrb	r3, [r7, #4]
 80021a0:	b29b      	uxth	r3, r3
 80021a2:	4413      	add	r3, r2
 80021a4:	b29a      	uxth	r2, r3
 80021a6:	4b03      	ldr	r3, [pc, #12]	; (80021b4 <ssd1306_WriteChar+0x10c>)
 80021a8:	801a      	strh	r2, [r3, #0]

    // Return written char for validation
    return ch;
 80021aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80021ac:	4618      	mov	r0, r3
 80021ae:	3724      	adds	r7, #36	; 0x24
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bd90      	pop	{r4, r7, pc}
 80021b4:	20000600 	.word	0x20000600

080021b8 <ssd1306_WriteString>:

// Write full string to screenbuffer
char ssd1306_WriteString(char *str, FontDef Font, SSD1306_COLOR color)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b084      	sub	sp, #16
 80021bc:	af00      	add	r7, sp, #0
 80021be:	60f8      	str	r0, [r7, #12]
 80021c0:	1d38      	adds	r0, r7, #4
 80021c2:	e880 0006 	stmia.w	r0, {r1, r2}
 80021c6:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str)
 80021c8:	e012      	b.n	80021f0 <ssd1306_WriteString+0x38>
    {
        if (ssd1306_WriteChar(*str, Font, color) != *str)
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	7818      	ldrb	r0, [r3, #0]
 80021ce:	78fb      	ldrb	r3, [r7, #3]
 80021d0:	1d3a      	adds	r2, r7, #4
 80021d2:	ca06      	ldmia	r2, {r1, r2}
 80021d4:	f7ff ff68 	bl	80020a8 <ssd1306_WriteChar>
 80021d8:	4603      	mov	r3, r0
 80021da:	461a      	mov	r2, r3
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	781b      	ldrb	r3, [r3, #0]
 80021e0:	429a      	cmp	r2, r3
 80021e2:	d002      	beq.n	80021ea <ssd1306_WriteString+0x32>
        {
            // Char could not be written
            return *str;
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	781b      	ldrb	r3, [r3, #0]
 80021e8:	e008      	b.n	80021fc <ssd1306_WriteString+0x44>
        }

        // Next char
        str++;
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	3301      	adds	r3, #1
 80021ee:	60fb      	str	r3, [r7, #12]
    while (*str)
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	781b      	ldrb	r3, [r3, #0]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d1e8      	bne.n	80021ca <ssd1306_WriteString+0x12>
    }

    // Everything ok
    return *str;
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	781b      	ldrb	r3, [r3, #0]
}
 80021fc:	4618      	mov	r0, r3
 80021fe:	3710      	adds	r7, #16
 8002200:	46bd      	mov	sp, r7
 8002202:	bd80      	pop	{r7, pc}

08002204 <ssd1306_SetCursor>:

// Position the cursor
void ssd1306_SetCursor(uint8_t x, uint8_t y)
{
 8002204:	b480      	push	{r7}
 8002206:	b083      	sub	sp, #12
 8002208:	af00      	add	r7, sp, #0
 800220a:	4603      	mov	r3, r0
 800220c:	460a      	mov	r2, r1
 800220e:	71fb      	strb	r3, [r7, #7]
 8002210:	4613      	mov	r3, r2
 8002212:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8002214:	79fb      	ldrb	r3, [r7, #7]
 8002216:	b29a      	uxth	r2, r3
 8002218:	4b05      	ldr	r3, [pc, #20]	; (8002230 <ssd1306_SetCursor+0x2c>)
 800221a:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 800221c:	79bb      	ldrb	r3, [r7, #6]
 800221e:	b29a      	uxth	r2, r3
 8002220:	4b03      	ldr	r3, [pc, #12]	; (8002230 <ssd1306_SetCursor+0x2c>)
 8002222:	805a      	strh	r2, [r3, #2]
}
 8002224:	bf00      	nop
 8002226:	370c      	adds	r7, #12
 8002228:	46bd      	mov	sp, r7
 800222a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222e:	4770      	bx	lr
 8002230:	20000600 	.word	0x20000600

08002234 <ssd1306_SetContrast>:

    return;
}

void ssd1306_SetContrast(const uint8_t value)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b084      	sub	sp, #16
 8002238:	af00      	add	r7, sp, #0
 800223a:	4603      	mov	r3, r0
 800223c:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 800223e:	2381      	movs	r3, #129	; 0x81
 8002240:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8002242:	7bfb      	ldrb	r3, [r7, #15]
 8002244:	4618      	mov	r0, r3
 8002246:	f7ff fdeb 	bl	8001e20 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 800224a:	79fb      	ldrb	r3, [r7, #7]
 800224c:	4618      	mov	r0, r3
 800224e:	f7ff fde7 	bl	8001e20 <ssd1306_WriteCommand>
}
 8002252:	bf00      	nop
 8002254:	3710      	adds	r7, #16
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}
	...

0800225c <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b084      	sub	sp, #16
 8002260:	af00      	add	r7, sp, #0
 8002262:	4603      	mov	r3, r0
 8002264:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on)
 8002266:	79fb      	ldrb	r3, [r7, #7]
 8002268:	2b00      	cmp	r3, #0
 800226a:	d005      	beq.n	8002278 <ssd1306_SetDisplayOn+0x1c>
    {
        value = 0xAF; // Display on
 800226c:	23af      	movs	r3, #175	; 0xaf
 800226e:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8002270:	4b08      	ldr	r3, [pc, #32]	; (8002294 <ssd1306_SetDisplayOn+0x38>)
 8002272:	2201      	movs	r2, #1
 8002274:	719a      	strb	r2, [r3, #6]
 8002276:	e004      	b.n	8002282 <ssd1306_SetDisplayOn+0x26>
    }
    else
    {
        value = 0xAE; // Display off
 8002278:	23ae      	movs	r3, #174	; 0xae
 800227a:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 800227c:	4b05      	ldr	r3, [pc, #20]	; (8002294 <ssd1306_SetDisplayOn+0x38>)
 800227e:	2200      	movs	r2, #0
 8002280:	719a      	strb	r2, [r3, #6]
    }
    ssd1306_WriteCommand(value);
 8002282:	7bfb      	ldrb	r3, [r7, #15]
 8002284:	4618      	mov	r0, r3
 8002286:	f7ff fdcb 	bl	8001e20 <ssd1306_WriteCommand>
}
 800228a:	bf00      	nop
 800228c:	3710      	adds	r7, #16
 800228e:	46bd      	mov	sp, r7
 8002290:	bd80      	pop	{r7, pc}
 8002292:	bf00      	nop
 8002294:	20000600 	.word	0x20000600

08002298 <ssd1306_DrawBitMap>:
uint8_t ssd1306_GetDisplayOn()
{
    return SSD1306.DisplayOn;
}

void ssd1306_DrawBitMap(int16_t x, int16_t y, const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color){
 8002298:	b580      	push	{r7, lr}
 800229a:	b086      	sub	sp, #24
 800229c:	af00      	add	r7, sp, #0
 800229e:	60ba      	str	r2, [r7, #8]
 80022a0:	461a      	mov	r2, r3
 80022a2:	4603      	mov	r3, r0
 80022a4:	81fb      	strh	r3, [r7, #14]
 80022a6:	460b      	mov	r3, r1
 80022a8:	81bb      	strh	r3, [r7, #12]
 80022aa:	4613      	mov	r3, r2
 80022ac:	80fb      	strh	r3, [r7, #6]
	int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 80022ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80022b2:	3307      	adds	r3, #7
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	da00      	bge.n	80022ba <ssd1306_DrawBitMap+0x22>
 80022b8:	3307      	adds	r3, #7
 80022ba:	10db      	asrs	r3, r3, #3
 80022bc:	823b      	strh	r3, [r7, #16]
	uint8_t byte = 0;
 80022be:	2300      	movs	r3, #0
 80022c0:	75fb      	strb	r3, [r7, #23]

	for (int16_t j = 0; j < h; j++, y++) {
 80022c2:	2300      	movs	r3, #0
 80022c4:	82bb      	strh	r3, [r7, #20]
 80022c6:	e047      	b.n	8002358 <ssd1306_DrawBitMap+0xc0>
		for (int16_t i = 0; i < w; i++) {
 80022c8:	2300      	movs	r3, #0
 80022ca:	827b      	strh	r3, [r7, #18]
 80022cc:	e032      	b.n	8002334 <ssd1306_DrawBitMap+0x9c>
			if (i & 7)
 80022ce:	8a7b      	ldrh	r3, [r7, #18]
 80022d0:	f003 0307 	and.w	r3, r3, #7
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d003      	beq.n	80022e0 <ssd1306_DrawBitMap+0x48>
				byte <<= 1;
 80022d8:	7dfb      	ldrb	r3, [r7, #23]
 80022da:	005b      	lsls	r3, r3, #1
 80022dc:	75fb      	strb	r3, [r7, #23]
 80022de:	e012      	b.n	8002306 <ssd1306_DrawBitMap+0x6e>
			else
				byte = bitmap[j * byteWidth + i / 8];
 80022e0:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80022e4:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80022e8:	fb02 f203 	mul.w	r2, r2, r3
 80022ec:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	da00      	bge.n	80022f6 <ssd1306_DrawBitMap+0x5e>
 80022f4:	3307      	adds	r3, #7
 80022f6:	10db      	asrs	r3, r3, #3
 80022f8:	b21b      	sxth	r3, r3
 80022fa:	4413      	add	r3, r2
 80022fc:	461a      	mov	r2, r3
 80022fe:	68bb      	ldr	r3, [r7, #8]
 8002300:	4413      	add	r3, r2
 8002302:	781b      	ldrb	r3, [r3, #0]
 8002304:	75fb      	strb	r3, [r7, #23]
			if (byte & 0x80)
 8002306:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800230a:	2b00      	cmp	r3, #0
 800230c:	da0c      	bge.n	8002328 <ssd1306_DrawBitMap+0x90>
				ssd1306_DrawPixel(x + i, y, color);
 800230e:	89fb      	ldrh	r3, [r7, #14]
 8002310:	b2da      	uxtb	r2, r3
 8002312:	8a7b      	ldrh	r3, [r7, #18]
 8002314:	b2db      	uxtb	r3, r3
 8002316:	4413      	add	r3, r2
 8002318:	b2db      	uxtb	r3, r3
 800231a:	89ba      	ldrh	r2, [r7, #12]
 800231c:	b2d1      	uxtb	r1, r2
 800231e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002320:	b2d2      	uxtb	r2, r2
 8002322:	4618      	mov	r0, r3
 8002324:	f7ff fe60 	bl	8001fe8 <ssd1306_DrawPixel>
		for (int16_t i = 0; i < w; i++) {
 8002328:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800232c:	b29b      	uxth	r3, r3
 800232e:	3301      	adds	r3, #1
 8002330:	b29b      	uxth	r3, r3
 8002332:	827b      	strh	r3, [r7, #18]
 8002334:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002338:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800233c:	429a      	cmp	r2, r3
 800233e:	dbc6      	blt.n	80022ce <ssd1306_DrawBitMap+0x36>
	for (int16_t j = 0; j < h; j++, y++) {
 8002340:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002344:	b29b      	uxth	r3, r3
 8002346:	3301      	adds	r3, #1
 8002348:	b29b      	uxth	r3, r3
 800234a:	82bb      	strh	r3, [r7, #20]
 800234c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002350:	b29b      	uxth	r3, r3
 8002352:	3301      	adds	r3, #1
 8002354:	b29b      	uxth	r3, r3
 8002356:	81bb      	strh	r3, [r7, #12]
 8002358:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 800235c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8002360:	429a      	cmp	r2, r3
 8002362:	dbb1      	blt.n	80022c8 <ssd1306_DrawBitMap+0x30>
		}
	}
	ssd1306_UpdateScreen();
 8002364:	f7ff fe1a 	bl	8001f9c <ssd1306_UpdateScreen>
}
 8002368:	bf00      	nop
 800236a:	3718      	adds	r7, #24
 800236c:	46bd      	mov	sp, r7
 800236e:	bd80      	pop	{r7, pc}

08002370 <ssd1306_WriteErrorMsg>:

void ssd1306_WriteErrorMsg(int16_t x, int16_t y, char *str){
 8002370:	b580      	push	{r7, lr}
 8002372:	b082      	sub	sp, #8
 8002374:	af00      	add	r7, sp, #0
 8002376:	4603      	mov	r3, r0
 8002378:	603a      	str	r2, [r7, #0]
 800237a:	80fb      	strh	r3, [r7, #6]
 800237c:	460b      	mov	r3, r1
 800237e:	80bb      	strh	r3, [r7, #4]
	ssd1306_Fill(SSD1306_BLACK);
 8002380:	2000      	movs	r0, #0
 8002382:	f7ff fde9 	bl	8001f58 <ssd1306_Fill>
	ssd1306_UpdateScreen();
 8002386:	f7ff fe09 	bl	8001f9c <ssd1306_UpdateScreen>
	ssd1306_SetCursor(x, y);
 800238a:	88fb      	ldrh	r3, [r7, #6]
 800238c:	b2db      	uxtb	r3, r3
 800238e:	88ba      	ldrh	r2, [r7, #4]
 8002390:	b2d2      	uxtb	r2, r2
 8002392:	4611      	mov	r1, r2
 8002394:	4618      	mov	r0, r3
 8002396:	f7ff ff35 	bl	8002204 <ssd1306_SetCursor>
	ssd1306_WriteString(str, Font_7x10, SSD1306_WHITE);
 800239a:	4a06      	ldr	r2, [pc, #24]	; (80023b4 <ssd1306_WriteErrorMsg+0x44>)
 800239c:	2301      	movs	r3, #1
 800239e:	ca06      	ldmia	r2, {r1, r2}
 80023a0:	6838      	ldr	r0, [r7, #0]
 80023a2:	f7ff ff09 	bl	80021b8 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 80023a6:	f7ff fdf9 	bl	8001f9c <ssd1306_UpdateScreen>
}
 80023aa:	bf00      	nop
 80023ac:	3708      	adds	r7, #8
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bd80      	pop	{r7, pc}
 80023b2:	bf00      	nop
 80023b4:	20000000 	.word	0x20000000

080023b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80023b8:	b480      	push	{r7}
 80023ba:	b083      	sub	sp, #12
 80023bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023be:	2300      	movs	r3, #0
 80023c0:	607b      	str	r3, [r7, #4]
 80023c2:	4b10      	ldr	r3, [pc, #64]	; (8002404 <HAL_MspInit+0x4c>)
 80023c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023c6:	4a0f      	ldr	r2, [pc, #60]	; (8002404 <HAL_MspInit+0x4c>)
 80023c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80023cc:	6453      	str	r3, [r2, #68]	; 0x44
 80023ce:	4b0d      	ldr	r3, [pc, #52]	; (8002404 <HAL_MspInit+0x4c>)
 80023d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023d6:	607b      	str	r3, [r7, #4]
 80023d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80023da:	2300      	movs	r3, #0
 80023dc:	603b      	str	r3, [r7, #0]
 80023de:	4b09      	ldr	r3, [pc, #36]	; (8002404 <HAL_MspInit+0x4c>)
 80023e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023e2:	4a08      	ldr	r2, [pc, #32]	; (8002404 <HAL_MspInit+0x4c>)
 80023e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023e8:	6413      	str	r3, [r2, #64]	; 0x40
 80023ea:	4b06      	ldr	r3, [pc, #24]	; (8002404 <HAL_MspInit+0x4c>)
 80023ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023f2:	603b      	str	r3, [r7, #0]
 80023f4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80023f6:	bf00      	nop
 80023f8:	370c      	adds	r7, #12
 80023fa:	46bd      	mov	sp, r7
 80023fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002400:	4770      	bx	lr
 8002402:	bf00      	nop
 8002404:	40023800 	.word	0x40023800

08002408 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b08a      	sub	sp, #40	; 0x28
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002410:	f107 0314 	add.w	r3, r7, #20
 8002414:	2200      	movs	r2, #0
 8002416:	601a      	str	r2, [r3, #0]
 8002418:	605a      	str	r2, [r3, #4]
 800241a:	609a      	str	r2, [r3, #8]
 800241c:	60da      	str	r2, [r3, #12]
 800241e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4a24      	ldr	r2, [pc, #144]	; (80024b8 <HAL_ADC_MspInit+0xb0>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d141      	bne.n	80024ae <HAL_ADC_MspInit+0xa6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800242a:	2300      	movs	r3, #0
 800242c:	613b      	str	r3, [r7, #16]
 800242e:	4b23      	ldr	r3, [pc, #140]	; (80024bc <HAL_ADC_MspInit+0xb4>)
 8002430:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002432:	4a22      	ldr	r2, [pc, #136]	; (80024bc <HAL_ADC_MspInit+0xb4>)
 8002434:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002438:	6453      	str	r3, [r2, #68]	; 0x44
 800243a:	4b20      	ldr	r3, [pc, #128]	; (80024bc <HAL_ADC_MspInit+0xb4>)
 800243c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800243e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002442:	613b      	str	r3, [r7, #16]
 8002444:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002446:	2300      	movs	r3, #0
 8002448:	60fb      	str	r3, [r7, #12]
 800244a:	4b1c      	ldr	r3, [pc, #112]	; (80024bc <HAL_ADC_MspInit+0xb4>)
 800244c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800244e:	4a1b      	ldr	r2, [pc, #108]	; (80024bc <HAL_ADC_MspInit+0xb4>)
 8002450:	f043 0304 	orr.w	r3, r3, #4
 8002454:	6313      	str	r3, [r2, #48]	; 0x30
 8002456:	4b19      	ldr	r3, [pc, #100]	; (80024bc <HAL_ADC_MspInit+0xb4>)
 8002458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800245a:	f003 0304 	and.w	r3, r3, #4
 800245e:	60fb      	str	r3, [r7, #12]
 8002460:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002462:	2300      	movs	r3, #0
 8002464:	60bb      	str	r3, [r7, #8]
 8002466:	4b15      	ldr	r3, [pc, #84]	; (80024bc <HAL_ADC_MspInit+0xb4>)
 8002468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800246a:	4a14      	ldr	r2, [pc, #80]	; (80024bc <HAL_ADC_MspInit+0xb4>)
 800246c:	f043 0301 	orr.w	r3, r3, #1
 8002470:	6313      	str	r3, [r2, #48]	; 0x30
 8002472:	4b12      	ldr	r3, [pc, #72]	; (80024bc <HAL_ADC_MspInit+0xb4>)
 8002474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002476:	f003 0301 	and.w	r3, r3, #1
 800247a:	60bb      	str	r3, [r7, #8]
 800247c:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC3     ------> ADC1_IN13
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = I_SENSE_Pin;
 800247e:	2308      	movs	r3, #8
 8002480:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002482:	2303      	movs	r3, #3
 8002484:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002486:	2300      	movs	r3, #0
 8002488:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(I_SENSE_GPIO_Port, &GPIO_InitStruct);
 800248a:	f107 0314 	add.w	r3, r7, #20
 800248e:	4619      	mov	r1, r3
 8002490:	480b      	ldr	r0, [pc, #44]	; (80024c0 <HAL_ADC_MspInit+0xb8>)
 8002492:	f000 fec3 	bl	800321c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VO_SENSE_Pin|VI_SENSE_Pin;
 8002496:	2303      	movs	r3, #3
 8002498:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800249a:	2303      	movs	r3, #3
 800249c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800249e:	2300      	movs	r3, #0
 80024a0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024a2:	f107 0314 	add.w	r3, r7, #20
 80024a6:	4619      	mov	r1, r3
 80024a8:	4806      	ldr	r0, [pc, #24]	; (80024c4 <HAL_ADC_MspInit+0xbc>)
 80024aa:	f000 feb7 	bl	800321c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80024ae:	bf00      	nop
 80024b0:	3728      	adds	r7, #40	; 0x28
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}
 80024b6:	bf00      	nop
 80024b8:	40012000 	.word	0x40012000
 80024bc:	40023800 	.word	0x40023800
 80024c0:	40020800 	.word	0x40020800
 80024c4:	40020000 	.word	0x40020000

080024c8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b08a      	sub	sp, #40	; 0x28
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024d0:	f107 0314 	add.w	r3, r7, #20
 80024d4:	2200      	movs	r2, #0
 80024d6:	601a      	str	r2, [r3, #0]
 80024d8:	605a      	str	r2, [r3, #4]
 80024da:	609a      	str	r2, [r3, #8]
 80024dc:	60da      	str	r2, [r3, #12]
 80024de:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4a19      	ldr	r2, [pc, #100]	; (800254c <HAL_I2C_MspInit+0x84>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d12b      	bne.n	8002542 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024ea:	2300      	movs	r3, #0
 80024ec:	613b      	str	r3, [r7, #16]
 80024ee:	4b18      	ldr	r3, [pc, #96]	; (8002550 <HAL_I2C_MspInit+0x88>)
 80024f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024f2:	4a17      	ldr	r2, [pc, #92]	; (8002550 <HAL_I2C_MspInit+0x88>)
 80024f4:	f043 0302 	orr.w	r3, r3, #2
 80024f8:	6313      	str	r3, [r2, #48]	; 0x30
 80024fa:	4b15      	ldr	r3, [pc, #84]	; (8002550 <HAL_I2C_MspInit+0x88>)
 80024fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024fe:	f003 0302 	and.w	r3, r3, #2
 8002502:	613b      	str	r3, [r7, #16]
 8002504:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002506:	23c0      	movs	r3, #192	; 0xc0
 8002508:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800250a:	2312      	movs	r3, #18
 800250c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800250e:	2301      	movs	r3, #1
 8002510:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002512:	2303      	movs	r3, #3
 8002514:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002516:	2304      	movs	r3, #4
 8002518:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800251a:	f107 0314 	add.w	r3, r7, #20
 800251e:	4619      	mov	r1, r3
 8002520:	480c      	ldr	r0, [pc, #48]	; (8002554 <HAL_I2C_MspInit+0x8c>)
 8002522:	f000 fe7b 	bl	800321c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002526:	2300      	movs	r3, #0
 8002528:	60fb      	str	r3, [r7, #12]
 800252a:	4b09      	ldr	r3, [pc, #36]	; (8002550 <HAL_I2C_MspInit+0x88>)
 800252c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800252e:	4a08      	ldr	r2, [pc, #32]	; (8002550 <HAL_I2C_MspInit+0x88>)
 8002530:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002534:	6413      	str	r3, [r2, #64]	; 0x40
 8002536:	4b06      	ldr	r3, [pc, #24]	; (8002550 <HAL_I2C_MspInit+0x88>)
 8002538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800253a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800253e:	60fb      	str	r3, [r7, #12]
 8002540:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002542:	bf00      	nop
 8002544:	3728      	adds	r7, #40	; 0x28
 8002546:	46bd      	mov	sp, r7
 8002548:	bd80      	pop	{r7, pc}
 800254a:	bf00      	nop
 800254c:	40005400 	.word	0x40005400
 8002550:	40023800 	.word	0x40023800
 8002554:	40020400 	.word	0x40020400

08002558 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b08a      	sub	sp, #40	; 0x28
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002560:	f107 0314 	add.w	r3, r7, #20
 8002564:	2200      	movs	r2, #0
 8002566:	601a      	str	r2, [r3, #0]
 8002568:	605a      	str	r2, [r3, #4]
 800256a:	609a      	str	r2, [r3, #8]
 800256c:	60da      	str	r2, [r3, #12]
 800256e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4a19      	ldr	r2, [pc, #100]	; (80025dc <HAL_UART_MspInit+0x84>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d12b      	bne.n	80025d2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800257a:	2300      	movs	r3, #0
 800257c:	613b      	str	r3, [r7, #16]
 800257e:	4b18      	ldr	r3, [pc, #96]	; (80025e0 <HAL_UART_MspInit+0x88>)
 8002580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002582:	4a17      	ldr	r2, [pc, #92]	; (80025e0 <HAL_UART_MspInit+0x88>)
 8002584:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002588:	6413      	str	r3, [r2, #64]	; 0x40
 800258a:	4b15      	ldr	r3, [pc, #84]	; (80025e0 <HAL_UART_MspInit+0x88>)
 800258c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800258e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002592:	613b      	str	r3, [r7, #16]
 8002594:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002596:	2300      	movs	r3, #0
 8002598:	60fb      	str	r3, [r7, #12]
 800259a:	4b11      	ldr	r3, [pc, #68]	; (80025e0 <HAL_UART_MspInit+0x88>)
 800259c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800259e:	4a10      	ldr	r2, [pc, #64]	; (80025e0 <HAL_UART_MspInit+0x88>)
 80025a0:	f043 0301 	orr.w	r3, r3, #1
 80025a4:	6313      	str	r3, [r2, #48]	; 0x30
 80025a6:	4b0e      	ldr	r3, [pc, #56]	; (80025e0 <HAL_UART_MspInit+0x88>)
 80025a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025aa:	f003 0301 	and.w	r3, r3, #1
 80025ae:	60fb      	str	r3, [r7, #12]
 80025b0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80025b2:	230c      	movs	r3, #12
 80025b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025b6:	2302      	movs	r3, #2
 80025b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ba:	2300      	movs	r3, #0
 80025bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025be:	2303      	movs	r3, #3
 80025c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80025c2:	2307      	movs	r3, #7
 80025c4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025c6:	f107 0314 	add.w	r3, r7, #20
 80025ca:	4619      	mov	r1, r3
 80025cc:	4805      	ldr	r0, [pc, #20]	; (80025e4 <HAL_UART_MspInit+0x8c>)
 80025ce:	f000 fe25 	bl	800321c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80025d2:	bf00      	nop
 80025d4:	3728      	adds	r7, #40	; 0x28
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bd80      	pop	{r7, pc}
 80025da:	bf00      	nop
 80025dc:	40004400 	.word	0x40004400
 80025e0:	40023800 	.word	0x40023800
 80025e4:	40020000 	.word	0x40020000

080025e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80025e8:	b480      	push	{r7}
 80025ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80025ec:	e7fe      	b.n	80025ec <NMI_Handler+0x4>

080025ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80025ee:	b480      	push	{r7}
 80025f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80025f2:	e7fe      	b.n	80025f2 <HardFault_Handler+0x4>

080025f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80025f4:	b480      	push	{r7}
 80025f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80025f8:	e7fe      	b.n	80025f8 <MemManage_Handler+0x4>

080025fa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80025fa:	b480      	push	{r7}
 80025fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80025fe:	e7fe      	b.n	80025fe <BusFault_Handler+0x4>

08002600 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002600:	b480      	push	{r7}
 8002602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002604:	e7fe      	b.n	8002604 <UsageFault_Handler+0x4>

08002606 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002606:	b480      	push	{r7}
 8002608:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800260a:	bf00      	nop
 800260c:	46bd      	mov	sp, r7
 800260e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002612:	4770      	bx	lr

08002614 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002614:	b480      	push	{r7}
 8002616:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002618:	bf00      	nop
 800261a:	46bd      	mov	sp, r7
 800261c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002620:	4770      	bx	lr

08002622 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002622:	b480      	push	{r7}
 8002624:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002626:	bf00      	nop
 8002628:	46bd      	mov	sp, r7
 800262a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262e:	4770      	bx	lr

08002630 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002634:	f000 f8d2 	bl	80027dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002638:	bf00      	nop
 800263a:	bd80      	pop	{r7, pc}

0800263c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8002640:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8002644:	f000 ffb8 	bl	80035b8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002648:	bf00      	nop
 800264a:	bd80      	pop	{r7, pc}

0800264c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b086      	sub	sp, #24
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002654:	4a14      	ldr	r2, [pc, #80]	; (80026a8 <_sbrk+0x5c>)
 8002656:	4b15      	ldr	r3, [pc, #84]	; (80026ac <_sbrk+0x60>)
 8002658:	1ad3      	subs	r3, r2, r3
 800265a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800265c:	697b      	ldr	r3, [r7, #20]
 800265e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002660:	4b13      	ldr	r3, [pc, #76]	; (80026b0 <_sbrk+0x64>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	2b00      	cmp	r3, #0
 8002666:	d102      	bne.n	800266e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002668:	4b11      	ldr	r3, [pc, #68]	; (80026b0 <_sbrk+0x64>)
 800266a:	4a12      	ldr	r2, [pc, #72]	; (80026b4 <_sbrk+0x68>)
 800266c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800266e:	4b10      	ldr	r3, [pc, #64]	; (80026b0 <_sbrk+0x64>)
 8002670:	681a      	ldr	r2, [r3, #0]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	4413      	add	r3, r2
 8002676:	693a      	ldr	r2, [r7, #16]
 8002678:	429a      	cmp	r2, r3
 800267a:	d207      	bcs.n	800268c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800267c:	f002 ffa6 	bl	80055cc <__errno>
 8002680:	4602      	mov	r2, r0
 8002682:	230c      	movs	r3, #12
 8002684:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8002686:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800268a:	e009      	b.n	80026a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800268c:	4b08      	ldr	r3, [pc, #32]	; (80026b0 <_sbrk+0x64>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002692:	4b07      	ldr	r3, [pc, #28]	; (80026b0 <_sbrk+0x64>)
 8002694:	681a      	ldr	r2, [r3, #0]
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	4413      	add	r3, r2
 800269a:	4a05      	ldr	r2, [pc, #20]	; (80026b0 <_sbrk+0x64>)
 800269c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800269e:	68fb      	ldr	r3, [r7, #12]
}
 80026a0:	4618      	mov	r0, r3
 80026a2:	3718      	adds	r7, #24
 80026a4:	46bd      	mov	sp, r7
 80026a6:	bd80      	pop	{r7, pc}
 80026a8:	20018000 	.word	0x20018000
 80026ac:	00000400 	.word	0x00000400
 80026b0:	20000608 	.word	0x20000608
 80026b4:	20000708 	.word	0x20000708

080026b8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80026b8:	b480      	push	{r7}
 80026ba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80026bc:	4b08      	ldr	r3, [pc, #32]	; (80026e0 <SystemInit+0x28>)
 80026be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026c2:	4a07      	ldr	r2, [pc, #28]	; (80026e0 <SystemInit+0x28>)
 80026c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80026c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80026cc:	4b04      	ldr	r3, [pc, #16]	; (80026e0 <SystemInit+0x28>)
 80026ce:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80026d2:	609a      	str	r2, [r3, #8]
#endif
}
 80026d4:	bf00      	nop
 80026d6:	46bd      	mov	sp, r7
 80026d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026dc:	4770      	bx	lr
 80026de:	bf00      	nop
 80026e0:	e000ed00 	.word	0xe000ed00

080026e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80026e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800271c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80026e8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80026ea:	e003      	b.n	80026f4 <LoopCopyDataInit>

080026ec <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80026ec:	4b0c      	ldr	r3, [pc, #48]	; (8002720 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80026ee:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80026f0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80026f2:	3104      	adds	r1, #4

080026f4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80026f4:	480b      	ldr	r0, [pc, #44]	; (8002724 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80026f6:	4b0c      	ldr	r3, [pc, #48]	; (8002728 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80026f8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80026fa:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80026fc:	d3f6      	bcc.n	80026ec <CopyDataInit>
  ldr  r2, =_sbss
 80026fe:	4a0b      	ldr	r2, [pc, #44]	; (800272c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002700:	e002      	b.n	8002708 <LoopFillZerobss>

08002702 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002702:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002704:	f842 3b04 	str.w	r3, [r2], #4

08002708 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002708:	4b09      	ldr	r3, [pc, #36]	; (8002730 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800270a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800270c:	d3f9      	bcc.n	8002702 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800270e:	f7ff ffd3 	bl	80026b8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002712:	f002 ff61 	bl	80055d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002716:	f7fe ff39 	bl	800158c <main>
  bx  lr    
 800271a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800271c:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 8002720:	080083d8 	.word	0x080083d8
  ldr  r0, =_sdata
 8002724:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002728:	200001e4 	.word	0x200001e4
  ldr  r2, =_sbss
 800272c:	200001e4 	.word	0x200001e4
  ldr  r3, = _ebss
 8002730:	20000704 	.word	0x20000704

08002734 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002734:	e7fe      	b.n	8002734 <ADC_IRQHandler>
	...

08002738 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800273c:	4b0e      	ldr	r3, [pc, #56]	; (8002778 <HAL_Init+0x40>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4a0d      	ldr	r2, [pc, #52]	; (8002778 <HAL_Init+0x40>)
 8002742:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002746:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002748:	4b0b      	ldr	r3, [pc, #44]	; (8002778 <HAL_Init+0x40>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4a0a      	ldr	r2, [pc, #40]	; (8002778 <HAL_Init+0x40>)
 800274e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002752:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002754:	4b08      	ldr	r3, [pc, #32]	; (8002778 <HAL_Init+0x40>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4a07      	ldr	r2, [pc, #28]	; (8002778 <HAL_Init+0x40>)
 800275a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800275e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002760:	2003      	movs	r0, #3
 8002762:	f000 fd19 	bl	8003198 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002766:	2000      	movs	r0, #0
 8002768:	f000 f808 	bl	800277c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800276c:	f7ff fe24 	bl	80023b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002770:	2300      	movs	r3, #0
}
 8002772:	4618      	mov	r0, r3
 8002774:	bd80      	pop	{r7, pc}
 8002776:	bf00      	nop
 8002778:	40023c00 	.word	0x40023c00

0800277c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b082      	sub	sp, #8
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002784:	4b12      	ldr	r3, [pc, #72]	; (80027d0 <HAL_InitTick+0x54>)
 8002786:	681a      	ldr	r2, [r3, #0]
 8002788:	4b12      	ldr	r3, [pc, #72]	; (80027d4 <HAL_InitTick+0x58>)
 800278a:	781b      	ldrb	r3, [r3, #0]
 800278c:	4619      	mov	r1, r3
 800278e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002792:	fbb3 f3f1 	udiv	r3, r3, r1
 8002796:	fbb2 f3f3 	udiv	r3, r2, r3
 800279a:	4618      	mov	r0, r3
 800279c:	f000 fd31 	bl	8003202 <HAL_SYSTICK_Config>
 80027a0:	4603      	mov	r3, r0
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d001      	beq.n	80027aa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80027a6:	2301      	movs	r3, #1
 80027a8:	e00e      	b.n	80027c8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	2b0f      	cmp	r3, #15
 80027ae:	d80a      	bhi.n	80027c6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80027b0:	2200      	movs	r2, #0
 80027b2:	6879      	ldr	r1, [r7, #4]
 80027b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80027b8:	f000 fcf9 	bl	80031ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80027bc:	4a06      	ldr	r2, [pc, #24]	; (80027d8 <HAL_InitTick+0x5c>)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80027c2:	2300      	movs	r3, #0
 80027c4:	e000      	b.n	80027c8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80027c6:	2301      	movs	r3, #1
}
 80027c8:	4618      	mov	r0, r3
 80027ca:	3708      	adds	r7, #8
 80027cc:	46bd      	mov	sp, r7
 80027ce:	bd80      	pop	{r7, pc}
 80027d0:	20000008 	.word	0x20000008
 80027d4:	20000010 	.word	0x20000010
 80027d8:	2000000c 	.word	0x2000000c

080027dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80027dc:	b480      	push	{r7}
 80027de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80027e0:	4b06      	ldr	r3, [pc, #24]	; (80027fc <HAL_IncTick+0x20>)
 80027e2:	781b      	ldrb	r3, [r3, #0]
 80027e4:	461a      	mov	r2, r3
 80027e6:	4b06      	ldr	r3, [pc, #24]	; (8002800 <HAL_IncTick+0x24>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	4413      	add	r3, r2
 80027ec:	4a04      	ldr	r2, [pc, #16]	; (8002800 <HAL_IncTick+0x24>)
 80027ee:	6013      	str	r3, [r2, #0]
}
 80027f0:	bf00      	nop
 80027f2:	46bd      	mov	sp, r7
 80027f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f8:	4770      	bx	lr
 80027fa:	bf00      	nop
 80027fc:	20000010 	.word	0x20000010
 8002800:	200006fc 	.word	0x200006fc

08002804 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002804:	b480      	push	{r7}
 8002806:	af00      	add	r7, sp, #0
  return uwTick;
 8002808:	4b03      	ldr	r3, [pc, #12]	; (8002818 <HAL_GetTick+0x14>)
 800280a:	681b      	ldr	r3, [r3, #0]
}
 800280c:	4618      	mov	r0, r3
 800280e:	46bd      	mov	sp, r7
 8002810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002814:	4770      	bx	lr
 8002816:	bf00      	nop
 8002818:	200006fc 	.word	0x200006fc

0800281c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b084      	sub	sp, #16
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002824:	f7ff ffee 	bl	8002804 <HAL_GetTick>
 8002828:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002834:	d005      	beq.n	8002842 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002836:	4b09      	ldr	r3, [pc, #36]	; (800285c <HAL_Delay+0x40>)
 8002838:	781b      	ldrb	r3, [r3, #0]
 800283a:	461a      	mov	r2, r3
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	4413      	add	r3, r2
 8002840:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002842:	bf00      	nop
 8002844:	f7ff ffde 	bl	8002804 <HAL_GetTick>
 8002848:	4602      	mov	r2, r0
 800284a:	68bb      	ldr	r3, [r7, #8]
 800284c:	1ad3      	subs	r3, r2, r3
 800284e:	68fa      	ldr	r2, [r7, #12]
 8002850:	429a      	cmp	r2, r3
 8002852:	d8f7      	bhi.n	8002844 <HAL_Delay+0x28>
  {
  }
}
 8002854:	bf00      	nop
 8002856:	3710      	adds	r7, #16
 8002858:	46bd      	mov	sp, r7
 800285a:	bd80      	pop	{r7, pc}
 800285c:	20000010 	.word	0x20000010

08002860 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b084      	sub	sp, #16
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002868:	2300      	movs	r3, #0
 800286a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d101      	bne.n	8002876 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002872:	2301      	movs	r3, #1
 8002874:	e033      	b.n	80028de <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800287a:	2b00      	cmp	r3, #0
 800287c:	d109      	bne.n	8002892 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800287e:	6878      	ldr	r0, [r7, #4]
 8002880:	f7ff fdc2 	bl	8002408 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2200      	movs	r2, #0
 8002888:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2200      	movs	r2, #0
 800288e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002896:	f003 0310 	and.w	r3, r3, #16
 800289a:	2b00      	cmp	r3, #0
 800289c:	d118      	bne.n	80028d0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80028a6:	f023 0302 	bic.w	r3, r3, #2
 80028aa:	f043 0202 	orr.w	r2, r3, #2
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80028b2:	6878      	ldr	r0, [r7, #4]
 80028b4:	f000 faa4 	bl	8002e00 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2200      	movs	r2, #0
 80028bc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028c2:	f023 0303 	bic.w	r3, r3, #3
 80028c6:	f043 0201 	orr.w	r2, r3, #1
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	641a      	str	r2, [r3, #64]	; 0x40
 80028ce:	e001      	b.n	80028d4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80028d0:	2301      	movs	r3, #1
 80028d2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2200      	movs	r2, #0
 80028d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80028dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80028de:	4618      	mov	r0, r3
 80028e0:	3710      	adds	r7, #16
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bd80      	pop	{r7, pc}
	...

080028e8 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80028e8:	b480      	push	{r7}
 80028ea:	b085      	sub	sp, #20
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80028f0:	2300      	movs	r3, #0
 80028f2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028fa:	2b01      	cmp	r3, #1
 80028fc:	d101      	bne.n	8002902 <HAL_ADC_Start+0x1a>
 80028fe:	2302      	movs	r3, #2
 8002900:	e08a      	b.n	8002a18 <HAL_ADC_Start+0x130>
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2201      	movs	r2, #1
 8002906:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	689b      	ldr	r3, [r3, #8]
 8002910:	f003 0301 	and.w	r3, r3, #1
 8002914:	2b01      	cmp	r3, #1
 8002916:	d018      	beq.n	800294a <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	689a      	ldr	r2, [r3, #8]
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f042 0201 	orr.w	r2, r2, #1
 8002926:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002928:	4b3e      	ldr	r3, [pc, #248]	; (8002a24 <HAL_ADC_Start+0x13c>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4a3e      	ldr	r2, [pc, #248]	; (8002a28 <HAL_ADC_Start+0x140>)
 800292e:	fba2 2303 	umull	r2, r3, r2, r3
 8002932:	0c9a      	lsrs	r2, r3, #18
 8002934:	4613      	mov	r3, r2
 8002936:	005b      	lsls	r3, r3, #1
 8002938:	4413      	add	r3, r2
 800293a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800293c:	e002      	b.n	8002944 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800293e:	68bb      	ldr	r3, [r7, #8]
 8002940:	3b01      	subs	r3, #1
 8002942:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002944:	68bb      	ldr	r3, [r7, #8]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d1f9      	bne.n	800293e <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	689b      	ldr	r3, [r3, #8]
 8002950:	f003 0301 	and.w	r3, r3, #1
 8002954:	2b01      	cmp	r3, #1
 8002956:	d15e      	bne.n	8002a16 <HAL_ADC_Start+0x12e>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800295c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002960:	f023 0301 	bic.w	r3, r3, #1
 8002964:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002976:	2b00      	cmp	r3, #0
 8002978:	d007      	beq.n	800298a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800297e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002982:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800298e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002992:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002996:	d106      	bne.n	80029a6 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800299c:	f023 0206 	bic.w	r2, r3, #6
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	645a      	str	r2, [r3, #68]	; 0x44
 80029a4:	e002      	b.n	80029ac <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2200      	movs	r2, #0
 80029aa:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2200      	movs	r2, #0
 80029b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80029b4:	4b1d      	ldr	r3, [pc, #116]	; (8002a2c <HAL_ADC_Start+0x144>)
 80029b6:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80029c0:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	f003 031f 	and.w	r3, r3, #31
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d10f      	bne.n	80029ee <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	689b      	ldr	r3, [r3, #8]
 80029d4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d11c      	bne.n	8002a16 <HAL_ADC_Start+0x12e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	689a      	ldr	r2, [r3, #8]
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80029ea:	609a      	str	r2, [r3, #8]
 80029ec:	e013      	b.n	8002a16 <HAL_ADC_Start+0x12e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	4a0f      	ldr	r2, [pc, #60]	; (8002a30 <HAL_ADC_Start+0x148>)
 80029f4:	4293      	cmp	r3, r2
 80029f6:	d10e      	bne.n	8002a16 <HAL_ADC_Start+0x12e>
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	689b      	ldr	r3, [r3, #8]
 80029fe:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d107      	bne.n	8002a16 <HAL_ADC_Start+0x12e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	689a      	ldr	r2, [r3, #8]
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002a14:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8002a16:	2300      	movs	r3, #0
}
 8002a18:	4618      	mov	r0, r3
 8002a1a:	3714      	adds	r7, #20
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a22:	4770      	bx	lr
 8002a24:	20000008 	.word	0x20000008
 8002a28:	431bde83 	.word	0x431bde83
 8002a2c:	40012300 	.word	0x40012300
 8002a30:	40012000 	.word	0x40012000

08002a34 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8002a34:	b480      	push	{r7}
 8002a36:	b083      	sub	sp, #12
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a42:	2b01      	cmp	r3, #1
 8002a44:	d101      	bne.n	8002a4a <HAL_ADC_Stop+0x16>
 8002a46:	2302      	movs	r3, #2
 8002a48:	e021      	b.n	8002a8e <HAL_ADC_Stop+0x5a>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2201      	movs	r2, #1
 8002a4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	689a      	ldr	r2, [r3, #8]
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f022 0201 	bic.w	r2, r2, #1
 8002a60:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	689b      	ldr	r3, [r3, #8]
 8002a68:	f003 0301 	and.w	r3, r3, #1
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d109      	bne.n	8002a84 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a74:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002a78:	f023 0301 	bic.w	r3, r3, #1
 8002a7c:	f043 0201 	orr.w	r2, r3, #1
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2200      	movs	r2, #0
 8002a88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002a8c:	2300      	movs	r3, #0
}
 8002a8e:	4618      	mov	r0, r3
 8002a90:	370c      	adds	r7, #12
 8002a92:	46bd      	mov	sp, r7
 8002a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a98:	4770      	bx	lr

08002a9a <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002a9a:	b580      	push	{r7, lr}
 8002a9c:	b084      	sub	sp, #16
 8002a9e:	af00      	add	r7, sp, #0
 8002aa0:	6078      	str	r0, [r7, #4]
 8002aa2:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	689b      	ldr	r3, [r3, #8]
 8002aae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ab2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ab6:	d113      	bne.n	8002ae0 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	689b      	ldr	r3, [r3, #8]
 8002abe:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002ac2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ac6:	d10b      	bne.n	8002ae0 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002acc:	f043 0220 	orr.w	r2, r3, #32
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8002adc:	2301      	movs	r3, #1
 8002ade:	e05c      	b.n	8002b9a <HAL_ADC_PollForConversion+0x100>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8002ae0:	f7ff fe90 	bl	8002804 <HAL_GetTick>
 8002ae4:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002ae6:	e01a      	b.n	8002b1e <HAL_ADC_PollForConversion+0x84>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002aee:	d016      	beq.n	8002b1e <HAL_ADC_PollForConversion+0x84>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d007      	beq.n	8002b06 <HAL_ADC_PollForConversion+0x6c>
 8002af6:	f7ff fe85 	bl	8002804 <HAL_GetTick>
 8002afa:	4602      	mov	r2, r0
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	1ad3      	subs	r3, r2, r3
 8002b00:	683a      	ldr	r2, [r7, #0]
 8002b02:	429a      	cmp	r2, r3
 8002b04:	d20b      	bcs.n	8002b1e <HAL_ADC_PollForConversion+0x84>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b0a:	f043 0204 	orr.w	r2, r3, #4
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2200      	movs	r2, #0
 8002b16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 8002b1a:	2303      	movs	r3, #3
 8002b1c:	e03d      	b.n	8002b9a <HAL_ADC_PollForConversion+0x100>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f003 0302 	and.w	r3, r3, #2
 8002b28:	2b02      	cmp	r3, #2
 8002b2a:	d1dd      	bne.n	8002ae8 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f06f 0212 	mvn.w	r2, #18
 8002b34:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b3a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	689b      	ldr	r3, [r3, #8]
 8002b48:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d123      	bne.n	8002b98 <HAL_ADC_PollForConversion+0xfe>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d11f      	bne.n	8002b98 <HAL_ADC_PollForConversion+0xfe>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b5e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d006      	beq.n	8002b74 <HAL_ADC_PollForConversion+0xda>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	689b      	ldr	r3, [r3, #8]
 8002b6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d111      	bne.n	8002b98 <HAL_ADC_PollForConversion+0xfe>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b78:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b84:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d105      	bne.n	8002b98 <HAL_ADC_PollForConversion+0xfe>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b90:	f043 0201 	orr.w	r2, r3, #1
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002b98:	2300      	movs	r3, #0
}
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	3710      	adds	r7, #16
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	bd80      	pop	{r7, pc}

08002ba2 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002ba2:	b480      	push	{r7}
 8002ba4:	b083      	sub	sp, #12
 8002ba6:	af00      	add	r7, sp, #0
 8002ba8:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	370c      	adds	r7, #12
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bba:	4770      	bx	lr

08002bbc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	b085      	sub	sp, #20
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
 8002bc4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002bd0:	2b01      	cmp	r3, #1
 8002bd2:	d101      	bne.n	8002bd8 <HAL_ADC_ConfigChannel+0x1c>
 8002bd4:	2302      	movs	r3, #2
 8002bd6:	e105      	b.n	8002de4 <HAL_ADC_ConfigChannel+0x228>
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2201      	movs	r2, #1
 8002bdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	2b09      	cmp	r3, #9
 8002be6:	d925      	bls.n	8002c34 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	68d9      	ldr	r1, [r3, #12]
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	b29b      	uxth	r3, r3
 8002bf4:	461a      	mov	r2, r3
 8002bf6:	4613      	mov	r3, r2
 8002bf8:	005b      	lsls	r3, r3, #1
 8002bfa:	4413      	add	r3, r2
 8002bfc:	3b1e      	subs	r3, #30
 8002bfe:	2207      	movs	r2, #7
 8002c00:	fa02 f303 	lsl.w	r3, r2, r3
 8002c04:	43da      	mvns	r2, r3
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	400a      	ands	r2, r1
 8002c0c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	68d9      	ldr	r1, [r3, #12]
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	689a      	ldr	r2, [r3, #8]
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	b29b      	uxth	r3, r3
 8002c1e:	4618      	mov	r0, r3
 8002c20:	4603      	mov	r3, r0
 8002c22:	005b      	lsls	r3, r3, #1
 8002c24:	4403      	add	r3, r0
 8002c26:	3b1e      	subs	r3, #30
 8002c28:	409a      	lsls	r2, r3
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	430a      	orrs	r2, r1
 8002c30:	60da      	str	r2, [r3, #12]
 8002c32:	e022      	b.n	8002c7a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	6919      	ldr	r1, [r3, #16]
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	b29b      	uxth	r3, r3
 8002c40:	461a      	mov	r2, r3
 8002c42:	4613      	mov	r3, r2
 8002c44:	005b      	lsls	r3, r3, #1
 8002c46:	4413      	add	r3, r2
 8002c48:	2207      	movs	r2, #7
 8002c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c4e:	43da      	mvns	r2, r3
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	400a      	ands	r2, r1
 8002c56:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	6919      	ldr	r1, [r3, #16]
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	689a      	ldr	r2, [r3, #8]
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	b29b      	uxth	r3, r3
 8002c68:	4618      	mov	r0, r3
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	005b      	lsls	r3, r3, #1
 8002c6e:	4403      	add	r3, r0
 8002c70:	409a      	lsls	r2, r3
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	430a      	orrs	r2, r1
 8002c78:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	2b06      	cmp	r3, #6
 8002c80:	d824      	bhi.n	8002ccc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	685a      	ldr	r2, [r3, #4]
 8002c8c:	4613      	mov	r3, r2
 8002c8e:	009b      	lsls	r3, r3, #2
 8002c90:	4413      	add	r3, r2
 8002c92:	3b05      	subs	r3, #5
 8002c94:	221f      	movs	r2, #31
 8002c96:	fa02 f303 	lsl.w	r3, r2, r3
 8002c9a:	43da      	mvns	r2, r3
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	400a      	ands	r2, r1
 8002ca2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	b29b      	uxth	r3, r3
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	685a      	ldr	r2, [r3, #4]
 8002cb6:	4613      	mov	r3, r2
 8002cb8:	009b      	lsls	r3, r3, #2
 8002cba:	4413      	add	r3, r2
 8002cbc:	3b05      	subs	r3, #5
 8002cbe:	fa00 f203 	lsl.w	r2, r0, r3
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	430a      	orrs	r2, r1
 8002cc8:	635a      	str	r2, [r3, #52]	; 0x34
 8002cca:	e04c      	b.n	8002d66 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	2b0c      	cmp	r3, #12
 8002cd2:	d824      	bhi.n	8002d1e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	685a      	ldr	r2, [r3, #4]
 8002cde:	4613      	mov	r3, r2
 8002ce0:	009b      	lsls	r3, r3, #2
 8002ce2:	4413      	add	r3, r2
 8002ce4:	3b23      	subs	r3, #35	; 0x23
 8002ce6:	221f      	movs	r2, #31
 8002ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cec:	43da      	mvns	r2, r3
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	400a      	ands	r2, r1
 8002cf4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	b29b      	uxth	r3, r3
 8002d02:	4618      	mov	r0, r3
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	685a      	ldr	r2, [r3, #4]
 8002d08:	4613      	mov	r3, r2
 8002d0a:	009b      	lsls	r3, r3, #2
 8002d0c:	4413      	add	r3, r2
 8002d0e:	3b23      	subs	r3, #35	; 0x23
 8002d10:	fa00 f203 	lsl.w	r2, r0, r3
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	430a      	orrs	r2, r1
 8002d1a:	631a      	str	r2, [r3, #48]	; 0x30
 8002d1c:	e023      	b.n	8002d66 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	685a      	ldr	r2, [r3, #4]
 8002d28:	4613      	mov	r3, r2
 8002d2a:	009b      	lsls	r3, r3, #2
 8002d2c:	4413      	add	r3, r2
 8002d2e:	3b41      	subs	r3, #65	; 0x41
 8002d30:	221f      	movs	r2, #31
 8002d32:	fa02 f303 	lsl.w	r3, r2, r3
 8002d36:	43da      	mvns	r2, r3
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	400a      	ands	r2, r1
 8002d3e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	b29b      	uxth	r3, r3
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	685a      	ldr	r2, [r3, #4]
 8002d52:	4613      	mov	r3, r2
 8002d54:	009b      	lsls	r3, r3, #2
 8002d56:	4413      	add	r3, r2
 8002d58:	3b41      	subs	r3, #65	; 0x41
 8002d5a:	fa00 f203 	lsl.w	r2, r0, r3
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	430a      	orrs	r2, r1
 8002d64:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002d66:	4b22      	ldr	r3, [pc, #136]	; (8002df0 <HAL_ADC_ConfigChannel+0x234>)
 8002d68:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4a21      	ldr	r2, [pc, #132]	; (8002df4 <HAL_ADC_ConfigChannel+0x238>)
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d109      	bne.n	8002d88 <HAL_ADC_ConfigChannel+0x1cc>
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	2b12      	cmp	r3, #18
 8002d7a:	d105      	bne.n	8002d88 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4a19      	ldr	r2, [pc, #100]	; (8002df4 <HAL_ADC_ConfigChannel+0x238>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d123      	bne.n	8002dda <HAL_ADC_ConfigChannel+0x21e>
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	2b10      	cmp	r3, #16
 8002d98:	d003      	beq.n	8002da2 <HAL_ADC_ConfigChannel+0x1e6>
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	2b11      	cmp	r3, #17
 8002da0:	d11b      	bne.n	8002dda <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	685b      	ldr	r3, [r3, #4]
 8002da6:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	2b10      	cmp	r3, #16
 8002db4:	d111      	bne.n	8002dda <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002db6:	4b10      	ldr	r3, [pc, #64]	; (8002df8 <HAL_ADC_ConfigChannel+0x23c>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4a10      	ldr	r2, [pc, #64]	; (8002dfc <HAL_ADC_ConfigChannel+0x240>)
 8002dbc:	fba2 2303 	umull	r2, r3, r2, r3
 8002dc0:	0c9a      	lsrs	r2, r3, #18
 8002dc2:	4613      	mov	r3, r2
 8002dc4:	009b      	lsls	r3, r3, #2
 8002dc6:	4413      	add	r3, r2
 8002dc8:	005b      	lsls	r3, r3, #1
 8002dca:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002dcc:	e002      	b.n	8002dd4 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002dce:	68bb      	ldr	r3, [r7, #8]
 8002dd0:	3b01      	subs	r3, #1
 8002dd2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002dd4:	68bb      	ldr	r3, [r7, #8]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d1f9      	bne.n	8002dce <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2200      	movs	r2, #0
 8002dde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002de2:	2300      	movs	r3, #0
}
 8002de4:	4618      	mov	r0, r3
 8002de6:	3714      	adds	r7, #20
 8002de8:	46bd      	mov	sp, r7
 8002dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dee:	4770      	bx	lr
 8002df0:	40012300 	.word	0x40012300
 8002df4:	40012000 	.word	0x40012000
 8002df8:	20000008 	.word	0x20000008
 8002dfc:	431bde83 	.word	0x431bde83

08002e00 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002e00:	b480      	push	{r7}
 8002e02:	b085      	sub	sp, #20
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002e08:	4b79      	ldr	r3, [pc, #484]	; (8002ff0 <ADC_Init+0x1f0>)
 8002e0a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	685a      	ldr	r2, [r3, #4]
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	431a      	orrs	r2, r3
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	685a      	ldr	r2, [r3, #4]
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002e34:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	6859      	ldr	r1, [r3, #4]
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	691b      	ldr	r3, [r3, #16]
 8002e40:	021a      	lsls	r2, r3, #8
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	430a      	orrs	r2, r1
 8002e48:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	685a      	ldr	r2, [r3, #4]
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002e58:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	6859      	ldr	r1, [r3, #4]
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	689a      	ldr	r2, [r3, #8]
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	430a      	orrs	r2, r1
 8002e6a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	689a      	ldr	r2, [r3, #8]
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e7a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	6899      	ldr	r1, [r3, #8]
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	68da      	ldr	r2, [r3, #12]
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	430a      	orrs	r2, r1
 8002e8c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e92:	4a58      	ldr	r2, [pc, #352]	; (8002ff4 <ADC_Init+0x1f4>)
 8002e94:	4293      	cmp	r3, r2
 8002e96:	d022      	beq.n	8002ede <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	689a      	ldr	r2, [r3, #8]
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002ea6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	6899      	ldr	r1, [r3, #8]
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	430a      	orrs	r2, r1
 8002eb8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	689a      	ldr	r2, [r3, #8]
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002ec8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	6899      	ldr	r1, [r3, #8]
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	430a      	orrs	r2, r1
 8002eda:	609a      	str	r2, [r3, #8]
 8002edc:	e00f      	b.n	8002efe <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	689a      	ldr	r2, [r3, #8]
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002eec:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	689a      	ldr	r2, [r3, #8]
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002efc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	689a      	ldr	r2, [r3, #8]
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f022 0202 	bic.w	r2, r2, #2
 8002f0c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	6899      	ldr	r1, [r3, #8]
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	7e1b      	ldrb	r3, [r3, #24]
 8002f18:	005a      	lsls	r2, r3, #1
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	430a      	orrs	r2, r1
 8002f20:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d01b      	beq.n	8002f64 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	685a      	ldr	r2, [r3, #4]
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002f3a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	685a      	ldr	r2, [r3, #4]
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002f4a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	6859      	ldr	r1, [r3, #4]
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f56:	3b01      	subs	r3, #1
 8002f58:	035a      	lsls	r2, r3, #13
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	430a      	orrs	r2, r1
 8002f60:	605a      	str	r2, [r3, #4]
 8002f62:	e007      	b.n	8002f74 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	685a      	ldr	r2, [r3, #4]
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f72:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002f82:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	69db      	ldr	r3, [r3, #28]
 8002f8e:	3b01      	subs	r3, #1
 8002f90:	051a      	lsls	r2, r3, #20
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	430a      	orrs	r2, r1
 8002f98:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	689a      	ldr	r2, [r3, #8]
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002fa8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	6899      	ldr	r1, [r3, #8]
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002fb6:	025a      	lsls	r2, r3, #9
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	430a      	orrs	r2, r1
 8002fbe:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	689a      	ldr	r2, [r3, #8]
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002fce:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	6899      	ldr	r1, [r3, #8]
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	695b      	ldr	r3, [r3, #20]
 8002fda:	029a      	lsls	r2, r3, #10
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	430a      	orrs	r2, r1
 8002fe2:	609a      	str	r2, [r3, #8]
}
 8002fe4:	bf00      	nop
 8002fe6:	3714      	adds	r7, #20
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fee:	4770      	bx	lr
 8002ff0:	40012300 	.word	0x40012300
 8002ff4:	0f000001 	.word	0x0f000001

08002ff8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	b085      	sub	sp, #20
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	f003 0307 	and.w	r3, r3, #7
 8003006:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003008:	4b0c      	ldr	r3, [pc, #48]	; (800303c <__NVIC_SetPriorityGrouping+0x44>)
 800300a:	68db      	ldr	r3, [r3, #12]
 800300c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800300e:	68ba      	ldr	r2, [r7, #8]
 8003010:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003014:	4013      	ands	r3, r2
 8003016:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800301c:	68bb      	ldr	r3, [r7, #8]
 800301e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003020:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003024:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003028:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800302a:	4a04      	ldr	r2, [pc, #16]	; (800303c <__NVIC_SetPriorityGrouping+0x44>)
 800302c:	68bb      	ldr	r3, [r7, #8]
 800302e:	60d3      	str	r3, [r2, #12]
}
 8003030:	bf00      	nop
 8003032:	3714      	adds	r7, #20
 8003034:	46bd      	mov	sp, r7
 8003036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303a:	4770      	bx	lr
 800303c:	e000ed00 	.word	0xe000ed00

08003040 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003040:	b480      	push	{r7}
 8003042:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003044:	4b04      	ldr	r3, [pc, #16]	; (8003058 <__NVIC_GetPriorityGrouping+0x18>)
 8003046:	68db      	ldr	r3, [r3, #12]
 8003048:	0a1b      	lsrs	r3, r3, #8
 800304a:	f003 0307 	and.w	r3, r3, #7
}
 800304e:	4618      	mov	r0, r3
 8003050:	46bd      	mov	sp, r7
 8003052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003056:	4770      	bx	lr
 8003058:	e000ed00 	.word	0xe000ed00

0800305c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800305c:	b480      	push	{r7}
 800305e:	b083      	sub	sp, #12
 8003060:	af00      	add	r7, sp, #0
 8003062:	4603      	mov	r3, r0
 8003064:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003066:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800306a:	2b00      	cmp	r3, #0
 800306c:	db0b      	blt.n	8003086 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800306e:	79fb      	ldrb	r3, [r7, #7]
 8003070:	f003 021f 	and.w	r2, r3, #31
 8003074:	4907      	ldr	r1, [pc, #28]	; (8003094 <__NVIC_EnableIRQ+0x38>)
 8003076:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800307a:	095b      	lsrs	r3, r3, #5
 800307c:	2001      	movs	r0, #1
 800307e:	fa00 f202 	lsl.w	r2, r0, r2
 8003082:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003086:	bf00      	nop
 8003088:	370c      	adds	r7, #12
 800308a:	46bd      	mov	sp, r7
 800308c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003090:	4770      	bx	lr
 8003092:	bf00      	nop
 8003094:	e000e100 	.word	0xe000e100

08003098 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003098:	b480      	push	{r7}
 800309a:	b083      	sub	sp, #12
 800309c:	af00      	add	r7, sp, #0
 800309e:	4603      	mov	r3, r0
 80030a0:	6039      	str	r1, [r7, #0]
 80030a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	db0a      	blt.n	80030c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	b2da      	uxtb	r2, r3
 80030b0:	490c      	ldr	r1, [pc, #48]	; (80030e4 <__NVIC_SetPriority+0x4c>)
 80030b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030b6:	0112      	lsls	r2, r2, #4
 80030b8:	b2d2      	uxtb	r2, r2
 80030ba:	440b      	add	r3, r1
 80030bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80030c0:	e00a      	b.n	80030d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	b2da      	uxtb	r2, r3
 80030c6:	4908      	ldr	r1, [pc, #32]	; (80030e8 <__NVIC_SetPriority+0x50>)
 80030c8:	79fb      	ldrb	r3, [r7, #7]
 80030ca:	f003 030f 	and.w	r3, r3, #15
 80030ce:	3b04      	subs	r3, #4
 80030d0:	0112      	lsls	r2, r2, #4
 80030d2:	b2d2      	uxtb	r2, r2
 80030d4:	440b      	add	r3, r1
 80030d6:	761a      	strb	r2, [r3, #24]
}
 80030d8:	bf00      	nop
 80030da:	370c      	adds	r7, #12
 80030dc:	46bd      	mov	sp, r7
 80030de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e2:	4770      	bx	lr
 80030e4:	e000e100 	.word	0xe000e100
 80030e8:	e000ed00 	.word	0xe000ed00

080030ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80030ec:	b480      	push	{r7}
 80030ee:	b089      	sub	sp, #36	; 0x24
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	60f8      	str	r0, [r7, #12]
 80030f4:	60b9      	str	r1, [r7, #8]
 80030f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	f003 0307 	and.w	r3, r3, #7
 80030fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003100:	69fb      	ldr	r3, [r7, #28]
 8003102:	f1c3 0307 	rsb	r3, r3, #7
 8003106:	2b04      	cmp	r3, #4
 8003108:	bf28      	it	cs
 800310a:	2304      	movcs	r3, #4
 800310c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800310e:	69fb      	ldr	r3, [r7, #28]
 8003110:	3304      	adds	r3, #4
 8003112:	2b06      	cmp	r3, #6
 8003114:	d902      	bls.n	800311c <NVIC_EncodePriority+0x30>
 8003116:	69fb      	ldr	r3, [r7, #28]
 8003118:	3b03      	subs	r3, #3
 800311a:	e000      	b.n	800311e <NVIC_EncodePriority+0x32>
 800311c:	2300      	movs	r3, #0
 800311e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003120:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003124:	69bb      	ldr	r3, [r7, #24]
 8003126:	fa02 f303 	lsl.w	r3, r2, r3
 800312a:	43da      	mvns	r2, r3
 800312c:	68bb      	ldr	r3, [r7, #8]
 800312e:	401a      	ands	r2, r3
 8003130:	697b      	ldr	r3, [r7, #20]
 8003132:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003134:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003138:	697b      	ldr	r3, [r7, #20]
 800313a:	fa01 f303 	lsl.w	r3, r1, r3
 800313e:	43d9      	mvns	r1, r3
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003144:	4313      	orrs	r3, r2
         );
}
 8003146:	4618      	mov	r0, r3
 8003148:	3724      	adds	r7, #36	; 0x24
 800314a:	46bd      	mov	sp, r7
 800314c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003150:	4770      	bx	lr
	...

08003154 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b082      	sub	sp, #8
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	3b01      	subs	r3, #1
 8003160:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003164:	d301      	bcc.n	800316a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003166:	2301      	movs	r3, #1
 8003168:	e00f      	b.n	800318a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800316a:	4a0a      	ldr	r2, [pc, #40]	; (8003194 <SysTick_Config+0x40>)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	3b01      	subs	r3, #1
 8003170:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003172:	210f      	movs	r1, #15
 8003174:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003178:	f7ff ff8e 	bl	8003098 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800317c:	4b05      	ldr	r3, [pc, #20]	; (8003194 <SysTick_Config+0x40>)
 800317e:	2200      	movs	r2, #0
 8003180:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003182:	4b04      	ldr	r3, [pc, #16]	; (8003194 <SysTick_Config+0x40>)
 8003184:	2207      	movs	r2, #7
 8003186:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003188:	2300      	movs	r3, #0
}
 800318a:	4618      	mov	r0, r3
 800318c:	3708      	adds	r7, #8
 800318e:	46bd      	mov	sp, r7
 8003190:	bd80      	pop	{r7, pc}
 8003192:	bf00      	nop
 8003194:	e000e010 	.word	0xe000e010

08003198 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b082      	sub	sp, #8
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80031a0:	6878      	ldr	r0, [r7, #4]
 80031a2:	f7ff ff29 	bl	8002ff8 <__NVIC_SetPriorityGrouping>
}
 80031a6:	bf00      	nop
 80031a8:	3708      	adds	r7, #8
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bd80      	pop	{r7, pc}

080031ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80031ae:	b580      	push	{r7, lr}
 80031b0:	b086      	sub	sp, #24
 80031b2:	af00      	add	r7, sp, #0
 80031b4:	4603      	mov	r3, r0
 80031b6:	60b9      	str	r1, [r7, #8]
 80031b8:	607a      	str	r2, [r7, #4]
 80031ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80031bc:	2300      	movs	r3, #0
 80031be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80031c0:	f7ff ff3e 	bl	8003040 <__NVIC_GetPriorityGrouping>
 80031c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80031c6:	687a      	ldr	r2, [r7, #4]
 80031c8:	68b9      	ldr	r1, [r7, #8]
 80031ca:	6978      	ldr	r0, [r7, #20]
 80031cc:	f7ff ff8e 	bl	80030ec <NVIC_EncodePriority>
 80031d0:	4602      	mov	r2, r0
 80031d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80031d6:	4611      	mov	r1, r2
 80031d8:	4618      	mov	r0, r3
 80031da:	f7ff ff5d 	bl	8003098 <__NVIC_SetPriority>
}
 80031de:	bf00      	nop
 80031e0:	3718      	adds	r7, #24
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bd80      	pop	{r7, pc}

080031e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031e6:	b580      	push	{r7, lr}
 80031e8:	b082      	sub	sp, #8
 80031ea:	af00      	add	r7, sp, #0
 80031ec:	4603      	mov	r3, r0
 80031ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80031f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031f4:	4618      	mov	r0, r3
 80031f6:	f7ff ff31 	bl	800305c <__NVIC_EnableIRQ>
}
 80031fa:	bf00      	nop
 80031fc:	3708      	adds	r7, #8
 80031fe:	46bd      	mov	sp, r7
 8003200:	bd80      	pop	{r7, pc}

08003202 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003202:	b580      	push	{r7, lr}
 8003204:	b082      	sub	sp, #8
 8003206:	af00      	add	r7, sp, #0
 8003208:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800320a:	6878      	ldr	r0, [r7, #4]
 800320c:	f7ff ffa2 	bl	8003154 <SysTick_Config>
 8003210:	4603      	mov	r3, r0
}
 8003212:	4618      	mov	r0, r3
 8003214:	3708      	adds	r7, #8
 8003216:	46bd      	mov	sp, r7
 8003218:	bd80      	pop	{r7, pc}
	...

0800321c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800321c:	b480      	push	{r7}
 800321e:	b089      	sub	sp, #36	; 0x24
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
 8003224:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003226:	2300      	movs	r3, #0
 8003228:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800322a:	2300      	movs	r3, #0
 800322c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800322e:	2300      	movs	r3, #0
 8003230:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003232:	2300      	movs	r3, #0
 8003234:	61fb      	str	r3, [r7, #28]
 8003236:	e159      	b.n	80034ec <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003238:	2201      	movs	r2, #1
 800323a:	69fb      	ldr	r3, [r7, #28]
 800323c:	fa02 f303 	lsl.w	r3, r2, r3
 8003240:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	697a      	ldr	r2, [r7, #20]
 8003248:	4013      	ands	r3, r2
 800324a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800324c:	693a      	ldr	r2, [r7, #16]
 800324e:	697b      	ldr	r3, [r7, #20]
 8003250:	429a      	cmp	r2, r3
 8003252:	f040 8148 	bne.w	80034e6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	685b      	ldr	r3, [r3, #4]
 800325a:	2b01      	cmp	r3, #1
 800325c:	d00b      	beq.n	8003276 <HAL_GPIO_Init+0x5a>
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	2b02      	cmp	r3, #2
 8003264:	d007      	beq.n	8003276 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800326a:	2b11      	cmp	r3, #17
 800326c:	d003      	beq.n	8003276 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	2b12      	cmp	r3, #18
 8003274:	d130      	bne.n	80032d8 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	689b      	ldr	r3, [r3, #8]
 800327a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800327c:	69fb      	ldr	r3, [r7, #28]
 800327e:	005b      	lsls	r3, r3, #1
 8003280:	2203      	movs	r2, #3
 8003282:	fa02 f303 	lsl.w	r3, r2, r3
 8003286:	43db      	mvns	r3, r3
 8003288:	69ba      	ldr	r2, [r7, #24]
 800328a:	4013      	ands	r3, r2
 800328c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	68da      	ldr	r2, [r3, #12]
 8003292:	69fb      	ldr	r3, [r7, #28]
 8003294:	005b      	lsls	r3, r3, #1
 8003296:	fa02 f303 	lsl.w	r3, r2, r3
 800329a:	69ba      	ldr	r2, [r7, #24]
 800329c:	4313      	orrs	r3, r2
 800329e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	69ba      	ldr	r2, [r7, #24]
 80032a4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80032ac:	2201      	movs	r2, #1
 80032ae:	69fb      	ldr	r3, [r7, #28]
 80032b0:	fa02 f303 	lsl.w	r3, r2, r3
 80032b4:	43db      	mvns	r3, r3
 80032b6:	69ba      	ldr	r2, [r7, #24]
 80032b8:	4013      	ands	r3, r2
 80032ba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	091b      	lsrs	r3, r3, #4
 80032c2:	f003 0201 	and.w	r2, r3, #1
 80032c6:	69fb      	ldr	r3, [r7, #28]
 80032c8:	fa02 f303 	lsl.w	r3, r2, r3
 80032cc:	69ba      	ldr	r2, [r7, #24]
 80032ce:	4313      	orrs	r3, r2
 80032d0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	69ba      	ldr	r2, [r7, #24]
 80032d6:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	68db      	ldr	r3, [r3, #12]
 80032dc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80032de:	69fb      	ldr	r3, [r7, #28]
 80032e0:	005b      	lsls	r3, r3, #1
 80032e2:	2203      	movs	r2, #3
 80032e4:	fa02 f303 	lsl.w	r3, r2, r3
 80032e8:	43db      	mvns	r3, r3
 80032ea:	69ba      	ldr	r2, [r7, #24]
 80032ec:	4013      	ands	r3, r2
 80032ee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	689a      	ldr	r2, [r3, #8]
 80032f4:	69fb      	ldr	r3, [r7, #28]
 80032f6:	005b      	lsls	r3, r3, #1
 80032f8:	fa02 f303 	lsl.w	r3, r2, r3
 80032fc:	69ba      	ldr	r2, [r7, #24]
 80032fe:	4313      	orrs	r3, r2
 8003300:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	69ba      	ldr	r2, [r7, #24]
 8003306:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	2b02      	cmp	r3, #2
 800330e:	d003      	beq.n	8003318 <HAL_GPIO_Init+0xfc>
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	2b12      	cmp	r3, #18
 8003316:	d123      	bne.n	8003360 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003318:	69fb      	ldr	r3, [r7, #28]
 800331a:	08da      	lsrs	r2, r3, #3
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	3208      	adds	r2, #8
 8003320:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003324:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003326:	69fb      	ldr	r3, [r7, #28]
 8003328:	f003 0307 	and.w	r3, r3, #7
 800332c:	009b      	lsls	r3, r3, #2
 800332e:	220f      	movs	r2, #15
 8003330:	fa02 f303 	lsl.w	r3, r2, r3
 8003334:	43db      	mvns	r3, r3
 8003336:	69ba      	ldr	r2, [r7, #24]
 8003338:	4013      	ands	r3, r2
 800333a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	691a      	ldr	r2, [r3, #16]
 8003340:	69fb      	ldr	r3, [r7, #28]
 8003342:	f003 0307 	and.w	r3, r3, #7
 8003346:	009b      	lsls	r3, r3, #2
 8003348:	fa02 f303 	lsl.w	r3, r2, r3
 800334c:	69ba      	ldr	r2, [r7, #24]
 800334e:	4313      	orrs	r3, r2
 8003350:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003352:	69fb      	ldr	r3, [r7, #28]
 8003354:	08da      	lsrs	r2, r3, #3
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	3208      	adds	r2, #8
 800335a:	69b9      	ldr	r1, [r7, #24]
 800335c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003366:	69fb      	ldr	r3, [r7, #28]
 8003368:	005b      	lsls	r3, r3, #1
 800336a:	2203      	movs	r2, #3
 800336c:	fa02 f303 	lsl.w	r3, r2, r3
 8003370:	43db      	mvns	r3, r3
 8003372:	69ba      	ldr	r2, [r7, #24]
 8003374:	4013      	ands	r3, r2
 8003376:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	f003 0203 	and.w	r2, r3, #3
 8003380:	69fb      	ldr	r3, [r7, #28]
 8003382:	005b      	lsls	r3, r3, #1
 8003384:	fa02 f303 	lsl.w	r3, r2, r3
 8003388:	69ba      	ldr	r2, [r7, #24]
 800338a:	4313      	orrs	r3, r2
 800338c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	69ba      	ldr	r2, [r7, #24]
 8003392:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800339c:	2b00      	cmp	r3, #0
 800339e:	f000 80a2 	beq.w	80034e6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80033a2:	2300      	movs	r3, #0
 80033a4:	60fb      	str	r3, [r7, #12]
 80033a6:	4b56      	ldr	r3, [pc, #344]	; (8003500 <HAL_GPIO_Init+0x2e4>)
 80033a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033aa:	4a55      	ldr	r2, [pc, #340]	; (8003500 <HAL_GPIO_Init+0x2e4>)
 80033ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80033b0:	6453      	str	r3, [r2, #68]	; 0x44
 80033b2:	4b53      	ldr	r3, [pc, #332]	; (8003500 <HAL_GPIO_Init+0x2e4>)
 80033b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80033ba:	60fb      	str	r3, [r7, #12]
 80033bc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80033be:	4a51      	ldr	r2, [pc, #324]	; (8003504 <HAL_GPIO_Init+0x2e8>)
 80033c0:	69fb      	ldr	r3, [r7, #28]
 80033c2:	089b      	lsrs	r3, r3, #2
 80033c4:	3302      	adds	r3, #2
 80033c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80033cc:	69fb      	ldr	r3, [r7, #28]
 80033ce:	f003 0303 	and.w	r3, r3, #3
 80033d2:	009b      	lsls	r3, r3, #2
 80033d4:	220f      	movs	r2, #15
 80033d6:	fa02 f303 	lsl.w	r3, r2, r3
 80033da:	43db      	mvns	r3, r3
 80033dc:	69ba      	ldr	r2, [r7, #24]
 80033de:	4013      	ands	r3, r2
 80033e0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	4a48      	ldr	r2, [pc, #288]	; (8003508 <HAL_GPIO_Init+0x2ec>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d019      	beq.n	800341e <HAL_GPIO_Init+0x202>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	4a47      	ldr	r2, [pc, #284]	; (800350c <HAL_GPIO_Init+0x2f0>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d013      	beq.n	800341a <HAL_GPIO_Init+0x1fe>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	4a46      	ldr	r2, [pc, #280]	; (8003510 <HAL_GPIO_Init+0x2f4>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d00d      	beq.n	8003416 <HAL_GPIO_Init+0x1fa>
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	4a45      	ldr	r2, [pc, #276]	; (8003514 <HAL_GPIO_Init+0x2f8>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d007      	beq.n	8003412 <HAL_GPIO_Init+0x1f6>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	4a44      	ldr	r2, [pc, #272]	; (8003518 <HAL_GPIO_Init+0x2fc>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d101      	bne.n	800340e <HAL_GPIO_Init+0x1f2>
 800340a:	2304      	movs	r3, #4
 800340c:	e008      	b.n	8003420 <HAL_GPIO_Init+0x204>
 800340e:	2307      	movs	r3, #7
 8003410:	e006      	b.n	8003420 <HAL_GPIO_Init+0x204>
 8003412:	2303      	movs	r3, #3
 8003414:	e004      	b.n	8003420 <HAL_GPIO_Init+0x204>
 8003416:	2302      	movs	r3, #2
 8003418:	e002      	b.n	8003420 <HAL_GPIO_Init+0x204>
 800341a:	2301      	movs	r3, #1
 800341c:	e000      	b.n	8003420 <HAL_GPIO_Init+0x204>
 800341e:	2300      	movs	r3, #0
 8003420:	69fa      	ldr	r2, [r7, #28]
 8003422:	f002 0203 	and.w	r2, r2, #3
 8003426:	0092      	lsls	r2, r2, #2
 8003428:	4093      	lsls	r3, r2
 800342a:	69ba      	ldr	r2, [r7, #24]
 800342c:	4313      	orrs	r3, r2
 800342e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003430:	4934      	ldr	r1, [pc, #208]	; (8003504 <HAL_GPIO_Init+0x2e8>)
 8003432:	69fb      	ldr	r3, [r7, #28]
 8003434:	089b      	lsrs	r3, r3, #2
 8003436:	3302      	adds	r3, #2
 8003438:	69ba      	ldr	r2, [r7, #24]
 800343a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800343e:	4b37      	ldr	r3, [pc, #220]	; (800351c <HAL_GPIO_Init+0x300>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003444:	693b      	ldr	r3, [r7, #16]
 8003446:	43db      	mvns	r3, r3
 8003448:	69ba      	ldr	r2, [r7, #24]
 800344a:	4013      	ands	r3, r2
 800344c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003456:	2b00      	cmp	r3, #0
 8003458:	d003      	beq.n	8003462 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800345a:	69ba      	ldr	r2, [r7, #24]
 800345c:	693b      	ldr	r3, [r7, #16]
 800345e:	4313      	orrs	r3, r2
 8003460:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003462:	4a2e      	ldr	r2, [pc, #184]	; (800351c <HAL_GPIO_Init+0x300>)
 8003464:	69bb      	ldr	r3, [r7, #24]
 8003466:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003468:	4b2c      	ldr	r3, [pc, #176]	; (800351c <HAL_GPIO_Init+0x300>)
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800346e:	693b      	ldr	r3, [r7, #16]
 8003470:	43db      	mvns	r3, r3
 8003472:	69ba      	ldr	r2, [r7, #24]
 8003474:	4013      	ands	r3, r2
 8003476:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	685b      	ldr	r3, [r3, #4]
 800347c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003480:	2b00      	cmp	r3, #0
 8003482:	d003      	beq.n	800348c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003484:	69ba      	ldr	r2, [r7, #24]
 8003486:	693b      	ldr	r3, [r7, #16]
 8003488:	4313      	orrs	r3, r2
 800348a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800348c:	4a23      	ldr	r2, [pc, #140]	; (800351c <HAL_GPIO_Init+0x300>)
 800348e:	69bb      	ldr	r3, [r7, #24]
 8003490:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003492:	4b22      	ldr	r3, [pc, #136]	; (800351c <HAL_GPIO_Init+0x300>)
 8003494:	689b      	ldr	r3, [r3, #8]
 8003496:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003498:	693b      	ldr	r3, [r7, #16]
 800349a:	43db      	mvns	r3, r3
 800349c:	69ba      	ldr	r2, [r7, #24]
 800349e:	4013      	ands	r3, r2
 80034a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d003      	beq.n	80034b6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80034ae:	69ba      	ldr	r2, [r7, #24]
 80034b0:	693b      	ldr	r3, [r7, #16]
 80034b2:	4313      	orrs	r3, r2
 80034b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80034b6:	4a19      	ldr	r2, [pc, #100]	; (800351c <HAL_GPIO_Init+0x300>)
 80034b8:	69bb      	ldr	r3, [r7, #24]
 80034ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80034bc:	4b17      	ldr	r3, [pc, #92]	; (800351c <HAL_GPIO_Init+0x300>)
 80034be:	68db      	ldr	r3, [r3, #12]
 80034c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034c2:	693b      	ldr	r3, [r7, #16]
 80034c4:	43db      	mvns	r3, r3
 80034c6:	69ba      	ldr	r2, [r7, #24]
 80034c8:	4013      	ands	r3, r2
 80034ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d003      	beq.n	80034e0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80034d8:	69ba      	ldr	r2, [r7, #24]
 80034da:	693b      	ldr	r3, [r7, #16]
 80034dc:	4313      	orrs	r3, r2
 80034de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80034e0:	4a0e      	ldr	r2, [pc, #56]	; (800351c <HAL_GPIO_Init+0x300>)
 80034e2:	69bb      	ldr	r3, [r7, #24]
 80034e4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80034e6:	69fb      	ldr	r3, [r7, #28]
 80034e8:	3301      	adds	r3, #1
 80034ea:	61fb      	str	r3, [r7, #28]
 80034ec:	69fb      	ldr	r3, [r7, #28]
 80034ee:	2b0f      	cmp	r3, #15
 80034f0:	f67f aea2 	bls.w	8003238 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80034f4:	bf00      	nop
 80034f6:	3724      	adds	r7, #36	; 0x24
 80034f8:	46bd      	mov	sp, r7
 80034fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fe:	4770      	bx	lr
 8003500:	40023800 	.word	0x40023800
 8003504:	40013800 	.word	0x40013800
 8003508:	40020000 	.word	0x40020000
 800350c:	40020400 	.word	0x40020400
 8003510:	40020800 	.word	0x40020800
 8003514:	40020c00 	.word	0x40020c00
 8003518:	40021000 	.word	0x40021000
 800351c:	40013c00 	.word	0x40013c00

08003520 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003520:	b480      	push	{r7}
 8003522:	b085      	sub	sp, #20
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
 8003528:	460b      	mov	r3, r1
 800352a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	691a      	ldr	r2, [r3, #16]
 8003530:	887b      	ldrh	r3, [r7, #2]
 8003532:	4013      	ands	r3, r2
 8003534:	2b00      	cmp	r3, #0
 8003536:	d002      	beq.n	800353e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003538:	2301      	movs	r3, #1
 800353a:	73fb      	strb	r3, [r7, #15]
 800353c:	e001      	b.n	8003542 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800353e:	2300      	movs	r3, #0
 8003540:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003542:	7bfb      	ldrb	r3, [r7, #15]
}
 8003544:	4618      	mov	r0, r3
 8003546:	3714      	adds	r7, #20
 8003548:	46bd      	mov	sp, r7
 800354a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354e:	4770      	bx	lr

08003550 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003550:	b480      	push	{r7}
 8003552:	b083      	sub	sp, #12
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
 8003558:	460b      	mov	r3, r1
 800355a:	807b      	strh	r3, [r7, #2]
 800355c:	4613      	mov	r3, r2
 800355e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003560:	787b      	ldrb	r3, [r7, #1]
 8003562:	2b00      	cmp	r3, #0
 8003564:	d003      	beq.n	800356e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003566:	887a      	ldrh	r2, [r7, #2]
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800356c:	e003      	b.n	8003576 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800356e:	887b      	ldrh	r3, [r7, #2]
 8003570:	041a      	lsls	r2, r3, #16
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	619a      	str	r2, [r3, #24]
}
 8003576:	bf00      	nop
 8003578:	370c      	adds	r7, #12
 800357a:	46bd      	mov	sp, r7
 800357c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003580:	4770      	bx	lr

08003582 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003582:	b480      	push	{r7}
 8003584:	b083      	sub	sp, #12
 8003586:	af00      	add	r7, sp, #0
 8003588:	6078      	str	r0, [r7, #4]
 800358a:	460b      	mov	r3, r1
 800358c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	695a      	ldr	r2, [r3, #20]
 8003592:	887b      	ldrh	r3, [r7, #2]
 8003594:	401a      	ands	r2, r3
 8003596:	887b      	ldrh	r3, [r7, #2]
 8003598:	429a      	cmp	r2, r3
 800359a:	d104      	bne.n	80035a6 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800359c:	887b      	ldrh	r3, [r7, #2]
 800359e:	041a      	lsls	r2, r3, #16
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 80035a4:	e002      	b.n	80035ac <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 80035a6:	887a      	ldrh	r2, [r7, #2]
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	619a      	str	r2, [r3, #24]
}
 80035ac:	bf00      	nop
 80035ae:	370c      	adds	r7, #12
 80035b0:	46bd      	mov	sp, r7
 80035b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b6:	4770      	bx	lr

080035b8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b082      	sub	sp, #8
 80035bc:	af00      	add	r7, sp, #0
 80035be:	4603      	mov	r3, r0
 80035c0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80035c2:	4b08      	ldr	r3, [pc, #32]	; (80035e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80035c4:	695a      	ldr	r2, [r3, #20]
 80035c6:	88fb      	ldrh	r3, [r7, #6]
 80035c8:	4013      	ands	r3, r2
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d006      	beq.n	80035dc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80035ce:	4a05      	ldr	r2, [pc, #20]	; (80035e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80035d0:	88fb      	ldrh	r3, [r7, #6]
 80035d2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80035d4:	88fb      	ldrh	r3, [r7, #6]
 80035d6:	4618      	mov	r0, r3
 80035d8:	f000 f806 	bl	80035e8 <HAL_GPIO_EXTI_Callback>
  }
}
 80035dc:	bf00      	nop
 80035de:	3708      	adds	r7, #8
 80035e0:	46bd      	mov	sp, r7
 80035e2:	bd80      	pop	{r7, pc}
 80035e4:	40013c00 	.word	0x40013c00

080035e8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80035e8:	b480      	push	{r7}
 80035ea:	b083      	sub	sp, #12
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	4603      	mov	r3, r0
 80035f0:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80035f2:	bf00      	nop
 80035f4:	370c      	adds	r7, #12
 80035f6:	46bd      	mov	sp, r7
 80035f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fc:	4770      	bx	lr
	...

08003600 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	b084      	sub	sp, #16
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2b00      	cmp	r3, #0
 800360c:	d101      	bne.n	8003612 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800360e:	2301      	movs	r3, #1
 8003610:	e11f      	b.n	8003852 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003618:	b2db      	uxtb	r3, r3
 800361a:	2b00      	cmp	r3, #0
 800361c:	d106      	bne.n	800362c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2200      	movs	r2, #0
 8003622:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003626:	6878      	ldr	r0, [r7, #4]
 8003628:	f7fe ff4e 	bl	80024c8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2224      	movs	r2, #36	; 0x24
 8003630:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	681a      	ldr	r2, [r3, #0]
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f022 0201 	bic.w	r2, r2, #1
 8003642:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	681a      	ldr	r2, [r3, #0]
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003652:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	681a      	ldr	r2, [r3, #0]
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003662:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003664:	f001 fade 	bl	8004c24 <HAL_RCC_GetPCLK1Freq>
 8003668:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	4a7b      	ldr	r2, [pc, #492]	; (800385c <HAL_I2C_Init+0x25c>)
 8003670:	4293      	cmp	r3, r2
 8003672:	d807      	bhi.n	8003684 <HAL_I2C_Init+0x84>
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	4a7a      	ldr	r2, [pc, #488]	; (8003860 <HAL_I2C_Init+0x260>)
 8003678:	4293      	cmp	r3, r2
 800367a:	bf94      	ite	ls
 800367c:	2301      	movls	r3, #1
 800367e:	2300      	movhi	r3, #0
 8003680:	b2db      	uxtb	r3, r3
 8003682:	e006      	b.n	8003692 <HAL_I2C_Init+0x92>
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	4a77      	ldr	r2, [pc, #476]	; (8003864 <HAL_I2C_Init+0x264>)
 8003688:	4293      	cmp	r3, r2
 800368a:	bf94      	ite	ls
 800368c:	2301      	movls	r3, #1
 800368e:	2300      	movhi	r3, #0
 8003690:	b2db      	uxtb	r3, r3
 8003692:	2b00      	cmp	r3, #0
 8003694:	d001      	beq.n	800369a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003696:	2301      	movs	r3, #1
 8003698:	e0db      	b.n	8003852 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	4a72      	ldr	r2, [pc, #456]	; (8003868 <HAL_I2C_Init+0x268>)
 800369e:	fba2 2303 	umull	r2, r3, r2, r3
 80036a2:	0c9b      	lsrs	r3, r3, #18
 80036a4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	685b      	ldr	r3, [r3, #4]
 80036ac:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	68ba      	ldr	r2, [r7, #8]
 80036b6:	430a      	orrs	r2, r1
 80036b8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	6a1b      	ldr	r3, [r3, #32]
 80036c0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	685b      	ldr	r3, [r3, #4]
 80036c8:	4a64      	ldr	r2, [pc, #400]	; (800385c <HAL_I2C_Init+0x25c>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d802      	bhi.n	80036d4 <HAL_I2C_Init+0xd4>
 80036ce:	68bb      	ldr	r3, [r7, #8]
 80036d0:	3301      	adds	r3, #1
 80036d2:	e009      	b.n	80036e8 <HAL_I2C_Init+0xe8>
 80036d4:	68bb      	ldr	r3, [r7, #8]
 80036d6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80036da:	fb02 f303 	mul.w	r3, r2, r3
 80036de:	4a63      	ldr	r2, [pc, #396]	; (800386c <HAL_I2C_Init+0x26c>)
 80036e0:	fba2 2303 	umull	r2, r3, r2, r3
 80036e4:	099b      	lsrs	r3, r3, #6
 80036e6:	3301      	adds	r3, #1
 80036e8:	687a      	ldr	r2, [r7, #4]
 80036ea:	6812      	ldr	r2, [r2, #0]
 80036ec:	430b      	orrs	r3, r1
 80036ee:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	69db      	ldr	r3, [r3, #28]
 80036f6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80036fa:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	685b      	ldr	r3, [r3, #4]
 8003702:	4956      	ldr	r1, [pc, #344]	; (800385c <HAL_I2C_Init+0x25c>)
 8003704:	428b      	cmp	r3, r1
 8003706:	d80d      	bhi.n	8003724 <HAL_I2C_Init+0x124>
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	1e59      	subs	r1, r3, #1
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	005b      	lsls	r3, r3, #1
 8003712:	fbb1 f3f3 	udiv	r3, r1, r3
 8003716:	3301      	adds	r3, #1
 8003718:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800371c:	2b04      	cmp	r3, #4
 800371e:	bf38      	it	cc
 8003720:	2304      	movcc	r3, #4
 8003722:	e04f      	b.n	80037c4 <HAL_I2C_Init+0x1c4>
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	689b      	ldr	r3, [r3, #8]
 8003728:	2b00      	cmp	r3, #0
 800372a:	d111      	bne.n	8003750 <HAL_I2C_Init+0x150>
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	1e58      	subs	r0, r3, #1
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6859      	ldr	r1, [r3, #4]
 8003734:	460b      	mov	r3, r1
 8003736:	005b      	lsls	r3, r3, #1
 8003738:	440b      	add	r3, r1
 800373a:	fbb0 f3f3 	udiv	r3, r0, r3
 800373e:	3301      	adds	r3, #1
 8003740:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003744:	2b00      	cmp	r3, #0
 8003746:	bf0c      	ite	eq
 8003748:	2301      	moveq	r3, #1
 800374a:	2300      	movne	r3, #0
 800374c:	b2db      	uxtb	r3, r3
 800374e:	e012      	b.n	8003776 <HAL_I2C_Init+0x176>
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	1e58      	subs	r0, r3, #1
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6859      	ldr	r1, [r3, #4]
 8003758:	460b      	mov	r3, r1
 800375a:	009b      	lsls	r3, r3, #2
 800375c:	440b      	add	r3, r1
 800375e:	0099      	lsls	r1, r3, #2
 8003760:	440b      	add	r3, r1
 8003762:	fbb0 f3f3 	udiv	r3, r0, r3
 8003766:	3301      	adds	r3, #1
 8003768:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800376c:	2b00      	cmp	r3, #0
 800376e:	bf0c      	ite	eq
 8003770:	2301      	moveq	r3, #1
 8003772:	2300      	movne	r3, #0
 8003774:	b2db      	uxtb	r3, r3
 8003776:	2b00      	cmp	r3, #0
 8003778:	d001      	beq.n	800377e <HAL_I2C_Init+0x17e>
 800377a:	2301      	movs	r3, #1
 800377c:	e022      	b.n	80037c4 <HAL_I2C_Init+0x1c4>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	689b      	ldr	r3, [r3, #8]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d10e      	bne.n	80037a4 <HAL_I2C_Init+0x1a4>
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	1e58      	subs	r0, r3, #1
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6859      	ldr	r1, [r3, #4]
 800378e:	460b      	mov	r3, r1
 8003790:	005b      	lsls	r3, r3, #1
 8003792:	440b      	add	r3, r1
 8003794:	fbb0 f3f3 	udiv	r3, r0, r3
 8003798:	3301      	adds	r3, #1
 800379a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800379e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80037a2:	e00f      	b.n	80037c4 <HAL_I2C_Init+0x1c4>
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	1e58      	subs	r0, r3, #1
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6859      	ldr	r1, [r3, #4]
 80037ac:	460b      	mov	r3, r1
 80037ae:	009b      	lsls	r3, r3, #2
 80037b0:	440b      	add	r3, r1
 80037b2:	0099      	lsls	r1, r3, #2
 80037b4:	440b      	add	r3, r1
 80037b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80037ba:	3301      	adds	r3, #1
 80037bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037c0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80037c4:	6879      	ldr	r1, [r7, #4]
 80037c6:	6809      	ldr	r1, [r1, #0]
 80037c8:	4313      	orrs	r3, r2
 80037ca:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	69da      	ldr	r2, [r3, #28]
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6a1b      	ldr	r3, [r3, #32]
 80037de:	431a      	orrs	r2, r3
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	430a      	orrs	r2, r1
 80037e6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	689b      	ldr	r3, [r3, #8]
 80037ee:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80037f2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80037f6:	687a      	ldr	r2, [r7, #4]
 80037f8:	6911      	ldr	r1, [r2, #16]
 80037fa:	687a      	ldr	r2, [r7, #4]
 80037fc:	68d2      	ldr	r2, [r2, #12]
 80037fe:	4311      	orrs	r1, r2
 8003800:	687a      	ldr	r2, [r7, #4]
 8003802:	6812      	ldr	r2, [r2, #0]
 8003804:	430b      	orrs	r3, r1
 8003806:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	68db      	ldr	r3, [r3, #12]
 800380e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	695a      	ldr	r2, [r3, #20]
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	699b      	ldr	r3, [r3, #24]
 800381a:	431a      	orrs	r2, r3
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	430a      	orrs	r2, r1
 8003822:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	681a      	ldr	r2, [r3, #0]
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f042 0201 	orr.w	r2, r2, #1
 8003832:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2200      	movs	r2, #0
 8003838:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2220      	movs	r2, #32
 800383e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2200      	movs	r2, #0
 8003846:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2200      	movs	r2, #0
 800384c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003850:	2300      	movs	r3, #0
}
 8003852:	4618      	mov	r0, r3
 8003854:	3710      	adds	r7, #16
 8003856:	46bd      	mov	sp, r7
 8003858:	bd80      	pop	{r7, pc}
 800385a:	bf00      	nop
 800385c:	000186a0 	.word	0x000186a0
 8003860:	001e847f 	.word	0x001e847f
 8003864:	003d08ff 	.word	0x003d08ff
 8003868:	431bde83 	.word	0x431bde83
 800386c:	10624dd3 	.word	0x10624dd3

08003870 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b088      	sub	sp, #32
 8003874:	af02      	add	r7, sp, #8
 8003876:	60f8      	str	r0, [r7, #12]
 8003878:	607a      	str	r2, [r7, #4]
 800387a:	461a      	mov	r2, r3
 800387c:	460b      	mov	r3, r1
 800387e:	817b      	strh	r3, [r7, #10]
 8003880:	4613      	mov	r3, r2
 8003882:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003884:	f7fe ffbe 	bl	8002804 <HAL_GetTick>
 8003888:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003890:	b2db      	uxtb	r3, r3
 8003892:	2b20      	cmp	r3, #32
 8003894:	f040 80e0 	bne.w	8003a58 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003898:	697b      	ldr	r3, [r7, #20]
 800389a:	9300      	str	r3, [sp, #0]
 800389c:	2319      	movs	r3, #25
 800389e:	2201      	movs	r2, #1
 80038a0:	4970      	ldr	r1, [pc, #448]	; (8003a64 <HAL_I2C_Master_Transmit+0x1f4>)
 80038a2:	68f8      	ldr	r0, [r7, #12]
 80038a4:	f000 fc22 	bl	80040ec <I2C_WaitOnFlagUntilTimeout>
 80038a8:	4603      	mov	r3, r0
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d001      	beq.n	80038b2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80038ae:	2302      	movs	r3, #2
 80038b0:	e0d3      	b.n	8003a5a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038b8:	2b01      	cmp	r3, #1
 80038ba:	d101      	bne.n	80038c0 <HAL_I2C_Master_Transmit+0x50>
 80038bc:	2302      	movs	r3, #2
 80038be:	e0cc      	b.n	8003a5a <HAL_I2C_Master_Transmit+0x1ea>
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	2201      	movs	r2, #1
 80038c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f003 0301 	and.w	r3, r3, #1
 80038d2:	2b01      	cmp	r3, #1
 80038d4:	d007      	beq.n	80038e6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	681a      	ldr	r2, [r3, #0]
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f042 0201 	orr.w	r2, r2, #1
 80038e4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	681a      	ldr	r2, [r3, #0]
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80038f4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	2221      	movs	r2, #33	; 0x21
 80038fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	2210      	movs	r2, #16
 8003902:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	2200      	movs	r2, #0
 800390a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	687a      	ldr	r2, [r7, #4]
 8003910:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	893a      	ldrh	r2, [r7, #8]
 8003916:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800391c:	b29a      	uxth	r2, r3
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	4a50      	ldr	r2, [pc, #320]	; (8003a68 <HAL_I2C_Master_Transmit+0x1f8>)
 8003926:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003928:	8979      	ldrh	r1, [r7, #10]
 800392a:	697b      	ldr	r3, [r7, #20]
 800392c:	6a3a      	ldr	r2, [r7, #32]
 800392e:	68f8      	ldr	r0, [r7, #12]
 8003930:	f000 fac4 	bl	8003ebc <I2C_MasterRequestWrite>
 8003934:	4603      	mov	r3, r0
 8003936:	2b00      	cmp	r3, #0
 8003938:	d001      	beq.n	800393e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800393a:	2301      	movs	r3, #1
 800393c:	e08d      	b.n	8003a5a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800393e:	2300      	movs	r3, #0
 8003940:	613b      	str	r3, [r7, #16]
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	695b      	ldr	r3, [r3, #20]
 8003948:	613b      	str	r3, [r7, #16]
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	699b      	ldr	r3, [r3, #24]
 8003950:	613b      	str	r3, [r7, #16]
 8003952:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003954:	e066      	b.n	8003a24 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003956:	697a      	ldr	r2, [r7, #20]
 8003958:	6a39      	ldr	r1, [r7, #32]
 800395a:	68f8      	ldr	r0, [r7, #12]
 800395c:	f000 fc9c 	bl	8004298 <I2C_WaitOnTXEFlagUntilTimeout>
 8003960:	4603      	mov	r3, r0
 8003962:	2b00      	cmp	r3, #0
 8003964:	d00d      	beq.n	8003982 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800396a:	2b04      	cmp	r3, #4
 800396c:	d107      	bne.n	800397e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	681a      	ldr	r2, [r3, #0]
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800397c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800397e:	2301      	movs	r3, #1
 8003980:	e06b      	b.n	8003a5a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003986:	781a      	ldrb	r2, [r3, #0]
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003992:	1c5a      	adds	r2, r3, #1
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800399c:	b29b      	uxth	r3, r3
 800399e:	3b01      	subs	r3, #1
 80039a0:	b29a      	uxth	r2, r3
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039aa:	3b01      	subs	r3, #1
 80039ac:	b29a      	uxth	r2, r3
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	695b      	ldr	r3, [r3, #20]
 80039b8:	f003 0304 	and.w	r3, r3, #4
 80039bc:	2b04      	cmp	r3, #4
 80039be:	d11b      	bne.n	80039f8 <HAL_I2C_Master_Transmit+0x188>
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d017      	beq.n	80039f8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039cc:	781a      	ldrb	r2, [r3, #0]
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039d8:	1c5a      	adds	r2, r3, #1
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039e2:	b29b      	uxth	r3, r3
 80039e4:	3b01      	subs	r3, #1
 80039e6:	b29a      	uxth	r2, r3
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039f0:	3b01      	subs	r3, #1
 80039f2:	b29a      	uxth	r2, r3
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80039f8:	697a      	ldr	r2, [r7, #20]
 80039fa:	6a39      	ldr	r1, [r7, #32]
 80039fc:	68f8      	ldr	r0, [r7, #12]
 80039fe:	f000 fc8c 	bl	800431a <I2C_WaitOnBTFFlagUntilTimeout>
 8003a02:	4603      	mov	r3, r0
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d00d      	beq.n	8003a24 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a0c:	2b04      	cmp	r3, #4
 8003a0e:	d107      	bne.n	8003a20 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	681a      	ldr	r2, [r3, #0]
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a1e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003a20:	2301      	movs	r3, #1
 8003a22:	e01a      	b.n	8003a5a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d194      	bne.n	8003956 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	681a      	ldr	r2, [r3, #0]
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a3a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	2220      	movs	r2, #32
 8003a40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	2200      	movs	r2, #0
 8003a48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	2200      	movs	r2, #0
 8003a50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003a54:	2300      	movs	r3, #0
 8003a56:	e000      	b.n	8003a5a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003a58:	2302      	movs	r3, #2
  }
}
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	3718      	adds	r7, #24
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	bd80      	pop	{r7, pc}
 8003a62:	bf00      	nop
 8003a64:	00100002 	.word	0x00100002
 8003a68:	ffff0000 	.word	0xffff0000

08003a6c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b088      	sub	sp, #32
 8003a70:	af02      	add	r7, sp, #8
 8003a72:	60f8      	str	r0, [r7, #12]
 8003a74:	4608      	mov	r0, r1
 8003a76:	4611      	mov	r1, r2
 8003a78:	461a      	mov	r2, r3
 8003a7a:	4603      	mov	r3, r0
 8003a7c:	817b      	strh	r3, [r7, #10]
 8003a7e:	460b      	mov	r3, r1
 8003a80:	813b      	strh	r3, [r7, #8]
 8003a82:	4613      	mov	r3, r2
 8003a84:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003a86:	f7fe febd 	bl	8002804 <HAL_GetTick>
 8003a8a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a92:	b2db      	uxtb	r3, r3
 8003a94:	2b20      	cmp	r3, #32
 8003a96:	f040 80d9 	bne.w	8003c4c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003a9a:	697b      	ldr	r3, [r7, #20]
 8003a9c:	9300      	str	r3, [sp, #0]
 8003a9e:	2319      	movs	r3, #25
 8003aa0:	2201      	movs	r2, #1
 8003aa2:	496d      	ldr	r1, [pc, #436]	; (8003c58 <HAL_I2C_Mem_Write+0x1ec>)
 8003aa4:	68f8      	ldr	r0, [r7, #12]
 8003aa6:	f000 fb21 	bl	80040ec <I2C_WaitOnFlagUntilTimeout>
 8003aaa:	4603      	mov	r3, r0
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d001      	beq.n	8003ab4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003ab0:	2302      	movs	r3, #2
 8003ab2:	e0cc      	b.n	8003c4e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003aba:	2b01      	cmp	r3, #1
 8003abc:	d101      	bne.n	8003ac2 <HAL_I2C_Mem_Write+0x56>
 8003abe:	2302      	movs	r3, #2
 8003ac0:	e0c5      	b.n	8003c4e <HAL_I2C_Mem_Write+0x1e2>
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	2201      	movs	r2, #1
 8003ac6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f003 0301 	and.w	r3, r3, #1
 8003ad4:	2b01      	cmp	r3, #1
 8003ad6:	d007      	beq.n	8003ae8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	681a      	ldr	r2, [r3, #0]
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f042 0201 	orr.w	r2, r2, #1
 8003ae6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	681a      	ldr	r2, [r3, #0]
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003af6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	2221      	movs	r2, #33	; 0x21
 8003afc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	2240      	movs	r2, #64	; 0x40
 8003b04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	6a3a      	ldr	r2, [r7, #32]
 8003b12:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003b18:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b1e:	b29a      	uxth	r2, r3
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	4a4d      	ldr	r2, [pc, #308]	; (8003c5c <HAL_I2C_Mem_Write+0x1f0>)
 8003b28:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003b2a:	88f8      	ldrh	r0, [r7, #6]
 8003b2c:	893a      	ldrh	r2, [r7, #8]
 8003b2e:	8979      	ldrh	r1, [r7, #10]
 8003b30:	697b      	ldr	r3, [r7, #20]
 8003b32:	9301      	str	r3, [sp, #4]
 8003b34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b36:	9300      	str	r3, [sp, #0]
 8003b38:	4603      	mov	r3, r0
 8003b3a:	68f8      	ldr	r0, [r7, #12]
 8003b3c:	f000 fa40 	bl	8003fc0 <I2C_RequestMemoryWrite>
 8003b40:	4603      	mov	r3, r0
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d052      	beq.n	8003bec <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003b46:	2301      	movs	r3, #1
 8003b48:	e081      	b.n	8003c4e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b4a:	697a      	ldr	r2, [r7, #20]
 8003b4c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003b4e:	68f8      	ldr	r0, [r7, #12]
 8003b50:	f000 fba2 	bl	8004298 <I2C_WaitOnTXEFlagUntilTimeout>
 8003b54:	4603      	mov	r3, r0
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d00d      	beq.n	8003b76 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b5e:	2b04      	cmp	r3, #4
 8003b60:	d107      	bne.n	8003b72 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	681a      	ldr	r2, [r3, #0]
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b70:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003b72:	2301      	movs	r3, #1
 8003b74:	e06b      	b.n	8003c4e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b7a:	781a      	ldrb	r2, [r3, #0]
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b86:	1c5a      	adds	r2, r3, #1
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b90:	3b01      	subs	r3, #1
 8003b92:	b29a      	uxth	r2, r3
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b9c:	b29b      	uxth	r3, r3
 8003b9e:	3b01      	subs	r3, #1
 8003ba0:	b29a      	uxth	r2, r3
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	695b      	ldr	r3, [r3, #20]
 8003bac:	f003 0304 	and.w	r3, r3, #4
 8003bb0:	2b04      	cmp	r3, #4
 8003bb2:	d11b      	bne.n	8003bec <HAL_I2C_Mem_Write+0x180>
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d017      	beq.n	8003bec <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bc0:	781a      	ldrb	r2, [r3, #0]
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bcc:	1c5a      	adds	r2, r3, #1
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bd6:	3b01      	subs	r3, #1
 8003bd8:	b29a      	uxth	r2, r3
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003be2:	b29b      	uxth	r3, r3
 8003be4:	3b01      	subs	r3, #1
 8003be6:	b29a      	uxth	r2, r3
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d1aa      	bne.n	8003b4a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003bf4:	697a      	ldr	r2, [r7, #20]
 8003bf6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003bf8:	68f8      	ldr	r0, [r7, #12]
 8003bfa:	f000 fb8e 	bl	800431a <I2C_WaitOnBTFFlagUntilTimeout>
 8003bfe:	4603      	mov	r3, r0
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d00d      	beq.n	8003c20 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c08:	2b04      	cmp	r3, #4
 8003c0a:	d107      	bne.n	8003c1c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	681a      	ldr	r2, [r3, #0]
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c1a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003c1c:	2301      	movs	r3, #1
 8003c1e:	e016      	b.n	8003c4e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	681a      	ldr	r2, [r3, #0]
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c2e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	2220      	movs	r2, #32
 8003c34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	2200      	movs	r2, #0
 8003c44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003c48:	2300      	movs	r3, #0
 8003c4a:	e000      	b.n	8003c4e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003c4c:	2302      	movs	r3, #2
  }
}
 8003c4e:	4618      	mov	r0, r3
 8003c50:	3718      	adds	r7, #24
 8003c52:	46bd      	mov	sp, r7
 8003c54:	bd80      	pop	{r7, pc}
 8003c56:	bf00      	nop
 8003c58:	00100002 	.word	0x00100002
 8003c5c:	ffff0000 	.word	0xffff0000

08003c60 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b08a      	sub	sp, #40	; 0x28
 8003c64:	af02      	add	r7, sp, #8
 8003c66:	60f8      	str	r0, [r7, #12]
 8003c68:	607a      	str	r2, [r7, #4]
 8003c6a:	603b      	str	r3, [r7, #0]
 8003c6c:	460b      	mov	r3, r1
 8003c6e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003c70:	f7fe fdc8 	bl	8002804 <HAL_GetTick>
 8003c74:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8003c76:	2301      	movs	r3, #1
 8003c78:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c80:	b2db      	uxtb	r3, r3
 8003c82:	2b20      	cmp	r3, #32
 8003c84:	f040 8111 	bne.w	8003eaa <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003c88:	69fb      	ldr	r3, [r7, #28]
 8003c8a:	9300      	str	r3, [sp, #0]
 8003c8c:	2319      	movs	r3, #25
 8003c8e:	2201      	movs	r2, #1
 8003c90:	4988      	ldr	r1, [pc, #544]	; (8003eb4 <HAL_I2C_IsDeviceReady+0x254>)
 8003c92:	68f8      	ldr	r0, [r7, #12]
 8003c94:	f000 fa2a 	bl	80040ec <I2C_WaitOnFlagUntilTimeout>
 8003c98:	4603      	mov	r3, r0
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d001      	beq.n	8003ca2 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8003c9e:	2302      	movs	r3, #2
 8003ca0:	e104      	b.n	8003eac <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ca8:	2b01      	cmp	r3, #1
 8003caa:	d101      	bne.n	8003cb0 <HAL_I2C_IsDeviceReady+0x50>
 8003cac:	2302      	movs	r3, #2
 8003cae:	e0fd      	b.n	8003eac <HAL_I2C_IsDeviceReady+0x24c>
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	2201      	movs	r2, #1
 8003cb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f003 0301 	and.w	r3, r3, #1
 8003cc2:	2b01      	cmp	r3, #1
 8003cc4:	d007      	beq.n	8003cd6 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	681a      	ldr	r2, [r3, #0]
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f042 0201 	orr.w	r2, r2, #1
 8003cd4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	681a      	ldr	r2, [r3, #0]
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003ce4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	2224      	movs	r2, #36	; 0x24
 8003cea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	4a70      	ldr	r2, [pc, #448]	; (8003eb8 <HAL_I2C_IsDeviceReady+0x258>)
 8003cf8:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	681a      	ldr	r2, [r3, #0]
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d08:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8003d0a:	69fb      	ldr	r3, [r7, #28]
 8003d0c:	9300      	str	r3, [sp, #0]
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	2200      	movs	r2, #0
 8003d12:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003d16:	68f8      	ldr	r0, [r7, #12]
 8003d18:	f000 f9e8 	bl	80040ec <I2C_WaitOnFlagUntilTimeout>
 8003d1c:	4603      	mov	r3, r0
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d00d      	beq.n	8003d3e <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d2c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d30:	d103      	bne.n	8003d3a <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003d38:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8003d3a:	2303      	movs	r3, #3
 8003d3c:	e0b6      	b.n	8003eac <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003d3e:	897b      	ldrh	r3, [r7, #10]
 8003d40:	b2db      	uxtb	r3, r3
 8003d42:	461a      	mov	r2, r3
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003d4c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8003d4e:	f7fe fd59 	bl	8002804 <HAL_GetTick>
 8003d52:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	695b      	ldr	r3, [r3, #20]
 8003d5a:	f003 0302 	and.w	r3, r3, #2
 8003d5e:	2b02      	cmp	r3, #2
 8003d60:	bf0c      	ite	eq
 8003d62:	2301      	moveq	r3, #1
 8003d64:	2300      	movne	r3, #0
 8003d66:	b2db      	uxtb	r3, r3
 8003d68:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	695b      	ldr	r3, [r3, #20]
 8003d70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d78:	bf0c      	ite	eq
 8003d7a:	2301      	moveq	r3, #1
 8003d7c:	2300      	movne	r3, #0
 8003d7e:	b2db      	uxtb	r3, r3
 8003d80:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003d82:	e025      	b.n	8003dd0 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003d84:	f7fe fd3e 	bl	8002804 <HAL_GetTick>
 8003d88:	4602      	mov	r2, r0
 8003d8a:	69fb      	ldr	r3, [r7, #28]
 8003d8c:	1ad3      	subs	r3, r2, r3
 8003d8e:	683a      	ldr	r2, [r7, #0]
 8003d90:	429a      	cmp	r2, r3
 8003d92:	d302      	bcc.n	8003d9a <HAL_I2C_IsDeviceReady+0x13a>
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d103      	bne.n	8003da2 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	22a0      	movs	r2, #160	; 0xa0
 8003d9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	695b      	ldr	r3, [r3, #20]
 8003da8:	f003 0302 	and.w	r3, r3, #2
 8003dac:	2b02      	cmp	r3, #2
 8003dae:	bf0c      	ite	eq
 8003db0:	2301      	moveq	r3, #1
 8003db2:	2300      	movne	r3, #0
 8003db4:	b2db      	uxtb	r3, r3
 8003db6:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	695b      	ldr	r3, [r3, #20]
 8003dbe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003dc2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003dc6:	bf0c      	ite	eq
 8003dc8:	2301      	moveq	r3, #1
 8003dca:	2300      	movne	r3, #0
 8003dcc:	b2db      	uxtb	r3, r3
 8003dce:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003dd6:	b2db      	uxtb	r3, r3
 8003dd8:	2ba0      	cmp	r3, #160	; 0xa0
 8003dda:	d005      	beq.n	8003de8 <HAL_I2C_IsDeviceReady+0x188>
 8003ddc:	7dfb      	ldrb	r3, [r7, #23]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d102      	bne.n	8003de8 <HAL_I2C_IsDeviceReady+0x188>
 8003de2:	7dbb      	ldrb	r3, [r7, #22]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d0cd      	beq.n	8003d84 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	2220      	movs	r2, #32
 8003dec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	695b      	ldr	r3, [r3, #20]
 8003df6:	f003 0302 	and.w	r3, r3, #2
 8003dfa:	2b02      	cmp	r3, #2
 8003dfc:	d129      	bne.n	8003e52 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	681a      	ldr	r2, [r3, #0]
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e0c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e0e:	2300      	movs	r3, #0
 8003e10:	613b      	str	r3, [r7, #16]
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	695b      	ldr	r3, [r3, #20]
 8003e18:	613b      	str	r3, [r7, #16]
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	699b      	ldr	r3, [r3, #24]
 8003e20:	613b      	str	r3, [r7, #16]
 8003e22:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003e24:	69fb      	ldr	r3, [r7, #28]
 8003e26:	9300      	str	r3, [sp, #0]
 8003e28:	2319      	movs	r3, #25
 8003e2a:	2201      	movs	r2, #1
 8003e2c:	4921      	ldr	r1, [pc, #132]	; (8003eb4 <HAL_I2C_IsDeviceReady+0x254>)
 8003e2e:	68f8      	ldr	r0, [r7, #12]
 8003e30:	f000 f95c 	bl	80040ec <I2C_WaitOnFlagUntilTimeout>
 8003e34:	4603      	mov	r3, r0
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d001      	beq.n	8003e3e <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8003e3a:	2301      	movs	r3, #1
 8003e3c:	e036      	b.n	8003eac <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	2220      	movs	r2, #32
 8003e42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	2200      	movs	r2, #0
 8003e4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8003e4e:	2300      	movs	r3, #0
 8003e50:	e02c      	b.n	8003eac <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	681a      	ldr	r2, [r3, #0]
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e60:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003e6a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003e6c:	69fb      	ldr	r3, [r7, #28]
 8003e6e:	9300      	str	r3, [sp, #0]
 8003e70:	2319      	movs	r3, #25
 8003e72:	2201      	movs	r2, #1
 8003e74:	490f      	ldr	r1, [pc, #60]	; (8003eb4 <HAL_I2C_IsDeviceReady+0x254>)
 8003e76:	68f8      	ldr	r0, [r7, #12]
 8003e78:	f000 f938 	bl	80040ec <I2C_WaitOnFlagUntilTimeout>
 8003e7c:	4603      	mov	r3, r0
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d001      	beq.n	8003e86 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8003e82:	2301      	movs	r3, #1
 8003e84:	e012      	b.n	8003eac <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8003e86:	69bb      	ldr	r3, [r7, #24]
 8003e88:	3301      	adds	r3, #1
 8003e8a:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003e8c:	69ba      	ldr	r2, [r7, #24]
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	429a      	cmp	r2, r3
 8003e92:	f4ff af32 	bcc.w	8003cfa <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	2220      	movs	r2, #32
 8003e9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	e000      	b.n	8003eac <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8003eaa:	2302      	movs	r3, #2
  }
}
 8003eac:	4618      	mov	r0, r3
 8003eae:	3720      	adds	r7, #32
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	bd80      	pop	{r7, pc}
 8003eb4:	00100002 	.word	0x00100002
 8003eb8:	ffff0000 	.word	0xffff0000

08003ebc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b088      	sub	sp, #32
 8003ec0:	af02      	add	r7, sp, #8
 8003ec2:	60f8      	str	r0, [r7, #12]
 8003ec4:	607a      	str	r2, [r7, #4]
 8003ec6:	603b      	str	r3, [r7, #0]
 8003ec8:	460b      	mov	r3, r1
 8003eca:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ed0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003ed2:	697b      	ldr	r3, [r7, #20]
 8003ed4:	2b08      	cmp	r3, #8
 8003ed6:	d006      	beq.n	8003ee6 <I2C_MasterRequestWrite+0x2a>
 8003ed8:	697b      	ldr	r3, [r7, #20]
 8003eda:	2b01      	cmp	r3, #1
 8003edc:	d003      	beq.n	8003ee6 <I2C_MasterRequestWrite+0x2a>
 8003ede:	697b      	ldr	r3, [r7, #20]
 8003ee0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003ee4:	d108      	bne.n	8003ef8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	681a      	ldr	r2, [r3, #0]
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ef4:	601a      	str	r2, [r3, #0]
 8003ef6:	e00b      	b.n	8003f10 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003efc:	2b12      	cmp	r3, #18
 8003efe:	d107      	bne.n	8003f10 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	681a      	ldr	r2, [r3, #0]
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f0e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	9300      	str	r3, [sp, #0]
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2200      	movs	r2, #0
 8003f18:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003f1c:	68f8      	ldr	r0, [r7, #12]
 8003f1e:	f000 f8e5 	bl	80040ec <I2C_WaitOnFlagUntilTimeout>
 8003f22:	4603      	mov	r3, r0
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d00d      	beq.n	8003f44 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f36:	d103      	bne.n	8003f40 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003f3e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003f40:	2303      	movs	r3, #3
 8003f42:	e035      	b.n	8003fb0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	691b      	ldr	r3, [r3, #16]
 8003f48:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003f4c:	d108      	bne.n	8003f60 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003f4e:	897b      	ldrh	r3, [r7, #10]
 8003f50:	b2db      	uxtb	r3, r3
 8003f52:	461a      	mov	r2, r3
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003f5c:	611a      	str	r2, [r3, #16]
 8003f5e:	e01b      	b.n	8003f98 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003f60:	897b      	ldrh	r3, [r7, #10]
 8003f62:	11db      	asrs	r3, r3, #7
 8003f64:	b2db      	uxtb	r3, r3
 8003f66:	f003 0306 	and.w	r3, r3, #6
 8003f6a:	b2db      	uxtb	r3, r3
 8003f6c:	f063 030f 	orn	r3, r3, #15
 8003f70:	b2da      	uxtb	r2, r3
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	687a      	ldr	r2, [r7, #4]
 8003f7c:	490e      	ldr	r1, [pc, #56]	; (8003fb8 <I2C_MasterRequestWrite+0xfc>)
 8003f7e:	68f8      	ldr	r0, [r7, #12]
 8003f80:	f000 f90b 	bl	800419a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003f84:	4603      	mov	r3, r0
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d001      	beq.n	8003f8e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	e010      	b.n	8003fb0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003f8e:	897b      	ldrh	r3, [r7, #10]
 8003f90:	b2da      	uxtb	r2, r3
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	687a      	ldr	r2, [r7, #4]
 8003f9c:	4907      	ldr	r1, [pc, #28]	; (8003fbc <I2C_MasterRequestWrite+0x100>)
 8003f9e:	68f8      	ldr	r0, [r7, #12]
 8003fa0:	f000 f8fb 	bl	800419a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003fa4:	4603      	mov	r3, r0
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d001      	beq.n	8003fae <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003faa:	2301      	movs	r3, #1
 8003fac:	e000      	b.n	8003fb0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003fae:	2300      	movs	r3, #0
}
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	3718      	adds	r7, #24
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	bd80      	pop	{r7, pc}
 8003fb8:	00010008 	.word	0x00010008
 8003fbc:	00010002 	.word	0x00010002

08003fc0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b088      	sub	sp, #32
 8003fc4:	af02      	add	r7, sp, #8
 8003fc6:	60f8      	str	r0, [r7, #12]
 8003fc8:	4608      	mov	r0, r1
 8003fca:	4611      	mov	r1, r2
 8003fcc:	461a      	mov	r2, r3
 8003fce:	4603      	mov	r3, r0
 8003fd0:	817b      	strh	r3, [r7, #10]
 8003fd2:	460b      	mov	r3, r1
 8003fd4:	813b      	strh	r3, [r7, #8]
 8003fd6:	4613      	mov	r3, r2
 8003fd8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	681a      	ldr	r2, [r3, #0]
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003fe8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fec:	9300      	str	r3, [sp, #0]
 8003fee:	6a3b      	ldr	r3, [r7, #32]
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003ff6:	68f8      	ldr	r0, [r7, #12]
 8003ff8:	f000 f878 	bl	80040ec <I2C_WaitOnFlagUntilTimeout>
 8003ffc:	4603      	mov	r3, r0
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d00d      	beq.n	800401e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800400c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004010:	d103      	bne.n	800401a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004018:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800401a:	2303      	movs	r3, #3
 800401c:	e05f      	b.n	80040de <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800401e:	897b      	ldrh	r3, [r7, #10]
 8004020:	b2db      	uxtb	r3, r3
 8004022:	461a      	mov	r2, r3
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800402c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800402e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004030:	6a3a      	ldr	r2, [r7, #32]
 8004032:	492d      	ldr	r1, [pc, #180]	; (80040e8 <I2C_RequestMemoryWrite+0x128>)
 8004034:	68f8      	ldr	r0, [r7, #12]
 8004036:	f000 f8b0 	bl	800419a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800403a:	4603      	mov	r3, r0
 800403c:	2b00      	cmp	r3, #0
 800403e:	d001      	beq.n	8004044 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004040:	2301      	movs	r3, #1
 8004042:	e04c      	b.n	80040de <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004044:	2300      	movs	r3, #0
 8004046:	617b      	str	r3, [r7, #20]
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	695b      	ldr	r3, [r3, #20]
 800404e:	617b      	str	r3, [r7, #20]
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	699b      	ldr	r3, [r3, #24]
 8004056:	617b      	str	r3, [r7, #20]
 8004058:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800405a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800405c:	6a39      	ldr	r1, [r7, #32]
 800405e:	68f8      	ldr	r0, [r7, #12]
 8004060:	f000 f91a 	bl	8004298 <I2C_WaitOnTXEFlagUntilTimeout>
 8004064:	4603      	mov	r3, r0
 8004066:	2b00      	cmp	r3, #0
 8004068:	d00d      	beq.n	8004086 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800406e:	2b04      	cmp	r3, #4
 8004070:	d107      	bne.n	8004082 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	681a      	ldr	r2, [r3, #0]
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004080:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004082:	2301      	movs	r3, #1
 8004084:	e02b      	b.n	80040de <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004086:	88fb      	ldrh	r3, [r7, #6]
 8004088:	2b01      	cmp	r3, #1
 800408a:	d105      	bne.n	8004098 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800408c:	893b      	ldrh	r3, [r7, #8]
 800408e:	b2da      	uxtb	r2, r3
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	611a      	str	r2, [r3, #16]
 8004096:	e021      	b.n	80040dc <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004098:	893b      	ldrh	r3, [r7, #8]
 800409a:	0a1b      	lsrs	r3, r3, #8
 800409c:	b29b      	uxth	r3, r3
 800409e:	b2da      	uxtb	r2, r3
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80040a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040a8:	6a39      	ldr	r1, [r7, #32]
 80040aa:	68f8      	ldr	r0, [r7, #12]
 80040ac:	f000 f8f4 	bl	8004298 <I2C_WaitOnTXEFlagUntilTimeout>
 80040b0:	4603      	mov	r3, r0
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d00d      	beq.n	80040d2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ba:	2b04      	cmp	r3, #4
 80040bc:	d107      	bne.n	80040ce <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	681a      	ldr	r2, [r3, #0]
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040cc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80040ce:	2301      	movs	r3, #1
 80040d0:	e005      	b.n	80040de <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80040d2:	893b      	ldrh	r3, [r7, #8]
 80040d4:	b2da      	uxtb	r2, r3
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80040dc:	2300      	movs	r3, #0
}
 80040de:	4618      	mov	r0, r3
 80040e0:	3718      	adds	r7, #24
 80040e2:	46bd      	mov	sp, r7
 80040e4:	bd80      	pop	{r7, pc}
 80040e6:	bf00      	nop
 80040e8:	00010002 	.word	0x00010002

080040ec <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b084      	sub	sp, #16
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	60f8      	str	r0, [r7, #12]
 80040f4:	60b9      	str	r1, [r7, #8]
 80040f6:	603b      	str	r3, [r7, #0]
 80040f8:	4613      	mov	r3, r2
 80040fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80040fc:	e025      	b.n	800414a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004104:	d021      	beq.n	800414a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004106:	f7fe fb7d 	bl	8002804 <HAL_GetTick>
 800410a:	4602      	mov	r2, r0
 800410c:	69bb      	ldr	r3, [r7, #24]
 800410e:	1ad3      	subs	r3, r2, r3
 8004110:	683a      	ldr	r2, [r7, #0]
 8004112:	429a      	cmp	r2, r3
 8004114:	d302      	bcc.n	800411c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	2b00      	cmp	r3, #0
 800411a:	d116      	bne.n	800414a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	2200      	movs	r2, #0
 8004120:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	2220      	movs	r2, #32
 8004126:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	2200      	movs	r2, #0
 800412e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004136:	f043 0220 	orr.w	r2, r3, #32
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	2200      	movs	r2, #0
 8004142:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004146:	2301      	movs	r3, #1
 8004148:	e023      	b.n	8004192 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800414a:	68bb      	ldr	r3, [r7, #8]
 800414c:	0c1b      	lsrs	r3, r3, #16
 800414e:	b2db      	uxtb	r3, r3
 8004150:	2b01      	cmp	r3, #1
 8004152:	d10d      	bne.n	8004170 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	695b      	ldr	r3, [r3, #20]
 800415a:	43da      	mvns	r2, r3
 800415c:	68bb      	ldr	r3, [r7, #8]
 800415e:	4013      	ands	r3, r2
 8004160:	b29b      	uxth	r3, r3
 8004162:	2b00      	cmp	r3, #0
 8004164:	bf0c      	ite	eq
 8004166:	2301      	moveq	r3, #1
 8004168:	2300      	movne	r3, #0
 800416a:	b2db      	uxtb	r3, r3
 800416c:	461a      	mov	r2, r3
 800416e:	e00c      	b.n	800418a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	699b      	ldr	r3, [r3, #24]
 8004176:	43da      	mvns	r2, r3
 8004178:	68bb      	ldr	r3, [r7, #8]
 800417a:	4013      	ands	r3, r2
 800417c:	b29b      	uxth	r3, r3
 800417e:	2b00      	cmp	r3, #0
 8004180:	bf0c      	ite	eq
 8004182:	2301      	moveq	r3, #1
 8004184:	2300      	movne	r3, #0
 8004186:	b2db      	uxtb	r3, r3
 8004188:	461a      	mov	r2, r3
 800418a:	79fb      	ldrb	r3, [r7, #7]
 800418c:	429a      	cmp	r2, r3
 800418e:	d0b6      	beq.n	80040fe <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004190:	2300      	movs	r3, #0
}
 8004192:	4618      	mov	r0, r3
 8004194:	3710      	adds	r7, #16
 8004196:	46bd      	mov	sp, r7
 8004198:	bd80      	pop	{r7, pc}

0800419a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800419a:	b580      	push	{r7, lr}
 800419c:	b084      	sub	sp, #16
 800419e:	af00      	add	r7, sp, #0
 80041a0:	60f8      	str	r0, [r7, #12]
 80041a2:	60b9      	str	r1, [r7, #8]
 80041a4:	607a      	str	r2, [r7, #4]
 80041a6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80041a8:	e051      	b.n	800424e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	695b      	ldr	r3, [r3, #20]
 80041b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041b8:	d123      	bne.n	8004202 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	681a      	ldr	r2, [r3, #0]
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041c8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80041d2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	2200      	movs	r2, #0
 80041d8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	2220      	movs	r2, #32
 80041de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	2200      	movs	r2, #0
 80041e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ee:	f043 0204 	orr.w	r2, r3, #4
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	2200      	movs	r2, #0
 80041fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80041fe:	2301      	movs	r3, #1
 8004200:	e046      	b.n	8004290 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004208:	d021      	beq.n	800424e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800420a:	f7fe fafb 	bl	8002804 <HAL_GetTick>
 800420e:	4602      	mov	r2, r0
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	1ad3      	subs	r3, r2, r3
 8004214:	687a      	ldr	r2, [r7, #4]
 8004216:	429a      	cmp	r2, r3
 8004218:	d302      	bcc.n	8004220 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	2b00      	cmp	r3, #0
 800421e:	d116      	bne.n	800424e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	2200      	movs	r2, #0
 8004224:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	2220      	movs	r2, #32
 800422a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	2200      	movs	r2, #0
 8004232:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800423a:	f043 0220 	orr.w	r2, r3, #32
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	2200      	movs	r2, #0
 8004246:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800424a:	2301      	movs	r3, #1
 800424c:	e020      	b.n	8004290 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800424e:	68bb      	ldr	r3, [r7, #8]
 8004250:	0c1b      	lsrs	r3, r3, #16
 8004252:	b2db      	uxtb	r3, r3
 8004254:	2b01      	cmp	r3, #1
 8004256:	d10c      	bne.n	8004272 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	695b      	ldr	r3, [r3, #20]
 800425e:	43da      	mvns	r2, r3
 8004260:	68bb      	ldr	r3, [r7, #8]
 8004262:	4013      	ands	r3, r2
 8004264:	b29b      	uxth	r3, r3
 8004266:	2b00      	cmp	r3, #0
 8004268:	bf14      	ite	ne
 800426a:	2301      	movne	r3, #1
 800426c:	2300      	moveq	r3, #0
 800426e:	b2db      	uxtb	r3, r3
 8004270:	e00b      	b.n	800428a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	699b      	ldr	r3, [r3, #24]
 8004278:	43da      	mvns	r2, r3
 800427a:	68bb      	ldr	r3, [r7, #8]
 800427c:	4013      	ands	r3, r2
 800427e:	b29b      	uxth	r3, r3
 8004280:	2b00      	cmp	r3, #0
 8004282:	bf14      	ite	ne
 8004284:	2301      	movne	r3, #1
 8004286:	2300      	moveq	r3, #0
 8004288:	b2db      	uxtb	r3, r3
 800428a:	2b00      	cmp	r3, #0
 800428c:	d18d      	bne.n	80041aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800428e:	2300      	movs	r3, #0
}
 8004290:	4618      	mov	r0, r3
 8004292:	3710      	adds	r7, #16
 8004294:	46bd      	mov	sp, r7
 8004296:	bd80      	pop	{r7, pc}

08004298 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004298:	b580      	push	{r7, lr}
 800429a:	b084      	sub	sp, #16
 800429c:	af00      	add	r7, sp, #0
 800429e:	60f8      	str	r0, [r7, #12]
 80042a0:	60b9      	str	r1, [r7, #8]
 80042a2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80042a4:	e02d      	b.n	8004302 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80042a6:	68f8      	ldr	r0, [r7, #12]
 80042a8:	f000 f878 	bl	800439c <I2C_IsAcknowledgeFailed>
 80042ac:	4603      	mov	r3, r0
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d001      	beq.n	80042b6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80042b2:	2301      	movs	r3, #1
 80042b4:	e02d      	b.n	8004312 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042b6:	68bb      	ldr	r3, [r7, #8]
 80042b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80042bc:	d021      	beq.n	8004302 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042be:	f7fe faa1 	bl	8002804 <HAL_GetTick>
 80042c2:	4602      	mov	r2, r0
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	1ad3      	subs	r3, r2, r3
 80042c8:	68ba      	ldr	r2, [r7, #8]
 80042ca:	429a      	cmp	r2, r3
 80042cc:	d302      	bcc.n	80042d4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80042ce:	68bb      	ldr	r3, [r7, #8]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d116      	bne.n	8004302 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	2200      	movs	r2, #0
 80042d8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	2220      	movs	r2, #32
 80042de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	2200      	movs	r2, #0
 80042e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ee:	f043 0220 	orr.w	r2, r3, #32
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	2200      	movs	r2, #0
 80042fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80042fe:	2301      	movs	r3, #1
 8004300:	e007      	b.n	8004312 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	695b      	ldr	r3, [r3, #20]
 8004308:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800430c:	2b80      	cmp	r3, #128	; 0x80
 800430e:	d1ca      	bne.n	80042a6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004310:	2300      	movs	r3, #0
}
 8004312:	4618      	mov	r0, r3
 8004314:	3710      	adds	r7, #16
 8004316:	46bd      	mov	sp, r7
 8004318:	bd80      	pop	{r7, pc}

0800431a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800431a:	b580      	push	{r7, lr}
 800431c:	b084      	sub	sp, #16
 800431e:	af00      	add	r7, sp, #0
 8004320:	60f8      	str	r0, [r7, #12]
 8004322:	60b9      	str	r1, [r7, #8]
 8004324:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004326:	e02d      	b.n	8004384 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004328:	68f8      	ldr	r0, [r7, #12]
 800432a:	f000 f837 	bl	800439c <I2C_IsAcknowledgeFailed>
 800432e:	4603      	mov	r3, r0
 8004330:	2b00      	cmp	r3, #0
 8004332:	d001      	beq.n	8004338 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004334:	2301      	movs	r3, #1
 8004336:	e02d      	b.n	8004394 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004338:	68bb      	ldr	r3, [r7, #8]
 800433a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800433e:	d021      	beq.n	8004384 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004340:	f7fe fa60 	bl	8002804 <HAL_GetTick>
 8004344:	4602      	mov	r2, r0
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	1ad3      	subs	r3, r2, r3
 800434a:	68ba      	ldr	r2, [r7, #8]
 800434c:	429a      	cmp	r2, r3
 800434e:	d302      	bcc.n	8004356 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004350:	68bb      	ldr	r3, [r7, #8]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d116      	bne.n	8004384 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	2200      	movs	r2, #0
 800435a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	2220      	movs	r2, #32
 8004360:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	2200      	movs	r2, #0
 8004368:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004370:	f043 0220 	orr.w	r2, r3, #32
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	2200      	movs	r2, #0
 800437c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004380:	2301      	movs	r3, #1
 8004382:	e007      	b.n	8004394 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	695b      	ldr	r3, [r3, #20]
 800438a:	f003 0304 	and.w	r3, r3, #4
 800438e:	2b04      	cmp	r3, #4
 8004390:	d1ca      	bne.n	8004328 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004392:	2300      	movs	r3, #0
}
 8004394:	4618      	mov	r0, r3
 8004396:	3710      	adds	r7, #16
 8004398:	46bd      	mov	sp, r7
 800439a:	bd80      	pop	{r7, pc}

0800439c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800439c:	b480      	push	{r7}
 800439e:	b083      	sub	sp, #12
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	695b      	ldr	r3, [r3, #20]
 80043aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043b2:	d11b      	bne.n	80043ec <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80043bc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	2200      	movs	r2, #0
 80043c2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2220      	movs	r2, #32
 80043c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2200      	movs	r2, #0
 80043d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043d8:	f043 0204 	orr.w	r2, r3, #4
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2200      	movs	r2, #0
 80043e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80043e8:	2301      	movs	r3, #1
 80043ea:	e000      	b.n	80043ee <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80043ec:	2300      	movs	r3, #0
}
 80043ee:	4618      	mov	r0, r3
 80043f0:	370c      	adds	r7, #12
 80043f2:	46bd      	mov	sp, r7
 80043f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f8:	4770      	bx	lr
	...

080043fc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b086      	sub	sp, #24
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2b00      	cmp	r3, #0
 8004408:	d101      	bne.n	800440e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800440a:	2301      	movs	r3, #1
 800440c:	e25b      	b.n	80048c6 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f003 0301 	and.w	r3, r3, #1
 8004416:	2b00      	cmp	r3, #0
 8004418:	d075      	beq.n	8004506 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800441a:	4ba3      	ldr	r3, [pc, #652]	; (80046a8 <HAL_RCC_OscConfig+0x2ac>)
 800441c:	689b      	ldr	r3, [r3, #8]
 800441e:	f003 030c 	and.w	r3, r3, #12
 8004422:	2b04      	cmp	r3, #4
 8004424:	d00c      	beq.n	8004440 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004426:	4ba0      	ldr	r3, [pc, #640]	; (80046a8 <HAL_RCC_OscConfig+0x2ac>)
 8004428:	689b      	ldr	r3, [r3, #8]
 800442a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800442e:	2b08      	cmp	r3, #8
 8004430:	d112      	bne.n	8004458 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004432:	4b9d      	ldr	r3, [pc, #628]	; (80046a8 <HAL_RCC_OscConfig+0x2ac>)
 8004434:	685b      	ldr	r3, [r3, #4]
 8004436:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800443a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800443e:	d10b      	bne.n	8004458 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004440:	4b99      	ldr	r3, [pc, #612]	; (80046a8 <HAL_RCC_OscConfig+0x2ac>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004448:	2b00      	cmp	r3, #0
 800444a:	d05b      	beq.n	8004504 <HAL_RCC_OscConfig+0x108>
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	685b      	ldr	r3, [r3, #4]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d157      	bne.n	8004504 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004454:	2301      	movs	r3, #1
 8004456:	e236      	b.n	80048c6 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	685b      	ldr	r3, [r3, #4]
 800445c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004460:	d106      	bne.n	8004470 <HAL_RCC_OscConfig+0x74>
 8004462:	4b91      	ldr	r3, [pc, #580]	; (80046a8 <HAL_RCC_OscConfig+0x2ac>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	4a90      	ldr	r2, [pc, #576]	; (80046a8 <HAL_RCC_OscConfig+0x2ac>)
 8004468:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800446c:	6013      	str	r3, [r2, #0]
 800446e:	e01d      	b.n	80044ac <HAL_RCC_OscConfig+0xb0>
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	685b      	ldr	r3, [r3, #4]
 8004474:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004478:	d10c      	bne.n	8004494 <HAL_RCC_OscConfig+0x98>
 800447a:	4b8b      	ldr	r3, [pc, #556]	; (80046a8 <HAL_RCC_OscConfig+0x2ac>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	4a8a      	ldr	r2, [pc, #552]	; (80046a8 <HAL_RCC_OscConfig+0x2ac>)
 8004480:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004484:	6013      	str	r3, [r2, #0]
 8004486:	4b88      	ldr	r3, [pc, #544]	; (80046a8 <HAL_RCC_OscConfig+0x2ac>)
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	4a87      	ldr	r2, [pc, #540]	; (80046a8 <HAL_RCC_OscConfig+0x2ac>)
 800448c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004490:	6013      	str	r3, [r2, #0]
 8004492:	e00b      	b.n	80044ac <HAL_RCC_OscConfig+0xb0>
 8004494:	4b84      	ldr	r3, [pc, #528]	; (80046a8 <HAL_RCC_OscConfig+0x2ac>)
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	4a83      	ldr	r2, [pc, #524]	; (80046a8 <HAL_RCC_OscConfig+0x2ac>)
 800449a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800449e:	6013      	str	r3, [r2, #0]
 80044a0:	4b81      	ldr	r3, [pc, #516]	; (80046a8 <HAL_RCC_OscConfig+0x2ac>)
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	4a80      	ldr	r2, [pc, #512]	; (80046a8 <HAL_RCC_OscConfig+0x2ac>)
 80044a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80044aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	685b      	ldr	r3, [r3, #4]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d013      	beq.n	80044dc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044b4:	f7fe f9a6 	bl	8002804 <HAL_GetTick>
 80044b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044ba:	e008      	b.n	80044ce <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80044bc:	f7fe f9a2 	bl	8002804 <HAL_GetTick>
 80044c0:	4602      	mov	r2, r0
 80044c2:	693b      	ldr	r3, [r7, #16]
 80044c4:	1ad3      	subs	r3, r2, r3
 80044c6:	2b64      	cmp	r3, #100	; 0x64
 80044c8:	d901      	bls.n	80044ce <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80044ca:	2303      	movs	r3, #3
 80044cc:	e1fb      	b.n	80048c6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044ce:	4b76      	ldr	r3, [pc, #472]	; (80046a8 <HAL_RCC_OscConfig+0x2ac>)
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d0f0      	beq.n	80044bc <HAL_RCC_OscConfig+0xc0>
 80044da:	e014      	b.n	8004506 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044dc:	f7fe f992 	bl	8002804 <HAL_GetTick>
 80044e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80044e2:	e008      	b.n	80044f6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80044e4:	f7fe f98e 	bl	8002804 <HAL_GetTick>
 80044e8:	4602      	mov	r2, r0
 80044ea:	693b      	ldr	r3, [r7, #16]
 80044ec:	1ad3      	subs	r3, r2, r3
 80044ee:	2b64      	cmp	r3, #100	; 0x64
 80044f0:	d901      	bls.n	80044f6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80044f2:	2303      	movs	r3, #3
 80044f4:	e1e7      	b.n	80048c6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80044f6:	4b6c      	ldr	r3, [pc, #432]	; (80046a8 <HAL_RCC_OscConfig+0x2ac>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d1f0      	bne.n	80044e4 <HAL_RCC_OscConfig+0xe8>
 8004502:	e000      	b.n	8004506 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004504:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f003 0302 	and.w	r3, r3, #2
 800450e:	2b00      	cmp	r3, #0
 8004510:	d063      	beq.n	80045da <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004512:	4b65      	ldr	r3, [pc, #404]	; (80046a8 <HAL_RCC_OscConfig+0x2ac>)
 8004514:	689b      	ldr	r3, [r3, #8]
 8004516:	f003 030c 	and.w	r3, r3, #12
 800451a:	2b00      	cmp	r3, #0
 800451c:	d00b      	beq.n	8004536 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800451e:	4b62      	ldr	r3, [pc, #392]	; (80046a8 <HAL_RCC_OscConfig+0x2ac>)
 8004520:	689b      	ldr	r3, [r3, #8]
 8004522:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004526:	2b08      	cmp	r3, #8
 8004528:	d11c      	bne.n	8004564 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800452a:	4b5f      	ldr	r3, [pc, #380]	; (80046a8 <HAL_RCC_OscConfig+0x2ac>)
 800452c:	685b      	ldr	r3, [r3, #4]
 800452e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004532:	2b00      	cmp	r3, #0
 8004534:	d116      	bne.n	8004564 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004536:	4b5c      	ldr	r3, [pc, #368]	; (80046a8 <HAL_RCC_OscConfig+0x2ac>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f003 0302 	and.w	r3, r3, #2
 800453e:	2b00      	cmp	r3, #0
 8004540:	d005      	beq.n	800454e <HAL_RCC_OscConfig+0x152>
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	68db      	ldr	r3, [r3, #12]
 8004546:	2b01      	cmp	r3, #1
 8004548:	d001      	beq.n	800454e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800454a:	2301      	movs	r3, #1
 800454c:	e1bb      	b.n	80048c6 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800454e:	4b56      	ldr	r3, [pc, #344]	; (80046a8 <HAL_RCC_OscConfig+0x2ac>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	691b      	ldr	r3, [r3, #16]
 800455a:	00db      	lsls	r3, r3, #3
 800455c:	4952      	ldr	r1, [pc, #328]	; (80046a8 <HAL_RCC_OscConfig+0x2ac>)
 800455e:	4313      	orrs	r3, r2
 8004560:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004562:	e03a      	b.n	80045da <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	68db      	ldr	r3, [r3, #12]
 8004568:	2b00      	cmp	r3, #0
 800456a:	d020      	beq.n	80045ae <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800456c:	4b4f      	ldr	r3, [pc, #316]	; (80046ac <HAL_RCC_OscConfig+0x2b0>)
 800456e:	2201      	movs	r2, #1
 8004570:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004572:	f7fe f947 	bl	8002804 <HAL_GetTick>
 8004576:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004578:	e008      	b.n	800458c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800457a:	f7fe f943 	bl	8002804 <HAL_GetTick>
 800457e:	4602      	mov	r2, r0
 8004580:	693b      	ldr	r3, [r7, #16]
 8004582:	1ad3      	subs	r3, r2, r3
 8004584:	2b02      	cmp	r3, #2
 8004586:	d901      	bls.n	800458c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004588:	2303      	movs	r3, #3
 800458a:	e19c      	b.n	80048c6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800458c:	4b46      	ldr	r3, [pc, #280]	; (80046a8 <HAL_RCC_OscConfig+0x2ac>)
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f003 0302 	and.w	r3, r3, #2
 8004594:	2b00      	cmp	r3, #0
 8004596:	d0f0      	beq.n	800457a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004598:	4b43      	ldr	r3, [pc, #268]	; (80046a8 <HAL_RCC_OscConfig+0x2ac>)
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	691b      	ldr	r3, [r3, #16]
 80045a4:	00db      	lsls	r3, r3, #3
 80045a6:	4940      	ldr	r1, [pc, #256]	; (80046a8 <HAL_RCC_OscConfig+0x2ac>)
 80045a8:	4313      	orrs	r3, r2
 80045aa:	600b      	str	r3, [r1, #0]
 80045ac:	e015      	b.n	80045da <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80045ae:	4b3f      	ldr	r3, [pc, #252]	; (80046ac <HAL_RCC_OscConfig+0x2b0>)
 80045b0:	2200      	movs	r2, #0
 80045b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045b4:	f7fe f926 	bl	8002804 <HAL_GetTick>
 80045b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80045ba:	e008      	b.n	80045ce <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80045bc:	f7fe f922 	bl	8002804 <HAL_GetTick>
 80045c0:	4602      	mov	r2, r0
 80045c2:	693b      	ldr	r3, [r7, #16]
 80045c4:	1ad3      	subs	r3, r2, r3
 80045c6:	2b02      	cmp	r3, #2
 80045c8:	d901      	bls.n	80045ce <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80045ca:	2303      	movs	r3, #3
 80045cc:	e17b      	b.n	80048c6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80045ce:	4b36      	ldr	r3, [pc, #216]	; (80046a8 <HAL_RCC_OscConfig+0x2ac>)
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f003 0302 	and.w	r3, r3, #2
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d1f0      	bne.n	80045bc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f003 0308 	and.w	r3, r3, #8
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d030      	beq.n	8004648 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	695b      	ldr	r3, [r3, #20]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d016      	beq.n	800461c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80045ee:	4b30      	ldr	r3, [pc, #192]	; (80046b0 <HAL_RCC_OscConfig+0x2b4>)
 80045f0:	2201      	movs	r2, #1
 80045f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045f4:	f7fe f906 	bl	8002804 <HAL_GetTick>
 80045f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80045fa:	e008      	b.n	800460e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80045fc:	f7fe f902 	bl	8002804 <HAL_GetTick>
 8004600:	4602      	mov	r2, r0
 8004602:	693b      	ldr	r3, [r7, #16]
 8004604:	1ad3      	subs	r3, r2, r3
 8004606:	2b02      	cmp	r3, #2
 8004608:	d901      	bls.n	800460e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800460a:	2303      	movs	r3, #3
 800460c:	e15b      	b.n	80048c6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800460e:	4b26      	ldr	r3, [pc, #152]	; (80046a8 <HAL_RCC_OscConfig+0x2ac>)
 8004610:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004612:	f003 0302 	and.w	r3, r3, #2
 8004616:	2b00      	cmp	r3, #0
 8004618:	d0f0      	beq.n	80045fc <HAL_RCC_OscConfig+0x200>
 800461a:	e015      	b.n	8004648 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800461c:	4b24      	ldr	r3, [pc, #144]	; (80046b0 <HAL_RCC_OscConfig+0x2b4>)
 800461e:	2200      	movs	r2, #0
 8004620:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004622:	f7fe f8ef 	bl	8002804 <HAL_GetTick>
 8004626:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004628:	e008      	b.n	800463c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800462a:	f7fe f8eb 	bl	8002804 <HAL_GetTick>
 800462e:	4602      	mov	r2, r0
 8004630:	693b      	ldr	r3, [r7, #16]
 8004632:	1ad3      	subs	r3, r2, r3
 8004634:	2b02      	cmp	r3, #2
 8004636:	d901      	bls.n	800463c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004638:	2303      	movs	r3, #3
 800463a:	e144      	b.n	80048c6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800463c:	4b1a      	ldr	r3, [pc, #104]	; (80046a8 <HAL_RCC_OscConfig+0x2ac>)
 800463e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004640:	f003 0302 	and.w	r3, r3, #2
 8004644:	2b00      	cmp	r3, #0
 8004646:	d1f0      	bne.n	800462a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f003 0304 	and.w	r3, r3, #4
 8004650:	2b00      	cmp	r3, #0
 8004652:	f000 80a0 	beq.w	8004796 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004656:	2300      	movs	r3, #0
 8004658:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800465a:	4b13      	ldr	r3, [pc, #76]	; (80046a8 <HAL_RCC_OscConfig+0x2ac>)
 800465c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800465e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004662:	2b00      	cmp	r3, #0
 8004664:	d10f      	bne.n	8004686 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004666:	2300      	movs	r3, #0
 8004668:	60bb      	str	r3, [r7, #8]
 800466a:	4b0f      	ldr	r3, [pc, #60]	; (80046a8 <HAL_RCC_OscConfig+0x2ac>)
 800466c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800466e:	4a0e      	ldr	r2, [pc, #56]	; (80046a8 <HAL_RCC_OscConfig+0x2ac>)
 8004670:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004674:	6413      	str	r3, [r2, #64]	; 0x40
 8004676:	4b0c      	ldr	r3, [pc, #48]	; (80046a8 <HAL_RCC_OscConfig+0x2ac>)
 8004678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800467a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800467e:	60bb      	str	r3, [r7, #8]
 8004680:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004682:	2301      	movs	r3, #1
 8004684:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004686:	4b0b      	ldr	r3, [pc, #44]	; (80046b4 <HAL_RCC_OscConfig+0x2b8>)
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800468e:	2b00      	cmp	r3, #0
 8004690:	d121      	bne.n	80046d6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004692:	4b08      	ldr	r3, [pc, #32]	; (80046b4 <HAL_RCC_OscConfig+0x2b8>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	4a07      	ldr	r2, [pc, #28]	; (80046b4 <HAL_RCC_OscConfig+0x2b8>)
 8004698:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800469c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800469e:	f7fe f8b1 	bl	8002804 <HAL_GetTick>
 80046a2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046a4:	e011      	b.n	80046ca <HAL_RCC_OscConfig+0x2ce>
 80046a6:	bf00      	nop
 80046a8:	40023800 	.word	0x40023800
 80046ac:	42470000 	.word	0x42470000
 80046b0:	42470e80 	.word	0x42470e80
 80046b4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046b8:	f7fe f8a4 	bl	8002804 <HAL_GetTick>
 80046bc:	4602      	mov	r2, r0
 80046be:	693b      	ldr	r3, [r7, #16]
 80046c0:	1ad3      	subs	r3, r2, r3
 80046c2:	2b02      	cmp	r3, #2
 80046c4:	d901      	bls.n	80046ca <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80046c6:	2303      	movs	r3, #3
 80046c8:	e0fd      	b.n	80048c6 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046ca:	4b81      	ldr	r3, [pc, #516]	; (80048d0 <HAL_RCC_OscConfig+0x4d4>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d0f0      	beq.n	80046b8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	689b      	ldr	r3, [r3, #8]
 80046da:	2b01      	cmp	r3, #1
 80046dc:	d106      	bne.n	80046ec <HAL_RCC_OscConfig+0x2f0>
 80046de:	4b7d      	ldr	r3, [pc, #500]	; (80048d4 <HAL_RCC_OscConfig+0x4d8>)
 80046e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046e2:	4a7c      	ldr	r2, [pc, #496]	; (80048d4 <HAL_RCC_OscConfig+0x4d8>)
 80046e4:	f043 0301 	orr.w	r3, r3, #1
 80046e8:	6713      	str	r3, [r2, #112]	; 0x70
 80046ea:	e01c      	b.n	8004726 <HAL_RCC_OscConfig+0x32a>
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	689b      	ldr	r3, [r3, #8]
 80046f0:	2b05      	cmp	r3, #5
 80046f2:	d10c      	bne.n	800470e <HAL_RCC_OscConfig+0x312>
 80046f4:	4b77      	ldr	r3, [pc, #476]	; (80048d4 <HAL_RCC_OscConfig+0x4d8>)
 80046f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046f8:	4a76      	ldr	r2, [pc, #472]	; (80048d4 <HAL_RCC_OscConfig+0x4d8>)
 80046fa:	f043 0304 	orr.w	r3, r3, #4
 80046fe:	6713      	str	r3, [r2, #112]	; 0x70
 8004700:	4b74      	ldr	r3, [pc, #464]	; (80048d4 <HAL_RCC_OscConfig+0x4d8>)
 8004702:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004704:	4a73      	ldr	r2, [pc, #460]	; (80048d4 <HAL_RCC_OscConfig+0x4d8>)
 8004706:	f043 0301 	orr.w	r3, r3, #1
 800470a:	6713      	str	r3, [r2, #112]	; 0x70
 800470c:	e00b      	b.n	8004726 <HAL_RCC_OscConfig+0x32a>
 800470e:	4b71      	ldr	r3, [pc, #452]	; (80048d4 <HAL_RCC_OscConfig+0x4d8>)
 8004710:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004712:	4a70      	ldr	r2, [pc, #448]	; (80048d4 <HAL_RCC_OscConfig+0x4d8>)
 8004714:	f023 0301 	bic.w	r3, r3, #1
 8004718:	6713      	str	r3, [r2, #112]	; 0x70
 800471a:	4b6e      	ldr	r3, [pc, #440]	; (80048d4 <HAL_RCC_OscConfig+0x4d8>)
 800471c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800471e:	4a6d      	ldr	r2, [pc, #436]	; (80048d4 <HAL_RCC_OscConfig+0x4d8>)
 8004720:	f023 0304 	bic.w	r3, r3, #4
 8004724:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	689b      	ldr	r3, [r3, #8]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d015      	beq.n	800475a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800472e:	f7fe f869 	bl	8002804 <HAL_GetTick>
 8004732:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004734:	e00a      	b.n	800474c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004736:	f7fe f865 	bl	8002804 <HAL_GetTick>
 800473a:	4602      	mov	r2, r0
 800473c:	693b      	ldr	r3, [r7, #16]
 800473e:	1ad3      	subs	r3, r2, r3
 8004740:	f241 3288 	movw	r2, #5000	; 0x1388
 8004744:	4293      	cmp	r3, r2
 8004746:	d901      	bls.n	800474c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004748:	2303      	movs	r3, #3
 800474a:	e0bc      	b.n	80048c6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800474c:	4b61      	ldr	r3, [pc, #388]	; (80048d4 <HAL_RCC_OscConfig+0x4d8>)
 800474e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004750:	f003 0302 	and.w	r3, r3, #2
 8004754:	2b00      	cmp	r3, #0
 8004756:	d0ee      	beq.n	8004736 <HAL_RCC_OscConfig+0x33a>
 8004758:	e014      	b.n	8004784 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800475a:	f7fe f853 	bl	8002804 <HAL_GetTick>
 800475e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004760:	e00a      	b.n	8004778 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004762:	f7fe f84f 	bl	8002804 <HAL_GetTick>
 8004766:	4602      	mov	r2, r0
 8004768:	693b      	ldr	r3, [r7, #16]
 800476a:	1ad3      	subs	r3, r2, r3
 800476c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004770:	4293      	cmp	r3, r2
 8004772:	d901      	bls.n	8004778 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004774:	2303      	movs	r3, #3
 8004776:	e0a6      	b.n	80048c6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004778:	4b56      	ldr	r3, [pc, #344]	; (80048d4 <HAL_RCC_OscConfig+0x4d8>)
 800477a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800477c:	f003 0302 	and.w	r3, r3, #2
 8004780:	2b00      	cmp	r3, #0
 8004782:	d1ee      	bne.n	8004762 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004784:	7dfb      	ldrb	r3, [r7, #23]
 8004786:	2b01      	cmp	r3, #1
 8004788:	d105      	bne.n	8004796 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800478a:	4b52      	ldr	r3, [pc, #328]	; (80048d4 <HAL_RCC_OscConfig+0x4d8>)
 800478c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800478e:	4a51      	ldr	r2, [pc, #324]	; (80048d4 <HAL_RCC_OscConfig+0x4d8>)
 8004790:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004794:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	699b      	ldr	r3, [r3, #24]
 800479a:	2b00      	cmp	r3, #0
 800479c:	f000 8092 	beq.w	80048c4 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80047a0:	4b4c      	ldr	r3, [pc, #304]	; (80048d4 <HAL_RCC_OscConfig+0x4d8>)
 80047a2:	689b      	ldr	r3, [r3, #8]
 80047a4:	f003 030c 	and.w	r3, r3, #12
 80047a8:	2b08      	cmp	r3, #8
 80047aa:	d05c      	beq.n	8004866 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	699b      	ldr	r3, [r3, #24]
 80047b0:	2b02      	cmp	r3, #2
 80047b2:	d141      	bne.n	8004838 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047b4:	4b48      	ldr	r3, [pc, #288]	; (80048d8 <HAL_RCC_OscConfig+0x4dc>)
 80047b6:	2200      	movs	r2, #0
 80047b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047ba:	f7fe f823 	bl	8002804 <HAL_GetTick>
 80047be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047c0:	e008      	b.n	80047d4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80047c2:	f7fe f81f 	bl	8002804 <HAL_GetTick>
 80047c6:	4602      	mov	r2, r0
 80047c8:	693b      	ldr	r3, [r7, #16]
 80047ca:	1ad3      	subs	r3, r2, r3
 80047cc:	2b02      	cmp	r3, #2
 80047ce:	d901      	bls.n	80047d4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80047d0:	2303      	movs	r3, #3
 80047d2:	e078      	b.n	80048c6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047d4:	4b3f      	ldr	r3, [pc, #252]	; (80048d4 <HAL_RCC_OscConfig+0x4d8>)
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d1f0      	bne.n	80047c2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	69da      	ldr	r2, [r3, #28]
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6a1b      	ldr	r3, [r3, #32]
 80047e8:	431a      	orrs	r2, r3
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ee:	019b      	lsls	r3, r3, #6
 80047f0:	431a      	orrs	r2, r3
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047f6:	085b      	lsrs	r3, r3, #1
 80047f8:	3b01      	subs	r3, #1
 80047fa:	041b      	lsls	r3, r3, #16
 80047fc:	431a      	orrs	r2, r3
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004802:	061b      	lsls	r3, r3, #24
 8004804:	4933      	ldr	r1, [pc, #204]	; (80048d4 <HAL_RCC_OscConfig+0x4d8>)
 8004806:	4313      	orrs	r3, r2
 8004808:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800480a:	4b33      	ldr	r3, [pc, #204]	; (80048d8 <HAL_RCC_OscConfig+0x4dc>)
 800480c:	2201      	movs	r2, #1
 800480e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004810:	f7fd fff8 	bl	8002804 <HAL_GetTick>
 8004814:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004816:	e008      	b.n	800482a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004818:	f7fd fff4 	bl	8002804 <HAL_GetTick>
 800481c:	4602      	mov	r2, r0
 800481e:	693b      	ldr	r3, [r7, #16]
 8004820:	1ad3      	subs	r3, r2, r3
 8004822:	2b02      	cmp	r3, #2
 8004824:	d901      	bls.n	800482a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004826:	2303      	movs	r3, #3
 8004828:	e04d      	b.n	80048c6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800482a:	4b2a      	ldr	r3, [pc, #168]	; (80048d4 <HAL_RCC_OscConfig+0x4d8>)
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004832:	2b00      	cmp	r3, #0
 8004834:	d0f0      	beq.n	8004818 <HAL_RCC_OscConfig+0x41c>
 8004836:	e045      	b.n	80048c4 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004838:	4b27      	ldr	r3, [pc, #156]	; (80048d8 <HAL_RCC_OscConfig+0x4dc>)
 800483a:	2200      	movs	r2, #0
 800483c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800483e:	f7fd ffe1 	bl	8002804 <HAL_GetTick>
 8004842:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004844:	e008      	b.n	8004858 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004846:	f7fd ffdd 	bl	8002804 <HAL_GetTick>
 800484a:	4602      	mov	r2, r0
 800484c:	693b      	ldr	r3, [r7, #16]
 800484e:	1ad3      	subs	r3, r2, r3
 8004850:	2b02      	cmp	r3, #2
 8004852:	d901      	bls.n	8004858 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004854:	2303      	movs	r3, #3
 8004856:	e036      	b.n	80048c6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004858:	4b1e      	ldr	r3, [pc, #120]	; (80048d4 <HAL_RCC_OscConfig+0x4d8>)
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004860:	2b00      	cmp	r3, #0
 8004862:	d1f0      	bne.n	8004846 <HAL_RCC_OscConfig+0x44a>
 8004864:	e02e      	b.n	80048c4 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	699b      	ldr	r3, [r3, #24]
 800486a:	2b01      	cmp	r3, #1
 800486c:	d101      	bne.n	8004872 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800486e:	2301      	movs	r3, #1
 8004870:	e029      	b.n	80048c6 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004872:	4b18      	ldr	r3, [pc, #96]	; (80048d4 <HAL_RCC_OscConfig+0x4d8>)
 8004874:	685b      	ldr	r3, [r3, #4]
 8004876:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	69db      	ldr	r3, [r3, #28]
 8004882:	429a      	cmp	r2, r3
 8004884:	d11c      	bne.n	80048c0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004890:	429a      	cmp	r2, r3
 8004892:	d115      	bne.n	80048c0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004894:	68fa      	ldr	r2, [r7, #12]
 8004896:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800489a:	4013      	ands	r3, r2
 800489c:	687a      	ldr	r2, [r7, #4]
 800489e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80048a0:	4293      	cmp	r3, r2
 80048a2:	d10d      	bne.n	80048c0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80048ae:	429a      	cmp	r2, r3
 80048b0:	d106      	bne.n	80048c0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80048bc:	429a      	cmp	r2, r3
 80048be:	d001      	beq.n	80048c4 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80048c0:	2301      	movs	r3, #1
 80048c2:	e000      	b.n	80048c6 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80048c4:	2300      	movs	r3, #0
}
 80048c6:	4618      	mov	r0, r3
 80048c8:	3718      	adds	r7, #24
 80048ca:	46bd      	mov	sp, r7
 80048cc:	bd80      	pop	{r7, pc}
 80048ce:	bf00      	nop
 80048d0:	40007000 	.word	0x40007000
 80048d4:	40023800 	.word	0x40023800
 80048d8:	42470060 	.word	0x42470060

080048dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80048dc:	b580      	push	{r7, lr}
 80048de:	b084      	sub	sp, #16
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
 80048e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d101      	bne.n	80048f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80048ec:	2301      	movs	r3, #1
 80048ee:	e0cc      	b.n	8004a8a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80048f0:	4b68      	ldr	r3, [pc, #416]	; (8004a94 <HAL_RCC_ClockConfig+0x1b8>)
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f003 030f 	and.w	r3, r3, #15
 80048f8:	683a      	ldr	r2, [r7, #0]
 80048fa:	429a      	cmp	r2, r3
 80048fc:	d90c      	bls.n	8004918 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048fe:	4b65      	ldr	r3, [pc, #404]	; (8004a94 <HAL_RCC_ClockConfig+0x1b8>)
 8004900:	683a      	ldr	r2, [r7, #0]
 8004902:	b2d2      	uxtb	r2, r2
 8004904:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004906:	4b63      	ldr	r3, [pc, #396]	; (8004a94 <HAL_RCC_ClockConfig+0x1b8>)
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f003 030f 	and.w	r3, r3, #15
 800490e:	683a      	ldr	r2, [r7, #0]
 8004910:	429a      	cmp	r2, r3
 8004912:	d001      	beq.n	8004918 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004914:	2301      	movs	r3, #1
 8004916:	e0b8      	b.n	8004a8a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f003 0302 	and.w	r3, r3, #2
 8004920:	2b00      	cmp	r3, #0
 8004922:	d020      	beq.n	8004966 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f003 0304 	and.w	r3, r3, #4
 800492c:	2b00      	cmp	r3, #0
 800492e:	d005      	beq.n	800493c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004930:	4b59      	ldr	r3, [pc, #356]	; (8004a98 <HAL_RCC_ClockConfig+0x1bc>)
 8004932:	689b      	ldr	r3, [r3, #8]
 8004934:	4a58      	ldr	r2, [pc, #352]	; (8004a98 <HAL_RCC_ClockConfig+0x1bc>)
 8004936:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800493a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f003 0308 	and.w	r3, r3, #8
 8004944:	2b00      	cmp	r3, #0
 8004946:	d005      	beq.n	8004954 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004948:	4b53      	ldr	r3, [pc, #332]	; (8004a98 <HAL_RCC_ClockConfig+0x1bc>)
 800494a:	689b      	ldr	r3, [r3, #8]
 800494c:	4a52      	ldr	r2, [pc, #328]	; (8004a98 <HAL_RCC_ClockConfig+0x1bc>)
 800494e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004952:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004954:	4b50      	ldr	r3, [pc, #320]	; (8004a98 <HAL_RCC_ClockConfig+0x1bc>)
 8004956:	689b      	ldr	r3, [r3, #8]
 8004958:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	689b      	ldr	r3, [r3, #8]
 8004960:	494d      	ldr	r1, [pc, #308]	; (8004a98 <HAL_RCC_ClockConfig+0x1bc>)
 8004962:	4313      	orrs	r3, r2
 8004964:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f003 0301 	and.w	r3, r3, #1
 800496e:	2b00      	cmp	r3, #0
 8004970:	d044      	beq.n	80049fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	685b      	ldr	r3, [r3, #4]
 8004976:	2b01      	cmp	r3, #1
 8004978:	d107      	bne.n	800498a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800497a:	4b47      	ldr	r3, [pc, #284]	; (8004a98 <HAL_RCC_ClockConfig+0x1bc>)
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004982:	2b00      	cmp	r3, #0
 8004984:	d119      	bne.n	80049ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004986:	2301      	movs	r3, #1
 8004988:	e07f      	b.n	8004a8a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	685b      	ldr	r3, [r3, #4]
 800498e:	2b02      	cmp	r3, #2
 8004990:	d003      	beq.n	800499a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004996:	2b03      	cmp	r3, #3
 8004998:	d107      	bne.n	80049aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800499a:	4b3f      	ldr	r3, [pc, #252]	; (8004a98 <HAL_RCC_ClockConfig+0x1bc>)
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d109      	bne.n	80049ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80049a6:	2301      	movs	r3, #1
 80049a8:	e06f      	b.n	8004a8a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049aa:	4b3b      	ldr	r3, [pc, #236]	; (8004a98 <HAL_RCC_ClockConfig+0x1bc>)
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f003 0302 	and.w	r3, r3, #2
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d101      	bne.n	80049ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80049b6:	2301      	movs	r3, #1
 80049b8:	e067      	b.n	8004a8a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80049ba:	4b37      	ldr	r3, [pc, #220]	; (8004a98 <HAL_RCC_ClockConfig+0x1bc>)
 80049bc:	689b      	ldr	r3, [r3, #8]
 80049be:	f023 0203 	bic.w	r2, r3, #3
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	685b      	ldr	r3, [r3, #4]
 80049c6:	4934      	ldr	r1, [pc, #208]	; (8004a98 <HAL_RCC_ClockConfig+0x1bc>)
 80049c8:	4313      	orrs	r3, r2
 80049ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80049cc:	f7fd ff1a 	bl	8002804 <HAL_GetTick>
 80049d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049d2:	e00a      	b.n	80049ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80049d4:	f7fd ff16 	bl	8002804 <HAL_GetTick>
 80049d8:	4602      	mov	r2, r0
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	1ad3      	subs	r3, r2, r3
 80049de:	f241 3288 	movw	r2, #5000	; 0x1388
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d901      	bls.n	80049ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80049e6:	2303      	movs	r3, #3
 80049e8:	e04f      	b.n	8004a8a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049ea:	4b2b      	ldr	r3, [pc, #172]	; (8004a98 <HAL_RCC_ClockConfig+0x1bc>)
 80049ec:	689b      	ldr	r3, [r3, #8]
 80049ee:	f003 020c 	and.w	r2, r3, #12
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	685b      	ldr	r3, [r3, #4]
 80049f6:	009b      	lsls	r3, r3, #2
 80049f8:	429a      	cmp	r2, r3
 80049fa:	d1eb      	bne.n	80049d4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80049fc:	4b25      	ldr	r3, [pc, #148]	; (8004a94 <HAL_RCC_ClockConfig+0x1b8>)
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f003 030f 	and.w	r3, r3, #15
 8004a04:	683a      	ldr	r2, [r7, #0]
 8004a06:	429a      	cmp	r2, r3
 8004a08:	d20c      	bcs.n	8004a24 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a0a:	4b22      	ldr	r3, [pc, #136]	; (8004a94 <HAL_RCC_ClockConfig+0x1b8>)
 8004a0c:	683a      	ldr	r2, [r7, #0]
 8004a0e:	b2d2      	uxtb	r2, r2
 8004a10:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a12:	4b20      	ldr	r3, [pc, #128]	; (8004a94 <HAL_RCC_ClockConfig+0x1b8>)
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f003 030f 	and.w	r3, r3, #15
 8004a1a:	683a      	ldr	r2, [r7, #0]
 8004a1c:	429a      	cmp	r2, r3
 8004a1e:	d001      	beq.n	8004a24 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004a20:	2301      	movs	r3, #1
 8004a22:	e032      	b.n	8004a8a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f003 0304 	and.w	r3, r3, #4
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d008      	beq.n	8004a42 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004a30:	4b19      	ldr	r3, [pc, #100]	; (8004a98 <HAL_RCC_ClockConfig+0x1bc>)
 8004a32:	689b      	ldr	r3, [r3, #8]
 8004a34:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	68db      	ldr	r3, [r3, #12]
 8004a3c:	4916      	ldr	r1, [pc, #88]	; (8004a98 <HAL_RCC_ClockConfig+0x1bc>)
 8004a3e:	4313      	orrs	r3, r2
 8004a40:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f003 0308 	and.w	r3, r3, #8
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d009      	beq.n	8004a62 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004a4e:	4b12      	ldr	r3, [pc, #72]	; (8004a98 <HAL_RCC_ClockConfig+0x1bc>)
 8004a50:	689b      	ldr	r3, [r3, #8]
 8004a52:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	691b      	ldr	r3, [r3, #16]
 8004a5a:	00db      	lsls	r3, r3, #3
 8004a5c:	490e      	ldr	r1, [pc, #56]	; (8004a98 <HAL_RCC_ClockConfig+0x1bc>)
 8004a5e:	4313      	orrs	r3, r2
 8004a60:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004a62:	f000 f821 	bl	8004aa8 <HAL_RCC_GetSysClockFreq>
 8004a66:	4601      	mov	r1, r0
 8004a68:	4b0b      	ldr	r3, [pc, #44]	; (8004a98 <HAL_RCC_ClockConfig+0x1bc>)
 8004a6a:	689b      	ldr	r3, [r3, #8]
 8004a6c:	091b      	lsrs	r3, r3, #4
 8004a6e:	f003 030f 	and.w	r3, r3, #15
 8004a72:	4a0a      	ldr	r2, [pc, #40]	; (8004a9c <HAL_RCC_ClockConfig+0x1c0>)
 8004a74:	5cd3      	ldrb	r3, [r2, r3]
 8004a76:	fa21 f303 	lsr.w	r3, r1, r3
 8004a7a:	4a09      	ldr	r2, [pc, #36]	; (8004aa0 <HAL_RCC_ClockConfig+0x1c4>)
 8004a7c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004a7e:	4b09      	ldr	r3, [pc, #36]	; (8004aa4 <HAL_RCC_ClockConfig+0x1c8>)
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	4618      	mov	r0, r3
 8004a84:	f7fd fe7a 	bl	800277c <HAL_InitTick>

  return HAL_OK;
 8004a88:	2300      	movs	r3, #0
}
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	3710      	adds	r7, #16
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	bd80      	pop	{r7, pc}
 8004a92:	bf00      	nop
 8004a94:	40023c00 	.word	0x40023c00
 8004a98:	40023800 	.word	0x40023800
 8004a9c:	08008150 	.word	0x08008150
 8004aa0:	20000008 	.word	0x20000008
 8004aa4:	2000000c 	.word	0x2000000c

08004aa8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004aa8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004aaa:	b085      	sub	sp, #20
 8004aac:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004aae:	2300      	movs	r3, #0
 8004ab0:	607b      	str	r3, [r7, #4]
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	60fb      	str	r3, [r7, #12]
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004aba:	2300      	movs	r3, #0
 8004abc:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004abe:	4b50      	ldr	r3, [pc, #320]	; (8004c00 <HAL_RCC_GetSysClockFreq+0x158>)
 8004ac0:	689b      	ldr	r3, [r3, #8]
 8004ac2:	f003 030c 	and.w	r3, r3, #12
 8004ac6:	2b04      	cmp	r3, #4
 8004ac8:	d007      	beq.n	8004ada <HAL_RCC_GetSysClockFreq+0x32>
 8004aca:	2b08      	cmp	r3, #8
 8004acc:	d008      	beq.n	8004ae0 <HAL_RCC_GetSysClockFreq+0x38>
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	f040 808d 	bne.w	8004bee <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004ad4:	4b4b      	ldr	r3, [pc, #300]	; (8004c04 <HAL_RCC_GetSysClockFreq+0x15c>)
 8004ad6:	60bb      	str	r3, [r7, #8]
       break;
 8004ad8:	e08c      	b.n	8004bf4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004ada:	4b4b      	ldr	r3, [pc, #300]	; (8004c08 <HAL_RCC_GetSysClockFreq+0x160>)
 8004adc:	60bb      	str	r3, [r7, #8]
      break;
 8004ade:	e089      	b.n	8004bf4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004ae0:	4b47      	ldr	r3, [pc, #284]	; (8004c00 <HAL_RCC_GetSysClockFreq+0x158>)
 8004ae2:	685b      	ldr	r3, [r3, #4]
 8004ae4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004ae8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004aea:	4b45      	ldr	r3, [pc, #276]	; (8004c00 <HAL_RCC_GetSysClockFreq+0x158>)
 8004aec:	685b      	ldr	r3, [r3, #4]
 8004aee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d023      	beq.n	8004b3e <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004af6:	4b42      	ldr	r3, [pc, #264]	; (8004c00 <HAL_RCC_GetSysClockFreq+0x158>)
 8004af8:	685b      	ldr	r3, [r3, #4]
 8004afa:	099b      	lsrs	r3, r3, #6
 8004afc:	f04f 0400 	mov.w	r4, #0
 8004b00:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004b04:	f04f 0200 	mov.w	r2, #0
 8004b08:	ea03 0501 	and.w	r5, r3, r1
 8004b0c:	ea04 0602 	and.w	r6, r4, r2
 8004b10:	4a3d      	ldr	r2, [pc, #244]	; (8004c08 <HAL_RCC_GetSysClockFreq+0x160>)
 8004b12:	fb02 f106 	mul.w	r1, r2, r6
 8004b16:	2200      	movs	r2, #0
 8004b18:	fb02 f205 	mul.w	r2, r2, r5
 8004b1c:	440a      	add	r2, r1
 8004b1e:	493a      	ldr	r1, [pc, #232]	; (8004c08 <HAL_RCC_GetSysClockFreq+0x160>)
 8004b20:	fba5 0101 	umull	r0, r1, r5, r1
 8004b24:	1853      	adds	r3, r2, r1
 8004b26:	4619      	mov	r1, r3
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	f04f 0400 	mov.w	r4, #0
 8004b2e:	461a      	mov	r2, r3
 8004b30:	4623      	mov	r3, r4
 8004b32:	f7fc f841 	bl	8000bb8 <__aeabi_uldivmod>
 8004b36:	4603      	mov	r3, r0
 8004b38:	460c      	mov	r4, r1
 8004b3a:	60fb      	str	r3, [r7, #12]
 8004b3c:	e049      	b.n	8004bd2 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b3e:	4b30      	ldr	r3, [pc, #192]	; (8004c00 <HAL_RCC_GetSysClockFreq+0x158>)
 8004b40:	685b      	ldr	r3, [r3, #4]
 8004b42:	099b      	lsrs	r3, r3, #6
 8004b44:	f04f 0400 	mov.w	r4, #0
 8004b48:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004b4c:	f04f 0200 	mov.w	r2, #0
 8004b50:	ea03 0501 	and.w	r5, r3, r1
 8004b54:	ea04 0602 	and.w	r6, r4, r2
 8004b58:	4629      	mov	r1, r5
 8004b5a:	4632      	mov	r2, r6
 8004b5c:	f04f 0300 	mov.w	r3, #0
 8004b60:	f04f 0400 	mov.w	r4, #0
 8004b64:	0154      	lsls	r4, r2, #5
 8004b66:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004b6a:	014b      	lsls	r3, r1, #5
 8004b6c:	4619      	mov	r1, r3
 8004b6e:	4622      	mov	r2, r4
 8004b70:	1b49      	subs	r1, r1, r5
 8004b72:	eb62 0206 	sbc.w	r2, r2, r6
 8004b76:	f04f 0300 	mov.w	r3, #0
 8004b7a:	f04f 0400 	mov.w	r4, #0
 8004b7e:	0194      	lsls	r4, r2, #6
 8004b80:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004b84:	018b      	lsls	r3, r1, #6
 8004b86:	1a5b      	subs	r3, r3, r1
 8004b88:	eb64 0402 	sbc.w	r4, r4, r2
 8004b8c:	f04f 0100 	mov.w	r1, #0
 8004b90:	f04f 0200 	mov.w	r2, #0
 8004b94:	00e2      	lsls	r2, r4, #3
 8004b96:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004b9a:	00d9      	lsls	r1, r3, #3
 8004b9c:	460b      	mov	r3, r1
 8004b9e:	4614      	mov	r4, r2
 8004ba0:	195b      	adds	r3, r3, r5
 8004ba2:	eb44 0406 	adc.w	r4, r4, r6
 8004ba6:	f04f 0100 	mov.w	r1, #0
 8004baa:	f04f 0200 	mov.w	r2, #0
 8004bae:	02a2      	lsls	r2, r4, #10
 8004bb0:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004bb4:	0299      	lsls	r1, r3, #10
 8004bb6:	460b      	mov	r3, r1
 8004bb8:	4614      	mov	r4, r2
 8004bba:	4618      	mov	r0, r3
 8004bbc:	4621      	mov	r1, r4
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	f04f 0400 	mov.w	r4, #0
 8004bc4:	461a      	mov	r2, r3
 8004bc6:	4623      	mov	r3, r4
 8004bc8:	f7fb fff6 	bl	8000bb8 <__aeabi_uldivmod>
 8004bcc:	4603      	mov	r3, r0
 8004bce:	460c      	mov	r4, r1
 8004bd0:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004bd2:	4b0b      	ldr	r3, [pc, #44]	; (8004c00 <HAL_RCC_GetSysClockFreq+0x158>)
 8004bd4:	685b      	ldr	r3, [r3, #4]
 8004bd6:	0c1b      	lsrs	r3, r3, #16
 8004bd8:	f003 0303 	and.w	r3, r3, #3
 8004bdc:	3301      	adds	r3, #1
 8004bde:	005b      	lsls	r3, r3, #1
 8004be0:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004be2:	68fa      	ldr	r2, [r7, #12]
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bea:	60bb      	str	r3, [r7, #8]
      break;
 8004bec:	e002      	b.n	8004bf4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004bee:	4b05      	ldr	r3, [pc, #20]	; (8004c04 <HAL_RCC_GetSysClockFreq+0x15c>)
 8004bf0:	60bb      	str	r3, [r7, #8]
      break;
 8004bf2:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004bf4:	68bb      	ldr	r3, [r7, #8]
}
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	3714      	adds	r7, #20
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004bfe:	bf00      	nop
 8004c00:	40023800 	.word	0x40023800
 8004c04:	00f42400 	.word	0x00f42400
 8004c08:	017d7840 	.word	0x017d7840

08004c0c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c0c:	b480      	push	{r7}
 8004c0e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004c10:	4b03      	ldr	r3, [pc, #12]	; (8004c20 <HAL_RCC_GetHCLKFreq+0x14>)
 8004c12:	681b      	ldr	r3, [r3, #0]
}
 8004c14:	4618      	mov	r0, r3
 8004c16:	46bd      	mov	sp, r7
 8004c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1c:	4770      	bx	lr
 8004c1e:	bf00      	nop
 8004c20:	20000008 	.word	0x20000008

08004c24 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004c28:	f7ff fff0 	bl	8004c0c <HAL_RCC_GetHCLKFreq>
 8004c2c:	4601      	mov	r1, r0
 8004c2e:	4b05      	ldr	r3, [pc, #20]	; (8004c44 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004c30:	689b      	ldr	r3, [r3, #8]
 8004c32:	0a9b      	lsrs	r3, r3, #10
 8004c34:	f003 0307 	and.w	r3, r3, #7
 8004c38:	4a03      	ldr	r2, [pc, #12]	; (8004c48 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004c3a:	5cd3      	ldrb	r3, [r2, r3]
 8004c3c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004c40:	4618      	mov	r0, r3
 8004c42:	bd80      	pop	{r7, pc}
 8004c44:	40023800 	.word	0x40023800
 8004c48:	08008160 	.word	0x08008160

08004c4c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004c50:	f7ff ffdc 	bl	8004c0c <HAL_RCC_GetHCLKFreq>
 8004c54:	4601      	mov	r1, r0
 8004c56:	4b05      	ldr	r3, [pc, #20]	; (8004c6c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004c58:	689b      	ldr	r3, [r3, #8]
 8004c5a:	0b5b      	lsrs	r3, r3, #13
 8004c5c:	f003 0307 	and.w	r3, r3, #7
 8004c60:	4a03      	ldr	r2, [pc, #12]	; (8004c70 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004c62:	5cd3      	ldrb	r3, [r2, r3]
 8004c64:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004c68:	4618      	mov	r0, r3
 8004c6a:	bd80      	pop	{r7, pc}
 8004c6c:	40023800 	.word	0x40023800
 8004c70:	08008160 	.word	0x08008160

08004c74 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b082      	sub	sp, #8
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d101      	bne.n	8004c86 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004c82:	2301      	movs	r3, #1
 8004c84:	e03f      	b.n	8004d06 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004c8c:	b2db      	uxtb	r3, r3
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d106      	bne.n	8004ca0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2200      	movs	r2, #0
 8004c96:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004c9a:	6878      	ldr	r0, [r7, #4]
 8004c9c:	f7fd fc5c 	bl	8002558 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2224      	movs	r2, #36	; 0x24
 8004ca4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	68da      	ldr	r2, [r3, #12]
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004cb6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004cb8:	6878      	ldr	r0, [r7, #4]
 8004cba:	f000 f90b 	bl	8004ed4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	691a      	ldr	r2, [r3, #16]
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004ccc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	695a      	ldr	r2, [r3, #20]
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004cdc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	68da      	ldr	r2, [r3, #12]
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004cec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2220      	movs	r2, #32
 8004cf8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2220      	movs	r2, #32
 8004d00:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004d04:	2300      	movs	r3, #0
}
 8004d06:	4618      	mov	r0, r3
 8004d08:	3708      	adds	r7, #8
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	bd80      	pop	{r7, pc}

08004d0e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d0e:	b580      	push	{r7, lr}
 8004d10:	b088      	sub	sp, #32
 8004d12:	af02      	add	r7, sp, #8
 8004d14:	60f8      	str	r0, [r7, #12]
 8004d16:	60b9      	str	r1, [r7, #8]
 8004d18:	603b      	str	r3, [r7, #0]
 8004d1a:	4613      	mov	r3, r2
 8004d1c:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8004d1e:	2300      	movs	r3, #0
 8004d20:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004d28:	b2db      	uxtb	r3, r3
 8004d2a:	2b20      	cmp	r3, #32
 8004d2c:	f040 8083 	bne.w	8004e36 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d30:	68bb      	ldr	r3, [r7, #8]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d002      	beq.n	8004d3c <HAL_UART_Transmit+0x2e>
 8004d36:	88fb      	ldrh	r3, [r7, #6]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d101      	bne.n	8004d40 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8004d3c:	2301      	movs	r3, #1
 8004d3e:	e07b      	b.n	8004e38 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004d46:	2b01      	cmp	r3, #1
 8004d48:	d101      	bne.n	8004d4e <HAL_UART_Transmit+0x40>
 8004d4a:	2302      	movs	r3, #2
 8004d4c:	e074      	b.n	8004e38 <HAL_UART_Transmit+0x12a>
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	2201      	movs	r2, #1
 8004d52:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	2200      	movs	r2, #0
 8004d5a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	2221      	movs	r2, #33	; 0x21
 8004d60:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8004d64:	f7fd fd4e 	bl	8002804 <HAL_GetTick>
 8004d68:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	88fa      	ldrh	r2, [r7, #6]
 8004d6e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	88fa      	ldrh	r2, [r7, #6]
 8004d74:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	2200      	movs	r2, #0
 8004d7a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8004d7e:	e042      	b.n	8004e06 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004d84:	b29b      	uxth	r3, r3
 8004d86:	3b01      	subs	r3, #1
 8004d88:	b29a      	uxth	r2, r3
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	689b      	ldr	r3, [r3, #8]
 8004d92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d96:	d122      	bne.n	8004dde <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	9300      	str	r3, [sp, #0]
 8004d9c:	697b      	ldr	r3, [r7, #20]
 8004d9e:	2200      	movs	r2, #0
 8004da0:	2180      	movs	r1, #128	; 0x80
 8004da2:	68f8      	ldr	r0, [r7, #12]
 8004da4:	f000 f84c 	bl	8004e40 <UART_WaitOnFlagUntilTimeout>
 8004da8:	4603      	mov	r3, r0
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d001      	beq.n	8004db2 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8004dae:	2303      	movs	r3, #3
 8004db0:	e042      	b.n	8004e38 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8004db2:	68bb      	ldr	r3, [r7, #8]
 8004db4:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8004db6:	693b      	ldr	r3, [r7, #16]
 8004db8:	881b      	ldrh	r3, [r3, #0]
 8004dba:	461a      	mov	r2, r3
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004dc4:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	691b      	ldr	r3, [r3, #16]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d103      	bne.n	8004dd6 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8004dce:	68bb      	ldr	r3, [r7, #8]
 8004dd0:	3302      	adds	r3, #2
 8004dd2:	60bb      	str	r3, [r7, #8]
 8004dd4:	e017      	b.n	8004e06 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8004dd6:	68bb      	ldr	r3, [r7, #8]
 8004dd8:	3301      	adds	r3, #1
 8004dda:	60bb      	str	r3, [r7, #8]
 8004ddc:	e013      	b.n	8004e06 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	9300      	str	r3, [sp, #0]
 8004de2:	697b      	ldr	r3, [r7, #20]
 8004de4:	2200      	movs	r2, #0
 8004de6:	2180      	movs	r1, #128	; 0x80
 8004de8:	68f8      	ldr	r0, [r7, #12]
 8004dea:	f000 f829 	bl	8004e40 <UART_WaitOnFlagUntilTimeout>
 8004dee:	4603      	mov	r3, r0
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d001      	beq.n	8004df8 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8004df4:	2303      	movs	r3, #3
 8004df6:	e01f      	b.n	8004e38 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8004df8:	68bb      	ldr	r3, [r7, #8]
 8004dfa:	1c5a      	adds	r2, r3, #1
 8004dfc:	60ba      	str	r2, [r7, #8]
 8004dfe:	781a      	ldrb	r2, [r3, #0]
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004e0a:	b29b      	uxth	r3, r3
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d1b7      	bne.n	8004d80 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	9300      	str	r3, [sp, #0]
 8004e14:	697b      	ldr	r3, [r7, #20]
 8004e16:	2200      	movs	r2, #0
 8004e18:	2140      	movs	r1, #64	; 0x40
 8004e1a:	68f8      	ldr	r0, [r7, #12]
 8004e1c:	f000 f810 	bl	8004e40 <UART_WaitOnFlagUntilTimeout>
 8004e20:	4603      	mov	r3, r0
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d001      	beq.n	8004e2a <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8004e26:	2303      	movs	r3, #3
 8004e28:	e006      	b.n	8004e38 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	2220      	movs	r2, #32
 8004e2e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8004e32:	2300      	movs	r3, #0
 8004e34:	e000      	b.n	8004e38 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8004e36:	2302      	movs	r3, #2
  }
}
 8004e38:	4618      	mov	r0, r3
 8004e3a:	3718      	adds	r7, #24
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	bd80      	pop	{r7, pc}

08004e40 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b084      	sub	sp, #16
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	60f8      	str	r0, [r7, #12]
 8004e48:	60b9      	str	r1, [r7, #8]
 8004e4a:	603b      	str	r3, [r7, #0]
 8004e4c:	4613      	mov	r3, r2
 8004e4e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e50:	e02c      	b.n	8004eac <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e52:	69bb      	ldr	r3, [r7, #24]
 8004e54:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004e58:	d028      	beq.n	8004eac <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004e5a:	69bb      	ldr	r3, [r7, #24]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d007      	beq.n	8004e70 <UART_WaitOnFlagUntilTimeout+0x30>
 8004e60:	f7fd fcd0 	bl	8002804 <HAL_GetTick>
 8004e64:	4602      	mov	r2, r0
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	1ad3      	subs	r3, r2, r3
 8004e6a:	69ba      	ldr	r2, [r7, #24]
 8004e6c:	429a      	cmp	r2, r3
 8004e6e:	d21d      	bcs.n	8004eac <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	68da      	ldr	r2, [r3, #12]
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004e7e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	695a      	ldr	r2, [r3, #20]
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f022 0201 	bic.w	r2, r2, #1
 8004e8e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	2220      	movs	r2, #32
 8004e94:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	2220      	movs	r2, #32
 8004e9c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8004ea8:	2303      	movs	r3, #3
 8004eaa:	e00f      	b.n	8004ecc <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	681a      	ldr	r2, [r3, #0]
 8004eb2:	68bb      	ldr	r3, [r7, #8]
 8004eb4:	4013      	ands	r3, r2
 8004eb6:	68ba      	ldr	r2, [r7, #8]
 8004eb8:	429a      	cmp	r2, r3
 8004eba:	bf0c      	ite	eq
 8004ebc:	2301      	moveq	r3, #1
 8004ebe:	2300      	movne	r3, #0
 8004ec0:	b2db      	uxtb	r3, r3
 8004ec2:	461a      	mov	r2, r3
 8004ec4:	79fb      	ldrb	r3, [r7, #7]
 8004ec6:	429a      	cmp	r2, r3
 8004ec8:	d0c3      	beq.n	8004e52 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004eca:	2300      	movs	r3, #0
}
 8004ecc:	4618      	mov	r0, r3
 8004ece:	3710      	adds	r7, #16
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	bd80      	pop	{r7, pc}

08004ed4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ed4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ed8:	b085      	sub	sp, #20
 8004eda:	af00      	add	r7, sp, #0
 8004edc:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	691b      	ldr	r3, [r3, #16]
 8004ee4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	68da      	ldr	r2, [r3, #12]
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	430a      	orrs	r2, r1
 8004ef2:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	689a      	ldr	r2, [r3, #8]
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	691b      	ldr	r3, [r3, #16]
 8004efc:	431a      	orrs	r2, r3
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	695b      	ldr	r3, [r3, #20]
 8004f02:	431a      	orrs	r2, r3
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	69db      	ldr	r3, [r3, #28]
 8004f08:	4313      	orrs	r3, r2
 8004f0a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	68db      	ldr	r3, [r3, #12]
 8004f12:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8004f16:	f023 030c 	bic.w	r3, r3, #12
 8004f1a:	687a      	ldr	r2, [r7, #4]
 8004f1c:	6812      	ldr	r2, [r2, #0]
 8004f1e:	68f9      	ldr	r1, [r7, #12]
 8004f20:	430b      	orrs	r3, r1
 8004f22:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	695b      	ldr	r3, [r3, #20]
 8004f2a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	699a      	ldr	r2, [r3, #24]
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	430a      	orrs	r2, r1
 8004f38:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	69db      	ldr	r3, [r3, #28]
 8004f3e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f42:	f040 818b 	bne.w	800525c <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	4ac1      	ldr	r2, [pc, #772]	; (8005250 <UART_SetConfig+0x37c>)
 8004f4c:	4293      	cmp	r3, r2
 8004f4e:	d005      	beq.n	8004f5c <UART_SetConfig+0x88>
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	4abf      	ldr	r2, [pc, #764]	; (8005254 <UART_SetConfig+0x380>)
 8004f56:	4293      	cmp	r3, r2
 8004f58:	f040 80bd 	bne.w	80050d6 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004f5c:	f7ff fe76 	bl	8004c4c <HAL_RCC_GetPCLK2Freq>
 8004f60:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004f62:	68bb      	ldr	r3, [r7, #8]
 8004f64:	461d      	mov	r5, r3
 8004f66:	f04f 0600 	mov.w	r6, #0
 8004f6a:	46a8      	mov	r8, r5
 8004f6c:	46b1      	mov	r9, r6
 8004f6e:	eb18 0308 	adds.w	r3, r8, r8
 8004f72:	eb49 0409 	adc.w	r4, r9, r9
 8004f76:	4698      	mov	r8, r3
 8004f78:	46a1      	mov	r9, r4
 8004f7a:	eb18 0805 	adds.w	r8, r8, r5
 8004f7e:	eb49 0906 	adc.w	r9, r9, r6
 8004f82:	f04f 0100 	mov.w	r1, #0
 8004f86:	f04f 0200 	mov.w	r2, #0
 8004f8a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004f8e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004f92:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004f96:	4688      	mov	r8, r1
 8004f98:	4691      	mov	r9, r2
 8004f9a:	eb18 0005 	adds.w	r0, r8, r5
 8004f9e:	eb49 0106 	adc.w	r1, r9, r6
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	685b      	ldr	r3, [r3, #4]
 8004fa6:	461d      	mov	r5, r3
 8004fa8:	f04f 0600 	mov.w	r6, #0
 8004fac:	196b      	adds	r3, r5, r5
 8004fae:	eb46 0406 	adc.w	r4, r6, r6
 8004fb2:	461a      	mov	r2, r3
 8004fb4:	4623      	mov	r3, r4
 8004fb6:	f7fb fdff 	bl	8000bb8 <__aeabi_uldivmod>
 8004fba:	4603      	mov	r3, r0
 8004fbc:	460c      	mov	r4, r1
 8004fbe:	461a      	mov	r2, r3
 8004fc0:	4ba5      	ldr	r3, [pc, #660]	; (8005258 <UART_SetConfig+0x384>)
 8004fc2:	fba3 2302 	umull	r2, r3, r3, r2
 8004fc6:	095b      	lsrs	r3, r3, #5
 8004fc8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004fcc:	68bb      	ldr	r3, [r7, #8]
 8004fce:	461d      	mov	r5, r3
 8004fd0:	f04f 0600 	mov.w	r6, #0
 8004fd4:	46a9      	mov	r9, r5
 8004fd6:	46b2      	mov	sl, r6
 8004fd8:	eb19 0309 	adds.w	r3, r9, r9
 8004fdc:	eb4a 040a 	adc.w	r4, sl, sl
 8004fe0:	4699      	mov	r9, r3
 8004fe2:	46a2      	mov	sl, r4
 8004fe4:	eb19 0905 	adds.w	r9, r9, r5
 8004fe8:	eb4a 0a06 	adc.w	sl, sl, r6
 8004fec:	f04f 0100 	mov.w	r1, #0
 8004ff0:	f04f 0200 	mov.w	r2, #0
 8004ff4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004ff8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004ffc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005000:	4689      	mov	r9, r1
 8005002:	4692      	mov	sl, r2
 8005004:	eb19 0005 	adds.w	r0, r9, r5
 8005008:	eb4a 0106 	adc.w	r1, sl, r6
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	685b      	ldr	r3, [r3, #4]
 8005010:	461d      	mov	r5, r3
 8005012:	f04f 0600 	mov.w	r6, #0
 8005016:	196b      	adds	r3, r5, r5
 8005018:	eb46 0406 	adc.w	r4, r6, r6
 800501c:	461a      	mov	r2, r3
 800501e:	4623      	mov	r3, r4
 8005020:	f7fb fdca 	bl	8000bb8 <__aeabi_uldivmod>
 8005024:	4603      	mov	r3, r0
 8005026:	460c      	mov	r4, r1
 8005028:	461a      	mov	r2, r3
 800502a:	4b8b      	ldr	r3, [pc, #556]	; (8005258 <UART_SetConfig+0x384>)
 800502c:	fba3 1302 	umull	r1, r3, r3, r2
 8005030:	095b      	lsrs	r3, r3, #5
 8005032:	2164      	movs	r1, #100	; 0x64
 8005034:	fb01 f303 	mul.w	r3, r1, r3
 8005038:	1ad3      	subs	r3, r2, r3
 800503a:	00db      	lsls	r3, r3, #3
 800503c:	3332      	adds	r3, #50	; 0x32
 800503e:	4a86      	ldr	r2, [pc, #536]	; (8005258 <UART_SetConfig+0x384>)
 8005040:	fba2 2303 	umull	r2, r3, r2, r3
 8005044:	095b      	lsrs	r3, r3, #5
 8005046:	005b      	lsls	r3, r3, #1
 8005048:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800504c:	4498      	add	r8, r3
 800504e:	68bb      	ldr	r3, [r7, #8]
 8005050:	461d      	mov	r5, r3
 8005052:	f04f 0600 	mov.w	r6, #0
 8005056:	46a9      	mov	r9, r5
 8005058:	46b2      	mov	sl, r6
 800505a:	eb19 0309 	adds.w	r3, r9, r9
 800505e:	eb4a 040a 	adc.w	r4, sl, sl
 8005062:	4699      	mov	r9, r3
 8005064:	46a2      	mov	sl, r4
 8005066:	eb19 0905 	adds.w	r9, r9, r5
 800506a:	eb4a 0a06 	adc.w	sl, sl, r6
 800506e:	f04f 0100 	mov.w	r1, #0
 8005072:	f04f 0200 	mov.w	r2, #0
 8005076:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800507a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800507e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005082:	4689      	mov	r9, r1
 8005084:	4692      	mov	sl, r2
 8005086:	eb19 0005 	adds.w	r0, r9, r5
 800508a:	eb4a 0106 	adc.w	r1, sl, r6
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	685b      	ldr	r3, [r3, #4]
 8005092:	461d      	mov	r5, r3
 8005094:	f04f 0600 	mov.w	r6, #0
 8005098:	196b      	adds	r3, r5, r5
 800509a:	eb46 0406 	adc.w	r4, r6, r6
 800509e:	461a      	mov	r2, r3
 80050a0:	4623      	mov	r3, r4
 80050a2:	f7fb fd89 	bl	8000bb8 <__aeabi_uldivmod>
 80050a6:	4603      	mov	r3, r0
 80050a8:	460c      	mov	r4, r1
 80050aa:	461a      	mov	r2, r3
 80050ac:	4b6a      	ldr	r3, [pc, #424]	; (8005258 <UART_SetConfig+0x384>)
 80050ae:	fba3 1302 	umull	r1, r3, r3, r2
 80050b2:	095b      	lsrs	r3, r3, #5
 80050b4:	2164      	movs	r1, #100	; 0x64
 80050b6:	fb01 f303 	mul.w	r3, r1, r3
 80050ba:	1ad3      	subs	r3, r2, r3
 80050bc:	00db      	lsls	r3, r3, #3
 80050be:	3332      	adds	r3, #50	; 0x32
 80050c0:	4a65      	ldr	r2, [pc, #404]	; (8005258 <UART_SetConfig+0x384>)
 80050c2:	fba2 2303 	umull	r2, r3, r2, r3
 80050c6:	095b      	lsrs	r3, r3, #5
 80050c8:	f003 0207 	and.w	r2, r3, #7
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	4442      	add	r2, r8
 80050d2:	609a      	str	r2, [r3, #8]
 80050d4:	e26f      	b.n	80055b6 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80050d6:	f7ff fda5 	bl	8004c24 <HAL_RCC_GetPCLK1Freq>
 80050da:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80050dc:	68bb      	ldr	r3, [r7, #8]
 80050de:	461d      	mov	r5, r3
 80050e0:	f04f 0600 	mov.w	r6, #0
 80050e4:	46a8      	mov	r8, r5
 80050e6:	46b1      	mov	r9, r6
 80050e8:	eb18 0308 	adds.w	r3, r8, r8
 80050ec:	eb49 0409 	adc.w	r4, r9, r9
 80050f0:	4698      	mov	r8, r3
 80050f2:	46a1      	mov	r9, r4
 80050f4:	eb18 0805 	adds.w	r8, r8, r5
 80050f8:	eb49 0906 	adc.w	r9, r9, r6
 80050fc:	f04f 0100 	mov.w	r1, #0
 8005100:	f04f 0200 	mov.w	r2, #0
 8005104:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005108:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800510c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005110:	4688      	mov	r8, r1
 8005112:	4691      	mov	r9, r2
 8005114:	eb18 0005 	adds.w	r0, r8, r5
 8005118:	eb49 0106 	adc.w	r1, r9, r6
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	685b      	ldr	r3, [r3, #4]
 8005120:	461d      	mov	r5, r3
 8005122:	f04f 0600 	mov.w	r6, #0
 8005126:	196b      	adds	r3, r5, r5
 8005128:	eb46 0406 	adc.w	r4, r6, r6
 800512c:	461a      	mov	r2, r3
 800512e:	4623      	mov	r3, r4
 8005130:	f7fb fd42 	bl	8000bb8 <__aeabi_uldivmod>
 8005134:	4603      	mov	r3, r0
 8005136:	460c      	mov	r4, r1
 8005138:	461a      	mov	r2, r3
 800513a:	4b47      	ldr	r3, [pc, #284]	; (8005258 <UART_SetConfig+0x384>)
 800513c:	fba3 2302 	umull	r2, r3, r3, r2
 8005140:	095b      	lsrs	r3, r3, #5
 8005142:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005146:	68bb      	ldr	r3, [r7, #8]
 8005148:	461d      	mov	r5, r3
 800514a:	f04f 0600 	mov.w	r6, #0
 800514e:	46a9      	mov	r9, r5
 8005150:	46b2      	mov	sl, r6
 8005152:	eb19 0309 	adds.w	r3, r9, r9
 8005156:	eb4a 040a 	adc.w	r4, sl, sl
 800515a:	4699      	mov	r9, r3
 800515c:	46a2      	mov	sl, r4
 800515e:	eb19 0905 	adds.w	r9, r9, r5
 8005162:	eb4a 0a06 	adc.w	sl, sl, r6
 8005166:	f04f 0100 	mov.w	r1, #0
 800516a:	f04f 0200 	mov.w	r2, #0
 800516e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005172:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005176:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800517a:	4689      	mov	r9, r1
 800517c:	4692      	mov	sl, r2
 800517e:	eb19 0005 	adds.w	r0, r9, r5
 8005182:	eb4a 0106 	adc.w	r1, sl, r6
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	685b      	ldr	r3, [r3, #4]
 800518a:	461d      	mov	r5, r3
 800518c:	f04f 0600 	mov.w	r6, #0
 8005190:	196b      	adds	r3, r5, r5
 8005192:	eb46 0406 	adc.w	r4, r6, r6
 8005196:	461a      	mov	r2, r3
 8005198:	4623      	mov	r3, r4
 800519a:	f7fb fd0d 	bl	8000bb8 <__aeabi_uldivmod>
 800519e:	4603      	mov	r3, r0
 80051a0:	460c      	mov	r4, r1
 80051a2:	461a      	mov	r2, r3
 80051a4:	4b2c      	ldr	r3, [pc, #176]	; (8005258 <UART_SetConfig+0x384>)
 80051a6:	fba3 1302 	umull	r1, r3, r3, r2
 80051aa:	095b      	lsrs	r3, r3, #5
 80051ac:	2164      	movs	r1, #100	; 0x64
 80051ae:	fb01 f303 	mul.w	r3, r1, r3
 80051b2:	1ad3      	subs	r3, r2, r3
 80051b4:	00db      	lsls	r3, r3, #3
 80051b6:	3332      	adds	r3, #50	; 0x32
 80051b8:	4a27      	ldr	r2, [pc, #156]	; (8005258 <UART_SetConfig+0x384>)
 80051ba:	fba2 2303 	umull	r2, r3, r2, r3
 80051be:	095b      	lsrs	r3, r3, #5
 80051c0:	005b      	lsls	r3, r3, #1
 80051c2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80051c6:	4498      	add	r8, r3
 80051c8:	68bb      	ldr	r3, [r7, #8]
 80051ca:	461d      	mov	r5, r3
 80051cc:	f04f 0600 	mov.w	r6, #0
 80051d0:	46a9      	mov	r9, r5
 80051d2:	46b2      	mov	sl, r6
 80051d4:	eb19 0309 	adds.w	r3, r9, r9
 80051d8:	eb4a 040a 	adc.w	r4, sl, sl
 80051dc:	4699      	mov	r9, r3
 80051de:	46a2      	mov	sl, r4
 80051e0:	eb19 0905 	adds.w	r9, r9, r5
 80051e4:	eb4a 0a06 	adc.w	sl, sl, r6
 80051e8:	f04f 0100 	mov.w	r1, #0
 80051ec:	f04f 0200 	mov.w	r2, #0
 80051f0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80051f4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80051f8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80051fc:	4689      	mov	r9, r1
 80051fe:	4692      	mov	sl, r2
 8005200:	eb19 0005 	adds.w	r0, r9, r5
 8005204:	eb4a 0106 	adc.w	r1, sl, r6
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	685b      	ldr	r3, [r3, #4]
 800520c:	461d      	mov	r5, r3
 800520e:	f04f 0600 	mov.w	r6, #0
 8005212:	196b      	adds	r3, r5, r5
 8005214:	eb46 0406 	adc.w	r4, r6, r6
 8005218:	461a      	mov	r2, r3
 800521a:	4623      	mov	r3, r4
 800521c:	f7fb fccc 	bl	8000bb8 <__aeabi_uldivmod>
 8005220:	4603      	mov	r3, r0
 8005222:	460c      	mov	r4, r1
 8005224:	461a      	mov	r2, r3
 8005226:	4b0c      	ldr	r3, [pc, #48]	; (8005258 <UART_SetConfig+0x384>)
 8005228:	fba3 1302 	umull	r1, r3, r3, r2
 800522c:	095b      	lsrs	r3, r3, #5
 800522e:	2164      	movs	r1, #100	; 0x64
 8005230:	fb01 f303 	mul.w	r3, r1, r3
 8005234:	1ad3      	subs	r3, r2, r3
 8005236:	00db      	lsls	r3, r3, #3
 8005238:	3332      	adds	r3, #50	; 0x32
 800523a:	4a07      	ldr	r2, [pc, #28]	; (8005258 <UART_SetConfig+0x384>)
 800523c:	fba2 2303 	umull	r2, r3, r2, r3
 8005240:	095b      	lsrs	r3, r3, #5
 8005242:	f003 0207 	and.w	r2, r3, #7
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	4442      	add	r2, r8
 800524c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800524e:	e1b2      	b.n	80055b6 <UART_SetConfig+0x6e2>
 8005250:	40011000 	.word	0x40011000
 8005254:	40011400 	.word	0x40011400
 8005258:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	4ad7      	ldr	r2, [pc, #860]	; (80055c0 <UART_SetConfig+0x6ec>)
 8005262:	4293      	cmp	r3, r2
 8005264:	d005      	beq.n	8005272 <UART_SetConfig+0x39e>
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	4ad6      	ldr	r2, [pc, #856]	; (80055c4 <UART_SetConfig+0x6f0>)
 800526c:	4293      	cmp	r3, r2
 800526e:	f040 80d1 	bne.w	8005414 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8005272:	f7ff fceb 	bl	8004c4c <HAL_RCC_GetPCLK2Freq>
 8005276:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005278:	68bb      	ldr	r3, [r7, #8]
 800527a:	469a      	mov	sl, r3
 800527c:	f04f 0b00 	mov.w	fp, #0
 8005280:	46d0      	mov	r8, sl
 8005282:	46d9      	mov	r9, fp
 8005284:	eb18 0308 	adds.w	r3, r8, r8
 8005288:	eb49 0409 	adc.w	r4, r9, r9
 800528c:	4698      	mov	r8, r3
 800528e:	46a1      	mov	r9, r4
 8005290:	eb18 080a 	adds.w	r8, r8, sl
 8005294:	eb49 090b 	adc.w	r9, r9, fp
 8005298:	f04f 0100 	mov.w	r1, #0
 800529c:	f04f 0200 	mov.w	r2, #0
 80052a0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80052a4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80052a8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80052ac:	4688      	mov	r8, r1
 80052ae:	4691      	mov	r9, r2
 80052b0:	eb1a 0508 	adds.w	r5, sl, r8
 80052b4:	eb4b 0609 	adc.w	r6, fp, r9
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	685b      	ldr	r3, [r3, #4]
 80052bc:	4619      	mov	r1, r3
 80052be:	f04f 0200 	mov.w	r2, #0
 80052c2:	f04f 0300 	mov.w	r3, #0
 80052c6:	f04f 0400 	mov.w	r4, #0
 80052ca:	0094      	lsls	r4, r2, #2
 80052cc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80052d0:	008b      	lsls	r3, r1, #2
 80052d2:	461a      	mov	r2, r3
 80052d4:	4623      	mov	r3, r4
 80052d6:	4628      	mov	r0, r5
 80052d8:	4631      	mov	r1, r6
 80052da:	f7fb fc6d 	bl	8000bb8 <__aeabi_uldivmod>
 80052de:	4603      	mov	r3, r0
 80052e0:	460c      	mov	r4, r1
 80052e2:	461a      	mov	r2, r3
 80052e4:	4bb8      	ldr	r3, [pc, #736]	; (80055c8 <UART_SetConfig+0x6f4>)
 80052e6:	fba3 2302 	umull	r2, r3, r3, r2
 80052ea:	095b      	lsrs	r3, r3, #5
 80052ec:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80052f0:	68bb      	ldr	r3, [r7, #8]
 80052f2:	469b      	mov	fp, r3
 80052f4:	f04f 0c00 	mov.w	ip, #0
 80052f8:	46d9      	mov	r9, fp
 80052fa:	46e2      	mov	sl, ip
 80052fc:	eb19 0309 	adds.w	r3, r9, r9
 8005300:	eb4a 040a 	adc.w	r4, sl, sl
 8005304:	4699      	mov	r9, r3
 8005306:	46a2      	mov	sl, r4
 8005308:	eb19 090b 	adds.w	r9, r9, fp
 800530c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005310:	f04f 0100 	mov.w	r1, #0
 8005314:	f04f 0200 	mov.w	r2, #0
 8005318:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800531c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005320:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005324:	4689      	mov	r9, r1
 8005326:	4692      	mov	sl, r2
 8005328:	eb1b 0509 	adds.w	r5, fp, r9
 800532c:	eb4c 060a 	adc.w	r6, ip, sl
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	685b      	ldr	r3, [r3, #4]
 8005334:	4619      	mov	r1, r3
 8005336:	f04f 0200 	mov.w	r2, #0
 800533a:	f04f 0300 	mov.w	r3, #0
 800533e:	f04f 0400 	mov.w	r4, #0
 8005342:	0094      	lsls	r4, r2, #2
 8005344:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005348:	008b      	lsls	r3, r1, #2
 800534a:	461a      	mov	r2, r3
 800534c:	4623      	mov	r3, r4
 800534e:	4628      	mov	r0, r5
 8005350:	4631      	mov	r1, r6
 8005352:	f7fb fc31 	bl	8000bb8 <__aeabi_uldivmod>
 8005356:	4603      	mov	r3, r0
 8005358:	460c      	mov	r4, r1
 800535a:	461a      	mov	r2, r3
 800535c:	4b9a      	ldr	r3, [pc, #616]	; (80055c8 <UART_SetConfig+0x6f4>)
 800535e:	fba3 1302 	umull	r1, r3, r3, r2
 8005362:	095b      	lsrs	r3, r3, #5
 8005364:	2164      	movs	r1, #100	; 0x64
 8005366:	fb01 f303 	mul.w	r3, r1, r3
 800536a:	1ad3      	subs	r3, r2, r3
 800536c:	011b      	lsls	r3, r3, #4
 800536e:	3332      	adds	r3, #50	; 0x32
 8005370:	4a95      	ldr	r2, [pc, #596]	; (80055c8 <UART_SetConfig+0x6f4>)
 8005372:	fba2 2303 	umull	r2, r3, r2, r3
 8005376:	095b      	lsrs	r3, r3, #5
 8005378:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800537c:	4498      	add	r8, r3
 800537e:	68bb      	ldr	r3, [r7, #8]
 8005380:	469b      	mov	fp, r3
 8005382:	f04f 0c00 	mov.w	ip, #0
 8005386:	46d9      	mov	r9, fp
 8005388:	46e2      	mov	sl, ip
 800538a:	eb19 0309 	adds.w	r3, r9, r9
 800538e:	eb4a 040a 	adc.w	r4, sl, sl
 8005392:	4699      	mov	r9, r3
 8005394:	46a2      	mov	sl, r4
 8005396:	eb19 090b 	adds.w	r9, r9, fp
 800539a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800539e:	f04f 0100 	mov.w	r1, #0
 80053a2:	f04f 0200 	mov.w	r2, #0
 80053a6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80053aa:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80053ae:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80053b2:	4689      	mov	r9, r1
 80053b4:	4692      	mov	sl, r2
 80053b6:	eb1b 0509 	adds.w	r5, fp, r9
 80053ba:	eb4c 060a 	adc.w	r6, ip, sl
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	685b      	ldr	r3, [r3, #4]
 80053c2:	4619      	mov	r1, r3
 80053c4:	f04f 0200 	mov.w	r2, #0
 80053c8:	f04f 0300 	mov.w	r3, #0
 80053cc:	f04f 0400 	mov.w	r4, #0
 80053d0:	0094      	lsls	r4, r2, #2
 80053d2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80053d6:	008b      	lsls	r3, r1, #2
 80053d8:	461a      	mov	r2, r3
 80053da:	4623      	mov	r3, r4
 80053dc:	4628      	mov	r0, r5
 80053de:	4631      	mov	r1, r6
 80053e0:	f7fb fbea 	bl	8000bb8 <__aeabi_uldivmod>
 80053e4:	4603      	mov	r3, r0
 80053e6:	460c      	mov	r4, r1
 80053e8:	461a      	mov	r2, r3
 80053ea:	4b77      	ldr	r3, [pc, #476]	; (80055c8 <UART_SetConfig+0x6f4>)
 80053ec:	fba3 1302 	umull	r1, r3, r3, r2
 80053f0:	095b      	lsrs	r3, r3, #5
 80053f2:	2164      	movs	r1, #100	; 0x64
 80053f4:	fb01 f303 	mul.w	r3, r1, r3
 80053f8:	1ad3      	subs	r3, r2, r3
 80053fa:	011b      	lsls	r3, r3, #4
 80053fc:	3332      	adds	r3, #50	; 0x32
 80053fe:	4a72      	ldr	r2, [pc, #456]	; (80055c8 <UART_SetConfig+0x6f4>)
 8005400:	fba2 2303 	umull	r2, r3, r2, r3
 8005404:	095b      	lsrs	r3, r3, #5
 8005406:	f003 020f 	and.w	r2, r3, #15
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	4442      	add	r2, r8
 8005410:	609a      	str	r2, [r3, #8]
 8005412:	e0d0      	b.n	80055b6 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8005414:	f7ff fc06 	bl	8004c24 <HAL_RCC_GetPCLK1Freq>
 8005418:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800541a:	68bb      	ldr	r3, [r7, #8]
 800541c:	469a      	mov	sl, r3
 800541e:	f04f 0b00 	mov.w	fp, #0
 8005422:	46d0      	mov	r8, sl
 8005424:	46d9      	mov	r9, fp
 8005426:	eb18 0308 	adds.w	r3, r8, r8
 800542a:	eb49 0409 	adc.w	r4, r9, r9
 800542e:	4698      	mov	r8, r3
 8005430:	46a1      	mov	r9, r4
 8005432:	eb18 080a 	adds.w	r8, r8, sl
 8005436:	eb49 090b 	adc.w	r9, r9, fp
 800543a:	f04f 0100 	mov.w	r1, #0
 800543e:	f04f 0200 	mov.w	r2, #0
 8005442:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005446:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800544a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800544e:	4688      	mov	r8, r1
 8005450:	4691      	mov	r9, r2
 8005452:	eb1a 0508 	adds.w	r5, sl, r8
 8005456:	eb4b 0609 	adc.w	r6, fp, r9
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	685b      	ldr	r3, [r3, #4]
 800545e:	4619      	mov	r1, r3
 8005460:	f04f 0200 	mov.w	r2, #0
 8005464:	f04f 0300 	mov.w	r3, #0
 8005468:	f04f 0400 	mov.w	r4, #0
 800546c:	0094      	lsls	r4, r2, #2
 800546e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005472:	008b      	lsls	r3, r1, #2
 8005474:	461a      	mov	r2, r3
 8005476:	4623      	mov	r3, r4
 8005478:	4628      	mov	r0, r5
 800547a:	4631      	mov	r1, r6
 800547c:	f7fb fb9c 	bl	8000bb8 <__aeabi_uldivmod>
 8005480:	4603      	mov	r3, r0
 8005482:	460c      	mov	r4, r1
 8005484:	461a      	mov	r2, r3
 8005486:	4b50      	ldr	r3, [pc, #320]	; (80055c8 <UART_SetConfig+0x6f4>)
 8005488:	fba3 2302 	umull	r2, r3, r3, r2
 800548c:	095b      	lsrs	r3, r3, #5
 800548e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005492:	68bb      	ldr	r3, [r7, #8]
 8005494:	469b      	mov	fp, r3
 8005496:	f04f 0c00 	mov.w	ip, #0
 800549a:	46d9      	mov	r9, fp
 800549c:	46e2      	mov	sl, ip
 800549e:	eb19 0309 	adds.w	r3, r9, r9
 80054a2:	eb4a 040a 	adc.w	r4, sl, sl
 80054a6:	4699      	mov	r9, r3
 80054a8:	46a2      	mov	sl, r4
 80054aa:	eb19 090b 	adds.w	r9, r9, fp
 80054ae:	eb4a 0a0c 	adc.w	sl, sl, ip
 80054b2:	f04f 0100 	mov.w	r1, #0
 80054b6:	f04f 0200 	mov.w	r2, #0
 80054ba:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80054be:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80054c2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80054c6:	4689      	mov	r9, r1
 80054c8:	4692      	mov	sl, r2
 80054ca:	eb1b 0509 	adds.w	r5, fp, r9
 80054ce:	eb4c 060a 	adc.w	r6, ip, sl
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	685b      	ldr	r3, [r3, #4]
 80054d6:	4619      	mov	r1, r3
 80054d8:	f04f 0200 	mov.w	r2, #0
 80054dc:	f04f 0300 	mov.w	r3, #0
 80054e0:	f04f 0400 	mov.w	r4, #0
 80054e4:	0094      	lsls	r4, r2, #2
 80054e6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80054ea:	008b      	lsls	r3, r1, #2
 80054ec:	461a      	mov	r2, r3
 80054ee:	4623      	mov	r3, r4
 80054f0:	4628      	mov	r0, r5
 80054f2:	4631      	mov	r1, r6
 80054f4:	f7fb fb60 	bl	8000bb8 <__aeabi_uldivmod>
 80054f8:	4603      	mov	r3, r0
 80054fa:	460c      	mov	r4, r1
 80054fc:	461a      	mov	r2, r3
 80054fe:	4b32      	ldr	r3, [pc, #200]	; (80055c8 <UART_SetConfig+0x6f4>)
 8005500:	fba3 1302 	umull	r1, r3, r3, r2
 8005504:	095b      	lsrs	r3, r3, #5
 8005506:	2164      	movs	r1, #100	; 0x64
 8005508:	fb01 f303 	mul.w	r3, r1, r3
 800550c:	1ad3      	subs	r3, r2, r3
 800550e:	011b      	lsls	r3, r3, #4
 8005510:	3332      	adds	r3, #50	; 0x32
 8005512:	4a2d      	ldr	r2, [pc, #180]	; (80055c8 <UART_SetConfig+0x6f4>)
 8005514:	fba2 2303 	umull	r2, r3, r2, r3
 8005518:	095b      	lsrs	r3, r3, #5
 800551a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800551e:	4498      	add	r8, r3
 8005520:	68bb      	ldr	r3, [r7, #8]
 8005522:	469b      	mov	fp, r3
 8005524:	f04f 0c00 	mov.w	ip, #0
 8005528:	46d9      	mov	r9, fp
 800552a:	46e2      	mov	sl, ip
 800552c:	eb19 0309 	adds.w	r3, r9, r9
 8005530:	eb4a 040a 	adc.w	r4, sl, sl
 8005534:	4699      	mov	r9, r3
 8005536:	46a2      	mov	sl, r4
 8005538:	eb19 090b 	adds.w	r9, r9, fp
 800553c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005540:	f04f 0100 	mov.w	r1, #0
 8005544:	f04f 0200 	mov.w	r2, #0
 8005548:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800554c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005550:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005554:	4689      	mov	r9, r1
 8005556:	4692      	mov	sl, r2
 8005558:	eb1b 0509 	adds.w	r5, fp, r9
 800555c:	eb4c 060a 	adc.w	r6, ip, sl
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	685b      	ldr	r3, [r3, #4]
 8005564:	4619      	mov	r1, r3
 8005566:	f04f 0200 	mov.w	r2, #0
 800556a:	f04f 0300 	mov.w	r3, #0
 800556e:	f04f 0400 	mov.w	r4, #0
 8005572:	0094      	lsls	r4, r2, #2
 8005574:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005578:	008b      	lsls	r3, r1, #2
 800557a:	461a      	mov	r2, r3
 800557c:	4623      	mov	r3, r4
 800557e:	4628      	mov	r0, r5
 8005580:	4631      	mov	r1, r6
 8005582:	f7fb fb19 	bl	8000bb8 <__aeabi_uldivmod>
 8005586:	4603      	mov	r3, r0
 8005588:	460c      	mov	r4, r1
 800558a:	461a      	mov	r2, r3
 800558c:	4b0e      	ldr	r3, [pc, #56]	; (80055c8 <UART_SetConfig+0x6f4>)
 800558e:	fba3 1302 	umull	r1, r3, r3, r2
 8005592:	095b      	lsrs	r3, r3, #5
 8005594:	2164      	movs	r1, #100	; 0x64
 8005596:	fb01 f303 	mul.w	r3, r1, r3
 800559a:	1ad3      	subs	r3, r2, r3
 800559c:	011b      	lsls	r3, r3, #4
 800559e:	3332      	adds	r3, #50	; 0x32
 80055a0:	4a09      	ldr	r2, [pc, #36]	; (80055c8 <UART_SetConfig+0x6f4>)
 80055a2:	fba2 2303 	umull	r2, r3, r2, r3
 80055a6:	095b      	lsrs	r3, r3, #5
 80055a8:	f003 020f 	and.w	r2, r3, #15
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	4442      	add	r2, r8
 80055b2:	609a      	str	r2, [r3, #8]
}
 80055b4:	e7ff      	b.n	80055b6 <UART_SetConfig+0x6e2>
 80055b6:	bf00      	nop
 80055b8:	3714      	adds	r7, #20
 80055ba:	46bd      	mov	sp, r7
 80055bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80055c0:	40011000 	.word	0x40011000
 80055c4:	40011400 	.word	0x40011400
 80055c8:	51eb851f 	.word	0x51eb851f

080055cc <__errno>:
 80055cc:	4b01      	ldr	r3, [pc, #4]	; (80055d4 <__errno+0x8>)
 80055ce:	6818      	ldr	r0, [r3, #0]
 80055d0:	4770      	bx	lr
 80055d2:	bf00      	nop
 80055d4:	20000014 	.word	0x20000014

080055d8 <__libc_init_array>:
 80055d8:	b570      	push	{r4, r5, r6, lr}
 80055da:	4e0d      	ldr	r6, [pc, #52]	; (8005610 <__libc_init_array+0x38>)
 80055dc:	4c0d      	ldr	r4, [pc, #52]	; (8005614 <__libc_init_array+0x3c>)
 80055de:	1ba4      	subs	r4, r4, r6
 80055e0:	10a4      	asrs	r4, r4, #2
 80055e2:	2500      	movs	r5, #0
 80055e4:	42a5      	cmp	r5, r4
 80055e6:	d109      	bne.n	80055fc <__libc_init_array+0x24>
 80055e8:	4e0b      	ldr	r6, [pc, #44]	; (8005618 <__libc_init_array+0x40>)
 80055ea:	4c0c      	ldr	r4, [pc, #48]	; (800561c <__libc_init_array+0x44>)
 80055ec:	f002 f87e 	bl	80076ec <_init>
 80055f0:	1ba4      	subs	r4, r4, r6
 80055f2:	10a4      	asrs	r4, r4, #2
 80055f4:	2500      	movs	r5, #0
 80055f6:	42a5      	cmp	r5, r4
 80055f8:	d105      	bne.n	8005606 <__libc_init_array+0x2e>
 80055fa:	bd70      	pop	{r4, r5, r6, pc}
 80055fc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005600:	4798      	blx	r3
 8005602:	3501      	adds	r5, #1
 8005604:	e7ee      	b.n	80055e4 <__libc_init_array+0xc>
 8005606:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800560a:	4798      	blx	r3
 800560c:	3501      	adds	r5, #1
 800560e:	e7f2      	b.n	80055f6 <__libc_init_array+0x1e>
 8005610:	080083d0 	.word	0x080083d0
 8005614:	080083d0 	.word	0x080083d0
 8005618:	080083d0 	.word	0x080083d0
 800561c:	080083d4 	.word	0x080083d4

08005620 <memcpy>:
 8005620:	b510      	push	{r4, lr}
 8005622:	1e43      	subs	r3, r0, #1
 8005624:	440a      	add	r2, r1
 8005626:	4291      	cmp	r1, r2
 8005628:	d100      	bne.n	800562c <memcpy+0xc>
 800562a:	bd10      	pop	{r4, pc}
 800562c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005630:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005634:	e7f7      	b.n	8005626 <memcpy+0x6>

08005636 <memset>:
 8005636:	4402      	add	r2, r0
 8005638:	4603      	mov	r3, r0
 800563a:	4293      	cmp	r3, r2
 800563c:	d100      	bne.n	8005640 <memset+0xa>
 800563e:	4770      	bx	lr
 8005640:	f803 1b01 	strb.w	r1, [r3], #1
 8005644:	e7f9      	b.n	800563a <memset+0x4>

08005646 <__cvt>:
 8005646:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800564a:	ec55 4b10 	vmov	r4, r5, d0
 800564e:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8005650:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005654:	2d00      	cmp	r5, #0
 8005656:	460e      	mov	r6, r1
 8005658:	4691      	mov	r9, r2
 800565a:	4619      	mov	r1, r3
 800565c:	bfb8      	it	lt
 800565e:	4622      	movlt	r2, r4
 8005660:	462b      	mov	r3, r5
 8005662:	f027 0720 	bic.w	r7, r7, #32
 8005666:	bfbb      	ittet	lt
 8005668:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800566c:	461d      	movlt	r5, r3
 800566e:	2300      	movge	r3, #0
 8005670:	232d      	movlt	r3, #45	; 0x2d
 8005672:	bfb8      	it	lt
 8005674:	4614      	movlt	r4, r2
 8005676:	2f46      	cmp	r7, #70	; 0x46
 8005678:	700b      	strb	r3, [r1, #0]
 800567a:	d004      	beq.n	8005686 <__cvt+0x40>
 800567c:	2f45      	cmp	r7, #69	; 0x45
 800567e:	d100      	bne.n	8005682 <__cvt+0x3c>
 8005680:	3601      	adds	r6, #1
 8005682:	2102      	movs	r1, #2
 8005684:	e000      	b.n	8005688 <__cvt+0x42>
 8005686:	2103      	movs	r1, #3
 8005688:	ab03      	add	r3, sp, #12
 800568a:	9301      	str	r3, [sp, #4]
 800568c:	ab02      	add	r3, sp, #8
 800568e:	9300      	str	r3, [sp, #0]
 8005690:	4632      	mov	r2, r6
 8005692:	4653      	mov	r3, sl
 8005694:	ec45 4b10 	vmov	d0, r4, r5
 8005698:	f000 fcfe 	bl	8006098 <_dtoa_r>
 800569c:	2f47      	cmp	r7, #71	; 0x47
 800569e:	4680      	mov	r8, r0
 80056a0:	d102      	bne.n	80056a8 <__cvt+0x62>
 80056a2:	f019 0f01 	tst.w	r9, #1
 80056a6:	d026      	beq.n	80056f6 <__cvt+0xb0>
 80056a8:	2f46      	cmp	r7, #70	; 0x46
 80056aa:	eb08 0906 	add.w	r9, r8, r6
 80056ae:	d111      	bne.n	80056d4 <__cvt+0x8e>
 80056b0:	f898 3000 	ldrb.w	r3, [r8]
 80056b4:	2b30      	cmp	r3, #48	; 0x30
 80056b6:	d10a      	bne.n	80056ce <__cvt+0x88>
 80056b8:	2200      	movs	r2, #0
 80056ba:	2300      	movs	r3, #0
 80056bc:	4620      	mov	r0, r4
 80056be:	4629      	mov	r1, r5
 80056c0:	f7fb fa0a 	bl	8000ad8 <__aeabi_dcmpeq>
 80056c4:	b918      	cbnz	r0, 80056ce <__cvt+0x88>
 80056c6:	f1c6 0601 	rsb	r6, r6, #1
 80056ca:	f8ca 6000 	str.w	r6, [sl]
 80056ce:	f8da 3000 	ldr.w	r3, [sl]
 80056d2:	4499      	add	r9, r3
 80056d4:	2200      	movs	r2, #0
 80056d6:	2300      	movs	r3, #0
 80056d8:	4620      	mov	r0, r4
 80056da:	4629      	mov	r1, r5
 80056dc:	f7fb f9fc 	bl	8000ad8 <__aeabi_dcmpeq>
 80056e0:	b938      	cbnz	r0, 80056f2 <__cvt+0xac>
 80056e2:	2230      	movs	r2, #48	; 0x30
 80056e4:	9b03      	ldr	r3, [sp, #12]
 80056e6:	454b      	cmp	r3, r9
 80056e8:	d205      	bcs.n	80056f6 <__cvt+0xb0>
 80056ea:	1c59      	adds	r1, r3, #1
 80056ec:	9103      	str	r1, [sp, #12]
 80056ee:	701a      	strb	r2, [r3, #0]
 80056f0:	e7f8      	b.n	80056e4 <__cvt+0x9e>
 80056f2:	f8cd 900c 	str.w	r9, [sp, #12]
 80056f6:	9b03      	ldr	r3, [sp, #12]
 80056f8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80056fa:	eba3 0308 	sub.w	r3, r3, r8
 80056fe:	4640      	mov	r0, r8
 8005700:	6013      	str	r3, [r2, #0]
 8005702:	b004      	add	sp, #16
 8005704:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08005708 <__exponent>:
 8005708:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800570a:	2900      	cmp	r1, #0
 800570c:	4604      	mov	r4, r0
 800570e:	bfba      	itte	lt
 8005710:	4249      	neglt	r1, r1
 8005712:	232d      	movlt	r3, #45	; 0x2d
 8005714:	232b      	movge	r3, #43	; 0x2b
 8005716:	2909      	cmp	r1, #9
 8005718:	f804 2b02 	strb.w	r2, [r4], #2
 800571c:	7043      	strb	r3, [r0, #1]
 800571e:	dd20      	ble.n	8005762 <__exponent+0x5a>
 8005720:	f10d 0307 	add.w	r3, sp, #7
 8005724:	461f      	mov	r7, r3
 8005726:	260a      	movs	r6, #10
 8005728:	fb91 f5f6 	sdiv	r5, r1, r6
 800572c:	fb06 1115 	mls	r1, r6, r5, r1
 8005730:	3130      	adds	r1, #48	; 0x30
 8005732:	2d09      	cmp	r5, #9
 8005734:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005738:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 800573c:	4629      	mov	r1, r5
 800573e:	dc09      	bgt.n	8005754 <__exponent+0x4c>
 8005740:	3130      	adds	r1, #48	; 0x30
 8005742:	3b02      	subs	r3, #2
 8005744:	f802 1c01 	strb.w	r1, [r2, #-1]
 8005748:	42bb      	cmp	r3, r7
 800574a:	4622      	mov	r2, r4
 800574c:	d304      	bcc.n	8005758 <__exponent+0x50>
 800574e:	1a10      	subs	r0, r2, r0
 8005750:	b003      	add	sp, #12
 8005752:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005754:	4613      	mov	r3, r2
 8005756:	e7e7      	b.n	8005728 <__exponent+0x20>
 8005758:	f813 2b01 	ldrb.w	r2, [r3], #1
 800575c:	f804 2b01 	strb.w	r2, [r4], #1
 8005760:	e7f2      	b.n	8005748 <__exponent+0x40>
 8005762:	2330      	movs	r3, #48	; 0x30
 8005764:	4419      	add	r1, r3
 8005766:	7083      	strb	r3, [r0, #2]
 8005768:	1d02      	adds	r2, r0, #4
 800576a:	70c1      	strb	r1, [r0, #3]
 800576c:	e7ef      	b.n	800574e <__exponent+0x46>
	...

08005770 <_printf_float>:
 8005770:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005774:	b08d      	sub	sp, #52	; 0x34
 8005776:	460c      	mov	r4, r1
 8005778:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800577c:	4616      	mov	r6, r2
 800577e:	461f      	mov	r7, r3
 8005780:	4605      	mov	r5, r0
 8005782:	f001 fa41 	bl	8006c08 <_localeconv_r>
 8005786:	6803      	ldr	r3, [r0, #0]
 8005788:	9304      	str	r3, [sp, #16]
 800578a:	4618      	mov	r0, r3
 800578c:	f7fa fd28 	bl	80001e0 <strlen>
 8005790:	2300      	movs	r3, #0
 8005792:	930a      	str	r3, [sp, #40]	; 0x28
 8005794:	f8d8 3000 	ldr.w	r3, [r8]
 8005798:	9005      	str	r0, [sp, #20]
 800579a:	3307      	adds	r3, #7
 800579c:	f023 0307 	bic.w	r3, r3, #7
 80057a0:	f103 0208 	add.w	r2, r3, #8
 80057a4:	f894 a018 	ldrb.w	sl, [r4, #24]
 80057a8:	f8d4 b000 	ldr.w	fp, [r4]
 80057ac:	f8c8 2000 	str.w	r2, [r8]
 80057b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057b4:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80057b8:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80057bc:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80057c0:	9307      	str	r3, [sp, #28]
 80057c2:	f8cd 8018 	str.w	r8, [sp, #24]
 80057c6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80057ca:	4ba7      	ldr	r3, [pc, #668]	; (8005a68 <_printf_float+0x2f8>)
 80057cc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80057d0:	f7fb f9b4 	bl	8000b3c <__aeabi_dcmpun>
 80057d4:	bb70      	cbnz	r0, 8005834 <_printf_float+0xc4>
 80057d6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80057da:	4ba3      	ldr	r3, [pc, #652]	; (8005a68 <_printf_float+0x2f8>)
 80057dc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80057e0:	f7fb f98e 	bl	8000b00 <__aeabi_dcmple>
 80057e4:	bb30      	cbnz	r0, 8005834 <_printf_float+0xc4>
 80057e6:	2200      	movs	r2, #0
 80057e8:	2300      	movs	r3, #0
 80057ea:	4640      	mov	r0, r8
 80057ec:	4649      	mov	r1, r9
 80057ee:	f7fb f97d 	bl	8000aec <__aeabi_dcmplt>
 80057f2:	b110      	cbz	r0, 80057fa <_printf_float+0x8a>
 80057f4:	232d      	movs	r3, #45	; 0x2d
 80057f6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80057fa:	4a9c      	ldr	r2, [pc, #624]	; (8005a6c <_printf_float+0x2fc>)
 80057fc:	4b9c      	ldr	r3, [pc, #624]	; (8005a70 <_printf_float+0x300>)
 80057fe:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8005802:	bf8c      	ite	hi
 8005804:	4690      	movhi	r8, r2
 8005806:	4698      	movls	r8, r3
 8005808:	2303      	movs	r3, #3
 800580a:	f02b 0204 	bic.w	r2, fp, #4
 800580e:	6123      	str	r3, [r4, #16]
 8005810:	6022      	str	r2, [r4, #0]
 8005812:	f04f 0900 	mov.w	r9, #0
 8005816:	9700      	str	r7, [sp, #0]
 8005818:	4633      	mov	r3, r6
 800581a:	aa0b      	add	r2, sp, #44	; 0x2c
 800581c:	4621      	mov	r1, r4
 800581e:	4628      	mov	r0, r5
 8005820:	f000 f9e6 	bl	8005bf0 <_printf_common>
 8005824:	3001      	adds	r0, #1
 8005826:	f040 808d 	bne.w	8005944 <_printf_float+0x1d4>
 800582a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800582e:	b00d      	add	sp, #52	; 0x34
 8005830:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005834:	4642      	mov	r2, r8
 8005836:	464b      	mov	r3, r9
 8005838:	4640      	mov	r0, r8
 800583a:	4649      	mov	r1, r9
 800583c:	f7fb f97e 	bl	8000b3c <__aeabi_dcmpun>
 8005840:	b110      	cbz	r0, 8005848 <_printf_float+0xd8>
 8005842:	4a8c      	ldr	r2, [pc, #560]	; (8005a74 <_printf_float+0x304>)
 8005844:	4b8c      	ldr	r3, [pc, #560]	; (8005a78 <_printf_float+0x308>)
 8005846:	e7da      	b.n	80057fe <_printf_float+0x8e>
 8005848:	6861      	ldr	r1, [r4, #4]
 800584a:	1c4b      	adds	r3, r1, #1
 800584c:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8005850:	a80a      	add	r0, sp, #40	; 0x28
 8005852:	d13e      	bne.n	80058d2 <_printf_float+0x162>
 8005854:	2306      	movs	r3, #6
 8005856:	6063      	str	r3, [r4, #4]
 8005858:	2300      	movs	r3, #0
 800585a:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800585e:	ab09      	add	r3, sp, #36	; 0x24
 8005860:	9300      	str	r3, [sp, #0]
 8005862:	ec49 8b10 	vmov	d0, r8, r9
 8005866:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800586a:	6022      	str	r2, [r4, #0]
 800586c:	f8cd a004 	str.w	sl, [sp, #4]
 8005870:	6861      	ldr	r1, [r4, #4]
 8005872:	4628      	mov	r0, r5
 8005874:	f7ff fee7 	bl	8005646 <__cvt>
 8005878:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 800587c:	2b47      	cmp	r3, #71	; 0x47
 800587e:	4680      	mov	r8, r0
 8005880:	d109      	bne.n	8005896 <_printf_float+0x126>
 8005882:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005884:	1cd8      	adds	r0, r3, #3
 8005886:	db02      	blt.n	800588e <_printf_float+0x11e>
 8005888:	6862      	ldr	r2, [r4, #4]
 800588a:	4293      	cmp	r3, r2
 800588c:	dd47      	ble.n	800591e <_printf_float+0x1ae>
 800588e:	f1aa 0a02 	sub.w	sl, sl, #2
 8005892:	fa5f fa8a 	uxtb.w	sl, sl
 8005896:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800589a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800589c:	d824      	bhi.n	80058e8 <_printf_float+0x178>
 800589e:	3901      	subs	r1, #1
 80058a0:	4652      	mov	r2, sl
 80058a2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80058a6:	9109      	str	r1, [sp, #36]	; 0x24
 80058a8:	f7ff ff2e 	bl	8005708 <__exponent>
 80058ac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80058ae:	1813      	adds	r3, r2, r0
 80058b0:	2a01      	cmp	r2, #1
 80058b2:	4681      	mov	r9, r0
 80058b4:	6123      	str	r3, [r4, #16]
 80058b6:	dc02      	bgt.n	80058be <_printf_float+0x14e>
 80058b8:	6822      	ldr	r2, [r4, #0]
 80058ba:	07d1      	lsls	r1, r2, #31
 80058bc:	d501      	bpl.n	80058c2 <_printf_float+0x152>
 80058be:	3301      	adds	r3, #1
 80058c0:	6123      	str	r3, [r4, #16]
 80058c2:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d0a5      	beq.n	8005816 <_printf_float+0xa6>
 80058ca:	232d      	movs	r3, #45	; 0x2d
 80058cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80058d0:	e7a1      	b.n	8005816 <_printf_float+0xa6>
 80058d2:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 80058d6:	f000 8177 	beq.w	8005bc8 <_printf_float+0x458>
 80058da:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80058de:	d1bb      	bne.n	8005858 <_printf_float+0xe8>
 80058e0:	2900      	cmp	r1, #0
 80058e2:	d1b9      	bne.n	8005858 <_printf_float+0xe8>
 80058e4:	2301      	movs	r3, #1
 80058e6:	e7b6      	b.n	8005856 <_printf_float+0xe6>
 80058e8:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 80058ec:	d119      	bne.n	8005922 <_printf_float+0x1b2>
 80058ee:	2900      	cmp	r1, #0
 80058f0:	6863      	ldr	r3, [r4, #4]
 80058f2:	dd0c      	ble.n	800590e <_printf_float+0x19e>
 80058f4:	6121      	str	r1, [r4, #16]
 80058f6:	b913      	cbnz	r3, 80058fe <_printf_float+0x18e>
 80058f8:	6822      	ldr	r2, [r4, #0]
 80058fa:	07d2      	lsls	r2, r2, #31
 80058fc:	d502      	bpl.n	8005904 <_printf_float+0x194>
 80058fe:	3301      	adds	r3, #1
 8005900:	440b      	add	r3, r1
 8005902:	6123      	str	r3, [r4, #16]
 8005904:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005906:	65a3      	str	r3, [r4, #88]	; 0x58
 8005908:	f04f 0900 	mov.w	r9, #0
 800590c:	e7d9      	b.n	80058c2 <_printf_float+0x152>
 800590e:	b913      	cbnz	r3, 8005916 <_printf_float+0x1a6>
 8005910:	6822      	ldr	r2, [r4, #0]
 8005912:	07d0      	lsls	r0, r2, #31
 8005914:	d501      	bpl.n	800591a <_printf_float+0x1aa>
 8005916:	3302      	adds	r3, #2
 8005918:	e7f3      	b.n	8005902 <_printf_float+0x192>
 800591a:	2301      	movs	r3, #1
 800591c:	e7f1      	b.n	8005902 <_printf_float+0x192>
 800591e:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8005922:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8005926:	4293      	cmp	r3, r2
 8005928:	db05      	blt.n	8005936 <_printf_float+0x1c6>
 800592a:	6822      	ldr	r2, [r4, #0]
 800592c:	6123      	str	r3, [r4, #16]
 800592e:	07d1      	lsls	r1, r2, #31
 8005930:	d5e8      	bpl.n	8005904 <_printf_float+0x194>
 8005932:	3301      	adds	r3, #1
 8005934:	e7e5      	b.n	8005902 <_printf_float+0x192>
 8005936:	2b00      	cmp	r3, #0
 8005938:	bfd4      	ite	le
 800593a:	f1c3 0302 	rsble	r3, r3, #2
 800593e:	2301      	movgt	r3, #1
 8005940:	4413      	add	r3, r2
 8005942:	e7de      	b.n	8005902 <_printf_float+0x192>
 8005944:	6823      	ldr	r3, [r4, #0]
 8005946:	055a      	lsls	r2, r3, #21
 8005948:	d407      	bmi.n	800595a <_printf_float+0x1ea>
 800594a:	6923      	ldr	r3, [r4, #16]
 800594c:	4642      	mov	r2, r8
 800594e:	4631      	mov	r1, r6
 8005950:	4628      	mov	r0, r5
 8005952:	47b8      	blx	r7
 8005954:	3001      	adds	r0, #1
 8005956:	d12b      	bne.n	80059b0 <_printf_float+0x240>
 8005958:	e767      	b.n	800582a <_printf_float+0xba>
 800595a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800595e:	f240 80dc 	bls.w	8005b1a <_printf_float+0x3aa>
 8005962:	2200      	movs	r2, #0
 8005964:	2300      	movs	r3, #0
 8005966:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800596a:	f7fb f8b5 	bl	8000ad8 <__aeabi_dcmpeq>
 800596e:	2800      	cmp	r0, #0
 8005970:	d033      	beq.n	80059da <_printf_float+0x26a>
 8005972:	2301      	movs	r3, #1
 8005974:	4a41      	ldr	r2, [pc, #260]	; (8005a7c <_printf_float+0x30c>)
 8005976:	4631      	mov	r1, r6
 8005978:	4628      	mov	r0, r5
 800597a:	47b8      	blx	r7
 800597c:	3001      	adds	r0, #1
 800597e:	f43f af54 	beq.w	800582a <_printf_float+0xba>
 8005982:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005986:	429a      	cmp	r2, r3
 8005988:	db02      	blt.n	8005990 <_printf_float+0x220>
 800598a:	6823      	ldr	r3, [r4, #0]
 800598c:	07d8      	lsls	r0, r3, #31
 800598e:	d50f      	bpl.n	80059b0 <_printf_float+0x240>
 8005990:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005994:	4631      	mov	r1, r6
 8005996:	4628      	mov	r0, r5
 8005998:	47b8      	blx	r7
 800599a:	3001      	adds	r0, #1
 800599c:	f43f af45 	beq.w	800582a <_printf_float+0xba>
 80059a0:	f04f 0800 	mov.w	r8, #0
 80059a4:	f104 091a 	add.w	r9, r4, #26
 80059a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80059aa:	3b01      	subs	r3, #1
 80059ac:	4543      	cmp	r3, r8
 80059ae:	dc09      	bgt.n	80059c4 <_printf_float+0x254>
 80059b0:	6823      	ldr	r3, [r4, #0]
 80059b2:	079b      	lsls	r3, r3, #30
 80059b4:	f100 8103 	bmi.w	8005bbe <_printf_float+0x44e>
 80059b8:	68e0      	ldr	r0, [r4, #12]
 80059ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80059bc:	4298      	cmp	r0, r3
 80059be:	bfb8      	it	lt
 80059c0:	4618      	movlt	r0, r3
 80059c2:	e734      	b.n	800582e <_printf_float+0xbe>
 80059c4:	2301      	movs	r3, #1
 80059c6:	464a      	mov	r2, r9
 80059c8:	4631      	mov	r1, r6
 80059ca:	4628      	mov	r0, r5
 80059cc:	47b8      	blx	r7
 80059ce:	3001      	adds	r0, #1
 80059d0:	f43f af2b 	beq.w	800582a <_printf_float+0xba>
 80059d4:	f108 0801 	add.w	r8, r8, #1
 80059d8:	e7e6      	b.n	80059a8 <_printf_float+0x238>
 80059da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80059dc:	2b00      	cmp	r3, #0
 80059de:	dc2b      	bgt.n	8005a38 <_printf_float+0x2c8>
 80059e0:	2301      	movs	r3, #1
 80059e2:	4a26      	ldr	r2, [pc, #152]	; (8005a7c <_printf_float+0x30c>)
 80059e4:	4631      	mov	r1, r6
 80059e6:	4628      	mov	r0, r5
 80059e8:	47b8      	blx	r7
 80059ea:	3001      	adds	r0, #1
 80059ec:	f43f af1d 	beq.w	800582a <_printf_float+0xba>
 80059f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80059f2:	b923      	cbnz	r3, 80059fe <_printf_float+0x28e>
 80059f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80059f6:	b913      	cbnz	r3, 80059fe <_printf_float+0x28e>
 80059f8:	6823      	ldr	r3, [r4, #0]
 80059fa:	07d9      	lsls	r1, r3, #31
 80059fc:	d5d8      	bpl.n	80059b0 <_printf_float+0x240>
 80059fe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005a02:	4631      	mov	r1, r6
 8005a04:	4628      	mov	r0, r5
 8005a06:	47b8      	blx	r7
 8005a08:	3001      	adds	r0, #1
 8005a0a:	f43f af0e 	beq.w	800582a <_printf_float+0xba>
 8005a0e:	f04f 0900 	mov.w	r9, #0
 8005a12:	f104 0a1a 	add.w	sl, r4, #26
 8005a16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a18:	425b      	negs	r3, r3
 8005a1a:	454b      	cmp	r3, r9
 8005a1c:	dc01      	bgt.n	8005a22 <_printf_float+0x2b2>
 8005a1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005a20:	e794      	b.n	800594c <_printf_float+0x1dc>
 8005a22:	2301      	movs	r3, #1
 8005a24:	4652      	mov	r2, sl
 8005a26:	4631      	mov	r1, r6
 8005a28:	4628      	mov	r0, r5
 8005a2a:	47b8      	blx	r7
 8005a2c:	3001      	adds	r0, #1
 8005a2e:	f43f aefc 	beq.w	800582a <_printf_float+0xba>
 8005a32:	f109 0901 	add.w	r9, r9, #1
 8005a36:	e7ee      	b.n	8005a16 <_printf_float+0x2a6>
 8005a38:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005a3a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005a3c:	429a      	cmp	r2, r3
 8005a3e:	bfa8      	it	ge
 8005a40:	461a      	movge	r2, r3
 8005a42:	2a00      	cmp	r2, #0
 8005a44:	4691      	mov	r9, r2
 8005a46:	dd07      	ble.n	8005a58 <_printf_float+0x2e8>
 8005a48:	4613      	mov	r3, r2
 8005a4a:	4631      	mov	r1, r6
 8005a4c:	4642      	mov	r2, r8
 8005a4e:	4628      	mov	r0, r5
 8005a50:	47b8      	blx	r7
 8005a52:	3001      	adds	r0, #1
 8005a54:	f43f aee9 	beq.w	800582a <_printf_float+0xba>
 8005a58:	f104 031a 	add.w	r3, r4, #26
 8005a5c:	f04f 0b00 	mov.w	fp, #0
 8005a60:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005a64:	9306      	str	r3, [sp, #24]
 8005a66:	e015      	b.n	8005a94 <_printf_float+0x324>
 8005a68:	7fefffff 	.word	0x7fefffff
 8005a6c:	0800816c 	.word	0x0800816c
 8005a70:	08008168 	.word	0x08008168
 8005a74:	08008174 	.word	0x08008174
 8005a78:	08008170 	.word	0x08008170
 8005a7c:	08008178 	.word	0x08008178
 8005a80:	2301      	movs	r3, #1
 8005a82:	9a06      	ldr	r2, [sp, #24]
 8005a84:	4631      	mov	r1, r6
 8005a86:	4628      	mov	r0, r5
 8005a88:	47b8      	blx	r7
 8005a8a:	3001      	adds	r0, #1
 8005a8c:	f43f aecd 	beq.w	800582a <_printf_float+0xba>
 8005a90:	f10b 0b01 	add.w	fp, fp, #1
 8005a94:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8005a98:	ebaa 0309 	sub.w	r3, sl, r9
 8005a9c:	455b      	cmp	r3, fp
 8005a9e:	dcef      	bgt.n	8005a80 <_printf_float+0x310>
 8005aa0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005aa4:	429a      	cmp	r2, r3
 8005aa6:	44d0      	add	r8, sl
 8005aa8:	db15      	blt.n	8005ad6 <_printf_float+0x366>
 8005aaa:	6823      	ldr	r3, [r4, #0]
 8005aac:	07da      	lsls	r2, r3, #31
 8005aae:	d412      	bmi.n	8005ad6 <_printf_float+0x366>
 8005ab0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005ab2:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005ab4:	eba3 020a 	sub.w	r2, r3, sl
 8005ab8:	eba3 0a01 	sub.w	sl, r3, r1
 8005abc:	4592      	cmp	sl, r2
 8005abe:	bfa8      	it	ge
 8005ac0:	4692      	movge	sl, r2
 8005ac2:	f1ba 0f00 	cmp.w	sl, #0
 8005ac6:	dc0e      	bgt.n	8005ae6 <_printf_float+0x376>
 8005ac8:	f04f 0800 	mov.w	r8, #0
 8005acc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005ad0:	f104 091a 	add.w	r9, r4, #26
 8005ad4:	e019      	b.n	8005b0a <_printf_float+0x39a>
 8005ad6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005ada:	4631      	mov	r1, r6
 8005adc:	4628      	mov	r0, r5
 8005ade:	47b8      	blx	r7
 8005ae0:	3001      	adds	r0, #1
 8005ae2:	d1e5      	bne.n	8005ab0 <_printf_float+0x340>
 8005ae4:	e6a1      	b.n	800582a <_printf_float+0xba>
 8005ae6:	4653      	mov	r3, sl
 8005ae8:	4642      	mov	r2, r8
 8005aea:	4631      	mov	r1, r6
 8005aec:	4628      	mov	r0, r5
 8005aee:	47b8      	blx	r7
 8005af0:	3001      	adds	r0, #1
 8005af2:	d1e9      	bne.n	8005ac8 <_printf_float+0x358>
 8005af4:	e699      	b.n	800582a <_printf_float+0xba>
 8005af6:	2301      	movs	r3, #1
 8005af8:	464a      	mov	r2, r9
 8005afa:	4631      	mov	r1, r6
 8005afc:	4628      	mov	r0, r5
 8005afe:	47b8      	blx	r7
 8005b00:	3001      	adds	r0, #1
 8005b02:	f43f ae92 	beq.w	800582a <_printf_float+0xba>
 8005b06:	f108 0801 	add.w	r8, r8, #1
 8005b0a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005b0e:	1a9b      	subs	r3, r3, r2
 8005b10:	eba3 030a 	sub.w	r3, r3, sl
 8005b14:	4543      	cmp	r3, r8
 8005b16:	dcee      	bgt.n	8005af6 <_printf_float+0x386>
 8005b18:	e74a      	b.n	80059b0 <_printf_float+0x240>
 8005b1a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005b1c:	2a01      	cmp	r2, #1
 8005b1e:	dc01      	bgt.n	8005b24 <_printf_float+0x3b4>
 8005b20:	07db      	lsls	r3, r3, #31
 8005b22:	d53a      	bpl.n	8005b9a <_printf_float+0x42a>
 8005b24:	2301      	movs	r3, #1
 8005b26:	4642      	mov	r2, r8
 8005b28:	4631      	mov	r1, r6
 8005b2a:	4628      	mov	r0, r5
 8005b2c:	47b8      	blx	r7
 8005b2e:	3001      	adds	r0, #1
 8005b30:	f43f ae7b 	beq.w	800582a <_printf_float+0xba>
 8005b34:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005b38:	4631      	mov	r1, r6
 8005b3a:	4628      	mov	r0, r5
 8005b3c:	47b8      	blx	r7
 8005b3e:	3001      	adds	r0, #1
 8005b40:	f108 0801 	add.w	r8, r8, #1
 8005b44:	f43f ae71 	beq.w	800582a <_printf_float+0xba>
 8005b48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	f103 3aff 	add.w	sl, r3, #4294967295	; 0xffffffff
 8005b50:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005b54:	2300      	movs	r3, #0
 8005b56:	f7fa ffbf 	bl	8000ad8 <__aeabi_dcmpeq>
 8005b5a:	b9c8      	cbnz	r0, 8005b90 <_printf_float+0x420>
 8005b5c:	4653      	mov	r3, sl
 8005b5e:	4642      	mov	r2, r8
 8005b60:	4631      	mov	r1, r6
 8005b62:	4628      	mov	r0, r5
 8005b64:	47b8      	blx	r7
 8005b66:	3001      	adds	r0, #1
 8005b68:	d10e      	bne.n	8005b88 <_printf_float+0x418>
 8005b6a:	e65e      	b.n	800582a <_printf_float+0xba>
 8005b6c:	2301      	movs	r3, #1
 8005b6e:	4652      	mov	r2, sl
 8005b70:	4631      	mov	r1, r6
 8005b72:	4628      	mov	r0, r5
 8005b74:	47b8      	blx	r7
 8005b76:	3001      	adds	r0, #1
 8005b78:	f43f ae57 	beq.w	800582a <_printf_float+0xba>
 8005b7c:	f108 0801 	add.w	r8, r8, #1
 8005b80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b82:	3b01      	subs	r3, #1
 8005b84:	4543      	cmp	r3, r8
 8005b86:	dcf1      	bgt.n	8005b6c <_printf_float+0x3fc>
 8005b88:	464b      	mov	r3, r9
 8005b8a:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005b8e:	e6de      	b.n	800594e <_printf_float+0x1de>
 8005b90:	f04f 0800 	mov.w	r8, #0
 8005b94:	f104 0a1a 	add.w	sl, r4, #26
 8005b98:	e7f2      	b.n	8005b80 <_printf_float+0x410>
 8005b9a:	2301      	movs	r3, #1
 8005b9c:	e7df      	b.n	8005b5e <_printf_float+0x3ee>
 8005b9e:	2301      	movs	r3, #1
 8005ba0:	464a      	mov	r2, r9
 8005ba2:	4631      	mov	r1, r6
 8005ba4:	4628      	mov	r0, r5
 8005ba6:	47b8      	blx	r7
 8005ba8:	3001      	adds	r0, #1
 8005baa:	f43f ae3e 	beq.w	800582a <_printf_float+0xba>
 8005bae:	f108 0801 	add.w	r8, r8, #1
 8005bb2:	68e3      	ldr	r3, [r4, #12]
 8005bb4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005bb6:	1a9b      	subs	r3, r3, r2
 8005bb8:	4543      	cmp	r3, r8
 8005bba:	dcf0      	bgt.n	8005b9e <_printf_float+0x42e>
 8005bbc:	e6fc      	b.n	80059b8 <_printf_float+0x248>
 8005bbe:	f04f 0800 	mov.w	r8, #0
 8005bc2:	f104 0919 	add.w	r9, r4, #25
 8005bc6:	e7f4      	b.n	8005bb2 <_printf_float+0x442>
 8005bc8:	2900      	cmp	r1, #0
 8005bca:	f43f ae8b 	beq.w	80058e4 <_printf_float+0x174>
 8005bce:	2300      	movs	r3, #0
 8005bd0:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8005bd4:	ab09      	add	r3, sp, #36	; 0x24
 8005bd6:	9300      	str	r3, [sp, #0]
 8005bd8:	ec49 8b10 	vmov	d0, r8, r9
 8005bdc:	6022      	str	r2, [r4, #0]
 8005bde:	f8cd a004 	str.w	sl, [sp, #4]
 8005be2:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005be6:	4628      	mov	r0, r5
 8005be8:	f7ff fd2d 	bl	8005646 <__cvt>
 8005bec:	4680      	mov	r8, r0
 8005bee:	e648      	b.n	8005882 <_printf_float+0x112>

08005bf0 <_printf_common>:
 8005bf0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005bf4:	4691      	mov	r9, r2
 8005bf6:	461f      	mov	r7, r3
 8005bf8:	688a      	ldr	r2, [r1, #8]
 8005bfa:	690b      	ldr	r3, [r1, #16]
 8005bfc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005c00:	4293      	cmp	r3, r2
 8005c02:	bfb8      	it	lt
 8005c04:	4613      	movlt	r3, r2
 8005c06:	f8c9 3000 	str.w	r3, [r9]
 8005c0a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005c0e:	4606      	mov	r6, r0
 8005c10:	460c      	mov	r4, r1
 8005c12:	b112      	cbz	r2, 8005c1a <_printf_common+0x2a>
 8005c14:	3301      	adds	r3, #1
 8005c16:	f8c9 3000 	str.w	r3, [r9]
 8005c1a:	6823      	ldr	r3, [r4, #0]
 8005c1c:	0699      	lsls	r1, r3, #26
 8005c1e:	bf42      	ittt	mi
 8005c20:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005c24:	3302      	addmi	r3, #2
 8005c26:	f8c9 3000 	strmi.w	r3, [r9]
 8005c2a:	6825      	ldr	r5, [r4, #0]
 8005c2c:	f015 0506 	ands.w	r5, r5, #6
 8005c30:	d107      	bne.n	8005c42 <_printf_common+0x52>
 8005c32:	f104 0a19 	add.w	sl, r4, #25
 8005c36:	68e3      	ldr	r3, [r4, #12]
 8005c38:	f8d9 2000 	ldr.w	r2, [r9]
 8005c3c:	1a9b      	subs	r3, r3, r2
 8005c3e:	42ab      	cmp	r3, r5
 8005c40:	dc28      	bgt.n	8005c94 <_printf_common+0xa4>
 8005c42:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8005c46:	6822      	ldr	r2, [r4, #0]
 8005c48:	3300      	adds	r3, #0
 8005c4a:	bf18      	it	ne
 8005c4c:	2301      	movne	r3, #1
 8005c4e:	0692      	lsls	r2, r2, #26
 8005c50:	d42d      	bmi.n	8005cae <_printf_common+0xbe>
 8005c52:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005c56:	4639      	mov	r1, r7
 8005c58:	4630      	mov	r0, r6
 8005c5a:	47c0      	blx	r8
 8005c5c:	3001      	adds	r0, #1
 8005c5e:	d020      	beq.n	8005ca2 <_printf_common+0xb2>
 8005c60:	6823      	ldr	r3, [r4, #0]
 8005c62:	68e5      	ldr	r5, [r4, #12]
 8005c64:	f8d9 2000 	ldr.w	r2, [r9]
 8005c68:	f003 0306 	and.w	r3, r3, #6
 8005c6c:	2b04      	cmp	r3, #4
 8005c6e:	bf08      	it	eq
 8005c70:	1aad      	subeq	r5, r5, r2
 8005c72:	68a3      	ldr	r3, [r4, #8]
 8005c74:	6922      	ldr	r2, [r4, #16]
 8005c76:	bf0c      	ite	eq
 8005c78:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005c7c:	2500      	movne	r5, #0
 8005c7e:	4293      	cmp	r3, r2
 8005c80:	bfc4      	itt	gt
 8005c82:	1a9b      	subgt	r3, r3, r2
 8005c84:	18ed      	addgt	r5, r5, r3
 8005c86:	f04f 0900 	mov.w	r9, #0
 8005c8a:	341a      	adds	r4, #26
 8005c8c:	454d      	cmp	r5, r9
 8005c8e:	d11a      	bne.n	8005cc6 <_printf_common+0xd6>
 8005c90:	2000      	movs	r0, #0
 8005c92:	e008      	b.n	8005ca6 <_printf_common+0xb6>
 8005c94:	2301      	movs	r3, #1
 8005c96:	4652      	mov	r2, sl
 8005c98:	4639      	mov	r1, r7
 8005c9a:	4630      	mov	r0, r6
 8005c9c:	47c0      	blx	r8
 8005c9e:	3001      	adds	r0, #1
 8005ca0:	d103      	bne.n	8005caa <_printf_common+0xba>
 8005ca2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005ca6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005caa:	3501      	adds	r5, #1
 8005cac:	e7c3      	b.n	8005c36 <_printf_common+0x46>
 8005cae:	18e1      	adds	r1, r4, r3
 8005cb0:	1c5a      	adds	r2, r3, #1
 8005cb2:	2030      	movs	r0, #48	; 0x30
 8005cb4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005cb8:	4422      	add	r2, r4
 8005cba:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005cbe:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005cc2:	3302      	adds	r3, #2
 8005cc4:	e7c5      	b.n	8005c52 <_printf_common+0x62>
 8005cc6:	2301      	movs	r3, #1
 8005cc8:	4622      	mov	r2, r4
 8005cca:	4639      	mov	r1, r7
 8005ccc:	4630      	mov	r0, r6
 8005cce:	47c0      	blx	r8
 8005cd0:	3001      	adds	r0, #1
 8005cd2:	d0e6      	beq.n	8005ca2 <_printf_common+0xb2>
 8005cd4:	f109 0901 	add.w	r9, r9, #1
 8005cd8:	e7d8      	b.n	8005c8c <_printf_common+0x9c>
	...

08005cdc <_printf_i>:
 8005cdc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005ce0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8005ce4:	460c      	mov	r4, r1
 8005ce6:	7e09      	ldrb	r1, [r1, #24]
 8005ce8:	b085      	sub	sp, #20
 8005cea:	296e      	cmp	r1, #110	; 0x6e
 8005cec:	4617      	mov	r7, r2
 8005cee:	4606      	mov	r6, r0
 8005cf0:	4698      	mov	r8, r3
 8005cf2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005cf4:	f000 80b3 	beq.w	8005e5e <_printf_i+0x182>
 8005cf8:	d822      	bhi.n	8005d40 <_printf_i+0x64>
 8005cfa:	2963      	cmp	r1, #99	; 0x63
 8005cfc:	d036      	beq.n	8005d6c <_printf_i+0x90>
 8005cfe:	d80a      	bhi.n	8005d16 <_printf_i+0x3a>
 8005d00:	2900      	cmp	r1, #0
 8005d02:	f000 80b9 	beq.w	8005e78 <_printf_i+0x19c>
 8005d06:	2958      	cmp	r1, #88	; 0x58
 8005d08:	f000 8083 	beq.w	8005e12 <_printf_i+0x136>
 8005d0c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005d10:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8005d14:	e032      	b.n	8005d7c <_printf_i+0xa0>
 8005d16:	2964      	cmp	r1, #100	; 0x64
 8005d18:	d001      	beq.n	8005d1e <_printf_i+0x42>
 8005d1a:	2969      	cmp	r1, #105	; 0x69
 8005d1c:	d1f6      	bne.n	8005d0c <_printf_i+0x30>
 8005d1e:	6820      	ldr	r0, [r4, #0]
 8005d20:	6813      	ldr	r3, [r2, #0]
 8005d22:	0605      	lsls	r5, r0, #24
 8005d24:	f103 0104 	add.w	r1, r3, #4
 8005d28:	d52a      	bpl.n	8005d80 <_printf_i+0xa4>
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	6011      	str	r1, [r2, #0]
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	da03      	bge.n	8005d3a <_printf_i+0x5e>
 8005d32:	222d      	movs	r2, #45	; 0x2d
 8005d34:	425b      	negs	r3, r3
 8005d36:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8005d3a:	486f      	ldr	r0, [pc, #444]	; (8005ef8 <_printf_i+0x21c>)
 8005d3c:	220a      	movs	r2, #10
 8005d3e:	e039      	b.n	8005db4 <_printf_i+0xd8>
 8005d40:	2973      	cmp	r1, #115	; 0x73
 8005d42:	f000 809d 	beq.w	8005e80 <_printf_i+0x1a4>
 8005d46:	d808      	bhi.n	8005d5a <_printf_i+0x7e>
 8005d48:	296f      	cmp	r1, #111	; 0x6f
 8005d4a:	d020      	beq.n	8005d8e <_printf_i+0xb2>
 8005d4c:	2970      	cmp	r1, #112	; 0x70
 8005d4e:	d1dd      	bne.n	8005d0c <_printf_i+0x30>
 8005d50:	6823      	ldr	r3, [r4, #0]
 8005d52:	f043 0320 	orr.w	r3, r3, #32
 8005d56:	6023      	str	r3, [r4, #0]
 8005d58:	e003      	b.n	8005d62 <_printf_i+0x86>
 8005d5a:	2975      	cmp	r1, #117	; 0x75
 8005d5c:	d017      	beq.n	8005d8e <_printf_i+0xb2>
 8005d5e:	2978      	cmp	r1, #120	; 0x78
 8005d60:	d1d4      	bne.n	8005d0c <_printf_i+0x30>
 8005d62:	2378      	movs	r3, #120	; 0x78
 8005d64:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005d68:	4864      	ldr	r0, [pc, #400]	; (8005efc <_printf_i+0x220>)
 8005d6a:	e055      	b.n	8005e18 <_printf_i+0x13c>
 8005d6c:	6813      	ldr	r3, [r2, #0]
 8005d6e:	1d19      	adds	r1, r3, #4
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	6011      	str	r1, [r2, #0]
 8005d74:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005d78:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005d7c:	2301      	movs	r3, #1
 8005d7e:	e08c      	b.n	8005e9a <_printf_i+0x1be>
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	6011      	str	r1, [r2, #0]
 8005d84:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005d88:	bf18      	it	ne
 8005d8a:	b21b      	sxthne	r3, r3
 8005d8c:	e7cf      	b.n	8005d2e <_printf_i+0x52>
 8005d8e:	6813      	ldr	r3, [r2, #0]
 8005d90:	6825      	ldr	r5, [r4, #0]
 8005d92:	1d18      	adds	r0, r3, #4
 8005d94:	6010      	str	r0, [r2, #0]
 8005d96:	0628      	lsls	r0, r5, #24
 8005d98:	d501      	bpl.n	8005d9e <_printf_i+0xc2>
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	e002      	b.n	8005da4 <_printf_i+0xc8>
 8005d9e:	0668      	lsls	r0, r5, #25
 8005da0:	d5fb      	bpl.n	8005d9a <_printf_i+0xbe>
 8005da2:	881b      	ldrh	r3, [r3, #0]
 8005da4:	4854      	ldr	r0, [pc, #336]	; (8005ef8 <_printf_i+0x21c>)
 8005da6:	296f      	cmp	r1, #111	; 0x6f
 8005da8:	bf14      	ite	ne
 8005daa:	220a      	movne	r2, #10
 8005dac:	2208      	moveq	r2, #8
 8005dae:	2100      	movs	r1, #0
 8005db0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005db4:	6865      	ldr	r5, [r4, #4]
 8005db6:	60a5      	str	r5, [r4, #8]
 8005db8:	2d00      	cmp	r5, #0
 8005dba:	f2c0 8095 	blt.w	8005ee8 <_printf_i+0x20c>
 8005dbe:	6821      	ldr	r1, [r4, #0]
 8005dc0:	f021 0104 	bic.w	r1, r1, #4
 8005dc4:	6021      	str	r1, [r4, #0]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d13d      	bne.n	8005e46 <_printf_i+0x16a>
 8005dca:	2d00      	cmp	r5, #0
 8005dcc:	f040 808e 	bne.w	8005eec <_printf_i+0x210>
 8005dd0:	4665      	mov	r5, ip
 8005dd2:	2a08      	cmp	r2, #8
 8005dd4:	d10b      	bne.n	8005dee <_printf_i+0x112>
 8005dd6:	6823      	ldr	r3, [r4, #0]
 8005dd8:	07db      	lsls	r3, r3, #31
 8005dda:	d508      	bpl.n	8005dee <_printf_i+0x112>
 8005ddc:	6923      	ldr	r3, [r4, #16]
 8005dde:	6862      	ldr	r2, [r4, #4]
 8005de0:	429a      	cmp	r2, r3
 8005de2:	bfde      	ittt	le
 8005de4:	2330      	movle	r3, #48	; 0x30
 8005de6:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005dea:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8005dee:	ebac 0305 	sub.w	r3, ip, r5
 8005df2:	6123      	str	r3, [r4, #16]
 8005df4:	f8cd 8000 	str.w	r8, [sp]
 8005df8:	463b      	mov	r3, r7
 8005dfa:	aa03      	add	r2, sp, #12
 8005dfc:	4621      	mov	r1, r4
 8005dfe:	4630      	mov	r0, r6
 8005e00:	f7ff fef6 	bl	8005bf0 <_printf_common>
 8005e04:	3001      	adds	r0, #1
 8005e06:	d14d      	bne.n	8005ea4 <_printf_i+0x1c8>
 8005e08:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005e0c:	b005      	add	sp, #20
 8005e0e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005e12:	4839      	ldr	r0, [pc, #228]	; (8005ef8 <_printf_i+0x21c>)
 8005e14:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8005e18:	6813      	ldr	r3, [r2, #0]
 8005e1a:	6821      	ldr	r1, [r4, #0]
 8005e1c:	1d1d      	adds	r5, r3, #4
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	6015      	str	r5, [r2, #0]
 8005e22:	060a      	lsls	r2, r1, #24
 8005e24:	d50b      	bpl.n	8005e3e <_printf_i+0x162>
 8005e26:	07ca      	lsls	r2, r1, #31
 8005e28:	bf44      	itt	mi
 8005e2a:	f041 0120 	orrmi.w	r1, r1, #32
 8005e2e:	6021      	strmi	r1, [r4, #0]
 8005e30:	b91b      	cbnz	r3, 8005e3a <_printf_i+0x15e>
 8005e32:	6822      	ldr	r2, [r4, #0]
 8005e34:	f022 0220 	bic.w	r2, r2, #32
 8005e38:	6022      	str	r2, [r4, #0]
 8005e3a:	2210      	movs	r2, #16
 8005e3c:	e7b7      	b.n	8005dae <_printf_i+0xd2>
 8005e3e:	064d      	lsls	r5, r1, #25
 8005e40:	bf48      	it	mi
 8005e42:	b29b      	uxthmi	r3, r3
 8005e44:	e7ef      	b.n	8005e26 <_printf_i+0x14a>
 8005e46:	4665      	mov	r5, ip
 8005e48:	fbb3 f1f2 	udiv	r1, r3, r2
 8005e4c:	fb02 3311 	mls	r3, r2, r1, r3
 8005e50:	5cc3      	ldrb	r3, [r0, r3]
 8005e52:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8005e56:	460b      	mov	r3, r1
 8005e58:	2900      	cmp	r1, #0
 8005e5a:	d1f5      	bne.n	8005e48 <_printf_i+0x16c>
 8005e5c:	e7b9      	b.n	8005dd2 <_printf_i+0xf6>
 8005e5e:	6813      	ldr	r3, [r2, #0]
 8005e60:	6825      	ldr	r5, [r4, #0]
 8005e62:	6961      	ldr	r1, [r4, #20]
 8005e64:	1d18      	adds	r0, r3, #4
 8005e66:	6010      	str	r0, [r2, #0]
 8005e68:	0628      	lsls	r0, r5, #24
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	d501      	bpl.n	8005e72 <_printf_i+0x196>
 8005e6e:	6019      	str	r1, [r3, #0]
 8005e70:	e002      	b.n	8005e78 <_printf_i+0x19c>
 8005e72:	066a      	lsls	r2, r5, #25
 8005e74:	d5fb      	bpl.n	8005e6e <_printf_i+0x192>
 8005e76:	8019      	strh	r1, [r3, #0]
 8005e78:	2300      	movs	r3, #0
 8005e7a:	6123      	str	r3, [r4, #16]
 8005e7c:	4665      	mov	r5, ip
 8005e7e:	e7b9      	b.n	8005df4 <_printf_i+0x118>
 8005e80:	6813      	ldr	r3, [r2, #0]
 8005e82:	1d19      	adds	r1, r3, #4
 8005e84:	6011      	str	r1, [r2, #0]
 8005e86:	681d      	ldr	r5, [r3, #0]
 8005e88:	6862      	ldr	r2, [r4, #4]
 8005e8a:	2100      	movs	r1, #0
 8005e8c:	4628      	mov	r0, r5
 8005e8e:	f7fa f9af 	bl	80001f0 <memchr>
 8005e92:	b108      	cbz	r0, 8005e98 <_printf_i+0x1bc>
 8005e94:	1b40      	subs	r0, r0, r5
 8005e96:	6060      	str	r0, [r4, #4]
 8005e98:	6863      	ldr	r3, [r4, #4]
 8005e9a:	6123      	str	r3, [r4, #16]
 8005e9c:	2300      	movs	r3, #0
 8005e9e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005ea2:	e7a7      	b.n	8005df4 <_printf_i+0x118>
 8005ea4:	6923      	ldr	r3, [r4, #16]
 8005ea6:	462a      	mov	r2, r5
 8005ea8:	4639      	mov	r1, r7
 8005eaa:	4630      	mov	r0, r6
 8005eac:	47c0      	blx	r8
 8005eae:	3001      	adds	r0, #1
 8005eb0:	d0aa      	beq.n	8005e08 <_printf_i+0x12c>
 8005eb2:	6823      	ldr	r3, [r4, #0]
 8005eb4:	079b      	lsls	r3, r3, #30
 8005eb6:	d413      	bmi.n	8005ee0 <_printf_i+0x204>
 8005eb8:	68e0      	ldr	r0, [r4, #12]
 8005eba:	9b03      	ldr	r3, [sp, #12]
 8005ebc:	4298      	cmp	r0, r3
 8005ebe:	bfb8      	it	lt
 8005ec0:	4618      	movlt	r0, r3
 8005ec2:	e7a3      	b.n	8005e0c <_printf_i+0x130>
 8005ec4:	2301      	movs	r3, #1
 8005ec6:	464a      	mov	r2, r9
 8005ec8:	4639      	mov	r1, r7
 8005eca:	4630      	mov	r0, r6
 8005ecc:	47c0      	blx	r8
 8005ece:	3001      	adds	r0, #1
 8005ed0:	d09a      	beq.n	8005e08 <_printf_i+0x12c>
 8005ed2:	3501      	adds	r5, #1
 8005ed4:	68e3      	ldr	r3, [r4, #12]
 8005ed6:	9a03      	ldr	r2, [sp, #12]
 8005ed8:	1a9b      	subs	r3, r3, r2
 8005eda:	42ab      	cmp	r3, r5
 8005edc:	dcf2      	bgt.n	8005ec4 <_printf_i+0x1e8>
 8005ede:	e7eb      	b.n	8005eb8 <_printf_i+0x1dc>
 8005ee0:	2500      	movs	r5, #0
 8005ee2:	f104 0919 	add.w	r9, r4, #25
 8005ee6:	e7f5      	b.n	8005ed4 <_printf_i+0x1f8>
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d1ac      	bne.n	8005e46 <_printf_i+0x16a>
 8005eec:	7803      	ldrb	r3, [r0, #0]
 8005eee:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005ef2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005ef6:	e76c      	b.n	8005dd2 <_printf_i+0xf6>
 8005ef8:	0800817a 	.word	0x0800817a
 8005efc:	0800818b 	.word	0x0800818b

08005f00 <siprintf>:
 8005f00:	b40e      	push	{r1, r2, r3}
 8005f02:	b500      	push	{lr}
 8005f04:	b09c      	sub	sp, #112	; 0x70
 8005f06:	ab1d      	add	r3, sp, #116	; 0x74
 8005f08:	9002      	str	r0, [sp, #8]
 8005f0a:	9006      	str	r0, [sp, #24]
 8005f0c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005f10:	4809      	ldr	r0, [pc, #36]	; (8005f38 <siprintf+0x38>)
 8005f12:	9107      	str	r1, [sp, #28]
 8005f14:	9104      	str	r1, [sp, #16]
 8005f16:	4909      	ldr	r1, [pc, #36]	; (8005f3c <siprintf+0x3c>)
 8005f18:	f853 2b04 	ldr.w	r2, [r3], #4
 8005f1c:	9105      	str	r1, [sp, #20]
 8005f1e:	6800      	ldr	r0, [r0, #0]
 8005f20:	9301      	str	r3, [sp, #4]
 8005f22:	a902      	add	r1, sp, #8
 8005f24:	f001 fa72 	bl	800740c <_svfiprintf_r>
 8005f28:	9b02      	ldr	r3, [sp, #8]
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	701a      	strb	r2, [r3, #0]
 8005f2e:	b01c      	add	sp, #112	; 0x70
 8005f30:	f85d eb04 	ldr.w	lr, [sp], #4
 8005f34:	b003      	add	sp, #12
 8005f36:	4770      	bx	lr
 8005f38:	20000014 	.word	0x20000014
 8005f3c:	ffff0208 	.word	0xffff0208

08005f40 <_vsiprintf_r>:
 8005f40:	b500      	push	{lr}
 8005f42:	b09b      	sub	sp, #108	; 0x6c
 8005f44:	9100      	str	r1, [sp, #0]
 8005f46:	9104      	str	r1, [sp, #16]
 8005f48:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005f4c:	9105      	str	r1, [sp, #20]
 8005f4e:	9102      	str	r1, [sp, #8]
 8005f50:	4905      	ldr	r1, [pc, #20]	; (8005f68 <_vsiprintf_r+0x28>)
 8005f52:	9103      	str	r1, [sp, #12]
 8005f54:	4669      	mov	r1, sp
 8005f56:	f001 fa59 	bl	800740c <_svfiprintf_r>
 8005f5a:	9b00      	ldr	r3, [sp, #0]
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	701a      	strb	r2, [r3, #0]
 8005f60:	b01b      	add	sp, #108	; 0x6c
 8005f62:	f85d fb04 	ldr.w	pc, [sp], #4
 8005f66:	bf00      	nop
 8005f68:	ffff0208 	.word	0xffff0208

08005f6c <vsiprintf>:
 8005f6c:	4613      	mov	r3, r2
 8005f6e:	460a      	mov	r2, r1
 8005f70:	4601      	mov	r1, r0
 8005f72:	4802      	ldr	r0, [pc, #8]	; (8005f7c <vsiprintf+0x10>)
 8005f74:	6800      	ldr	r0, [r0, #0]
 8005f76:	f7ff bfe3 	b.w	8005f40 <_vsiprintf_r>
 8005f7a:	bf00      	nop
 8005f7c:	20000014 	.word	0x20000014

08005f80 <quorem>:
 8005f80:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f84:	6903      	ldr	r3, [r0, #16]
 8005f86:	690c      	ldr	r4, [r1, #16]
 8005f88:	42a3      	cmp	r3, r4
 8005f8a:	4680      	mov	r8, r0
 8005f8c:	f2c0 8082 	blt.w	8006094 <quorem+0x114>
 8005f90:	3c01      	subs	r4, #1
 8005f92:	f101 0714 	add.w	r7, r1, #20
 8005f96:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8005f9a:	f100 0614 	add.w	r6, r0, #20
 8005f9e:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8005fa2:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8005fa6:	eb06 030c 	add.w	r3, r6, ip
 8005faa:	3501      	adds	r5, #1
 8005fac:	eb07 090c 	add.w	r9, r7, ip
 8005fb0:	9301      	str	r3, [sp, #4]
 8005fb2:	fbb0 f5f5 	udiv	r5, r0, r5
 8005fb6:	b395      	cbz	r5, 800601e <quorem+0x9e>
 8005fb8:	f04f 0a00 	mov.w	sl, #0
 8005fbc:	4638      	mov	r0, r7
 8005fbe:	46b6      	mov	lr, r6
 8005fc0:	46d3      	mov	fp, sl
 8005fc2:	f850 2b04 	ldr.w	r2, [r0], #4
 8005fc6:	b293      	uxth	r3, r2
 8005fc8:	fb05 a303 	mla	r3, r5, r3, sl
 8005fcc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005fd0:	b29b      	uxth	r3, r3
 8005fd2:	ebab 0303 	sub.w	r3, fp, r3
 8005fd6:	0c12      	lsrs	r2, r2, #16
 8005fd8:	f8de b000 	ldr.w	fp, [lr]
 8005fdc:	fb05 a202 	mla	r2, r5, r2, sl
 8005fe0:	fa13 f38b 	uxtah	r3, r3, fp
 8005fe4:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8005fe8:	fa1f fb82 	uxth.w	fp, r2
 8005fec:	f8de 2000 	ldr.w	r2, [lr]
 8005ff0:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8005ff4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005ff8:	b29b      	uxth	r3, r3
 8005ffa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005ffe:	4581      	cmp	r9, r0
 8006000:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8006004:	f84e 3b04 	str.w	r3, [lr], #4
 8006008:	d2db      	bcs.n	8005fc2 <quorem+0x42>
 800600a:	f856 300c 	ldr.w	r3, [r6, ip]
 800600e:	b933      	cbnz	r3, 800601e <quorem+0x9e>
 8006010:	9b01      	ldr	r3, [sp, #4]
 8006012:	3b04      	subs	r3, #4
 8006014:	429e      	cmp	r6, r3
 8006016:	461a      	mov	r2, r3
 8006018:	d330      	bcc.n	800607c <quorem+0xfc>
 800601a:	f8c8 4010 	str.w	r4, [r8, #16]
 800601e:	4640      	mov	r0, r8
 8006020:	f001 f81e 	bl	8007060 <__mcmp>
 8006024:	2800      	cmp	r0, #0
 8006026:	db25      	blt.n	8006074 <quorem+0xf4>
 8006028:	3501      	adds	r5, #1
 800602a:	4630      	mov	r0, r6
 800602c:	f04f 0c00 	mov.w	ip, #0
 8006030:	f857 2b04 	ldr.w	r2, [r7], #4
 8006034:	f8d0 e000 	ldr.w	lr, [r0]
 8006038:	b293      	uxth	r3, r2
 800603a:	ebac 0303 	sub.w	r3, ip, r3
 800603e:	0c12      	lsrs	r2, r2, #16
 8006040:	fa13 f38e 	uxtah	r3, r3, lr
 8006044:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006048:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800604c:	b29b      	uxth	r3, r3
 800604e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006052:	45b9      	cmp	r9, r7
 8006054:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006058:	f840 3b04 	str.w	r3, [r0], #4
 800605c:	d2e8      	bcs.n	8006030 <quorem+0xb0>
 800605e:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8006062:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8006066:	b92a      	cbnz	r2, 8006074 <quorem+0xf4>
 8006068:	3b04      	subs	r3, #4
 800606a:	429e      	cmp	r6, r3
 800606c:	461a      	mov	r2, r3
 800606e:	d30b      	bcc.n	8006088 <quorem+0x108>
 8006070:	f8c8 4010 	str.w	r4, [r8, #16]
 8006074:	4628      	mov	r0, r5
 8006076:	b003      	add	sp, #12
 8006078:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800607c:	6812      	ldr	r2, [r2, #0]
 800607e:	3b04      	subs	r3, #4
 8006080:	2a00      	cmp	r2, #0
 8006082:	d1ca      	bne.n	800601a <quorem+0x9a>
 8006084:	3c01      	subs	r4, #1
 8006086:	e7c5      	b.n	8006014 <quorem+0x94>
 8006088:	6812      	ldr	r2, [r2, #0]
 800608a:	3b04      	subs	r3, #4
 800608c:	2a00      	cmp	r2, #0
 800608e:	d1ef      	bne.n	8006070 <quorem+0xf0>
 8006090:	3c01      	subs	r4, #1
 8006092:	e7ea      	b.n	800606a <quorem+0xea>
 8006094:	2000      	movs	r0, #0
 8006096:	e7ee      	b.n	8006076 <quorem+0xf6>

08006098 <_dtoa_r>:
 8006098:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800609c:	ec57 6b10 	vmov	r6, r7, d0
 80060a0:	b097      	sub	sp, #92	; 0x5c
 80060a2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80060a4:	9106      	str	r1, [sp, #24]
 80060a6:	4604      	mov	r4, r0
 80060a8:	920b      	str	r2, [sp, #44]	; 0x2c
 80060aa:	9312      	str	r3, [sp, #72]	; 0x48
 80060ac:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80060b0:	e9cd 6700 	strd	r6, r7, [sp]
 80060b4:	b93d      	cbnz	r5, 80060c6 <_dtoa_r+0x2e>
 80060b6:	2010      	movs	r0, #16
 80060b8:	f000 fdb4 	bl	8006c24 <malloc>
 80060bc:	6260      	str	r0, [r4, #36]	; 0x24
 80060be:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80060c2:	6005      	str	r5, [r0, #0]
 80060c4:	60c5      	str	r5, [r0, #12]
 80060c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80060c8:	6819      	ldr	r1, [r3, #0]
 80060ca:	b151      	cbz	r1, 80060e2 <_dtoa_r+0x4a>
 80060cc:	685a      	ldr	r2, [r3, #4]
 80060ce:	604a      	str	r2, [r1, #4]
 80060d0:	2301      	movs	r3, #1
 80060d2:	4093      	lsls	r3, r2
 80060d4:	608b      	str	r3, [r1, #8]
 80060d6:	4620      	mov	r0, r4
 80060d8:	f000 fde0 	bl	8006c9c <_Bfree>
 80060dc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80060de:	2200      	movs	r2, #0
 80060e0:	601a      	str	r2, [r3, #0]
 80060e2:	1e3b      	subs	r3, r7, #0
 80060e4:	bfbb      	ittet	lt
 80060e6:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80060ea:	9301      	strlt	r3, [sp, #4]
 80060ec:	2300      	movge	r3, #0
 80060ee:	2201      	movlt	r2, #1
 80060f0:	bfac      	ite	ge
 80060f2:	f8c8 3000 	strge.w	r3, [r8]
 80060f6:	f8c8 2000 	strlt.w	r2, [r8]
 80060fa:	4baf      	ldr	r3, [pc, #700]	; (80063b8 <_dtoa_r+0x320>)
 80060fc:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8006100:	ea33 0308 	bics.w	r3, r3, r8
 8006104:	d114      	bne.n	8006130 <_dtoa_r+0x98>
 8006106:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006108:	f242 730f 	movw	r3, #9999	; 0x270f
 800610c:	6013      	str	r3, [r2, #0]
 800610e:	9b00      	ldr	r3, [sp, #0]
 8006110:	b923      	cbnz	r3, 800611c <_dtoa_r+0x84>
 8006112:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8006116:	2800      	cmp	r0, #0
 8006118:	f000 8542 	beq.w	8006ba0 <_dtoa_r+0xb08>
 800611c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800611e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 80063cc <_dtoa_r+0x334>
 8006122:	2b00      	cmp	r3, #0
 8006124:	f000 8544 	beq.w	8006bb0 <_dtoa_r+0xb18>
 8006128:	f10b 0303 	add.w	r3, fp, #3
 800612c:	f000 bd3e 	b.w	8006bac <_dtoa_r+0xb14>
 8006130:	e9dd 6700 	ldrd	r6, r7, [sp]
 8006134:	2200      	movs	r2, #0
 8006136:	2300      	movs	r3, #0
 8006138:	4630      	mov	r0, r6
 800613a:	4639      	mov	r1, r7
 800613c:	f7fa fccc 	bl	8000ad8 <__aeabi_dcmpeq>
 8006140:	4681      	mov	r9, r0
 8006142:	b168      	cbz	r0, 8006160 <_dtoa_r+0xc8>
 8006144:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006146:	2301      	movs	r3, #1
 8006148:	6013      	str	r3, [r2, #0]
 800614a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800614c:	2b00      	cmp	r3, #0
 800614e:	f000 8524 	beq.w	8006b9a <_dtoa_r+0xb02>
 8006152:	4b9a      	ldr	r3, [pc, #616]	; (80063bc <_dtoa_r+0x324>)
 8006154:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006156:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 800615a:	6013      	str	r3, [r2, #0]
 800615c:	f000 bd28 	b.w	8006bb0 <_dtoa_r+0xb18>
 8006160:	aa14      	add	r2, sp, #80	; 0x50
 8006162:	a915      	add	r1, sp, #84	; 0x54
 8006164:	ec47 6b10 	vmov	d0, r6, r7
 8006168:	4620      	mov	r0, r4
 800616a:	f000 fff0 	bl	800714e <__d2b>
 800616e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8006172:	9004      	str	r0, [sp, #16]
 8006174:	2d00      	cmp	r5, #0
 8006176:	d07c      	beq.n	8006272 <_dtoa_r+0x1da>
 8006178:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800617c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8006180:	46b2      	mov	sl, r6
 8006182:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8006186:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800618a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800618e:	2200      	movs	r2, #0
 8006190:	4b8b      	ldr	r3, [pc, #556]	; (80063c0 <_dtoa_r+0x328>)
 8006192:	4650      	mov	r0, sl
 8006194:	4659      	mov	r1, fp
 8006196:	f7fa f87f 	bl	8000298 <__aeabi_dsub>
 800619a:	a381      	add	r3, pc, #516	; (adr r3, 80063a0 <_dtoa_r+0x308>)
 800619c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061a0:	f7fa fa32 	bl	8000608 <__aeabi_dmul>
 80061a4:	a380      	add	r3, pc, #512	; (adr r3, 80063a8 <_dtoa_r+0x310>)
 80061a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061aa:	f7fa f877 	bl	800029c <__adddf3>
 80061ae:	4606      	mov	r6, r0
 80061b0:	4628      	mov	r0, r5
 80061b2:	460f      	mov	r7, r1
 80061b4:	f7fa f9be 	bl	8000534 <__aeabi_i2d>
 80061b8:	a37d      	add	r3, pc, #500	; (adr r3, 80063b0 <_dtoa_r+0x318>)
 80061ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061be:	f7fa fa23 	bl	8000608 <__aeabi_dmul>
 80061c2:	4602      	mov	r2, r0
 80061c4:	460b      	mov	r3, r1
 80061c6:	4630      	mov	r0, r6
 80061c8:	4639      	mov	r1, r7
 80061ca:	f7fa f867 	bl	800029c <__adddf3>
 80061ce:	4606      	mov	r6, r0
 80061d0:	460f      	mov	r7, r1
 80061d2:	f7fa fcc9 	bl	8000b68 <__aeabi_d2iz>
 80061d6:	2200      	movs	r2, #0
 80061d8:	4682      	mov	sl, r0
 80061da:	2300      	movs	r3, #0
 80061dc:	4630      	mov	r0, r6
 80061de:	4639      	mov	r1, r7
 80061e0:	f7fa fc84 	bl	8000aec <__aeabi_dcmplt>
 80061e4:	b148      	cbz	r0, 80061fa <_dtoa_r+0x162>
 80061e6:	4650      	mov	r0, sl
 80061e8:	f7fa f9a4 	bl	8000534 <__aeabi_i2d>
 80061ec:	4632      	mov	r2, r6
 80061ee:	463b      	mov	r3, r7
 80061f0:	f7fa fc72 	bl	8000ad8 <__aeabi_dcmpeq>
 80061f4:	b908      	cbnz	r0, 80061fa <_dtoa_r+0x162>
 80061f6:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80061fa:	f1ba 0f16 	cmp.w	sl, #22
 80061fe:	d859      	bhi.n	80062b4 <_dtoa_r+0x21c>
 8006200:	4970      	ldr	r1, [pc, #448]	; (80063c4 <_dtoa_r+0x32c>)
 8006202:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8006206:	e9dd 2300 	ldrd	r2, r3, [sp]
 800620a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800620e:	f7fa fc8b 	bl	8000b28 <__aeabi_dcmpgt>
 8006212:	2800      	cmp	r0, #0
 8006214:	d050      	beq.n	80062b8 <_dtoa_r+0x220>
 8006216:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800621a:	2300      	movs	r3, #0
 800621c:	930f      	str	r3, [sp, #60]	; 0x3c
 800621e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006220:	1b5d      	subs	r5, r3, r5
 8006222:	f1b5 0801 	subs.w	r8, r5, #1
 8006226:	bf49      	itett	mi
 8006228:	f1c5 0301 	rsbmi	r3, r5, #1
 800622c:	2300      	movpl	r3, #0
 800622e:	9305      	strmi	r3, [sp, #20]
 8006230:	f04f 0800 	movmi.w	r8, #0
 8006234:	bf58      	it	pl
 8006236:	9305      	strpl	r3, [sp, #20]
 8006238:	f1ba 0f00 	cmp.w	sl, #0
 800623c:	db3e      	blt.n	80062bc <_dtoa_r+0x224>
 800623e:	2300      	movs	r3, #0
 8006240:	44d0      	add	r8, sl
 8006242:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8006246:	9307      	str	r3, [sp, #28]
 8006248:	9b06      	ldr	r3, [sp, #24]
 800624a:	2b09      	cmp	r3, #9
 800624c:	f200 8090 	bhi.w	8006370 <_dtoa_r+0x2d8>
 8006250:	2b05      	cmp	r3, #5
 8006252:	bfc4      	itt	gt
 8006254:	3b04      	subgt	r3, #4
 8006256:	9306      	strgt	r3, [sp, #24]
 8006258:	9b06      	ldr	r3, [sp, #24]
 800625a:	f1a3 0302 	sub.w	r3, r3, #2
 800625e:	bfcc      	ite	gt
 8006260:	2500      	movgt	r5, #0
 8006262:	2501      	movle	r5, #1
 8006264:	2b03      	cmp	r3, #3
 8006266:	f200 808f 	bhi.w	8006388 <_dtoa_r+0x2f0>
 800626a:	e8df f003 	tbb	[pc, r3]
 800626e:	7f7d      	.short	0x7f7d
 8006270:	7131      	.short	0x7131
 8006272:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8006276:	441d      	add	r5, r3
 8006278:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800627c:	2820      	cmp	r0, #32
 800627e:	dd13      	ble.n	80062a8 <_dtoa_r+0x210>
 8006280:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8006284:	9b00      	ldr	r3, [sp, #0]
 8006286:	fa08 f800 	lsl.w	r8, r8, r0
 800628a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800628e:	fa23 f000 	lsr.w	r0, r3, r0
 8006292:	ea48 0000 	orr.w	r0, r8, r0
 8006296:	f7fa f93d 	bl	8000514 <__aeabi_ui2d>
 800629a:	2301      	movs	r3, #1
 800629c:	4682      	mov	sl, r0
 800629e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 80062a2:	3d01      	subs	r5, #1
 80062a4:	9313      	str	r3, [sp, #76]	; 0x4c
 80062a6:	e772      	b.n	800618e <_dtoa_r+0xf6>
 80062a8:	9b00      	ldr	r3, [sp, #0]
 80062aa:	f1c0 0020 	rsb	r0, r0, #32
 80062ae:	fa03 f000 	lsl.w	r0, r3, r0
 80062b2:	e7f0      	b.n	8006296 <_dtoa_r+0x1fe>
 80062b4:	2301      	movs	r3, #1
 80062b6:	e7b1      	b.n	800621c <_dtoa_r+0x184>
 80062b8:	900f      	str	r0, [sp, #60]	; 0x3c
 80062ba:	e7b0      	b.n	800621e <_dtoa_r+0x186>
 80062bc:	9b05      	ldr	r3, [sp, #20]
 80062be:	eba3 030a 	sub.w	r3, r3, sl
 80062c2:	9305      	str	r3, [sp, #20]
 80062c4:	f1ca 0300 	rsb	r3, sl, #0
 80062c8:	9307      	str	r3, [sp, #28]
 80062ca:	2300      	movs	r3, #0
 80062cc:	930e      	str	r3, [sp, #56]	; 0x38
 80062ce:	e7bb      	b.n	8006248 <_dtoa_r+0x1b0>
 80062d0:	2301      	movs	r3, #1
 80062d2:	930a      	str	r3, [sp, #40]	; 0x28
 80062d4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	dd59      	ble.n	800638e <_dtoa_r+0x2f6>
 80062da:	9302      	str	r3, [sp, #8]
 80062dc:	4699      	mov	r9, r3
 80062de:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80062e0:	2200      	movs	r2, #0
 80062e2:	6072      	str	r2, [r6, #4]
 80062e4:	2204      	movs	r2, #4
 80062e6:	f102 0014 	add.w	r0, r2, #20
 80062ea:	4298      	cmp	r0, r3
 80062ec:	6871      	ldr	r1, [r6, #4]
 80062ee:	d953      	bls.n	8006398 <_dtoa_r+0x300>
 80062f0:	4620      	mov	r0, r4
 80062f2:	f000 fc9f 	bl	8006c34 <_Balloc>
 80062f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80062f8:	6030      	str	r0, [r6, #0]
 80062fa:	f1b9 0f0e 	cmp.w	r9, #14
 80062fe:	f8d3 b000 	ldr.w	fp, [r3]
 8006302:	f200 80e6 	bhi.w	80064d2 <_dtoa_r+0x43a>
 8006306:	2d00      	cmp	r5, #0
 8006308:	f000 80e3 	beq.w	80064d2 <_dtoa_r+0x43a>
 800630c:	ed9d 7b00 	vldr	d7, [sp]
 8006310:	f1ba 0f00 	cmp.w	sl, #0
 8006314:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8006318:	dd74      	ble.n	8006404 <_dtoa_r+0x36c>
 800631a:	4a2a      	ldr	r2, [pc, #168]	; (80063c4 <_dtoa_r+0x32c>)
 800631c:	f00a 030f 	and.w	r3, sl, #15
 8006320:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006324:	ed93 7b00 	vldr	d7, [r3]
 8006328:	ea4f 162a 	mov.w	r6, sl, asr #4
 800632c:	06f0      	lsls	r0, r6, #27
 800632e:	ed8d 7b08 	vstr	d7, [sp, #32]
 8006332:	d565      	bpl.n	8006400 <_dtoa_r+0x368>
 8006334:	4b24      	ldr	r3, [pc, #144]	; (80063c8 <_dtoa_r+0x330>)
 8006336:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800633a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800633e:	f7fa fa8d 	bl	800085c <__aeabi_ddiv>
 8006342:	e9cd 0100 	strd	r0, r1, [sp]
 8006346:	f006 060f 	and.w	r6, r6, #15
 800634a:	2503      	movs	r5, #3
 800634c:	4f1e      	ldr	r7, [pc, #120]	; (80063c8 <_dtoa_r+0x330>)
 800634e:	e04c      	b.n	80063ea <_dtoa_r+0x352>
 8006350:	2301      	movs	r3, #1
 8006352:	930a      	str	r3, [sp, #40]	; 0x28
 8006354:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006356:	4453      	add	r3, sl
 8006358:	f103 0901 	add.w	r9, r3, #1
 800635c:	9302      	str	r3, [sp, #8]
 800635e:	464b      	mov	r3, r9
 8006360:	2b01      	cmp	r3, #1
 8006362:	bfb8      	it	lt
 8006364:	2301      	movlt	r3, #1
 8006366:	e7ba      	b.n	80062de <_dtoa_r+0x246>
 8006368:	2300      	movs	r3, #0
 800636a:	e7b2      	b.n	80062d2 <_dtoa_r+0x23a>
 800636c:	2300      	movs	r3, #0
 800636e:	e7f0      	b.n	8006352 <_dtoa_r+0x2ba>
 8006370:	2501      	movs	r5, #1
 8006372:	2300      	movs	r3, #0
 8006374:	9306      	str	r3, [sp, #24]
 8006376:	950a      	str	r5, [sp, #40]	; 0x28
 8006378:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800637c:	9302      	str	r3, [sp, #8]
 800637e:	4699      	mov	r9, r3
 8006380:	2200      	movs	r2, #0
 8006382:	2312      	movs	r3, #18
 8006384:	920b      	str	r2, [sp, #44]	; 0x2c
 8006386:	e7aa      	b.n	80062de <_dtoa_r+0x246>
 8006388:	2301      	movs	r3, #1
 800638a:	930a      	str	r3, [sp, #40]	; 0x28
 800638c:	e7f4      	b.n	8006378 <_dtoa_r+0x2e0>
 800638e:	2301      	movs	r3, #1
 8006390:	9302      	str	r3, [sp, #8]
 8006392:	4699      	mov	r9, r3
 8006394:	461a      	mov	r2, r3
 8006396:	e7f5      	b.n	8006384 <_dtoa_r+0x2ec>
 8006398:	3101      	adds	r1, #1
 800639a:	6071      	str	r1, [r6, #4]
 800639c:	0052      	lsls	r2, r2, #1
 800639e:	e7a2      	b.n	80062e6 <_dtoa_r+0x24e>
 80063a0:	636f4361 	.word	0x636f4361
 80063a4:	3fd287a7 	.word	0x3fd287a7
 80063a8:	8b60c8b3 	.word	0x8b60c8b3
 80063ac:	3fc68a28 	.word	0x3fc68a28
 80063b0:	509f79fb 	.word	0x509f79fb
 80063b4:	3fd34413 	.word	0x3fd34413
 80063b8:	7ff00000 	.word	0x7ff00000
 80063bc:	08008179 	.word	0x08008179
 80063c0:	3ff80000 	.word	0x3ff80000
 80063c4:	080081d8 	.word	0x080081d8
 80063c8:	080081b0 	.word	0x080081b0
 80063cc:	080081a5 	.word	0x080081a5
 80063d0:	07f1      	lsls	r1, r6, #31
 80063d2:	d508      	bpl.n	80063e6 <_dtoa_r+0x34e>
 80063d4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80063d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80063dc:	f7fa f914 	bl	8000608 <__aeabi_dmul>
 80063e0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80063e4:	3501      	adds	r5, #1
 80063e6:	1076      	asrs	r6, r6, #1
 80063e8:	3708      	adds	r7, #8
 80063ea:	2e00      	cmp	r6, #0
 80063ec:	d1f0      	bne.n	80063d0 <_dtoa_r+0x338>
 80063ee:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80063f2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80063f6:	f7fa fa31 	bl	800085c <__aeabi_ddiv>
 80063fa:	e9cd 0100 	strd	r0, r1, [sp]
 80063fe:	e01a      	b.n	8006436 <_dtoa_r+0x39e>
 8006400:	2502      	movs	r5, #2
 8006402:	e7a3      	b.n	800634c <_dtoa_r+0x2b4>
 8006404:	f000 80a0 	beq.w	8006548 <_dtoa_r+0x4b0>
 8006408:	f1ca 0600 	rsb	r6, sl, #0
 800640c:	4b9f      	ldr	r3, [pc, #636]	; (800668c <_dtoa_r+0x5f4>)
 800640e:	4fa0      	ldr	r7, [pc, #640]	; (8006690 <_dtoa_r+0x5f8>)
 8006410:	f006 020f 	and.w	r2, r6, #15
 8006414:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006418:	e9d3 2300 	ldrd	r2, r3, [r3]
 800641c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006420:	f7fa f8f2 	bl	8000608 <__aeabi_dmul>
 8006424:	e9cd 0100 	strd	r0, r1, [sp]
 8006428:	1136      	asrs	r6, r6, #4
 800642a:	2300      	movs	r3, #0
 800642c:	2502      	movs	r5, #2
 800642e:	2e00      	cmp	r6, #0
 8006430:	d17f      	bne.n	8006532 <_dtoa_r+0x49a>
 8006432:	2b00      	cmp	r3, #0
 8006434:	d1e1      	bne.n	80063fa <_dtoa_r+0x362>
 8006436:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006438:	2b00      	cmp	r3, #0
 800643a:	f000 8087 	beq.w	800654c <_dtoa_r+0x4b4>
 800643e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8006442:	2200      	movs	r2, #0
 8006444:	4b93      	ldr	r3, [pc, #588]	; (8006694 <_dtoa_r+0x5fc>)
 8006446:	4630      	mov	r0, r6
 8006448:	4639      	mov	r1, r7
 800644a:	f7fa fb4f 	bl	8000aec <__aeabi_dcmplt>
 800644e:	2800      	cmp	r0, #0
 8006450:	d07c      	beq.n	800654c <_dtoa_r+0x4b4>
 8006452:	f1b9 0f00 	cmp.w	r9, #0
 8006456:	d079      	beq.n	800654c <_dtoa_r+0x4b4>
 8006458:	9b02      	ldr	r3, [sp, #8]
 800645a:	2b00      	cmp	r3, #0
 800645c:	dd35      	ble.n	80064ca <_dtoa_r+0x432>
 800645e:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8006462:	9308      	str	r3, [sp, #32]
 8006464:	4639      	mov	r1, r7
 8006466:	2200      	movs	r2, #0
 8006468:	4b8b      	ldr	r3, [pc, #556]	; (8006698 <_dtoa_r+0x600>)
 800646a:	4630      	mov	r0, r6
 800646c:	f7fa f8cc 	bl	8000608 <__aeabi_dmul>
 8006470:	e9cd 0100 	strd	r0, r1, [sp]
 8006474:	9f02      	ldr	r7, [sp, #8]
 8006476:	3501      	adds	r5, #1
 8006478:	4628      	mov	r0, r5
 800647a:	f7fa f85b 	bl	8000534 <__aeabi_i2d>
 800647e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006482:	f7fa f8c1 	bl	8000608 <__aeabi_dmul>
 8006486:	2200      	movs	r2, #0
 8006488:	4b84      	ldr	r3, [pc, #528]	; (800669c <_dtoa_r+0x604>)
 800648a:	f7f9 ff07 	bl	800029c <__adddf3>
 800648e:	4605      	mov	r5, r0
 8006490:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8006494:	2f00      	cmp	r7, #0
 8006496:	d15d      	bne.n	8006554 <_dtoa_r+0x4bc>
 8006498:	2200      	movs	r2, #0
 800649a:	4b81      	ldr	r3, [pc, #516]	; (80066a0 <_dtoa_r+0x608>)
 800649c:	e9dd 0100 	ldrd	r0, r1, [sp]
 80064a0:	f7f9 fefa 	bl	8000298 <__aeabi_dsub>
 80064a4:	462a      	mov	r2, r5
 80064a6:	4633      	mov	r3, r6
 80064a8:	e9cd 0100 	strd	r0, r1, [sp]
 80064ac:	f7fa fb3c 	bl	8000b28 <__aeabi_dcmpgt>
 80064b0:	2800      	cmp	r0, #0
 80064b2:	f040 8288 	bne.w	80069c6 <_dtoa_r+0x92e>
 80064b6:	462a      	mov	r2, r5
 80064b8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80064bc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80064c0:	f7fa fb14 	bl	8000aec <__aeabi_dcmplt>
 80064c4:	2800      	cmp	r0, #0
 80064c6:	f040 827c 	bne.w	80069c2 <_dtoa_r+0x92a>
 80064ca:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80064ce:	e9cd 2300 	strd	r2, r3, [sp]
 80064d2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	f2c0 8150 	blt.w	800677a <_dtoa_r+0x6e2>
 80064da:	f1ba 0f0e 	cmp.w	sl, #14
 80064de:	f300 814c 	bgt.w	800677a <_dtoa_r+0x6e2>
 80064e2:	4b6a      	ldr	r3, [pc, #424]	; (800668c <_dtoa_r+0x5f4>)
 80064e4:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80064e8:	ed93 7b00 	vldr	d7, [r3]
 80064ec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80064f4:	f280 80d8 	bge.w	80066a8 <_dtoa_r+0x610>
 80064f8:	f1b9 0f00 	cmp.w	r9, #0
 80064fc:	f300 80d4 	bgt.w	80066a8 <_dtoa_r+0x610>
 8006500:	f040 825e 	bne.w	80069c0 <_dtoa_r+0x928>
 8006504:	2200      	movs	r2, #0
 8006506:	4b66      	ldr	r3, [pc, #408]	; (80066a0 <_dtoa_r+0x608>)
 8006508:	ec51 0b17 	vmov	r0, r1, d7
 800650c:	f7fa f87c 	bl	8000608 <__aeabi_dmul>
 8006510:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006514:	f7fa fafe 	bl	8000b14 <__aeabi_dcmpge>
 8006518:	464f      	mov	r7, r9
 800651a:	464e      	mov	r6, r9
 800651c:	2800      	cmp	r0, #0
 800651e:	f040 8234 	bne.w	800698a <_dtoa_r+0x8f2>
 8006522:	2331      	movs	r3, #49	; 0x31
 8006524:	f10b 0501 	add.w	r5, fp, #1
 8006528:	f88b 3000 	strb.w	r3, [fp]
 800652c:	f10a 0a01 	add.w	sl, sl, #1
 8006530:	e22f      	b.n	8006992 <_dtoa_r+0x8fa>
 8006532:	07f2      	lsls	r2, r6, #31
 8006534:	d505      	bpl.n	8006542 <_dtoa_r+0x4aa>
 8006536:	e9d7 2300 	ldrd	r2, r3, [r7]
 800653a:	f7fa f865 	bl	8000608 <__aeabi_dmul>
 800653e:	3501      	adds	r5, #1
 8006540:	2301      	movs	r3, #1
 8006542:	1076      	asrs	r6, r6, #1
 8006544:	3708      	adds	r7, #8
 8006546:	e772      	b.n	800642e <_dtoa_r+0x396>
 8006548:	2502      	movs	r5, #2
 800654a:	e774      	b.n	8006436 <_dtoa_r+0x39e>
 800654c:	f8cd a020 	str.w	sl, [sp, #32]
 8006550:	464f      	mov	r7, r9
 8006552:	e791      	b.n	8006478 <_dtoa_r+0x3e0>
 8006554:	4b4d      	ldr	r3, [pc, #308]	; (800668c <_dtoa_r+0x5f4>)
 8006556:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800655a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800655e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006560:	2b00      	cmp	r3, #0
 8006562:	d047      	beq.n	80065f4 <_dtoa_r+0x55c>
 8006564:	4602      	mov	r2, r0
 8006566:	460b      	mov	r3, r1
 8006568:	2000      	movs	r0, #0
 800656a:	494e      	ldr	r1, [pc, #312]	; (80066a4 <_dtoa_r+0x60c>)
 800656c:	f7fa f976 	bl	800085c <__aeabi_ddiv>
 8006570:	462a      	mov	r2, r5
 8006572:	4633      	mov	r3, r6
 8006574:	f7f9 fe90 	bl	8000298 <__aeabi_dsub>
 8006578:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800657c:	465d      	mov	r5, fp
 800657e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006582:	f7fa faf1 	bl	8000b68 <__aeabi_d2iz>
 8006586:	4606      	mov	r6, r0
 8006588:	f7f9 ffd4 	bl	8000534 <__aeabi_i2d>
 800658c:	4602      	mov	r2, r0
 800658e:	460b      	mov	r3, r1
 8006590:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006594:	f7f9 fe80 	bl	8000298 <__aeabi_dsub>
 8006598:	3630      	adds	r6, #48	; 0x30
 800659a:	f805 6b01 	strb.w	r6, [r5], #1
 800659e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80065a2:	e9cd 0100 	strd	r0, r1, [sp]
 80065a6:	f7fa faa1 	bl	8000aec <__aeabi_dcmplt>
 80065aa:	2800      	cmp	r0, #0
 80065ac:	d163      	bne.n	8006676 <_dtoa_r+0x5de>
 80065ae:	e9dd 2300 	ldrd	r2, r3, [sp]
 80065b2:	2000      	movs	r0, #0
 80065b4:	4937      	ldr	r1, [pc, #220]	; (8006694 <_dtoa_r+0x5fc>)
 80065b6:	f7f9 fe6f 	bl	8000298 <__aeabi_dsub>
 80065ba:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80065be:	f7fa fa95 	bl	8000aec <__aeabi_dcmplt>
 80065c2:	2800      	cmp	r0, #0
 80065c4:	f040 80b7 	bne.w	8006736 <_dtoa_r+0x69e>
 80065c8:	eba5 030b 	sub.w	r3, r5, fp
 80065cc:	429f      	cmp	r7, r3
 80065ce:	f77f af7c 	ble.w	80064ca <_dtoa_r+0x432>
 80065d2:	2200      	movs	r2, #0
 80065d4:	4b30      	ldr	r3, [pc, #192]	; (8006698 <_dtoa_r+0x600>)
 80065d6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80065da:	f7fa f815 	bl	8000608 <__aeabi_dmul>
 80065de:	2200      	movs	r2, #0
 80065e0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80065e4:	4b2c      	ldr	r3, [pc, #176]	; (8006698 <_dtoa_r+0x600>)
 80065e6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80065ea:	f7fa f80d 	bl	8000608 <__aeabi_dmul>
 80065ee:	e9cd 0100 	strd	r0, r1, [sp]
 80065f2:	e7c4      	b.n	800657e <_dtoa_r+0x4e6>
 80065f4:	462a      	mov	r2, r5
 80065f6:	4633      	mov	r3, r6
 80065f8:	f7fa f806 	bl	8000608 <__aeabi_dmul>
 80065fc:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8006600:	eb0b 0507 	add.w	r5, fp, r7
 8006604:	465e      	mov	r6, fp
 8006606:	e9dd 0100 	ldrd	r0, r1, [sp]
 800660a:	f7fa faad 	bl	8000b68 <__aeabi_d2iz>
 800660e:	4607      	mov	r7, r0
 8006610:	f7f9 ff90 	bl	8000534 <__aeabi_i2d>
 8006614:	3730      	adds	r7, #48	; 0x30
 8006616:	4602      	mov	r2, r0
 8006618:	460b      	mov	r3, r1
 800661a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800661e:	f7f9 fe3b 	bl	8000298 <__aeabi_dsub>
 8006622:	f806 7b01 	strb.w	r7, [r6], #1
 8006626:	42ae      	cmp	r6, r5
 8006628:	e9cd 0100 	strd	r0, r1, [sp]
 800662c:	f04f 0200 	mov.w	r2, #0
 8006630:	d126      	bne.n	8006680 <_dtoa_r+0x5e8>
 8006632:	4b1c      	ldr	r3, [pc, #112]	; (80066a4 <_dtoa_r+0x60c>)
 8006634:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006638:	f7f9 fe30 	bl	800029c <__adddf3>
 800663c:	4602      	mov	r2, r0
 800663e:	460b      	mov	r3, r1
 8006640:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006644:	f7fa fa70 	bl	8000b28 <__aeabi_dcmpgt>
 8006648:	2800      	cmp	r0, #0
 800664a:	d174      	bne.n	8006736 <_dtoa_r+0x69e>
 800664c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8006650:	2000      	movs	r0, #0
 8006652:	4914      	ldr	r1, [pc, #80]	; (80066a4 <_dtoa_r+0x60c>)
 8006654:	f7f9 fe20 	bl	8000298 <__aeabi_dsub>
 8006658:	4602      	mov	r2, r0
 800665a:	460b      	mov	r3, r1
 800665c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006660:	f7fa fa44 	bl	8000aec <__aeabi_dcmplt>
 8006664:	2800      	cmp	r0, #0
 8006666:	f43f af30 	beq.w	80064ca <_dtoa_r+0x432>
 800666a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800666e:	2b30      	cmp	r3, #48	; 0x30
 8006670:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8006674:	d002      	beq.n	800667c <_dtoa_r+0x5e4>
 8006676:	f8dd a020 	ldr.w	sl, [sp, #32]
 800667a:	e04a      	b.n	8006712 <_dtoa_r+0x67a>
 800667c:	4615      	mov	r5, r2
 800667e:	e7f4      	b.n	800666a <_dtoa_r+0x5d2>
 8006680:	4b05      	ldr	r3, [pc, #20]	; (8006698 <_dtoa_r+0x600>)
 8006682:	f7f9 ffc1 	bl	8000608 <__aeabi_dmul>
 8006686:	e9cd 0100 	strd	r0, r1, [sp]
 800668a:	e7bc      	b.n	8006606 <_dtoa_r+0x56e>
 800668c:	080081d8 	.word	0x080081d8
 8006690:	080081b0 	.word	0x080081b0
 8006694:	3ff00000 	.word	0x3ff00000
 8006698:	40240000 	.word	0x40240000
 800669c:	401c0000 	.word	0x401c0000
 80066a0:	40140000 	.word	0x40140000
 80066a4:	3fe00000 	.word	0x3fe00000
 80066a8:	e9dd 6700 	ldrd	r6, r7, [sp]
 80066ac:	465d      	mov	r5, fp
 80066ae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80066b2:	4630      	mov	r0, r6
 80066b4:	4639      	mov	r1, r7
 80066b6:	f7fa f8d1 	bl	800085c <__aeabi_ddiv>
 80066ba:	f7fa fa55 	bl	8000b68 <__aeabi_d2iz>
 80066be:	4680      	mov	r8, r0
 80066c0:	f7f9 ff38 	bl	8000534 <__aeabi_i2d>
 80066c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80066c8:	f7f9 ff9e 	bl	8000608 <__aeabi_dmul>
 80066cc:	4602      	mov	r2, r0
 80066ce:	460b      	mov	r3, r1
 80066d0:	4630      	mov	r0, r6
 80066d2:	4639      	mov	r1, r7
 80066d4:	f108 0630 	add.w	r6, r8, #48	; 0x30
 80066d8:	f7f9 fdde 	bl	8000298 <__aeabi_dsub>
 80066dc:	f805 6b01 	strb.w	r6, [r5], #1
 80066e0:	eba5 060b 	sub.w	r6, r5, fp
 80066e4:	45b1      	cmp	r9, r6
 80066e6:	4602      	mov	r2, r0
 80066e8:	460b      	mov	r3, r1
 80066ea:	d139      	bne.n	8006760 <_dtoa_r+0x6c8>
 80066ec:	f7f9 fdd6 	bl	800029c <__adddf3>
 80066f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80066f4:	4606      	mov	r6, r0
 80066f6:	460f      	mov	r7, r1
 80066f8:	f7fa fa16 	bl	8000b28 <__aeabi_dcmpgt>
 80066fc:	b9c8      	cbnz	r0, 8006732 <_dtoa_r+0x69a>
 80066fe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006702:	4630      	mov	r0, r6
 8006704:	4639      	mov	r1, r7
 8006706:	f7fa f9e7 	bl	8000ad8 <__aeabi_dcmpeq>
 800670a:	b110      	cbz	r0, 8006712 <_dtoa_r+0x67a>
 800670c:	f018 0f01 	tst.w	r8, #1
 8006710:	d10f      	bne.n	8006732 <_dtoa_r+0x69a>
 8006712:	9904      	ldr	r1, [sp, #16]
 8006714:	4620      	mov	r0, r4
 8006716:	f000 fac1 	bl	8006c9c <_Bfree>
 800671a:	2300      	movs	r3, #0
 800671c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800671e:	702b      	strb	r3, [r5, #0]
 8006720:	f10a 0301 	add.w	r3, sl, #1
 8006724:	6013      	str	r3, [r2, #0]
 8006726:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006728:	2b00      	cmp	r3, #0
 800672a:	f000 8241 	beq.w	8006bb0 <_dtoa_r+0xb18>
 800672e:	601d      	str	r5, [r3, #0]
 8006730:	e23e      	b.n	8006bb0 <_dtoa_r+0xb18>
 8006732:	f8cd a020 	str.w	sl, [sp, #32]
 8006736:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800673a:	2a39      	cmp	r2, #57	; 0x39
 800673c:	f105 33ff 	add.w	r3, r5, #4294967295	; 0xffffffff
 8006740:	d108      	bne.n	8006754 <_dtoa_r+0x6bc>
 8006742:	459b      	cmp	fp, r3
 8006744:	d10a      	bne.n	800675c <_dtoa_r+0x6c4>
 8006746:	9b08      	ldr	r3, [sp, #32]
 8006748:	3301      	adds	r3, #1
 800674a:	9308      	str	r3, [sp, #32]
 800674c:	2330      	movs	r3, #48	; 0x30
 800674e:	f88b 3000 	strb.w	r3, [fp]
 8006752:	465b      	mov	r3, fp
 8006754:	781a      	ldrb	r2, [r3, #0]
 8006756:	3201      	adds	r2, #1
 8006758:	701a      	strb	r2, [r3, #0]
 800675a:	e78c      	b.n	8006676 <_dtoa_r+0x5de>
 800675c:	461d      	mov	r5, r3
 800675e:	e7ea      	b.n	8006736 <_dtoa_r+0x69e>
 8006760:	2200      	movs	r2, #0
 8006762:	4b9b      	ldr	r3, [pc, #620]	; (80069d0 <_dtoa_r+0x938>)
 8006764:	f7f9 ff50 	bl	8000608 <__aeabi_dmul>
 8006768:	2200      	movs	r2, #0
 800676a:	2300      	movs	r3, #0
 800676c:	4606      	mov	r6, r0
 800676e:	460f      	mov	r7, r1
 8006770:	f7fa f9b2 	bl	8000ad8 <__aeabi_dcmpeq>
 8006774:	2800      	cmp	r0, #0
 8006776:	d09a      	beq.n	80066ae <_dtoa_r+0x616>
 8006778:	e7cb      	b.n	8006712 <_dtoa_r+0x67a>
 800677a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800677c:	2a00      	cmp	r2, #0
 800677e:	f000 808b 	beq.w	8006898 <_dtoa_r+0x800>
 8006782:	9a06      	ldr	r2, [sp, #24]
 8006784:	2a01      	cmp	r2, #1
 8006786:	dc6e      	bgt.n	8006866 <_dtoa_r+0x7ce>
 8006788:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800678a:	2a00      	cmp	r2, #0
 800678c:	d067      	beq.n	800685e <_dtoa_r+0x7c6>
 800678e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006792:	9f07      	ldr	r7, [sp, #28]
 8006794:	9d05      	ldr	r5, [sp, #20]
 8006796:	9a05      	ldr	r2, [sp, #20]
 8006798:	2101      	movs	r1, #1
 800679a:	441a      	add	r2, r3
 800679c:	4620      	mov	r0, r4
 800679e:	9205      	str	r2, [sp, #20]
 80067a0:	4498      	add	r8, r3
 80067a2:	f000 fb1b 	bl	8006ddc <__i2b>
 80067a6:	4606      	mov	r6, r0
 80067a8:	2d00      	cmp	r5, #0
 80067aa:	dd0c      	ble.n	80067c6 <_dtoa_r+0x72e>
 80067ac:	f1b8 0f00 	cmp.w	r8, #0
 80067b0:	dd09      	ble.n	80067c6 <_dtoa_r+0x72e>
 80067b2:	4545      	cmp	r5, r8
 80067b4:	9a05      	ldr	r2, [sp, #20]
 80067b6:	462b      	mov	r3, r5
 80067b8:	bfa8      	it	ge
 80067ba:	4643      	movge	r3, r8
 80067bc:	1ad2      	subs	r2, r2, r3
 80067be:	9205      	str	r2, [sp, #20]
 80067c0:	1aed      	subs	r5, r5, r3
 80067c2:	eba8 0803 	sub.w	r8, r8, r3
 80067c6:	9b07      	ldr	r3, [sp, #28]
 80067c8:	b1eb      	cbz	r3, 8006806 <_dtoa_r+0x76e>
 80067ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d067      	beq.n	80068a0 <_dtoa_r+0x808>
 80067d0:	b18f      	cbz	r7, 80067f6 <_dtoa_r+0x75e>
 80067d2:	4631      	mov	r1, r6
 80067d4:	463a      	mov	r2, r7
 80067d6:	4620      	mov	r0, r4
 80067d8:	f000 fba0 	bl	8006f1c <__pow5mult>
 80067dc:	9a04      	ldr	r2, [sp, #16]
 80067de:	4601      	mov	r1, r0
 80067e0:	4606      	mov	r6, r0
 80067e2:	4620      	mov	r0, r4
 80067e4:	f000 fb03 	bl	8006dee <__multiply>
 80067e8:	9904      	ldr	r1, [sp, #16]
 80067ea:	9008      	str	r0, [sp, #32]
 80067ec:	4620      	mov	r0, r4
 80067ee:	f000 fa55 	bl	8006c9c <_Bfree>
 80067f2:	9b08      	ldr	r3, [sp, #32]
 80067f4:	9304      	str	r3, [sp, #16]
 80067f6:	9b07      	ldr	r3, [sp, #28]
 80067f8:	1bda      	subs	r2, r3, r7
 80067fa:	d004      	beq.n	8006806 <_dtoa_r+0x76e>
 80067fc:	9904      	ldr	r1, [sp, #16]
 80067fe:	4620      	mov	r0, r4
 8006800:	f000 fb8c 	bl	8006f1c <__pow5mult>
 8006804:	9004      	str	r0, [sp, #16]
 8006806:	2101      	movs	r1, #1
 8006808:	4620      	mov	r0, r4
 800680a:	f000 fae7 	bl	8006ddc <__i2b>
 800680e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006810:	4607      	mov	r7, r0
 8006812:	2b00      	cmp	r3, #0
 8006814:	f000 81d0 	beq.w	8006bb8 <_dtoa_r+0xb20>
 8006818:	461a      	mov	r2, r3
 800681a:	4601      	mov	r1, r0
 800681c:	4620      	mov	r0, r4
 800681e:	f000 fb7d 	bl	8006f1c <__pow5mult>
 8006822:	9b06      	ldr	r3, [sp, #24]
 8006824:	2b01      	cmp	r3, #1
 8006826:	4607      	mov	r7, r0
 8006828:	dc40      	bgt.n	80068ac <_dtoa_r+0x814>
 800682a:	9b00      	ldr	r3, [sp, #0]
 800682c:	2b00      	cmp	r3, #0
 800682e:	d139      	bne.n	80068a4 <_dtoa_r+0x80c>
 8006830:	9b01      	ldr	r3, [sp, #4]
 8006832:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006836:	2b00      	cmp	r3, #0
 8006838:	d136      	bne.n	80068a8 <_dtoa_r+0x810>
 800683a:	9b01      	ldr	r3, [sp, #4]
 800683c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006840:	0d1b      	lsrs	r3, r3, #20
 8006842:	051b      	lsls	r3, r3, #20
 8006844:	b12b      	cbz	r3, 8006852 <_dtoa_r+0x7ba>
 8006846:	9b05      	ldr	r3, [sp, #20]
 8006848:	3301      	adds	r3, #1
 800684a:	9305      	str	r3, [sp, #20]
 800684c:	f108 0801 	add.w	r8, r8, #1
 8006850:	2301      	movs	r3, #1
 8006852:	9307      	str	r3, [sp, #28]
 8006854:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006856:	2b00      	cmp	r3, #0
 8006858:	d12a      	bne.n	80068b0 <_dtoa_r+0x818>
 800685a:	2001      	movs	r0, #1
 800685c:	e030      	b.n	80068c0 <_dtoa_r+0x828>
 800685e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006860:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006864:	e795      	b.n	8006792 <_dtoa_r+0x6fa>
 8006866:	9b07      	ldr	r3, [sp, #28]
 8006868:	f109 37ff 	add.w	r7, r9, #4294967295	; 0xffffffff
 800686c:	42bb      	cmp	r3, r7
 800686e:	bfbf      	itttt	lt
 8006870:	9b07      	ldrlt	r3, [sp, #28]
 8006872:	9707      	strlt	r7, [sp, #28]
 8006874:	1afa      	sublt	r2, r7, r3
 8006876:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8006878:	bfbb      	ittet	lt
 800687a:	189b      	addlt	r3, r3, r2
 800687c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800687e:	1bdf      	subge	r7, r3, r7
 8006880:	2700      	movlt	r7, #0
 8006882:	f1b9 0f00 	cmp.w	r9, #0
 8006886:	bfb5      	itete	lt
 8006888:	9b05      	ldrlt	r3, [sp, #20]
 800688a:	9d05      	ldrge	r5, [sp, #20]
 800688c:	eba3 0509 	sublt.w	r5, r3, r9
 8006890:	464b      	movge	r3, r9
 8006892:	bfb8      	it	lt
 8006894:	2300      	movlt	r3, #0
 8006896:	e77e      	b.n	8006796 <_dtoa_r+0x6fe>
 8006898:	9f07      	ldr	r7, [sp, #28]
 800689a:	9d05      	ldr	r5, [sp, #20]
 800689c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800689e:	e783      	b.n	80067a8 <_dtoa_r+0x710>
 80068a0:	9a07      	ldr	r2, [sp, #28]
 80068a2:	e7ab      	b.n	80067fc <_dtoa_r+0x764>
 80068a4:	2300      	movs	r3, #0
 80068a6:	e7d4      	b.n	8006852 <_dtoa_r+0x7ba>
 80068a8:	9b00      	ldr	r3, [sp, #0]
 80068aa:	e7d2      	b.n	8006852 <_dtoa_r+0x7ba>
 80068ac:	2300      	movs	r3, #0
 80068ae:	9307      	str	r3, [sp, #28]
 80068b0:	693b      	ldr	r3, [r7, #16]
 80068b2:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 80068b6:	6918      	ldr	r0, [r3, #16]
 80068b8:	f000 fa42 	bl	8006d40 <__hi0bits>
 80068bc:	f1c0 0020 	rsb	r0, r0, #32
 80068c0:	4440      	add	r0, r8
 80068c2:	f010 001f 	ands.w	r0, r0, #31
 80068c6:	d047      	beq.n	8006958 <_dtoa_r+0x8c0>
 80068c8:	f1c0 0320 	rsb	r3, r0, #32
 80068cc:	2b04      	cmp	r3, #4
 80068ce:	dd3b      	ble.n	8006948 <_dtoa_r+0x8b0>
 80068d0:	9b05      	ldr	r3, [sp, #20]
 80068d2:	f1c0 001c 	rsb	r0, r0, #28
 80068d6:	4403      	add	r3, r0
 80068d8:	9305      	str	r3, [sp, #20]
 80068da:	4405      	add	r5, r0
 80068dc:	4480      	add	r8, r0
 80068de:	9b05      	ldr	r3, [sp, #20]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	dd05      	ble.n	80068f0 <_dtoa_r+0x858>
 80068e4:	461a      	mov	r2, r3
 80068e6:	9904      	ldr	r1, [sp, #16]
 80068e8:	4620      	mov	r0, r4
 80068ea:	f000 fb65 	bl	8006fb8 <__lshift>
 80068ee:	9004      	str	r0, [sp, #16]
 80068f0:	f1b8 0f00 	cmp.w	r8, #0
 80068f4:	dd05      	ble.n	8006902 <_dtoa_r+0x86a>
 80068f6:	4639      	mov	r1, r7
 80068f8:	4642      	mov	r2, r8
 80068fa:	4620      	mov	r0, r4
 80068fc:	f000 fb5c 	bl	8006fb8 <__lshift>
 8006900:	4607      	mov	r7, r0
 8006902:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006904:	b353      	cbz	r3, 800695c <_dtoa_r+0x8c4>
 8006906:	4639      	mov	r1, r7
 8006908:	9804      	ldr	r0, [sp, #16]
 800690a:	f000 fba9 	bl	8007060 <__mcmp>
 800690e:	2800      	cmp	r0, #0
 8006910:	da24      	bge.n	800695c <_dtoa_r+0x8c4>
 8006912:	2300      	movs	r3, #0
 8006914:	220a      	movs	r2, #10
 8006916:	9904      	ldr	r1, [sp, #16]
 8006918:	4620      	mov	r0, r4
 800691a:	f000 f9d6 	bl	8006cca <__multadd>
 800691e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006920:	9004      	str	r0, [sp, #16]
 8006922:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8006926:	2b00      	cmp	r3, #0
 8006928:	f000 814d 	beq.w	8006bc6 <_dtoa_r+0xb2e>
 800692c:	2300      	movs	r3, #0
 800692e:	4631      	mov	r1, r6
 8006930:	220a      	movs	r2, #10
 8006932:	4620      	mov	r0, r4
 8006934:	f000 f9c9 	bl	8006cca <__multadd>
 8006938:	9b02      	ldr	r3, [sp, #8]
 800693a:	2b00      	cmp	r3, #0
 800693c:	4606      	mov	r6, r0
 800693e:	dc4f      	bgt.n	80069e0 <_dtoa_r+0x948>
 8006940:	9b06      	ldr	r3, [sp, #24]
 8006942:	2b02      	cmp	r3, #2
 8006944:	dd4c      	ble.n	80069e0 <_dtoa_r+0x948>
 8006946:	e011      	b.n	800696c <_dtoa_r+0x8d4>
 8006948:	d0c9      	beq.n	80068de <_dtoa_r+0x846>
 800694a:	9a05      	ldr	r2, [sp, #20]
 800694c:	331c      	adds	r3, #28
 800694e:	441a      	add	r2, r3
 8006950:	9205      	str	r2, [sp, #20]
 8006952:	441d      	add	r5, r3
 8006954:	4498      	add	r8, r3
 8006956:	e7c2      	b.n	80068de <_dtoa_r+0x846>
 8006958:	4603      	mov	r3, r0
 800695a:	e7f6      	b.n	800694a <_dtoa_r+0x8b2>
 800695c:	f1b9 0f00 	cmp.w	r9, #0
 8006960:	dc38      	bgt.n	80069d4 <_dtoa_r+0x93c>
 8006962:	9b06      	ldr	r3, [sp, #24]
 8006964:	2b02      	cmp	r3, #2
 8006966:	dd35      	ble.n	80069d4 <_dtoa_r+0x93c>
 8006968:	f8cd 9008 	str.w	r9, [sp, #8]
 800696c:	9b02      	ldr	r3, [sp, #8]
 800696e:	b963      	cbnz	r3, 800698a <_dtoa_r+0x8f2>
 8006970:	4639      	mov	r1, r7
 8006972:	2205      	movs	r2, #5
 8006974:	4620      	mov	r0, r4
 8006976:	f000 f9a8 	bl	8006cca <__multadd>
 800697a:	4601      	mov	r1, r0
 800697c:	4607      	mov	r7, r0
 800697e:	9804      	ldr	r0, [sp, #16]
 8006980:	f000 fb6e 	bl	8007060 <__mcmp>
 8006984:	2800      	cmp	r0, #0
 8006986:	f73f adcc 	bgt.w	8006522 <_dtoa_r+0x48a>
 800698a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800698c:	465d      	mov	r5, fp
 800698e:	ea6f 0a03 	mvn.w	sl, r3
 8006992:	f04f 0900 	mov.w	r9, #0
 8006996:	4639      	mov	r1, r7
 8006998:	4620      	mov	r0, r4
 800699a:	f000 f97f 	bl	8006c9c <_Bfree>
 800699e:	2e00      	cmp	r6, #0
 80069a0:	f43f aeb7 	beq.w	8006712 <_dtoa_r+0x67a>
 80069a4:	f1b9 0f00 	cmp.w	r9, #0
 80069a8:	d005      	beq.n	80069b6 <_dtoa_r+0x91e>
 80069aa:	45b1      	cmp	r9, r6
 80069ac:	d003      	beq.n	80069b6 <_dtoa_r+0x91e>
 80069ae:	4649      	mov	r1, r9
 80069b0:	4620      	mov	r0, r4
 80069b2:	f000 f973 	bl	8006c9c <_Bfree>
 80069b6:	4631      	mov	r1, r6
 80069b8:	4620      	mov	r0, r4
 80069ba:	f000 f96f 	bl	8006c9c <_Bfree>
 80069be:	e6a8      	b.n	8006712 <_dtoa_r+0x67a>
 80069c0:	2700      	movs	r7, #0
 80069c2:	463e      	mov	r6, r7
 80069c4:	e7e1      	b.n	800698a <_dtoa_r+0x8f2>
 80069c6:	f8dd a020 	ldr.w	sl, [sp, #32]
 80069ca:	463e      	mov	r6, r7
 80069cc:	e5a9      	b.n	8006522 <_dtoa_r+0x48a>
 80069ce:	bf00      	nop
 80069d0:	40240000 	.word	0x40240000
 80069d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80069d6:	f8cd 9008 	str.w	r9, [sp, #8]
 80069da:	2b00      	cmp	r3, #0
 80069dc:	f000 80fa 	beq.w	8006bd4 <_dtoa_r+0xb3c>
 80069e0:	2d00      	cmp	r5, #0
 80069e2:	dd05      	ble.n	80069f0 <_dtoa_r+0x958>
 80069e4:	4631      	mov	r1, r6
 80069e6:	462a      	mov	r2, r5
 80069e8:	4620      	mov	r0, r4
 80069ea:	f000 fae5 	bl	8006fb8 <__lshift>
 80069ee:	4606      	mov	r6, r0
 80069f0:	9b07      	ldr	r3, [sp, #28]
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d04c      	beq.n	8006a90 <_dtoa_r+0x9f8>
 80069f6:	6871      	ldr	r1, [r6, #4]
 80069f8:	4620      	mov	r0, r4
 80069fa:	f000 f91b 	bl	8006c34 <_Balloc>
 80069fe:	6932      	ldr	r2, [r6, #16]
 8006a00:	3202      	adds	r2, #2
 8006a02:	4605      	mov	r5, r0
 8006a04:	0092      	lsls	r2, r2, #2
 8006a06:	f106 010c 	add.w	r1, r6, #12
 8006a0a:	300c      	adds	r0, #12
 8006a0c:	f7fe fe08 	bl	8005620 <memcpy>
 8006a10:	2201      	movs	r2, #1
 8006a12:	4629      	mov	r1, r5
 8006a14:	4620      	mov	r0, r4
 8006a16:	f000 facf 	bl	8006fb8 <__lshift>
 8006a1a:	9b00      	ldr	r3, [sp, #0]
 8006a1c:	f8cd b014 	str.w	fp, [sp, #20]
 8006a20:	f003 0301 	and.w	r3, r3, #1
 8006a24:	46b1      	mov	r9, r6
 8006a26:	9307      	str	r3, [sp, #28]
 8006a28:	4606      	mov	r6, r0
 8006a2a:	4639      	mov	r1, r7
 8006a2c:	9804      	ldr	r0, [sp, #16]
 8006a2e:	f7ff faa7 	bl	8005f80 <quorem>
 8006a32:	4649      	mov	r1, r9
 8006a34:	4605      	mov	r5, r0
 8006a36:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8006a3a:	9804      	ldr	r0, [sp, #16]
 8006a3c:	f000 fb10 	bl	8007060 <__mcmp>
 8006a40:	4632      	mov	r2, r6
 8006a42:	9000      	str	r0, [sp, #0]
 8006a44:	4639      	mov	r1, r7
 8006a46:	4620      	mov	r0, r4
 8006a48:	f000 fb24 	bl	8007094 <__mdiff>
 8006a4c:	68c3      	ldr	r3, [r0, #12]
 8006a4e:	4602      	mov	r2, r0
 8006a50:	bb03      	cbnz	r3, 8006a94 <_dtoa_r+0x9fc>
 8006a52:	4601      	mov	r1, r0
 8006a54:	9008      	str	r0, [sp, #32]
 8006a56:	9804      	ldr	r0, [sp, #16]
 8006a58:	f000 fb02 	bl	8007060 <__mcmp>
 8006a5c:	9a08      	ldr	r2, [sp, #32]
 8006a5e:	4603      	mov	r3, r0
 8006a60:	4611      	mov	r1, r2
 8006a62:	4620      	mov	r0, r4
 8006a64:	9308      	str	r3, [sp, #32]
 8006a66:	f000 f919 	bl	8006c9c <_Bfree>
 8006a6a:	9b08      	ldr	r3, [sp, #32]
 8006a6c:	b9a3      	cbnz	r3, 8006a98 <_dtoa_r+0xa00>
 8006a6e:	9a06      	ldr	r2, [sp, #24]
 8006a70:	b992      	cbnz	r2, 8006a98 <_dtoa_r+0xa00>
 8006a72:	9a07      	ldr	r2, [sp, #28]
 8006a74:	b982      	cbnz	r2, 8006a98 <_dtoa_r+0xa00>
 8006a76:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8006a7a:	d029      	beq.n	8006ad0 <_dtoa_r+0xa38>
 8006a7c:	9b00      	ldr	r3, [sp, #0]
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	dd01      	ble.n	8006a86 <_dtoa_r+0x9ee>
 8006a82:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8006a86:	9b05      	ldr	r3, [sp, #20]
 8006a88:	1c5d      	adds	r5, r3, #1
 8006a8a:	f883 8000 	strb.w	r8, [r3]
 8006a8e:	e782      	b.n	8006996 <_dtoa_r+0x8fe>
 8006a90:	4630      	mov	r0, r6
 8006a92:	e7c2      	b.n	8006a1a <_dtoa_r+0x982>
 8006a94:	2301      	movs	r3, #1
 8006a96:	e7e3      	b.n	8006a60 <_dtoa_r+0x9c8>
 8006a98:	9a00      	ldr	r2, [sp, #0]
 8006a9a:	2a00      	cmp	r2, #0
 8006a9c:	db04      	blt.n	8006aa8 <_dtoa_r+0xa10>
 8006a9e:	d125      	bne.n	8006aec <_dtoa_r+0xa54>
 8006aa0:	9a06      	ldr	r2, [sp, #24]
 8006aa2:	bb1a      	cbnz	r2, 8006aec <_dtoa_r+0xa54>
 8006aa4:	9a07      	ldr	r2, [sp, #28]
 8006aa6:	bb0a      	cbnz	r2, 8006aec <_dtoa_r+0xa54>
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	ddec      	ble.n	8006a86 <_dtoa_r+0x9ee>
 8006aac:	2201      	movs	r2, #1
 8006aae:	9904      	ldr	r1, [sp, #16]
 8006ab0:	4620      	mov	r0, r4
 8006ab2:	f000 fa81 	bl	8006fb8 <__lshift>
 8006ab6:	4639      	mov	r1, r7
 8006ab8:	9004      	str	r0, [sp, #16]
 8006aba:	f000 fad1 	bl	8007060 <__mcmp>
 8006abe:	2800      	cmp	r0, #0
 8006ac0:	dc03      	bgt.n	8006aca <_dtoa_r+0xa32>
 8006ac2:	d1e0      	bne.n	8006a86 <_dtoa_r+0x9ee>
 8006ac4:	f018 0f01 	tst.w	r8, #1
 8006ac8:	d0dd      	beq.n	8006a86 <_dtoa_r+0x9ee>
 8006aca:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8006ace:	d1d8      	bne.n	8006a82 <_dtoa_r+0x9ea>
 8006ad0:	9b05      	ldr	r3, [sp, #20]
 8006ad2:	9a05      	ldr	r2, [sp, #20]
 8006ad4:	1c5d      	adds	r5, r3, #1
 8006ad6:	2339      	movs	r3, #57	; 0x39
 8006ad8:	7013      	strb	r3, [r2, #0]
 8006ada:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006ade:	2b39      	cmp	r3, #57	; 0x39
 8006ae0:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8006ae4:	d04f      	beq.n	8006b86 <_dtoa_r+0xaee>
 8006ae6:	3301      	adds	r3, #1
 8006ae8:	7013      	strb	r3, [r2, #0]
 8006aea:	e754      	b.n	8006996 <_dtoa_r+0x8fe>
 8006aec:	9a05      	ldr	r2, [sp, #20]
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	f102 0501 	add.w	r5, r2, #1
 8006af4:	dd06      	ble.n	8006b04 <_dtoa_r+0xa6c>
 8006af6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8006afa:	d0e9      	beq.n	8006ad0 <_dtoa_r+0xa38>
 8006afc:	f108 0801 	add.w	r8, r8, #1
 8006b00:	9b05      	ldr	r3, [sp, #20]
 8006b02:	e7c2      	b.n	8006a8a <_dtoa_r+0x9f2>
 8006b04:	9a02      	ldr	r2, [sp, #8]
 8006b06:	f805 8c01 	strb.w	r8, [r5, #-1]
 8006b0a:	eba5 030b 	sub.w	r3, r5, fp
 8006b0e:	4293      	cmp	r3, r2
 8006b10:	d021      	beq.n	8006b56 <_dtoa_r+0xabe>
 8006b12:	2300      	movs	r3, #0
 8006b14:	220a      	movs	r2, #10
 8006b16:	9904      	ldr	r1, [sp, #16]
 8006b18:	4620      	mov	r0, r4
 8006b1a:	f000 f8d6 	bl	8006cca <__multadd>
 8006b1e:	45b1      	cmp	r9, r6
 8006b20:	9004      	str	r0, [sp, #16]
 8006b22:	f04f 0300 	mov.w	r3, #0
 8006b26:	f04f 020a 	mov.w	r2, #10
 8006b2a:	4649      	mov	r1, r9
 8006b2c:	4620      	mov	r0, r4
 8006b2e:	d105      	bne.n	8006b3c <_dtoa_r+0xaa4>
 8006b30:	f000 f8cb 	bl	8006cca <__multadd>
 8006b34:	4681      	mov	r9, r0
 8006b36:	4606      	mov	r6, r0
 8006b38:	9505      	str	r5, [sp, #20]
 8006b3a:	e776      	b.n	8006a2a <_dtoa_r+0x992>
 8006b3c:	f000 f8c5 	bl	8006cca <__multadd>
 8006b40:	4631      	mov	r1, r6
 8006b42:	4681      	mov	r9, r0
 8006b44:	2300      	movs	r3, #0
 8006b46:	220a      	movs	r2, #10
 8006b48:	4620      	mov	r0, r4
 8006b4a:	f000 f8be 	bl	8006cca <__multadd>
 8006b4e:	4606      	mov	r6, r0
 8006b50:	e7f2      	b.n	8006b38 <_dtoa_r+0xaa0>
 8006b52:	f04f 0900 	mov.w	r9, #0
 8006b56:	2201      	movs	r2, #1
 8006b58:	9904      	ldr	r1, [sp, #16]
 8006b5a:	4620      	mov	r0, r4
 8006b5c:	f000 fa2c 	bl	8006fb8 <__lshift>
 8006b60:	4639      	mov	r1, r7
 8006b62:	9004      	str	r0, [sp, #16]
 8006b64:	f000 fa7c 	bl	8007060 <__mcmp>
 8006b68:	2800      	cmp	r0, #0
 8006b6a:	dcb6      	bgt.n	8006ada <_dtoa_r+0xa42>
 8006b6c:	d102      	bne.n	8006b74 <_dtoa_r+0xadc>
 8006b6e:	f018 0f01 	tst.w	r8, #1
 8006b72:	d1b2      	bne.n	8006ada <_dtoa_r+0xa42>
 8006b74:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006b78:	2b30      	cmp	r3, #48	; 0x30
 8006b7a:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8006b7e:	f47f af0a 	bne.w	8006996 <_dtoa_r+0x8fe>
 8006b82:	4615      	mov	r5, r2
 8006b84:	e7f6      	b.n	8006b74 <_dtoa_r+0xadc>
 8006b86:	4593      	cmp	fp, r2
 8006b88:	d105      	bne.n	8006b96 <_dtoa_r+0xafe>
 8006b8a:	2331      	movs	r3, #49	; 0x31
 8006b8c:	f10a 0a01 	add.w	sl, sl, #1
 8006b90:	f88b 3000 	strb.w	r3, [fp]
 8006b94:	e6ff      	b.n	8006996 <_dtoa_r+0x8fe>
 8006b96:	4615      	mov	r5, r2
 8006b98:	e79f      	b.n	8006ada <_dtoa_r+0xa42>
 8006b9a:	f8df b064 	ldr.w	fp, [pc, #100]	; 8006c00 <_dtoa_r+0xb68>
 8006b9e:	e007      	b.n	8006bb0 <_dtoa_r+0xb18>
 8006ba0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006ba2:	f8df b060 	ldr.w	fp, [pc, #96]	; 8006c04 <_dtoa_r+0xb6c>
 8006ba6:	b11b      	cbz	r3, 8006bb0 <_dtoa_r+0xb18>
 8006ba8:	f10b 0308 	add.w	r3, fp, #8
 8006bac:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006bae:	6013      	str	r3, [r2, #0]
 8006bb0:	4658      	mov	r0, fp
 8006bb2:	b017      	add	sp, #92	; 0x5c
 8006bb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006bb8:	9b06      	ldr	r3, [sp, #24]
 8006bba:	2b01      	cmp	r3, #1
 8006bbc:	f77f ae35 	ble.w	800682a <_dtoa_r+0x792>
 8006bc0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006bc2:	9307      	str	r3, [sp, #28]
 8006bc4:	e649      	b.n	800685a <_dtoa_r+0x7c2>
 8006bc6:	9b02      	ldr	r3, [sp, #8]
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	dc03      	bgt.n	8006bd4 <_dtoa_r+0xb3c>
 8006bcc:	9b06      	ldr	r3, [sp, #24]
 8006bce:	2b02      	cmp	r3, #2
 8006bd0:	f73f aecc 	bgt.w	800696c <_dtoa_r+0x8d4>
 8006bd4:	465d      	mov	r5, fp
 8006bd6:	4639      	mov	r1, r7
 8006bd8:	9804      	ldr	r0, [sp, #16]
 8006bda:	f7ff f9d1 	bl	8005f80 <quorem>
 8006bde:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8006be2:	f805 8b01 	strb.w	r8, [r5], #1
 8006be6:	9a02      	ldr	r2, [sp, #8]
 8006be8:	eba5 030b 	sub.w	r3, r5, fp
 8006bec:	429a      	cmp	r2, r3
 8006bee:	ddb0      	ble.n	8006b52 <_dtoa_r+0xaba>
 8006bf0:	2300      	movs	r3, #0
 8006bf2:	220a      	movs	r2, #10
 8006bf4:	9904      	ldr	r1, [sp, #16]
 8006bf6:	4620      	mov	r0, r4
 8006bf8:	f000 f867 	bl	8006cca <__multadd>
 8006bfc:	9004      	str	r0, [sp, #16]
 8006bfe:	e7ea      	b.n	8006bd6 <_dtoa_r+0xb3e>
 8006c00:	08008178 	.word	0x08008178
 8006c04:	0800819c 	.word	0x0800819c

08006c08 <_localeconv_r>:
 8006c08:	4b04      	ldr	r3, [pc, #16]	; (8006c1c <_localeconv_r+0x14>)
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	6a18      	ldr	r0, [r3, #32]
 8006c0e:	4b04      	ldr	r3, [pc, #16]	; (8006c20 <_localeconv_r+0x18>)
 8006c10:	2800      	cmp	r0, #0
 8006c12:	bf08      	it	eq
 8006c14:	4618      	moveq	r0, r3
 8006c16:	30f0      	adds	r0, #240	; 0xf0
 8006c18:	4770      	bx	lr
 8006c1a:	bf00      	nop
 8006c1c:	20000014 	.word	0x20000014
 8006c20:	20000078 	.word	0x20000078

08006c24 <malloc>:
 8006c24:	4b02      	ldr	r3, [pc, #8]	; (8006c30 <malloc+0xc>)
 8006c26:	4601      	mov	r1, r0
 8006c28:	6818      	ldr	r0, [r3, #0]
 8006c2a:	f000 bb3b 	b.w	80072a4 <_malloc_r>
 8006c2e:	bf00      	nop
 8006c30:	20000014 	.word	0x20000014

08006c34 <_Balloc>:
 8006c34:	b570      	push	{r4, r5, r6, lr}
 8006c36:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006c38:	4604      	mov	r4, r0
 8006c3a:	460e      	mov	r6, r1
 8006c3c:	b93d      	cbnz	r5, 8006c4e <_Balloc+0x1a>
 8006c3e:	2010      	movs	r0, #16
 8006c40:	f7ff fff0 	bl	8006c24 <malloc>
 8006c44:	6260      	str	r0, [r4, #36]	; 0x24
 8006c46:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006c4a:	6005      	str	r5, [r0, #0]
 8006c4c:	60c5      	str	r5, [r0, #12]
 8006c4e:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8006c50:	68eb      	ldr	r3, [r5, #12]
 8006c52:	b183      	cbz	r3, 8006c76 <_Balloc+0x42>
 8006c54:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006c56:	68db      	ldr	r3, [r3, #12]
 8006c58:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8006c5c:	b9b8      	cbnz	r0, 8006c8e <_Balloc+0x5a>
 8006c5e:	2101      	movs	r1, #1
 8006c60:	fa01 f506 	lsl.w	r5, r1, r6
 8006c64:	1d6a      	adds	r2, r5, #5
 8006c66:	0092      	lsls	r2, r2, #2
 8006c68:	4620      	mov	r0, r4
 8006c6a:	f000 fabf 	bl	80071ec <_calloc_r>
 8006c6e:	b160      	cbz	r0, 8006c8a <_Balloc+0x56>
 8006c70:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8006c74:	e00e      	b.n	8006c94 <_Balloc+0x60>
 8006c76:	2221      	movs	r2, #33	; 0x21
 8006c78:	2104      	movs	r1, #4
 8006c7a:	4620      	mov	r0, r4
 8006c7c:	f000 fab6 	bl	80071ec <_calloc_r>
 8006c80:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006c82:	60e8      	str	r0, [r5, #12]
 8006c84:	68db      	ldr	r3, [r3, #12]
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d1e4      	bne.n	8006c54 <_Balloc+0x20>
 8006c8a:	2000      	movs	r0, #0
 8006c8c:	bd70      	pop	{r4, r5, r6, pc}
 8006c8e:	6802      	ldr	r2, [r0, #0]
 8006c90:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8006c94:	2300      	movs	r3, #0
 8006c96:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006c9a:	e7f7      	b.n	8006c8c <_Balloc+0x58>

08006c9c <_Bfree>:
 8006c9c:	b570      	push	{r4, r5, r6, lr}
 8006c9e:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8006ca0:	4606      	mov	r6, r0
 8006ca2:	460d      	mov	r5, r1
 8006ca4:	b93c      	cbnz	r4, 8006cb6 <_Bfree+0x1a>
 8006ca6:	2010      	movs	r0, #16
 8006ca8:	f7ff ffbc 	bl	8006c24 <malloc>
 8006cac:	6270      	str	r0, [r6, #36]	; 0x24
 8006cae:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006cb2:	6004      	str	r4, [r0, #0]
 8006cb4:	60c4      	str	r4, [r0, #12]
 8006cb6:	b13d      	cbz	r5, 8006cc8 <_Bfree+0x2c>
 8006cb8:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8006cba:	686a      	ldr	r2, [r5, #4]
 8006cbc:	68db      	ldr	r3, [r3, #12]
 8006cbe:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006cc2:	6029      	str	r1, [r5, #0]
 8006cc4:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8006cc8:	bd70      	pop	{r4, r5, r6, pc}

08006cca <__multadd>:
 8006cca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006cce:	690d      	ldr	r5, [r1, #16]
 8006cd0:	461f      	mov	r7, r3
 8006cd2:	4606      	mov	r6, r0
 8006cd4:	460c      	mov	r4, r1
 8006cd6:	f101 0c14 	add.w	ip, r1, #20
 8006cda:	2300      	movs	r3, #0
 8006cdc:	f8dc 0000 	ldr.w	r0, [ip]
 8006ce0:	b281      	uxth	r1, r0
 8006ce2:	fb02 7101 	mla	r1, r2, r1, r7
 8006ce6:	0c0f      	lsrs	r7, r1, #16
 8006ce8:	0c00      	lsrs	r0, r0, #16
 8006cea:	fb02 7000 	mla	r0, r2, r0, r7
 8006cee:	b289      	uxth	r1, r1
 8006cf0:	3301      	adds	r3, #1
 8006cf2:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8006cf6:	429d      	cmp	r5, r3
 8006cf8:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8006cfc:	f84c 1b04 	str.w	r1, [ip], #4
 8006d00:	dcec      	bgt.n	8006cdc <__multadd+0x12>
 8006d02:	b1d7      	cbz	r7, 8006d3a <__multadd+0x70>
 8006d04:	68a3      	ldr	r3, [r4, #8]
 8006d06:	42ab      	cmp	r3, r5
 8006d08:	dc12      	bgt.n	8006d30 <__multadd+0x66>
 8006d0a:	6861      	ldr	r1, [r4, #4]
 8006d0c:	4630      	mov	r0, r6
 8006d0e:	3101      	adds	r1, #1
 8006d10:	f7ff ff90 	bl	8006c34 <_Balloc>
 8006d14:	6922      	ldr	r2, [r4, #16]
 8006d16:	3202      	adds	r2, #2
 8006d18:	f104 010c 	add.w	r1, r4, #12
 8006d1c:	4680      	mov	r8, r0
 8006d1e:	0092      	lsls	r2, r2, #2
 8006d20:	300c      	adds	r0, #12
 8006d22:	f7fe fc7d 	bl	8005620 <memcpy>
 8006d26:	4621      	mov	r1, r4
 8006d28:	4630      	mov	r0, r6
 8006d2a:	f7ff ffb7 	bl	8006c9c <_Bfree>
 8006d2e:	4644      	mov	r4, r8
 8006d30:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006d34:	3501      	adds	r5, #1
 8006d36:	615f      	str	r7, [r3, #20]
 8006d38:	6125      	str	r5, [r4, #16]
 8006d3a:	4620      	mov	r0, r4
 8006d3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08006d40 <__hi0bits>:
 8006d40:	0c02      	lsrs	r2, r0, #16
 8006d42:	0412      	lsls	r2, r2, #16
 8006d44:	4603      	mov	r3, r0
 8006d46:	b9b2      	cbnz	r2, 8006d76 <__hi0bits+0x36>
 8006d48:	0403      	lsls	r3, r0, #16
 8006d4a:	2010      	movs	r0, #16
 8006d4c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8006d50:	bf04      	itt	eq
 8006d52:	021b      	lsleq	r3, r3, #8
 8006d54:	3008      	addeq	r0, #8
 8006d56:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8006d5a:	bf04      	itt	eq
 8006d5c:	011b      	lsleq	r3, r3, #4
 8006d5e:	3004      	addeq	r0, #4
 8006d60:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8006d64:	bf04      	itt	eq
 8006d66:	009b      	lsleq	r3, r3, #2
 8006d68:	3002      	addeq	r0, #2
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	db06      	blt.n	8006d7c <__hi0bits+0x3c>
 8006d6e:	005b      	lsls	r3, r3, #1
 8006d70:	d503      	bpl.n	8006d7a <__hi0bits+0x3a>
 8006d72:	3001      	adds	r0, #1
 8006d74:	4770      	bx	lr
 8006d76:	2000      	movs	r0, #0
 8006d78:	e7e8      	b.n	8006d4c <__hi0bits+0xc>
 8006d7a:	2020      	movs	r0, #32
 8006d7c:	4770      	bx	lr

08006d7e <__lo0bits>:
 8006d7e:	6803      	ldr	r3, [r0, #0]
 8006d80:	f013 0207 	ands.w	r2, r3, #7
 8006d84:	4601      	mov	r1, r0
 8006d86:	d00b      	beq.n	8006da0 <__lo0bits+0x22>
 8006d88:	07da      	lsls	r2, r3, #31
 8006d8a:	d423      	bmi.n	8006dd4 <__lo0bits+0x56>
 8006d8c:	0798      	lsls	r0, r3, #30
 8006d8e:	bf49      	itett	mi
 8006d90:	085b      	lsrmi	r3, r3, #1
 8006d92:	089b      	lsrpl	r3, r3, #2
 8006d94:	2001      	movmi	r0, #1
 8006d96:	600b      	strmi	r3, [r1, #0]
 8006d98:	bf5c      	itt	pl
 8006d9a:	600b      	strpl	r3, [r1, #0]
 8006d9c:	2002      	movpl	r0, #2
 8006d9e:	4770      	bx	lr
 8006da0:	b298      	uxth	r0, r3
 8006da2:	b9a8      	cbnz	r0, 8006dd0 <__lo0bits+0x52>
 8006da4:	0c1b      	lsrs	r3, r3, #16
 8006da6:	2010      	movs	r0, #16
 8006da8:	f013 0fff 	tst.w	r3, #255	; 0xff
 8006dac:	bf04      	itt	eq
 8006dae:	0a1b      	lsreq	r3, r3, #8
 8006db0:	3008      	addeq	r0, #8
 8006db2:	071a      	lsls	r2, r3, #28
 8006db4:	bf04      	itt	eq
 8006db6:	091b      	lsreq	r3, r3, #4
 8006db8:	3004      	addeq	r0, #4
 8006dba:	079a      	lsls	r2, r3, #30
 8006dbc:	bf04      	itt	eq
 8006dbe:	089b      	lsreq	r3, r3, #2
 8006dc0:	3002      	addeq	r0, #2
 8006dc2:	07da      	lsls	r2, r3, #31
 8006dc4:	d402      	bmi.n	8006dcc <__lo0bits+0x4e>
 8006dc6:	085b      	lsrs	r3, r3, #1
 8006dc8:	d006      	beq.n	8006dd8 <__lo0bits+0x5a>
 8006dca:	3001      	adds	r0, #1
 8006dcc:	600b      	str	r3, [r1, #0]
 8006dce:	4770      	bx	lr
 8006dd0:	4610      	mov	r0, r2
 8006dd2:	e7e9      	b.n	8006da8 <__lo0bits+0x2a>
 8006dd4:	2000      	movs	r0, #0
 8006dd6:	4770      	bx	lr
 8006dd8:	2020      	movs	r0, #32
 8006dda:	4770      	bx	lr

08006ddc <__i2b>:
 8006ddc:	b510      	push	{r4, lr}
 8006dde:	460c      	mov	r4, r1
 8006de0:	2101      	movs	r1, #1
 8006de2:	f7ff ff27 	bl	8006c34 <_Balloc>
 8006de6:	2201      	movs	r2, #1
 8006de8:	6144      	str	r4, [r0, #20]
 8006dea:	6102      	str	r2, [r0, #16]
 8006dec:	bd10      	pop	{r4, pc}

08006dee <__multiply>:
 8006dee:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006df2:	4614      	mov	r4, r2
 8006df4:	690a      	ldr	r2, [r1, #16]
 8006df6:	6923      	ldr	r3, [r4, #16]
 8006df8:	429a      	cmp	r2, r3
 8006dfa:	bfb8      	it	lt
 8006dfc:	460b      	movlt	r3, r1
 8006dfe:	4688      	mov	r8, r1
 8006e00:	bfbc      	itt	lt
 8006e02:	46a0      	movlt	r8, r4
 8006e04:	461c      	movlt	r4, r3
 8006e06:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8006e0a:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8006e0e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006e12:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8006e16:	eb07 0609 	add.w	r6, r7, r9
 8006e1a:	42b3      	cmp	r3, r6
 8006e1c:	bfb8      	it	lt
 8006e1e:	3101      	addlt	r1, #1
 8006e20:	f7ff ff08 	bl	8006c34 <_Balloc>
 8006e24:	f100 0514 	add.w	r5, r0, #20
 8006e28:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8006e2c:	462b      	mov	r3, r5
 8006e2e:	2200      	movs	r2, #0
 8006e30:	4573      	cmp	r3, lr
 8006e32:	d316      	bcc.n	8006e62 <__multiply+0x74>
 8006e34:	f104 0214 	add.w	r2, r4, #20
 8006e38:	f108 0114 	add.w	r1, r8, #20
 8006e3c:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8006e40:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8006e44:	9300      	str	r3, [sp, #0]
 8006e46:	9b00      	ldr	r3, [sp, #0]
 8006e48:	9201      	str	r2, [sp, #4]
 8006e4a:	4293      	cmp	r3, r2
 8006e4c:	d80c      	bhi.n	8006e68 <__multiply+0x7a>
 8006e4e:	2e00      	cmp	r6, #0
 8006e50:	dd03      	ble.n	8006e5a <__multiply+0x6c>
 8006e52:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d05d      	beq.n	8006f16 <__multiply+0x128>
 8006e5a:	6106      	str	r6, [r0, #16]
 8006e5c:	b003      	add	sp, #12
 8006e5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e62:	f843 2b04 	str.w	r2, [r3], #4
 8006e66:	e7e3      	b.n	8006e30 <__multiply+0x42>
 8006e68:	f8b2 b000 	ldrh.w	fp, [r2]
 8006e6c:	f1bb 0f00 	cmp.w	fp, #0
 8006e70:	d023      	beq.n	8006eba <__multiply+0xcc>
 8006e72:	4689      	mov	r9, r1
 8006e74:	46ac      	mov	ip, r5
 8006e76:	f04f 0800 	mov.w	r8, #0
 8006e7a:	f859 4b04 	ldr.w	r4, [r9], #4
 8006e7e:	f8dc a000 	ldr.w	sl, [ip]
 8006e82:	b2a3      	uxth	r3, r4
 8006e84:	fa1f fa8a 	uxth.w	sl, sl
 8006e88:	fb0b a303 	mla	r3, fp, r3, sl
 8006e8c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8006e90:	f8dc 4000 	ldr.w	r4, [ip]
 8006e94:	4443      	add	r3, r8
 8006e96:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8006e9a:	fb0b 840a 	mla	r4, fp, sl, r8
 8006e9e:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8006ea2:	46e2      	mov	sl, ip
 8006ea4:	b29b      	uxth	r3, r3
 8006ea6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8006eaa:	454f      	cmp	r7, r9
 8006eac:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8006eb0:	f84a 3b04 	str.w	r3, [sl], #4
 8006eb4:	d82b      	bhi.n	8006f0e <__multiply+0x120>
 8006eb6:	f8cc 8004 	str.w	r8, [ip, #4]
 8006eba:	9b01      	ldr	r3, [sp, #4]
 8006ebc:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8006ec0:	3204      	adds	r2, #4
 8006ec2:	f1ba 0f00 	cmp.w	sl, #0
 8006ec6:	d020      	beq.n	8006f0a <__multiply+0x11c>
 8006ec8:	682b      	ldr	r3, [r5, #0]
 8006eca:	4689      	mov	r9, r1
 8006ecc:	46a8      	mov	r8, r5
 8006ece:	f04f 0b00 	mov.w	fp, #0
 8006ed2:	f8b9 c000 	ldrh.w	ip, [r9]
 8006ed6:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8006eda:	fb0a 440c 	mla	r4, sl, ip, r4
 8006ede:	445c      	add	r4, fp
 8006ee0:	46c4      	mov	ip, r8
 8006ee2:	b29b      	uxth	r3, r3
 8006ee4:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8006ee8:	f84c 3b04 	str.w	r3, [ip], #4
 8006eec:	f859 3b04 	ldr.w	r3, [r9], #4
 8006ef0:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8006ef4:	0c1b      	lsrs	r3, r3, #16
 8006ef6:	fb0a b303 	mla	r3, sl, r3, fp
 8006efa:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8006efe:	454f      	cmp	r7, r9
 8006f00:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8006f04:	d805      	bhi.n	8006f12 <__multiply+0x124>
 8006f06:	f8c8 3004 	str.w	r3, [r8, #4]
 8006f0a:	3504      	adds	r5, #4
 8006f0c:	e79b      	b.n	8006e46 <__multiply+0x58>
 8006f0e:	46d4      	mov	ip, sl
 8006f10:	e7b3      	b.n	8006e7a <__multiply+0x8c>
 8006f12:	46e0      	mov	r8, ip
 8006f14:	e7dd      	b.n	8006ed2 <__multiply+0xe4>
 8006f16:	3e01      	subs	r6, #1
 8006f18:	e799      	b.n	8006e4e <__multiply+0x60>
	...

08006f1c <__pow5mult>:
 8006f1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006f20:	4615      	mov	r5, r2
 8006f22:	f012 0203 	ands.w	r2, r2, #3
 8006f26:	4606      	mov	r6, r0
 8006f28:	460f      	mov	r7, r1
 8006f2a:	d007      	beq.n	8006f3c <__pow5mult+0x20>
 8006f2c:	3a01      	subs	r2, #1
 8006f2e:	4c21      	ldr	r4, [pc, #132]	; (8006fb4 <__pow5mult+0x98>)
 8006f30:	2300      	movs	r3, #0
 8006f32:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006f36:	f7ff fec8 	bl	8006cca <__multadd>
 8006f3a:	4607      	mov	r7, r0
 8006f3c:	10ad      	asrs	r5, r5, #2
 8006f3e:	d035      	beq.n	8006fac <__pow5mult+0x90>
 8006f40:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006f42:	b93c      	cbnz	r4, 8006f54 <__pow5mult+0x38>
 8006f44:	2010      	movs	r0, #16
 8006f46:	f7ff fe6d 	bl	8006c24 <malloc>
 8006f4a:	6270      	str	r0, [r6, #36]	; 0x24
 8006f4c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006f50:	6004      	str	r4, [r0, #0]
 8006f52:	60c4      	str	r4, [r0, #12]
 8006f54:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006f58:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006f5c:	b94c      	cbnz	r4, 8006f72 <__pow5mult+0x56>
 8006f5e:	f240 2171 	movw	r1, #625	; 0x271
 8006f62:	4630      	mov	r0, r6
 8006f64:	f7ff ff3a 	bl	8006ddc <__i2b>
 8006f68:	2300      	movs	r3, #0
 8006f6a:	f8c8 0008 	str.w	r0, [r8, #8]
 8006f6e:	4604      	mov	r4, r0
 8006f70:	6003      	str	r3, [r0, #0]
 8006f72:	f04f 0800 	mov.w	r8, #0
 8006f76:	07eb      	lsls	r3, r5, #31
 8006f78:	d50a      	bpl.n	8006f90 <__pow5mult+0x74>
 8006f7a:	4639      	mov	r1, r7
 8006f7c:	4622      	mov	r2, r4
 8006f7e:	4630      	mov	r0, r6
 8006f80:	f7ff ff35 	bl	8006dee <__multiply>
 8006f84:	4639      	mov	r1, r7
 8006f86:	4681      	mov	r9, r0
 8006f88:	4630      	mov	r0, r6
 8006f8a:	f7ff fe87 	bl	8006c9c <_Bfree>
 8006f8e:	464f      	mov	r7, r9
 8006f90:	106d      	asrs	r5, r5, #1
 8006f92:	d00b      	beq.n	8006fac <__pow5mult+0x90>
 8006f94:	6820      	ldr	r0, [r4, #0]
 8006f96:	b938      	cbnz	r0, 8006fa8 <__pow5mult+0x8c>
 8006f98:	4622      	mov	r2, r4
 8006f9a:	4621      	mov	r1, r4
 8006f9c:	4630      	mov	r0, r6
 8006f9e:	f7ff ff26 	bl	8006dee <__multiply>
 8006fa2:	6020      	str	r0, [r4, #0]
 8006fa4:	f8c0 8000 	str.w	r8, [r0]
 8006fa8:	4604      	mov	r4, r0
 8006faa:	e7e4      	b.n	8006f76 <__pow5mult+0x5a>
 8006fac:	4638      	mov	r0, r7
 8006fae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006fb2:	bf00      	nop
 8006fb4:	080082a0 	.word	0x080082a0

08006fb8 <__lshift>:
 8006fb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006fbc:	460c      	mov	r4, r1
 8006fbe:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006fc2:	6923      	ldr	r3, [r4, #16]
 8006fc4:	6849      	ldr	r1, [r1, #4]
 8006fc6:	eb0a 0903 	add.w	r9, sl, r3
 8006fca:	68a3      	ldr	r3, [r4, #8]
 8006fcc:	4607      	mov	r7, r0
 8006fce:	4616      	mov	r6, r2
 8006fd0:	f109 0501 	add.w	r5, r9, #1
 8006fd4:	42ab      	cmp	r3, r5
 8006fd6:	db32      	blt.n	800703e <__lshift+0x86>
 8006fd8:	4638      	mov	r0, r7
 8006fda:	f7ff fe2b 	bl	8006c34 <_Balloc>
 8006fde:	2300      	movs	r3, #0
 8006fe0:	4680      	mov	r8, r0
 8006fe2:	f100 0114 	add.w	r1, r0, #20
 8006fe6:	461a      	mov	r2, r3
 8006fe8:	4553      	cmp	r3, sl
 8006fea:	db2b      	blt.n	8007044 <__lshift+0x8c>
 8006fec:	6920      	ldr	r0, [r4, #16]
 8006fee:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006ff2:	f104 0314 	add.w	r3, r4, #20
 8006ff6:	f016 021f 	ands.w	r2, r6, #31
 8006ffa:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006ffe:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007002:	d025      	beq.n	8007050 <__lshift+0x98>
 8007004:	f1c2 0e20 	rsb	lr, r2, #32
 8007008:	2000      	movs	r0, #0
 800700a:	681e      	ldr	r6, [r3, #0]
 800700c:	468a      	mov	sl, r1
 800700e:	4096      	lsls	r6, r2
 8007010:	4330      	orrs	r0, r6
 8007012:	f84a 0b04 	str.w	r0, [sl], #4
 8007016:	f853 0b04 	ldr.w	r0, [r3], #4
 800701a:	459c      	cmp	ip, r3
 800701c:	fa20 f00e 	lsr.w	r0, r0, lr
 8007020:	d814      	bhi.n	800704c <__lshift+0x94>
 8007022:	6048      	str	r0, [r1, #4]
 8007024:	b108      	cbz	r0, 800702a <__lshift+0x72>
 8007026:	f109 0502 	add.w	r5, r9, #2
 800702a:	3d01      	subs	r5, #1
 800702c:	4638      	mov	r0, r7
 800702e:	f8c8 5010 	str.w	r5, [r8, #16]
 8007032:	4621      	mov	r1, r4
 8007034:	f7ff fe32 	bl	8006c9c <_Bfree>
 8007038:	4640      	mov	r0, r8
 800703a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800703e:	3101      	adds	r1, #1
 8007040:	005b      	lsls	r3, r3, #1
 8007042:	e7c7      	b.n	8006fd4 <__lshift+0x1c>
 8007044:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8007048:	3301      	adds	r3, #1
 800704a:	e7cd      	b.n	8006fe8 <__lshift+0x30>
 800704c:	4651      	mov	r1, sl
 800704e:	e7dc      	b.n	800700a <__lshift+0x52>
 8007050:	3904      	subs	r1, #4
 8007052:	f853 2b04 	ldr.w	r2, [r3], #4
 8007056:	f841 2f04 	str.w	r2, [r1, #4]!
 800705a:	459c      	cmp	ip, r3
 800705c:	d8f9      	bhi.n	8007052 <__lshift+0x9a>
 800705e:	e7e4      	b.n	800702a <__lshift+0x72>

08007060 <__mcmp>:
 8007060:	6903      	ldr	r3, [r0, #16]
 8007062:	690a      	ldr	r2, [r1, #16]
 8007064:	1a9b      	subs	r3, r3, r2
 8007066:	b530      	push	{r4, r5, lr}
 8007068:	d10c      	bne.n	8007084 <__mcmp+0x24>
 800706a:	0092      	lsls	r2, r2, #2
 800706c:	3014      	adds	r0, #20
 800706e:	3114      	adds	r1, #20
 8007070:	1884      	adds	r4, r0, r2
 8007072:	4411      	add	r1, r2
 8007074:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007078:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800707c:	4295      	cmp	r5, r2
 800707e:	d003      	beq.n	8007088 <__mcmp+0x28>
 8007080:	d305      	bcc.n	800708e <__mcmp+0x2e>
 8007082:	2301      	movs	r3, #1
 8007084:	4618      	mov	r0, r3
 8007086:	bd30      	pop	{r4, r5, pc}
 8007088:	42a0      	cmp	r0, r4
 800708a:	d3f3      	bcc.n	8007074 <__mcmp+0x14>
 800708c:	e7fa      	b.n	8007084 <__mcmp+0x24>
 800708e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007092:	e7f7      	b.n	8007084 <__mcmp+0x24>

08007094 <__mdiff>:
 8007094:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007098:	460d      	mov	r5, r1
 800709a:	4607      	mov	r7, r0
 800709c:	4611      	mov	r1, r2
 800709e:	4628      	mov	r0, r5
 80070a0:	4614      	mov	r4, r2
 80070a2:	f7ff ffdd 	bl	8007060 <__mcmp>
 80070a6:	1e06      	subs	r6, r0, #0
 80070a8:	d108      	bne.n	80070bc <__mdiff+0x28>
 80070aa:	4631      	mov	r1, r6
 80070ac:	4638      	mov	r0, r7
 80070ae:	f7ff fdc1 	bl	8006c34 <_Balloc>
 80070b2:	2301      	movs	r3, #1
 80070b4:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80070b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80070bc:	bfa4      	itt	ge
 80070be:	4623      	movge	r3, r4
 80070c0:	462c      	movge	r4, r5
 80070c2:	4638      	mov	r0, r7
 80070c4:	6861      	ldr	r1, [r4, #4]
 80070c6:	bfa6      	itte	ge
 80070c8:	461d      	movge	r5, r3
 80070ca:	2600      	movge	r6, #0
 80070cc:	2601      	movlt	r6, #1
 80070ce:	f7ff fdb1 	bl	8006c34 <_Balloc>
 80070d2:	692b      	ldr	r3, [r5, #16]
 80070d4:	60c6      	str	r6, [r0, #12]
 80070d6:	6926      	ldr	r6, [r4, #16]
 80070d8:	f105 0914 	add.w	r9, r5, #20
 80070dc:	f104 0214 	add.w	r2, r4, #20
 80070e0:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 80070e4:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80070e8:	f100 0514 	add.w	r5, r0, #20
 80070ec:	f04f 0e00 	mov.w	lr, #0
 80070f0:	f852 ab04 	ldr.w	sl, [r2], #4
 80070f4:	f859 4b04 	ldr.w	r4, [r9], #4
 80070f8:	fa1e f18a 	uxtah	r1, lr, sl
 80070fc:	b2a3      	uxth	r3, r4
 80070fe:	1ac9      	subs	r1, r1, r3
 8007100:	0c23      	lsrs	r3, r4, #16
 8007102:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8007106:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800710a:	b289      	uxth	r1, r1
 800710c:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8007110:	45c8      	cmp	r8, r9
 8007112:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8007116:	4694      	mov	ip, r2
 8007118:	f845 3b04 	str.w	r3, [r5], #4
 800711c:	d8e8      	bhi.n	80070f0 <__mdiff+0x5c>
 800711e:	45bc      	cmp	ip, r7
 8007120:	d304      	bcc.n	800712c <__mdiff+0x98>
 8007122:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8007126:	b183      	cbz	r3, 800714a <__mdiff+0xb6>
 8007128:	6106      	str	r6, [r0, #16]
 800712a:	e7c5      	b.n	80070b8 <__mdiff+0x24>
 800712c:	f85c 1b04 	ldr.w	r1, [ip], #4
 8007130:	fa1e f381 	uxtah	r3, lr, r1
 8007134:	141a      	asrs	r2, r3, #16
 8007136:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800713a:	b29b      	uxth	r3, r3
 800713c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007140:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8007144:	f845 3b04 	str.w	r3, [r5], #4
 8007148:	e7e9      	b.n	800711e <__mdiff+0x8a>
 800714a:	3e01      	subs	r6, #1
 800714c:	e7e9      	b.n	8007122 <__mdiff+0x8e>

0800714e <__d2b>:
 800714e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007152:	460e      	mov	r6, r1
 8007154:	2101      	movs	r1, #1
 8007156:	ec59 8b10 	vmov	r8, r9, d0
 800715a:	4615      	mov	r5, r2
 800715c:	f7ff fd6a 	bl	8006c34 <_Balloc>
 8007160:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8007164:	4607      	mov	r7, r0
 8007166:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800716a:	bb34      	cbnz	r4, 80071ba <__d2b+0x6c>
 800716c:	9301      	str	r3, [sp, #4]
 800716e:	f1b8 0300 	subs.w	r3, r8, #0
 8007172:	d027      	beq.n	80071c4 <__d2b+0x76>
 8007174:	a802      	add	r0, sp, #8
 8007176:	f840 3d08 	str.w	r3, [r0, #-8]!
 800717a:	f7ff fe00 	bl	8006d7e <__lo0bits>
 800717e:	9900      	ldr	r1, [sp, #0]
 8007180:	b1f0      	cbz	r0, 80071c0 <__d2b+0x72>
 8007182:	9a01      	ldr	r2, [sp, #4]
 8007184:	f1c0 0320 	rsb	r3, r0, #32
 8007188:	fa02 f303 	lsl.w	r3, r2, r3
 800718c:	430b      	orrs	r3, r1
 800718e:	40c2      	lsrs	r2, r0
 8007190:	617b      	str	r3, [r7, #20]
 8007192:	9201      	str	r2, [sp, #4]
 8007194:	9b01      	ldr	r3, [sp, #4]
 8007196:	61bb      	str	r3, [r7, #24]
 8007198:	2b00      	cmp	r3, #0
 800719a:	bf14      	ite	ne
 800719c:	2102      	movne	r1, #2
 800719e:	2101      	moveq	r1, #1
 80071a0:	6139      	str	r1, [r7, #16]
 80071a2:	b1c4      	cbz	r4, 80071d6 <__d2b+0x88>
 80071a4:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80071a8:	4404      	add	r4, r0
 80071aa:	6034      	str	r4, [r6, #0]
 80071ac:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80071b0:	6028      	str	r0, [r5, #0]
 80071b2:	4638      	mov	r0, r7
 80071b4:	b003      	add	sp, #12
 80071b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80071ba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80071be:	e7d5      	b.n	800716c <__d2b+0x1e>
 80071c0:	6179      	str	r1, [r7, #20]
 80071c2:	e7e7      	b.n	8007194 <__d2b+0x46>
 80071c4:	a801      	add	r0, sp, #4
 80071c6:	f7ff fdda 	bl	8006d7e <__lo0bits>
 80071ca:	9b01      	ldr	r3, [sp, #4]
 80071cc:	617b      	str	r3, [r7, #20]
 80071ce:	2101      	movs	r1, #1
 80071d0:	6139      	str	r1, [r7, #16]
 80071d2:	3020      	adds	r0, #32
 80071d4:	e7e5      	b.n	80071a2 <__d2b+0x54>
 80071d6:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80071da:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80071de:	6030      	str	r0, [r6, #0]
 80071e0:	6918      	ldr	r0, [r3, #16]
 80071e2:	f7ff fdad 	bl	8006d40 <__hi0bits>
 80071e6:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80071ea:	e7e1      	b.n	80071b0 <__d2b+0x62>

080071ec <_calloc_r>:
 80071ec:	b538      	push	{r3, r4, r5, lr}
 80071ee:	fb02 f401 	mul.w	r4, r2, r1
 80071f2:	4621      	mov	r1, r4
 80071f4:	f000 f856 	bl	80072a4 <_malloc_r>
 80071f8:	4605      	mov	r5, r0
 80071fa:	b118      	cbz	r0, 8007204 <_calloc_r+0x18>
 80071fc:	4622      	mov	r2, r4
 80071fe:	2100      	movs	r1, #0
 8007200:	f7fe fa19 	bl	8005636 <memset>
 8007204:	4628      	mov	r0, r5
 8007206:	bd38      	pop	{r3, r4, r5, pc}

08007208 <_free_r>:
 8007208:	b538      	push	{r3, r4, r5, lr}
 800720a:	4605      	mov	r5, r0
 800720c:	2900      	cmp	r1, #0
 800720e:	d045      	beq.n	800729c <_free_r+0x94>
 8007210:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007214:	1f0c      	subs	r4, r1, #4
 8007216:	2b00      	cmp	r3, #0
 8007218:	bfb8      	it	lt
 800721a:	18e4      	addlt	r4, r4, r3
 800721c:	f000 fa29 	bl	8007672 <__malloc_lock>
 8007220:	4a1f      	ldr	r2, [pc, #124]	; (80072a0 <_free_r+0x98>)
 8007222:	6813      	ldr	r3, [r2, #0]
 8007224:	4610      	mov	r0, r2
 8007226:	b933      	cbnz	r3, 8007236 <_free_r+0x2e>
 8007228:	6063      	str	r3, [r4, #4]
 800722a:	6014      	str	r4, [r2, #0]
 800722c:	4628      	mov	r0, r5
 800722e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007232:	f000 ba1f 	b.w	8007674 <__malloc_unlock>
 8007236:	42a3      	cmp	r3, r4
 8007238:	d90c      	bls.n	8007254 <_free_r+0x4c>
 800723a:	6821      	ldr	r1, [r4, #0]
 800723c:	1862      	adds	r2, r4, r1
 800723e:	4293      	cmp	r3, r2
 8007240:	bf04      	itt	eq
 8007242:	681a      	ldreq	r2, [r3, #0]
 8007244:	685b      	ldreq	r3, [r3, #4]
 8007246:	6063      	str	r3, [r4, #4]
 8007248:	bf04      	itt	eq
 800724a:	1852      	addeq	r2, r2, r1
 800724c:	6022      	streq	r2, [r4, #0]
 800724e:	6004      	str	r4, [r0, #0]
 8007250:	e7ec      	b.n	800722c <_free_r+0x24>
 8007252:	4613      	mov	r3, r2
 8007254:	685a      	ldr	r2, [r3, #4]
 8007256:	b10a      	cbz	r2, 800725c <_free_r+0x54>
 8007258:	42a2      	cmp	r2, r4
 800725a:	d9fa      	bls.n	8007252 <_free_r+0x4a>
 800725c:	6819      	ldr	r1, [r3, #0]
 800725e:	1858      	adds	r0, r3, r1
 8007260:	42a0      	cmp	r0, r4
 8007262:	d10b      	bne.n	800727c <_free_r+0x74>
 8007264:	6820      	ldr	r0, [r4, #0]
 8007266:	4401      	add	r1, r0
 8007268:	1858      	adds	r0, r3, r1
 800726a:	4282      	cmp	r2, r0
 800726c:	6019      	str	r1, [r3, #0]
 800726e:	d1dd      	bne.n	800722c <_free_r+0x24>
 8007270:	6810      	ldr	r0, [r2, #0]
 8007272:	6852      	ldr	r2, [r2, #4]
 8007274:	605a      	str	r2, [r3, #4]
 8007276:	4401      	add	r1, r0
 8007278:	6019      	str	r1, [r3, #0]
 800727a:	e7d7      	b.n	800722c <_free_r+0x24>
 800727c:	d902      	bls.n	8007284 <_free_r+0x7c>
 800727e:	230c      	movs	r3, #12
 8007280:	602b      	str	r3, [r5, #0]
 8007282:	e7d3      	b.n	800722c <_free_r+0x24>
 8007284:	6820      	ldr	r0, [r4, #0]
 8007286:	1821      	adds	r1, r4, r0
 8007288:	428a      	cmp	r2, r1
 800728a:	bf04      	itt	eq
 800728c:	6811      	ldreq	r1, [r2, #0]
 800728e:	6852      	ldreq	r2, [r2, #4]
 8007290:	6062      	str	r2, [r4, #4]
 8007292:	bf04      	itt	eq
 8007294:	1809      	addeq	r1, r1, r0
 8007296:	6021      	streq	r1, [r4, #0]
 8007298:	605c      	str	r4, [r3, #4]
 800729a:	e7c7      	b.n	800722c <_free_r+0x24>
 800729c:	bd38      	pop	{r3, r4, r5, pc}
 800729e:	bf00      	nop
 80072a0:	2000060c 	.word	0x2000060c

080072a4 <_malloc_r>:
 80072a4:	b570      	push	{r4, r5, r6, lr}
 80072a6:	1ccd      	adds	r5, r1, #3
 80072a8:	f025 0503 	bic.w	r5, r5, #3
 80072ac:	3508      	adds	r5, #8
 80072ae:	2d0c      	cmp	r5, #12
 80072b0:	bf38      	it	cc
 80072b2:	250c      	movcc	r5, #12
 80072b4:	2d00      	cmp	r5, #0
 80072b6:	4606      	mov	r6, r0
 80072b8:	db01      	blt.n	80072be <_malloc_r+0x1a>
 80072ba:	42a9      	cmp	r1, r5
 80072bc:	d903      	bls.n	80072c6 <_malloc_r+0x22>
 80072be:	230c      	movs	r3, #12
 80072c0:	6033      	str	r3, [r6, #0]
 80072c2:	2000      	movs	r0, #0
 80072c4:	bd70      	pop	{r4, r5, r6, pc}
 80072c6:	f000 f9d4 	bl	8007672 <__malloc_lock>
 80072ca:	4a21      	ldr	r2, [pc, #132]	; (8007350 <_malloc_r+0xac>)
 80072cc:	6814      	ldr	r4, [r2, #0]
 80072ce:	4621      	mov	r1, r4
 80072d0:	b991      	cbnz	r1, 80072f8 <_malloc_r+0x54>
 80072d2:	4c20      	ldr	r4, [pc, #128]	; (8007354 <_malloc_r+0xb0>)
 80072d4:	6823      	ldr	r3, [r4, #0]
 80072d6:	b91b      	cbnz	r3, 80072e0 <_malloc_r+0x3c>
 80072d8:	4630      	mov	r0, r6
 80072da:	f000 f98f 	bl	80075fc <_sbrk_r>
 80072de:	6020      	str	r0, [r4, #0]
 80072e0:	4629      	mov	r1, r5
 80072e2:	4630      	mov	r0, r6
 80072e4:	f000 f98a 	bl	80075fc <_sbrk_r>
 80072e8:	1c43      	adds	r3, r0, #1
 80072ea:	d124      	bne.n	8007336 <_malloc_r+0x92>
 80072ec:	230c      	movs	r3, #12
 80072ee:	6033      	str	r3, [r6, #0]
 80072f0:	4630      	mov	r0, r6
 80072f2:	f000 f9bf 	bl	8007674 <__malloc_unlock>
 80072f6:	e7e4      	b.n	80072c2 <_malloc_r+0x1e>
 80072f8:	680b      	ldr	r3, [r1, #0]
 80072fa:	1b5b      	subs	r3, r3, r5
 80072fc:	d418      	bmi.n	8007330 <_malloc_r+0x8c>
 80072fe:	2b0b      	cmp	r3, #11
 8007300:	d90f      	bls.n	8007322 <_malloc_r+0x7e>
 8007302:	600b      	str	r3, [r1, #0]
 8007304:	50cd      	str	r5, [r1, r3]
 8007306:	18cc      	adds	r4, r1, r3
 8007308:	4630      	mov	r0, r6
 800730a:	f000 f9b3 	bl	8007674 <__malloc_unlock>
 800730e:	f104 000b 	add.w	r0, r4, #11
 8007312:	1d23      	adds	r3, r4, #4
 8007314:	f020 0007 	bic.w	r0, r0, #7
 8007318:	1ac3      	subs	r3, r0, r3
 800731a:	d0d3      	beq.n	80072c4 <_malloc_r+0x20>
 800731c:	425a      	negs	r2, r3
 800731e:	50e2      	str	r2, [r4, r3]
 8007320:	e7d0      	b.n	80072c4 <_malloc_r+0x20>
 8007322:	428c      	cmp	r4, r1
 8007324:	684b      	ldr	r3, [r1, #4]
 8007326:	bf16      	itet	ne
 8007328:	6063      	strne	r3, [r4, #4]
 800732a:	6013      	streq	r3, [r2, #0]
 800732c:	460c      	movne	r4, r1
 800732e:	e7eb      	b.n	8007308 <_malloc_r+0x64>
 8007330:	460c      	mov	r4, r1
 8007332:	6849      	ldr	r1, [r1, #4]
 8007334:	e7cc      	b.n	80072d0 <_malloc_r+0x2c>
 8007336:	1cc4      	adds	r4, r0, #3
 8007338:	f024 0403 	bic.w	r4, r4, #3
 800733c:	42a0      	cmp	r0, r4
 800733e:	d005      	beq.n	800734c <_malloc_r+0xa8>
 8007340:	1a21      	subs	r1, r4, r0
 8007342:	4630      	mov	r0, r6
 8007344:	f000 f95a 	bl	80075fc <_sbrk_r>
 8007348:	3001      	adds	r0, #1
 800734a:	d0cf      	beq.n	80072ec <_malloc_r+0x48>
 800734c:	6025      	str	r5, [r4, #0]
 800734e:	e7db      	b.n	8007308 <_malloc_r+0x64>
 8007350:	2000060c 	.word	0x2000060c
 8007354:	20000610 	.word	0x20000610

08007358 <__ssputs_r>:
 8007358:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800735c:	688e      	ldr	r6, [r1, #8]
 800735e:	429e      	cmp	r6, r3
 8007360:	4682      	mov	sl, r0
 8007362:	460c      	mov	r4, r1
 8007364:	4690      	mov	r8, r2
 8007366:	4699      	mov	r9, r3
 8007368:	d837      	bhi.n	80073da <__ssputs_r+0x82>
 800736a:	898a      	ldrh	r2, [r1, #12]
 800736c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007370:	d031      	beq.n	80073d6 <__ssputs_r+0x7e>
 8007372:	6825      	ldr	r5, [r4, #0]
 8007374:	6909      	ldr	r1, [r1, #16]
 8007376:	1a6f      	subs	r7, r5, r1
 8007378:	6965      	ldr	r5, [r4, #20]
 800737a:	2302      	movs	r3, #2
 800737c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007380:	fb95 f5f3 	sdiv	r5, r5, r3
 8007384:	f109 0301 	add.w	r3, r9, #1
 8007388:	443b      	add	r3, r7
 800738a:	429d      	cmp	r5, r3
 800738c:	bf38      	it	cc
 800738e:	461d      	movcc	r5, r3
 8007390:	0553      	lsls	r3, r2, #21
 8007392:	d530      	bpl.n	80073f6 <__ssputs_r+0x9e>
 8007394:	4629      	mov	r1, r5
 8007396:	f7ff ff85 	bl	80072a4 <_malloc_r>
 800739a:	4606      	mov	r6, r0
 800739c:	b950      	cbnz	r0, 80073b4 <__ssputs_r+0x5c>
 800739e:	230c      	movs	r3, #12
 80073a0:	f8ca 3000 	str.w	r3, [sl]
 80073a4:	89a3      	ldrh	r3, [r4, #12]
 80073a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80073aa:	81a3      	strh	r3, [r4, #12]
 80073ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80073b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80073b4:	463a      	mov	r2, r7
 80073b6:	6921      	ldr	r1, [r4, #16]
 80073b8:	f7fe f932 	bl	8005620 <memcpy>
 80073bc:	89a3      	ldrh	r3, [r4, #12]
 80073be:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80073c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80073c6:	81a3      	strh	r3, [r4, #12]
 80073c8:	6126      	str	r6, [r4, #16]
 80073ca:	6165      	str	r5, [r4, #20]
 80073cc:	443e      	add	r6, r7
 80073ce:	1bed      	subs	r5, r5, r7
 80073d0:	6026      	str	r6, [r4, #0]
 80073d2:	60a5      	str	r5, [r4, #8]
 80073d4:	464e      	mov	r6, r9
 80073d6:	454e      	cmp	r6, r9
 80073d8:	d900      	bls.n	80073dc <__ssputs_r+0x84>
 80073da:	464e      	mov	r6, r9
 80073dc:	4632      	mov	r2, r6
 80073de:	4641      	mov	r1, r8
 80073e0:	6820      	ldr	r0, [r4, #0]
 80073e2:	f000 f92d 	bl	8007640 <memmove>
 80073e6:	68a3      	ldr	r3, [r4, #8]
 80073e8:	1b9b      	subs	r3, r3, r6
 80073ea:	60a3      	str	r3, [r4, #8]
 80073ec:	6823      	ldr	r3, [r4, #0]
 80073ee:	441e      	add	r6, r3
 80073f0:	6026      	str	r6, [r4, #0]
 80073f2:	2000      	movs	r0, #0
 80073f4:	e7dc      	b.n	80073b0 <__ssputs_r+0x58>
 80073f6:	462a      	mov	r2, r5
 80073f8:	f000 f93d 	bl	8007676 <_realloc_r>
 80073fc:	4606      	mov	r6, r0
 80073fe:	2800      	cmp	r0, #0
 8007400:	d1e2      	bne.n	80073c8 <__ssputs_r+0x70>
 8007402:	6921      	ldr	r1, [r4, #16]
 8007404:	4650      	mov	r0, sl
 8007406:	f7ff feff 	bl	8007208 <_free_r>
 800740a:	e7c8      	b.n	800739e <__ssputs_r+0x46>

0800740c <_svfiprintf_r>:
 800740c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007410:	461d      	mov	r5, r3
 8007412:	898b      	ldrh	r3, [r1, #12]
 8007414:	061f      	lsls	r7, r3, #24
 8007416:	b09d      	sub	sp, #116	; 0x74
 8007418:	4680      	mov	r8, r0
 800741a:	460c      	mov	r4, r1
 800741c:	4616      	mov	r6, r2
 800741e:	d50f      	bpl.n	8007440 <_svfiprintf_r+0x34>
 8007420:	690b      	ldr	r3, [r1, #16]
 8007422:	b96b      	cbnz	r3, 8007440 <_svfiprintf_r+0x34>
 8007424:	2140      	movs	r1, #64	; 0x40
 8007426:	f7ff ff3d 	bl	80072a4 <_malloc_r>
 800742a:	6020      	str	r0, [r4, #0]
 800742c:	6120      	str	r0, [r4, #16]
 800742e:	b928      	cbnz	r0, 800743c <_svfiprintf_r+0x30>
 8007430:	230c      	movs	r3, #12
 8007432:	f8c8 3000 	str.w	r3, [r8]
 8007436:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800743a:	e0c8      	b.n	80075ce <_svfiprintf_r+0x1c2>
 800743c:	2340      	movs	r3, #64	; 0x40
 800743e:	6163      	str	r3, [r4, #20]
 8007440:	2300      	movs	r3, #0
 8007442:	9309      	str	r3, [sp, #36]	; 0x24
 8007444:	2320      	movs	r3, #32
 8007446:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800744a:	2330      	movs	r3, #48	; 0x30
 800744c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007450:	9503      	str	r5, [sp, #12]
 8007452:	f04f 0b01 	mov.w	fp, #1
 8007456:	4637      	mov	r7, r6
 8007458:	463d      	mov	r5, r7
 800745a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800745e:	b10b      	cbz	r3, 8007464 <_svfiprintf_r+0x58>
 8007460:	2b25      	cmp	r3, #37	; 0x25
 8007462:	d13e      	bne.n	80074e2 <_svfiprintf_r+0xd6>
 8007464:	ebb7 0a06 	subs.w	sl, r7, r6
 8007468:	d00b      	beq.n	8007482 <_svfiprintf_r+0x76>
 800746a:	4653      	mov	r3, sl
 800746c:	4632      	mov	r2, r6
 800746e:	4621      	mov	r1, r4
 8007470:	4640      	mov	r0, r8
 8007472:	f7ff ff71 	bl	8007358 <__ssputs_r>
 8007476:	3001      	adds	r0, #1
 8007478:	f000 80a4 	beq.w	80075c4 <_svfiprintf_r+0x1b8>
 800747c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800747e:	4453      	add	r3, sl
 8007480:	9309      	str	r3, [sp, #36]	; 0x24
 8007482:	783b      	ldrb	r3, [r7, #0]
 8007484:	2b00      	cmp	r3, #0
 8007486:	f000 809d 	beq.w	80075c4 <_svfiprintf_r+0x1b8>
 800748a:	2300      	movs	r3, #0
 800748c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007490:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007494:	9304      	str	r3, [sp, #16]
 8007496:	9307      	str	r3, [sp, #28]
 8007498:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800749c:	931a      	str	r3, [sp, #104]	; 0x68
 800749e:	462f      	mov	r7, r5
 80074a0:	2205      	movs	r2, #5
 80074a2:	f817 1b01 	ldrb.w	r1, [r7], #1
 80074a6:	4850      	ldr	r0, [pc, #320]	; (80075e8 <_svfiprintf_r+0x1dc>)
 80074a8:	f7f8 fea2 	bl	80001f0 <memchr>
 80074ac:	9b04      	ldr	r3, [sp, #16]
 80074ae:	b9d0      	cbnz	r0, 80074e6 <_svfiprintf_r+0xda>
 80074b0:	06d9      	lsls	r1, r3, #27
 80074b2:	bf44      	itt	mi
 80074b4:	2220      	movmi	r2, #32
 80074b6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80074ba:	071a      	lsls	r2, r3, #28
 80074bc:	bf44      	itt	mi
 80074be:	222b      	movmi	r2, #43	; 0x2b
 80074c0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80074c4:	782a      	ldrb	r2, [r5, #0]
 80074c6:	2a2a      	cmp	r2, #42	; 0x2a
 80074c8:	d015      	beq.n	80074f6 <_svfiprintf_r+0xea>
 80074ca:	9a07      	ldr	r2, [sp, #28]
 80074cc:	462f      	mov	r7, r5
 80074ce:	2000      	movs	r0, #0
 80074d0:	250a      	movs	r5, #10
 80074d2:	4639      	mov	r1, r7
 80074d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80074d8:	3b30      	subs	r3, #48	; 0x30
 80074da:	2b09      	cmp	r3, #9
 80074dc:	d94d      	bls.n	800757a <_svfiprintf_r+0x16e>
 80074de:	b1b8      	cbz	r0, 8007510 <_svfiprintf_r+0x104>
 80074e0:	e00f      	b.n	8007502 <_svfiprintf_r+0xf6>
 80074e2:	462f      	mov	r7, r5
 80074e4:	e7b8      	b.n	8007458 <_svfiprintf_r+0x4c>
 80074e6:	4a40      	ldr	r2, [pc, #256]	; (80075e8 <_svfiprintf_r+0x1dc>)
 80074e8:	1a80      	subs	r0, r0, r2
 80074ea:	fa0b f000 	lsl.w	r0, fp, r0
 80074ee:	4318      	orrs	r0, r3
 80074f0:	9004      	str	r0, [sp, #16]
 80074f2:	463d      	mov	r5, r7
 80074f4:	e7d3      	b.n	800749e <_svfiprintf_r+0x92>
 80074f6:	9a03      	ldr	r2, [sp, #12]
 80074f8:	1d11      	adds	r1, r2, #4
 80074fa:	6812      	ldr	r2, [r2, #0]
 80074fc:	9103      	str	r1, [sp, #12]
 80074fe:	2a00      	cmp	r2, #0
 8007500:	db01      	blt.n	8007506 <_svfiprintf_r+0xfa>
 8007502:	9207      	str	r2, [sp, #28]
 8007504:	e004      	b.n	8007510 <_svfiprintf_r+0x104>
 8007506:	4252      	negs	r2, r2
 8007508:	f043 0302 	orr.w	r3, r3, #2
 800750c:	9207      	str	r2, [sp, #28]
 800750e:	9304      	str	r3, [sp, #16]
 8007510:	783b      	ldrb	r3, [r7, #0]
 8007512:	2b2e      	cmp	r3, #46	; 0x2e
 8007514:	d10c      	bne.n	8007530 <_svfiprintf_r+0x124>
 8007516:	787b      	ldrb	r3, [r7, #1]
 8007518:	2b2a      	cmp	r3, #42	; 0x2a
 800751a:	d133      	bne.n	8007584 <_svfiprintf_r+0x178>
 800751c:	9b03      	ldr	r3, [sp, #12]
 800751e:	1d1a      	adds	r2, r3, #4
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	9203      	str	r2, [sp, #12]
 8007524:	2b00      	cmp	r3, #0
 8007526:	bfb8      	it	lt
 8007528:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800752c:	3702      	adds	r7, #2
 800752e:	9305      	str	r3, [sp, #20]
 8007530:	4d2e      	ldr	r5, [pc, #184]	; (80075ec <_svfiprintf_r+0x1e0>)
 8007532:	7839      	ldrb	r1, [r7, #0]
 8007534:	2203      	movs	r2, #3
 8007536:	4628      	mov	r0, r5
 8007538:	f7f8 fe5a 	bl	80001f0 <memchr>
 800753c:	b138      	cbz	r0, 800754e <_svfiprintf_r+0x142>
 800753e:	2340      	movs	r3, #64	; 0x40
 8007540:	1b40      	subs	r0, r0, r5
 8007542:	fa03 f000 	lsl.w	r0, r3, r0
 8007546:	9b04      	ldr	r3, [sp, #16]
 8007548:	4303      	orrs	r3, r0
 800754a:	3701      	adds	r7, #1
 800754c:	9304      	str	r3, [sp, #16]
 800754e:	7839      	ldrb	r1, [r7, #0]
 8007550:	4827      	ldr	r0, [pc, #156]	; (80075f0 <_svfiprintf_r+0x1e4>)
 8007552:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007556:	2206      	movs	r2, #6
 8007558:	1c7e      	adds	r6, r7, #1
 800755a:	f7f8 fe49 	bl	80001f0 <memchr>
 800755e:	2800      	cmp	r0, #0
 8007560:	d038      	beq.n	80075d4 <_svfiprintf_r+0x1c8>
 8007562:	4b24      	ldr	r3, [pc, #144]	; (80075f4 <_svfiprintf_r+0x1e8>)
 8007564:	bb13      	cbnz	r3, 80075ac <_svfiprintf_r+0x1a0>
 8007566:	9b03      	ldr	r3, [sp, #12]
 8007568:	3307      	adds	r3, #7
 800756a:	f023 0307 	bic.w	r3, r3, #7
 800756e:	3308      	adds	r3, #8
 8007570:	9303      	str	r3, [sp, #12]
 8007572:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007574:	444b      	add	r3, r9
 8007576:	9309      	str	r3, [sp, #36]	; 0x24
 8007578:	e76d      	b.n	8007456 <_svfiprintf_r+0x4a>
 800757a:	fb05 3202 	mla	r2, r5, r2, r3
 800757e:	2001      	movs	r0, #1
 8007580:	460f      	mov	r7, r1
 8007582:	e7a6      	b.n	80074d2 <_svfiprintf_r+0xc6>
 8007584:	2300      	movs	r3, #0
 8007586:	3701      	adds	r7, #1
 8007588:	9305      	str	r3, [sp, #20]
 800758a:	4619      	mov	r1, r3
 800758c:	250a      	movs	r5, #10
 800758e:	4638      	mov	r0, r7
 8007590:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007594:	3a30      	subs	r2, #48	; 0x30
 8007596:	2a09      	cmp	r2, #9
 8007598:	d903      	bls.n	80075a2 <_svfiprintf_r+0x196>
 800759a:	2b00      	cmp	r3, #0
 800759c:	d0c8      	beq.n	8007530 <_svfiprintf_r+0x124>
 800759e:	9105      	str	r1, [sp, #20]
 80075a0:	e7c6      	b.n	8007530 <_svfiprintf_r+0x124>
 80075a2:	fb05 2101 	mla	r1, r5, r1, r2
 80075a6:	2301      	movs	r3, #1
 80075a8:	4607      	mov	r7, r0
 80075aa:	e7f0      	b.n	800758e <_svfiprintf_r+0x182>
 80075ac:	ab03      	add	r3, sp, #12
 80075ae:	9300      	str	r3, [sp, #0]
 80075b0:	4622      	mov	r2, r4
 80075b2:	4b11      	ldr	r3, [pc, #68]	; (80075f8 <_svfiprintf_r+0x1ec>)
 80075b4:	a904      	add	r1, sp, #16
 80075b6:	4640      	mov	r0, r8
 80075b8:	f7fe f8da 	bl	8005770 <_printf_float>
 80075bc:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80075c0:	4681      	mov	r9, r0
 80075c2:	d1d6      	bne.n	8007572 <_svfiprintf_r+0x166>
 80075c4:	89a3      	ldrh	r3, [r4, #12]
 80075c6:	065b      	lsls	r3, r3, #25
 80075c8:	f53f af35 	bmi.w	8007436 <_svfiprintf_r+0x2a>
 80075cc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80075ce:	b01d      	add	sp, #116	; 0x74
 80075d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075d4:	ab03      	add	r3, sp, #12
 80075d6:	9300      	str	r3, [sp, #0]
 80075d8:	4622      	mov	r2, r4
 80075da:	4b07      	ldr	r3, [pc, #28]	; (80075f8 <_svfiprintf_r+0x1ec>)
 80075dc:	a904      	add	r1, sp, #16
 80075de:	4640      	mov	r0, r8
 80075e0:	f7fe fb7c 	bl	8005cdc <_printf_i>
 80075e4:	e7ea      	b.n	80075bc <_svfiprintf_r+0x1b0>
 80075e6:	bf00      	nop
 80075e8:	080082ac 	.word	0x080082ac
 80075ec:	080082b2 	.word	0x080082b2
 80075f0:	080082b6 	.word	0x080082b6
 80075f4:	08005771 	.word	0x08005771
 80075f8:	08007359 	.word	0x08007359

080075fc <_sbrk_r>:
 80075fc:	b538      	push	{r3, r4, r5, lr}
 80075fe:	4c06      	ldr	r4, [pc, #24]	; (8007618 <_sbrk_r+0x1c>)
 8007600:	2300      	movs	r3, #0
 8007602:	4605      	mov	r5, r0
 8007604:	4608      	mov	r0, r1
 8007606:	6023      	str	r3, [r4, #0]
 8007608:	f7fb f820 	bl	800264c <_sbrk>
 800760c:	1c43      	adds	r3, r0, #1
 800760e:	d102      	bne.n	8007616 <_sbrk_r+0x1a>
 8007610:	6823      	ldr	r3, [r4, #0]
 8007612:	b103      	cbz	r3, 8007616 <_sbrk_r+0x1a>
 8007614:	602b      	str	r3, [r5, #0]
 8007616:	bd38      	pop	{r3, r4, r5, pc}
 8007618:	20000700 	.word	0x20000700

0800761c <__ascii_mbtowc>:
 800761c:	b082      	sub	sp, #8
 800761e:	b901      	cbnz	r1, 8007622 <__ascii_mbtowc+0x6>
 8007620:	a901      	add	r1, sp, #4
 8007622:	b142      	cbz	r2, 8007636 <__ascii_mbtowc+0x1a>
 8007624:	b14b      	cbz	r3, 800763a <__ascii_mbtowc+0x1e>
 8007626:	7813      	ldrb	r3, [r2, #0]
 8007628:	600b      	str	r3, [r1, #0]
 800762a:	7812      	ldrb	r2, [r2, #0]
 800762c:	1c10      	adds	r0, r2, #0
 800762e:	bf18      	it	ne
 8007630:	2001      	movne	r0, #1
 8007632:	b002      	add	sp, #8
 8007634:	4770      	bx	lr
 8007636:	4610      	mov	r0, r2
 8007638:	e7fb      	b.n	8007632 <__ascii_mbtowc+0x16>
 800763a:	f06f 0001 	mvn.w	r0, #1
 800763e:	e7f8      	b.n	8007632 <__ascii_mbtowc+0x16>

08007640 <memmove>:
 8007640:	4288      	cmp	r0, r1
 8007642:	b510      	push	{r4, lr}
 8007644:	eb01 0302 	add.w	r3, r1, r2
 8007648:	d807      	bhi.n	800765a <memmove+0x1a>
 800764a:	1e42      	subs	r2, r0, #1
 800764c:	4299      	cmp	r1, r3
 800764e:	d00a      	beq.n	8007666 <memmove+0x26>
 8007650:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007654:	f802 4f01 	strb.w	r4, [r2, #1]!
 8007658:	e7f8      	b.n	800764c <memmove+0xc>
 800765a:	4283      	cmp	r3, r0
 800765c:	d9f5      	bls.n	800764a <memmove+0xa>
 800765e:	1881      	adds	r1, r0, r2
 8007660:	1ad2      	subs	r2, r2, r3
 8007662:	42d3      	cmn	r3, r2
 8007664:	d100      	bne.n	8007668 <memmove+0x28>
 8007666:	bd10      	pop	{r4, pc}
 8007668:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800766c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8007670:	e7f7      	b.n	8007662 <memmove+0x22>

08007672 <__malloc_lock>:
 8007672:	4770      	bx	lr

08007674 <__malloc_unlock>:
 8007674:	4770      	bx	lr

08007676 <_realloc_r>:
 8007676:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007678:	4607      	mov	r7, r0
 800767a:	4614      	mov	r4, r2
 800767c:	460e      	mov	r6, r1
 800767e:	b921      	cbnz	r1, 800768a <_realloc_r+0x14>
 8007680:	4611      	mov	r1, r2
 8007682:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007686:	f7ff be0d 	b.w	80072a4 <_malloc_r>
 800768a:	b922      	cbnz	r2, 8007696 <_realloc_r+0x20>
 800768c:	f7ff fdbc 	bl	8007208 <_free_r>
 8007690:	4625      	mov	r5, r4
 8007692:	4628      	mov	r0, r5
 8007694:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007696:	f000 f821 	bl	80076dc <_malloc_usable_size_r>
 800769a:	42a0      	cmp	r0, r4
 800769c:	d20f      	bcs.n	80076be <_realloc_r+0x48>
 800769e:	4621      	mov	r1, r4
 80076a0:	4638      	mov	r0, r7
 80076a2:	f7ff fdff 	bl	80072a4 <_malloc_r>
 80076a6:	4605      	mov	r5, r0
 80076a8:	2800      	cmp	r0, #0
 80076aa:	d0f2      	beq.n	8007692 <_realloc_r+0x1c>
 80076ac:	4631      	mov	r1, r6
 80076ae:	4622      	mov	r2, r4
 80076b0:	f7fd ffb6 	bl	8005620 <memcpy>
 80076b4:	4631      	mov	r1, r6
 80076b6:	4638      	mov	r0, r7
 80076b8:	f7ff fda6 	bl	8007208 <_free_r>
 80076bc:	e7e9      	b.n	8007692 <_realloc_r+0x1c>
 80076be:	4635      	mov	r5, r6
 80076c0:	e7e7      	b.n	8007692 <_realloc_r+0x1c>

080076c2 <__ascii_wctomb>:
 80076c2:	b149      	cbz	r1, 80076d8 <__ascii_wctomb+0x16>
 80076c4:	2aff      	cmp	r2, #255	; 0xff
 80076c6:	bf85      	ittet	hi
 80076c8:	238a      	movhi	r3, #138	; 0x8a
 80076ca:	6003      	strhi	r3, [r0, #0]
 80076cc:	700a      	strbls	r2, [r1, #0]
 80076ce:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 80076d2:	bf98      	it	ls
 80076d4:	2001      	movls	r0, #1
 80076d6:	4770      	bx	lr
 80076d8:	4608      	mov	r0, r1
 80076da:	4770      	bx	lr

080076dc <_malloc_usable_size_r>:
 80076dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80076e0:	1f18      	subs	r0, r3, #4
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	bfbc      	itt	lt
 80076e6:	580b      	ldrlt	r3, [r1, r0]
 80076e8:	18c0      	addlt	r0, r0, r3
 80076ea:	4770      	bx	lr

080076ec <_init>:
 80076ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076ee:	bf00      	nop
 80076f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80076f2:	bc08      	pop	{r3}
 80076f4:	469e      	mov	lr, r3
 80076f6:	4770      	bx	lr

080076f8 <_fini>:
 80076f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076fa:	bf00      	nop
 80076fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80076fe:	bc08      	pop	{r3}
 8007700:	469e      	mov	lr, r3
 8007702:	4770      	bx	lr
