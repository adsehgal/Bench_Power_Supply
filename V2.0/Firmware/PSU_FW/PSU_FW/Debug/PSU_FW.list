
PSU_FW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000089c0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001c44  08008b60  08008b60  00018b60  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a7a4  0800a7a4  000201ec  2**0
                  CONTENTS
  4 .ARM          00000008  0800a7a4  0800a7a4  0001a7a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a7ac  0800a7ac  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a7ac  0800a7ac  0001a7ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a7b0  0800a7b0  0001a7b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  0800a7b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000570  200001ec  0800a9a0  000201ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000075c  0800a9a0  0002075c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   000135cb  00000000  00000000  0002021c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002bd1  00000000  00000000  000337e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001080  00000000  00000000  000363b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f48  00000000  00000000  00037438  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019292  00000000  00000000  00038380  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012ded  00000000  00000000  00051612  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009564a  00000000  00000000  000643ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f9a49  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000055fc  00000000  00000000  000f9a9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001ec 	.word	0x200001ec
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008b48 	.word	0x08008b48

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001f0 	.word	0x200001f0
 80001dc:	08008b48 	.word	0x08008b48

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bcc:	f000 b96e 	b.w	8000eac <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9d08      	ldr	r5, [sp, #32]
 8000bee:	4604      	mov	r4, r0
 8000bf0:	468c      	mov	ip, r1
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	f040 8083 	bne.w	8000cfe <__udivmoddi4+0x116>
 8000bf8:	428a      	cmp	r2, r1
 8000bfa:	4617      	mov	r7, r2
 8000bfc:	d947      	bls.n	8000c8e <__udivmoddi4+0xa6>
 8000bfe:	fab2 f282 	clz	r2, r2
 8000c02:	b142      	cbz	r2, 8000c16 <__udivmoddi4+0x2e>
 8000c04:	f1c2 0020 	rsb	r0, r2, #32
 8000c08:	fa24 f000 	lsr.w	r0, r4, r0
 8000c0c:	4091      	lsls	r1, r2
 8000c0e:	4097      	lsls	r7, r2
 8000c10:	ea40 0c01 	orr.w	ip, r0, r1
 8000c14:	4094      	lsls	r4, r2
 8000c16:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c1a:	0c23      	lsrs	r3, r4, #16
 8000c1c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c20:	fa1f fe87 	uxth.w	lr, r7
 8000c24:	fb08 c116 	mls	r1, r8, r6, ip
 8000c28:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c2c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c30:	4299      	cmp	r1, r3
 8000c32:	d909      	bls.n	8000c48 <__udivmoddi4+0x60>
 8000c34:	18fb      	adds	r3, r7, r3
 8000c36:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000c3a:	f080 8119 	bcs.w	8000e70 <__udivmoddi4+0x288>
 8000c3e:	4299      	cmp	r1, r3
 8000c40:	f240 8116 	bls.w	8000e70 <__udivmoddi4+0x288>
 8000c44:	3e02      	subs	r6, #2
 8000c46:	443b      	add	r3, r7
 8000c48:	1a5b      	subs	r3, r3, r1
 8000c4a:	b2a4      	uxth	r4, r4
 8000c4c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c50:	fb08 3310 	mls	r3, r8, r0, r3
 8000c54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c58:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c5c:	45a6      	cmp	lr, r4
 8000c5e:	d909      	bls.n	8000c74 <__udivmoddi4+0x8c>
 8000c60:	193c      	adds	r4, r7, r4
 8000c62:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c66:	f080 8105 	bcs.w	8000e74 <__udivmoddi4+0x28c>
 8000c6a:	45a6      	cmp	lr, r4
 8000c6c:	f240 8102 	bls.w	8000e74 <__udivmoddi4+0x28c>
 8000c70:	3802      	subs	r0, #2
 8000c72:	443c      	add	r4, r7
 8000c74:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c78:	eba4 040e 	sub.w	r4, r4, lr
 8000c7c:	2600      	movs	r6, #0
 8000c7e:	b11d      	cbz	r5, 8000c88 <__udivmoddi4+0xa0>
 8000c80:	40d4      	lsrs	r4, r2
 8000c82:	2300      	movs	r3, #0
 8000c84:	e9c5 4300 	strd	r4, r3, [r5]
 8000c88:	4631      	mov	r1, r6
 8000c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8e:	b902      	cbnz	r2, 8000c92 <__udivmoddi4+0xaa>
 8000c90:	deff      	udf	#255	; 0xff
 8000c92:	fab2 f282 	clz	r2, r2
 8000c96:	2a00      	cmp	r2, #0
 8000c98:	d150      	bne.n	8000d3c <__udivmoddi4+0x154>
 8000c9a:	1bcb      	subs	r3, r1, r7
 8000c9c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ca0:	fa1f f887 	uxth.w	r8, r7
 8000ca4:	2601      	movs	r6, #1
 8000ca6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000caa:	0c21      	lsrs	r1, r4, #16
 8000cac:	fb0e 331c 	mls	r3, lr, ip, r3
 8000cb0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cb4:	fb08 f30c 	mul.w	r3, r8, ip
 8000cb8:	428b      	cmp	r3, r1
 8000cba:	d907      	bls.n	8000ccc <__udivmoddi4+0xe4>
 8000cbc:	1879      	adds	r1, r7, r1
 8000cbe:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000cc2:	d202      	bcs.n	8000cca <__udivmoddi4+0xe2>
 8000cc4:	428b      	cmp	r3, r1
 8000cc6:	f200 80e9 	bhi.w	8000e9c <__udivmoddi4+0x2b4>
 8000cca:	4684      	mov	ip, r0
 8000ccc:	1ac9      	subs	r1, r1, r3
 8000cce:	b2a3      	uxth	r3, r4
 8000cd0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cd4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cd8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000cdc:	fb08 f800 	mul.w	r8, r8, r0
 8000ce0:	45a0      	cmp	r8, r4
 8000ce2:	d907      	bls.n	8000cf4 <__udivmoddi4+0x10c>
 8000ce4:	193c      	adds	r4, r7, r4
 8000ce6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000cea:	d202      	bcs.n	8000cf2 <__udivmoddi4+0x10a>
 8000cec:	45a0      	cmp	r8, r4
 8000cee:	f200 80d9 	bhi.w	8000ea4 <__udivmoddi4+0x2bc>
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	eba4 0408 	sub.w	r4, r4, r8
 8000cf8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cfc:	e7bf      	b.n	8000c7e <__udivmoddi4+0x96>
 8000cfe:	428b      	cmp	r3, r1
 8000d00:	d909      	bls.n	8000d16 <__udivmoddi4+0x12e>
 8000d02:	2d00      	cmp	r5, #0
 8000d04:	f000 80b1 	beq.w	8000e6a <__udivmoddi4+0x282>
 8000d08:	2600      	movs	r6, #0
 8000d0a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d0e:	4630      	mov	r0, r6
 8000d10:	4631      	mov	r1, r6
 8000d12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d16:	fab3 f683 	clz	r6, r3
 8000d1a:	2e00      	cmp	r6, #0
 8000d1c:	d14a      	bne.n	8000db4 <__udivmoddi4+0x1cc>
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d302      	bcc.n	8000d28 <__udivmoddi4+0x140>
 8000d22:	4282      	cmp	r2, r0
 8000d24:	f200 80b8 	bhi.w	8000e98 <__udivmoddi4+0x2b0>
 8000d28:	1a84      	subs	r4, r0, r2
 8000d2a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d2e:	2001      	movs	r0, #1
 8000d30:	468c      	mov	ip, r1
 8000d32:	2d00      	cmp	r5, #0
 8000d34:	d0a8      	beq.n	8000c88 <__udivmoddi4+0xa0>
 8000d36:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d3a:	e7a5      	b.n	8000c88 <__udivmoddi4+0xa0>
 8000d3c:	f1c2 0320 	rsb	r3, r2, #32
 8000d40:	fa20 f603 	lsr.w	r6, r0, r3
 8000d44:	4097      	lsls	r7, r2
 8000d46:	fa01 f002 	lsl.w	r0, r1, r2
 8000d4a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d4e:	40d9      	lsrs	r1, r3
 8000d50:	4330      	orrs	r0, r6
 8000d52:	0c03      	lsrs	r3, r0, #16
 8000d54:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d58:	fa1f f887 	uxth.w	r8, r7
 8000d5c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d60:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d64:	fb06 f108 	mul.w	r1, r6, r8
 8000d68:	4299      	cmp	r1, r3
 8000d6a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d6e:	d909      	bls.n	8000d84 <__udivmoddi4+0x19c>
 8000d70:	18fb      	adds	r3, r7, r3
 8000d72:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000d76:	f080 808d 	bcs.w	8000e94 <__udivmoddi4+0x2ac>
 8000d7a:	4299      	cmp	r1, r3
 8000d7c:	f240 808a 	bls.w	8000e94 <__udivmoddi4+0x2ac>
 8000d80:	3e02      	subs	r6, #2
 8000d82:	443b      	add	r3, r7
 8000d84:	1a5b      	subs	r3, r3, r1
 8000d86:	b281      	uxth	r1, r0
 8000d88:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d8c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d94:	fb00 f308 	mul.w	r3, r0, r8
 8000d98:	428b      	cmp	r3, r1
 8000d9a:	d907      	bls.n	8000dac <__udivmoddi4+0x1c4>
 8000d9c:	1879      	adds	r1, r7, r1
 8000d9e:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000da2:	d273      	bcs.n	8000e8c <__udivmoddi4+0x2a4>
 8000da4:	428b      	cmp	r3, r1
 8000da6:	d971      	bls.n	8000e8c <__udivmoddi4+0x2a4>
 8000da8:	3802      	subs	r0, #2
 8000daa:	4439      	add	r1, r7
 8000dac:	1acb      	subs	r3, r1, r3
 8000dae:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000db2:	e778      	b.n	8000ca6 <__udivmoddi4+0xbe>
 8000db4:	f1c6 0c20 	rsb	ip, r6, #32
 8000db8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dbc:	fa22 f30c 	lsr.w	r3, r2, ip
 8000dc0:	431c      	orrs	r4, r3
 8000dc2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000dc6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dca:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dce:	fa21 f10c 	lsr.w	r1, r1, ip
 8000dd2:	431f      	orrs	r7, r3
 8000dd4:	0c3b      	lsrs	r3, r7, #16
 8000dd6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dda:	fa1f f884 	uxth.w	r8, r4
 8000dde:	fb0e 1119 	mls	r1, lr, r9, r1
 8000de2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000de6:	fb09 fa08 	mul.w	sl, r9, r8
 8000dea:	458a      	cmp	sl, r1
 8000dec:	fa02 f206 	lsl.w	r2, r2, r6
 8000df0:	fa00 f306 	lsl.w	r3, r0, r6
 8000df4:	d908      	bls.n	8000e08 <__udivmoddi4+0x220>
 8000df6:	1861      	adds	r1, r4, r1
 8000df8:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000dfc:	d248      	bcs.n	8000e90 <__udivmoddi4+0x2a8>
 8000dfe:	458a      	cmp	sl, r1
 8000e00:	d946      	bls.n	8000e90 <__udivmoddi4+0x2a8>
 8000e02:	f1a9 0902 	sub.w	r9, r9, #2
 8000e06:	4421      	add	r1, r4
 8000e08:	eba1 010a 	sub.w	r1, r1, sl
 8000e0c:	b2bf      	uxth	r7, r7
 8000e0e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e12:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e16:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e1a:	fb00 f808 	mul.w	r8, r0, r8
 8000e1e:	45b8      	cmp	r8, r7
 8000e20:	d907      	bls.n	8000e32 <__udivmoddi4+0x24a>
 8000e22:	19e7      	adds	r7, r4, r7
 8000e24:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000e28:	d22e      	bcs.n	8000e88 <__udivmoddi4+0x2a0>
 8000e2a:	45b8      	cmp	r8, r7
 8000e2c:	d92c      	bls.n	8000e88 <__udivmoddi4+0x2a0>
 8000e2e:	3802      	subs	r0, #2
 8000e30:	4427      	add	r7, r4
 8000e32:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e36:	eba7 0708 	sub.w	r7, r7, r8
 8000e3a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e3e:	454f      	cmp	r7, r9
 8000e40:	46c6      	mov	lr, r8
 8000e42:	4649      	mov	r1, r9
 8000e44:	d31a      	bcc.n	8000e7c <__udivmoddi4+0x294>
 8000e46:	d017      	beq.n	8000e78 <__udivmoddi4+0x290>
 8000e48:	b15d      	cbz	r5, 8000e62 <__udivmoddi4+0x27a>
 8000e4a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e4e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e52:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e56:	40f2      	lsrs	r2, r6
 8000e58:	ea4c 0202 	orr.w	r2, ip, r2
 8000e5c:	40f7      	lsrs	r7, r6
 8000e5e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e62:	2600      	movs	r6, #0
 8000e64:	4631      	mov	r1, r6
 8000e66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e6a:	462e      	mov	r6, r5
 8000e6c:	4628      	mov	r0, r5
 8000e6e:	e70b      	b.n	8000c88 <__udivmoddi4+0xa0>
 8000e70:	4606      	mov	r6, r0
 8000e72:	e6e9      	b.n	8000c48 <__udivmoddi4+0x60>
 8000e74:	4618      	mov	r0, r3
 8000e76:	e6fd      	b.n	8000c74 <__udivmoddi4+0x8c>
 8000e78:	4543      	cmp	r3, r8
 8000e7a:	d2e5      	bcs.n	8000e48 <__udivmoddi4+0x260>
 8000e7c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e80:	eb69 0104 	sbc.w	r1, r9, r4
 8000e84:	3801      	subs	r0, #1
 8000e86:	e7df      	b.n	8000e48 <__udivmoddi4+0x260>
 8000e88:	4608      	mov	r0, r1
 8000e8a:	e7d2      	b.n	8000e32 <__udivmoddi4+0x24a>
 8000e8c:	4660      	mov	r0, ip
 8000e8e:	e78d      	b.n	8000dac <__udivmoddi4+0x1c4>
 8000e90:	4681      	mov	r9, r0
 8000e92:	e7b9      	b.n	8000e08 <__udivmoddi4+0x220>
 8000e94:	4666      	mov	r6, ip
 8000e96:	e775      	b.n	8000d84 <__udivmoddi4+0x19c>
 8000e98:	4630      	mov	r0, r6
 8000e9a:	e74a      	b.n	8000d32 <__udivmoddi4+0x14a>
 8000e9c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ea0:	4439      	add	r1, r7
 8000ea2:	e713      	b.n	8000ccc <__udivmoddi4+0xe4>
 8000ea4:	3802      	subs	r0, #2
 8000ea6:	443c      	add	r4, r7
 8000ea8:	e724      	b.n	8000cf4 <__udivmoddi4+0x10c>
 8000eaa:	bf00      	nop

08000eac <__aeabi_idiv0>:
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop

08000eb0 <readVin>:
const uint8_t IDLE_I_LOW = 100;    //mA
const uint8_t RESISTOR_TOP_VIN = 29;    //KOhm
const uint8_t RESISTOR_TOP_VOUT = 26;    //KOhm
const uint8_t RESISTOR_BOT = 10;    //KOhm

double readVin(void) {
 8000eb0:	b5b0      	push	{r4, r5, r7, lr}
 8000eb2:	b088      	sub	sp, #32
 8000eb4:	af00      	add	r7, sp, #0
	uint32_t retVal = 0;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	61fb      	str	r3, [r7, #28]

	ADC_ChannelConfTypeDef sConfig = { 0 };
 8000eba:	463b      	mov	r3, r7
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	601a      	str	r2, [r3, #0]
 8000ec0:	605a      	str	r2, [r3, #4]
 8000ec2:	609a      	str	r2, [r3, #8]
 8000ec4:	60da      	str	r2, [r3, #12]
	sConfig.Channel = ADC_CHANNEL_1;
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 8000eca:	2301      	movs	r3, #1
 8000ecc:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 8000ece:	2302      	movs	r3, #2
 8000ed0:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8000ed2:	463b      	mov	r3, r7
 8000ed4:	4619      	mov	r1, r3
 8000ed6:	4830      	ldr	r0, [pc, #192]	; (8000f98 <readVin+0xe8>)
 8000ed8:	f002 f952 	bl	8003180 <HAL_ADC_ConfigChannel>
		//error handle
	}
	HAL_ADC_Start(&hadc1);
 8000edc:	482e      	ldr	r0, [pc, #184]	; (8000f98 <readVin+0xe8>)
 8000ede:	f001 ffe5 	bl	8002eac <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000ee2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000ee6:	482c      	ldr	r0, [pc, #176]	; (8000f98 <readVin+0xe8>)
 8000ee8:	f002 f8b9 	bl	800305e <HAL_ADC_PollForConversion>
	retVal = HAL_ADC_GetValue(&hadc1);
 8000eec:	482a      	ldr	r0, [pc, #168]	; (8000f98 <readVin+0xe8>)
 8000eee:	f002 f93a 	bl	8003166 <HAL_ADC_GetValue>
 8000ef2:	61f8      	str	r0, [r7, #28]
	HAL_ADC_Stop(&hadc1);
 8000ef4:	4828      	ldr	r0, [pc, #160]	; (8000f98 <readVin+0xe8>)
 8000ef6:	f002 f87f 	bl	8002ff8 <HAL_ADC_Stop>

	double tempV = ((double) retVal / maxADCVal) * sysVolt;
 8000efa:	69f8      	ldr	r0, [r7, #28]
 8000efc:	f7ff fb0a 	bl	8000514 <__aeabi_ui2d>
 8000f00:	a321      	add	r3, pc, #132	; (adr r3, 8000f88 <readVin+0xd8>)
 8000f02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f06:	f7ff fca9 	bl	800085c <__aeabi_ddiv>
 8000f0a:	4602      	mov	r2, r0
 8000f0c:	460b      	mov	r3, r1
 8000f0e:	4610      	mov	r0, r2
 8000f10:	4619      	mov	r1, r3
 8000f12:	a31f      	add	r3, pc, #124	; (adr r3, 8000f90 <readVin+0xe0>)
 8000f14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f18:	f7ff fb76 	bl	8000608 <__aeabi_dmul>
 8000f1c:	4602      	mov	r2, r0
 8000f1e:	460b      	mov	r3, r1
 8000f20:	e9c7 2304 	strd	r2, r3, [r7, #16]
	tempV = (double) ((tempV * (RESISTOR_TOP_VIN + RESISTOR_BOT)) / (RESISTOR_BOT))
 8000f24:	231d      	movs	r3, #29
 8000f26:	461a      	mov	r2, r3
 8000f28:	230a      	movs	r3, #10
 8000f2a:	4413      	add	r3, r2
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f7ff fb01 	bl	8000534 <__aeabi_i2d>
 8000f32:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000f36:	f7ff fb67 	bl	8000608 <__aeabi_dmul>
 8000f3a:	4602      	mov	r2, r0
 8000f3c:	460b      	mov	r3, r1
 8000f3e:	4614      	mov	r4, r2
 8000f40:	461d      	mov	r5, r3
 8000f42:	230a      	movs	r3, #10
 8000f44:	4618      	mov	r0, r3
 8000f46:	f7ff faf5 	bl	8000534 <__aeabi_i2d>
 8000f4a:	4602      	mov	r2, r0
 8000f4c:	460b      	mov	r3, r1
 8000f4e:	4620      	mov	r0, r4
 8000f50:	4629      	mov	r1, r5
 8000f52:	f7ff fc83 	bl	800085c <__aeabi_ddiv>
 8000f56:	4602      	mov	r2, r0
 8000f58:	460b      	mov	r3, r1
 8000f5a:	4610      	mov	r0, r2
 8000f5c:	4619      	mov	r1, r3
 8000f5e:	f04f 0200 	mov.w	r2, #0
 8000f62:	4b0e      	ldr	r3, [pc, #56]	; (8000f9c <readVin+0xec>)
 8000f64:	f7ff fb50 	bl	8000608 <__aeabi_dmul>
 8000f68:	4602      	mov	r2, r0
 8000f6a:	460b      	mov	r3, r1
 8000f6c:	e9c7 2304 	strd	r2, r3, [r7, #16]
			* 1000.00;
	return tempV;
 8000f70:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000f74:	ec43 2b17 	vmov	d7, r2, r3

}
 8000f78:	eeb0 0a47 	vmov.f32	s0, s14
 8000f7c:	eef0 0a67 	vmov.f32	s1, s15
 8000f80:	3720      	adds	r7, #32
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bdb0      	pop	{r4, r5, r7, pc}
 8000f86:	bf00      	nop
 8000f88:	00000000 	.word	0x00000000
 8000f8c:	40affe00 	.word	0x40affe00
 8000f90:	66666666 	.word	0x66666666
 8000f94:	400a6666 	.word	0x400a6666
 8000f98:	200006c0 	.word	0x200006c0
 8000f9c:	408f4000 	.word	0x408f4000

08000fa0 <readVout>:

double readVout(void) {
 8000fa0:	b5b0      	push	{r4, r5, r7, lr}
 8000fa2:	b088      	sub	sp, #32
 8000fa4:	af00      	add	r7, sp, #0
	uint32_t retVal = 0;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	61fb      	str	r3, [r7, #28]

	ADC_ChannelConfTypeDef sConfig = { 0 };
 8000faa:	463b      	mov	r3, r7
 8000fac:	2200      	movs	r2, #0
 8000fae:	601a      	str	r2, [r3, #0]
 8000fb0:	605a      	str	r2, [r3, #4]
 8000fb2:	609a      	str	r2, [r3, #8]
 8000fb4:	60da      	str	r2, [r3, #12]
	sConfig.Channel = ADC_CHANNEL_0;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 8000fba:	2301      	movs	r3, #1
 8000fbc:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 8000fbe:	2302      	movs	r3, #2
 8000fc0:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8000fc2:	463b      	mov	r3, r7
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	4830      	ldr	r0, [pc, #192]	; (8001088 <readVout+0xe8>)
 8000fc8:	f002 f8da 	bl	8003180 <HAL_ADC_ConfigChannel>
		//error handle
	}
	HAL_ADC_Start(&hadc1);
 8000fcc:	482e      	ldr	r0, [pc, #184]	; (8001088 <readVout+0xe8>)
 8000fce:	f001 ff6d 	bl	8002eac <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000fd2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000fd6:	482c      	ldr	r0, [pc, #176]	; (8001088 <readVout+0xe8>)
 8000fd8:	f002 f841 	bl	800305e <HAL_ADC_PollForConversion>
	retVal = HAL_ADC_GetValue(&hadc1);
 8000fdc:	482a      	ldr	r0, [pc, #168]	; (8001088 <readVout+0xe8>)
 8000fde:	f002 f8c2 	bl	8003166 <HAL_ADC_GetValue>
 8000fe2:	61f8      	str	r0, [r7, #28]
	HAL_ADC_Stop(&hadc1);
 8000fe4:	4828      	ldr	r0, [pc, #160]	; (8001088 <readVout+0xe8>)
 8000fe6:	f002 f807 	bl	8002ff8 <HAL_ADC_Stop>

	double tempV = ((double) retVal / maxADCVal) * sysVolt;
 8000fea:	69f8      	ldr	r0, [r7, #28]
 8000fec:	f7ff fa92 	bl	8000514 <__aeabi_ui2d>
 8000ff0:	a321      	add	r3, pc, #132	; (adr r3, 8001078 <readVout+0xd8>)
 8000ff2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ff6:	f7ff fc31 	bl	800085c <__aeabi_ddiv>
 8000ffa:	4602      	mov	r2, r0
 8000ffc:	460b      	mov	r3, r1
 8000ffe:	4610      	mov	r0, r2
 8001000:	4619      	mov	r1, r3
 8001002:	a31f      	add	r3, pc, #124	; (adr r3, 8001080 <readVout+0xe0>)
 8001004:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001008:	f7ff fafe 	bl	8000608 <__aeabi_dmul>
 800100c:	4602      	mov	r2, r0
 800100e:	460b      	mov	r3, r1
 8001010:	e9c7 2304 	strd	r2, r3, [r7, #16]
	tempV = (double) ((tempV * (RESISTOR_TOP_VOUT + RESISTOR_BOT)) / (RESISTOR_BOT))
 8001014:	231a      	movs	r3, #26
 8001016:	461a      	mov	r2, r3
 8001018:	230a      	movs	r3, #10
 800101a:	4413      	add	r3, r2
 800101c:	4618      	mov	r0, r3
 800101e:	f7ff fa89 	bl	8000534 <__aeabi_i2d>
 8001022:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001026:	f7ff faef 	bl	8000608 <__aeabi_dmul>
 800102a:	4602      	mov	r2, r0
 800102c:	460b      	mov	r3, r1
 800102e:	4614      	mov	r4, r2
 8001030:	461d      	mov	r5, r3
 8001032:	230a      	movs	r3, #10
 8001034:	4618      	mov	r0, r3
 8001036:	f7ff fa7d 	bl	8000534 <__aeabi_i2d>
 800103a:	4602      	mov	r2, r0
 800103c:	460b      	mov	r3, r1
 800103e:	4620      	mov	r0, r4
 8001040:	4629      	mov	r1, r5
 8001042:	f7ff fc0b 	bl	800085c <__aeabi_ddiv>
 8001046:	4602      	mov	r2, r0
 8001048:	460b      	mov	r3, r1
 800104a:	4610      	mov	r0, r2
 800104c:	4619      	mov	r1, r3
 800104e:	f04f 0200 	mov.w	r2, #0
 8001052:	4b0e      	ldr	r3, [pc, #56]	; (800108c <readVout+0xec>)
 8001054:	f7ff fad8 	bl	8000608 <__aeabi_dmul>
 8001058:	4602      	mov	r2, r0
 800105a:	460b      	mov	r3, r1
 800105c:	e9c7 2304 	strd	r2, r3, [r7, #16]
			* 1000.00;
	return tempV;
 8001060:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001064:	ec43 2b17 	vmov	d7, r2, r3
}
 8001068:	eeb0 0a47 	vmov.f32	s0, s14
 800106c:	eef0 0a67 	vmov.f32	s1, s15
 8001070:	3720      	adds	r7, #32
 8001072:	46bd      	mov	sp, r7
 8001074:	bdb0      	pop	{r4, r5, r7, pc}
 8001076:	bf00      	nop
 8001078:	00000000 	.word	0x00000000
 800107c:	40affe00 	.word	0x40affe00
 8001080:	66666666 	.word	0x66666666
 8001084:	400a6666 	.word	0x400a6666
 8001088:	200006c0 	.word	0x200006c0
 800108c:	408f4000 	.word	0x408f4000

08001090 <readIOut>:

double readIOut(void) {
 8001090:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001094:	b088      	sub	sp, #32
 8001096:	af00      	add	r7, sp, #0
	uint32_t retVal = 0;
 8001098:	2300      	movs	r3, #0
 800109a:	61fb      	str	r3, [r7, #28]

	ADC_ChannelConfTypeDef sConfig = { 0 };
 800109c:	463b      	mov	r3, r7
 800109e:	2200      	movs	r2, #0
 80010a0:	601a      	str	r2, [r3, #0]
 80010a2:	605a      	str	r2, [r3, #4]
 80010a4:	609a      	str	r2, [r3, #8]
 80010a6:	60da      	str	r2, [r3, #12]
	sConfig.Channel = ADC_CHANNEL_13;
 80010a8:	230d      	movs	r3, #13
 80010aa:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 80010ac:	2301      	movs	r3, #1
 80010ae:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 80010b0:	2302      	movs	r3, #2
 80010b2:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80010b4:	463b      	mov	r3, r7
 80010b6:	4619      	mov	r1, r3
 80010b8:	4849      	ldr	r0, [pc, #292]	; (80011e0 <readIOut+0x150>)
 80010ba:	f002 f861 	bl	8003180 <HAL_ADC_ConfigChannel>
		//error handle
	}
	HAL_ADC_Start(&hadc1);
 80010be:	4848      	ldr	r0, [pc, #288]	; (80011e0 <readIOut+0x150>)
 80010c0:	f001 fef4 	bl	8002eac <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80010c4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80010c8:	4845      	ldr	r0, [pc, #276]	; (80011e0 <readIOut+0x150>)
 80010ca:	f001 ffc8 	bl	800305e <HAL_ADC_PollForConversion>
	retVal = HAL_ADC_GetValue(&hadc1);
 80010ce:	4844      	ldr	r0, [pc, #272]	; (80011e0 <readIOut+0x150>)
 80010d0:	f002 f849 	bl	8003166 <HAL_ADC_GetValue>
 80010d4:	61f8      	str	r0, [r7, #28]
	HAL_ADC_Stop(&hadc1);
 80010d6:	4842      	ldr	r0, [pc, #264]	; (80011e0 <readIOut+0x150>)
 80010d8:	f001 ff8e 	bl	8002ff8 <HAL_ADC_Stop>

	if (retVal <= 30)
 80010dc:	69fb      	ldr	r3, [r7, #28]
 80010de:	2b1e      	cmp	r3, #30
 80010e0:	d801      	bhi.n	80010e6 <readIOut+0x56>
		retVal = 0;
 80010e2:	2300      	movs	r3, #0
 80010e4:	61fb      	str	r3, [r7, #28]
	double tempI = ((double) retVal / maxADCVal) * sysVolt;
 80010e6:	69f8      	ldr	r0, [r7, #28]
 80010e8:	f7ff fa14 	bl	8000514 <__aeabi_ui2d>
 80010ec:	a338      	add	r3, pc, #224	; (adr r3, 80011d0 <readIOut+0x140>)
 80010ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010f2:	f7ff fbb3 	bl	800085c <__aeabi_ddiv>
 80010f6:	4602      	mov	r2, r0
 80010f8:	460b      	mov	r3, r1
 80010fa:	4610      	mov	r0, r2
 80010fc:	4619      	mov	r1, r3
 80010fe:	a336      	add	r3, pc, #216	; (adr r3, 80011d8 <readIOut+0x148>)
 8001100:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001104:	f7ff fa80 	bl	8000608 <__aeabi_dmul>
 8001108:	4602      	mov	r2, r0
 800110a:	460b      	mov	r3, r1
 800110c:	e9c7 2304 	strd	r2, r3, [r7, #16]
	tempI = (tempI * 1000) / (SENSE_GAIN * (R_SENSE / 1000.00));
 8001110:	f04f 0200 	mov.w	r2, #0
 8001114:	4b33      	ldr	r3, [pc, #204]	; (80011e4 <readIOut+0x154>)
 8001116:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800111a:	f7ff fa75 	bl	8000608 <__aeabi_dmul>
 800111e:	4602      	mov	r2, r0
 8001120:	460b      	mov	r3, r1
 8001122:	4690      	mov	r8, r2
 8001124:	4699      	mov	r9, r3
 8001126:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800112a:	4618      	mov	r0, r3
 800112c:	f7ff fa02 	bl	8000534 <__aeabi_i2d>
 8001130:	4604      	mov	r4, r0
 8001132:	460d      	mov	r5, r1
 8001134:	230a      	movs	r3, #10
 8001136:	4618      	mov	r0, r3
 8001138:	f7ff f9fc 	bl	8000534 <__aeabi_i2d>
 800113c:	f04f 0200 	mov.w	r2, #0
 8001140:	4b28      	ldr	r3, [pc, #160]	; (80011e4 <readIOut+0x154>)
 8001142:	f7ff fb8b 	bl	800085c <__aeabi_ddiv>
 8001146:	4602      	mov	r2, r0
 8001148:	460b      	mov	r3, r1
 800114a:	4620      	mov	r0, r4
 800114c:	4629      	mov	r1, r5
 800114e:	f7ff fa5b 	bl	8000608 <__aeabi_dmul>
 8001152:	4602      	mov	r2, r0
 8001154:	460b      	mov	r3, r1
 8001156:	4640      	mov	r0, r8
 8001158:	4649      	mov	r1, r9
 800115a:	f7ff fb7f 	bl	800085c <__aeabi_ddiv>
 800115e:	4602      	mov	r2, r0
 8001160:	460b      	mov	r3, r1
 8001162:	e9c7 2304 	strd	r2, r3, [r7, #16]
	if ((tempI <= IDLE_I_HIGH) && (tempI >= IDLE_I_LOW))
 8001166:	2364      	movs	r3, #100	; 0x64
 8001168:	4618      	mov	r0, r3
 800116a:	f7ff f9e3 	bl	8000534 <__aeabi_i2d>
 800116e:	4602      	mov	r2, r0
 8001170:	460b      	mov	r3, r1
 8001172:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001176:	f7ff fcc3 	bl	8000b00 <__aeabi_dcmple>
 800117a:	4603      	mov	r3, r0
 800117c:	2b00      	cmp	r3, #0
 800117e:	d011      	beq.n	80011a4 <readIOut+0x114>
 8001180:	2364      	movs	r3, #100	; 0x64
 8001182:	4618      	mov	r0, r3
 8001184:	f7ff f9d6 	bl	8000534 <__aeabi_i2d>
 8001188:	4602      	mov	r2, r0
 800118a:	460b      	mov	r3, r1
 800118c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001190:	f7ff fcc0 	bl	8000b14 <__aeabi_dcmpge>
 8001194:	4603      	mov	r3, r0
 8001196:	2b00      	cmp	r3, #0
 8001198:	d004      	beq.n	80011a4 <readIOut+0x114>
		return 0;
 800119a:	f04f 0200 	mov.w	r2, #0
 800119e:	f04f 0300 	mov.w	r3, #0
 80011a2:	e008      	b.n	80011b6 <readIOut+0x126>
	return tempI - 2.500;
 80011a4:	f04f 0200 	mov.w	r2, #0
 80011a8:	4b0f      	ldr	r3, [pc, #60]	; (80011e8 <readIOut+0x158>)
 80011aa:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80011ae:	f7ff f873 	bl	8000298 <__aeabi_dsub>
 80011b2:	4602      	mov	r2, r0
 80011b4:	460b      	mov	r3, r1
 80011b6:	ec43 2b17 	vmov	d7, r2, r3
}
 80011ba:	eeb0 0a47 	vmov.f32	s0, s14
 80011be:	eef0 0a67 	vmov.f32	s1, s15
 80011c2:	3720      	adds	r7, #32
 80011c4:	46bd      	mov	sp, r7
 80011c6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80011ca:	bf00      	nop
 80011cc:	f3af 8000 	nop.w
 80011d0:	00000000 	.word	0x00000000
 80011d4:	40affe00 	.word	0x40affe00
 80011d8:	66666666 	.word	0x66666666
 80011dc:	400a6666 	.word	0x400a6666
 80011e0:	200006c0 	.word	0x200006c0
 80011e4:	408f4000 	.word	0x408f4000
 80011e8:	40040000 	.word	0x40040000

080011ec <readBtnUp>:

#include "buttons.h"

#define UNCONNECTED	//TODO: comment when buttons are connected

uint8_t readBtnUp(void){
 80011ec:	b580      	push	{r7, lr}
 80011ee:	af00      	add	r7, sp, #0
#ifdef UNCONNECTED
	return HAL_GPIO_ReadPin(nSW_UP_GPIO_Port, nSW_UP_Pin);
 80011f0:	2110      	movs	r1, #16
 80011f2:	4803      	ldr	r0, [pc, #12]	; (8001200 <readBtnUp+0x14>)
 80011f4:	f002 fc78 	bl	8003ae8 <HAL_GPIO_ReadPin>
 80011f8:	4603      	mov	r3, r0
#endif
	return !HAL_GPIO_ReadPin(nSW_UP_GPIO_Port, nSW_UP_Pin);
}
 80011fa:	4618      	mov	r0, r3
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	40020400 	.word	0x40020400

08001204 <readBtnDw>:

uint8_t readBtnDw(void){
 8001204:	b580      	push	{r7, lr}
 8001206:	af00      	add	r7, sp, #0
#ifdef UNCONNECTED
	return HAL_GPIO_ReadPin(nSW_DW_GPIO_Port, nSW_DW_Pin);
 8001208:	2104      	movs	r1, #4
 800120a:	4803      	ldr	r0, [pc, #12]	; (8001218 <readBtnDw+0x14>)
 800120c:	f002 fc6c 	bl	8003ae8 <HAL_GPIO_ReadPin>
 8001210:	4603      	mov	r3, r0
#endif
	return !HAL_GPIO_ReadPin(nSW_DW_GPIO_Port, nSW_DW_Pin);
}
 8001212:	4618      	mov	r0, r3
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	40020c00 	.word	0x40020c00

0800121c <readBtnVi>:

uint8_t readBtnVi(void){
 800121c:	b580      	push	{r7, lr}
 800121e:	af00      	add	r7, sp, #0
#ifdef UNCONNECTED
	return HAL_GPIO_ReadPin(nSW_VI_GPIO_Port, nSW_VI_Pin);
 8001220:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001224:	4802      	ldr	r0, [pc, #8]	; (8001230 <readBtnVi+0x14>)
 8001226:	f002 fc5f 	bl	8003ae8 <HAL_GPIO_ReadPin>
 800122a:	4603      	mov	r3, r0
#endif
	return !HAL_GPIO_ReadPin(nSW_VI_GPIO_Port, nSW_VI_Pin);
}
 800122c:	4618      	mov	r0, r3
 800122e:	bd80      	pop	{r7, pc}
 8001230:	40020800 	.word	0x40020800

08001234 <readBtnOe>:

uint8_t readBtnOe(void){
 8001234:	b580      	push	{r7, lr}
 8001236:	af00      	add	r7, sp, #0
#ifdef UNCONNECTED
	return HAL_GPIO_ReadPin(nSW_OE_GPIO_Port, nSW_OE_Pin);
 8001238:	2120      	movs	r1, #32
 800123a:	4803      	ldr	r0, [pc, #12]	; (8001248 <readBtnOe+0x14>)
 800123c:	f002 fc54 	bl	8003ae8 <HAL_GPIO_ReadPin>
 8001240:	4603      	mov	r3, r0
#endif
	return !HAL_GPIO_ReadPin(nSW_OE_GPIO_Port, nSW_OE_Pin);
}
 8001242:	4618      	mov	r0, r3
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	40020400 	.word	0x40020400

0800124c <whichBtn>:


uint8_t whichBtn(void) {
 800124c:	b580      	push	{r7, lr}
 800124e:	b082      	sub	sp, #8
 8001250:	af00      	add	r7, sp, #0
	uint8_t ret = 0b0000;
 8001252:	2300      	movs	r3, #0
 8001254:	71fb      	strb	r3, [r7, #7]

	while (readBtnUp())
 8001256:	e003      	b.n	8001260 <whichBtn+0x14>
		ret |= UP_BTN;
 8001258:	79fb      	ldrb	r3, [r7, #7]
 800125a:	f043 0301 	orr.w	r3, r3, #1
 800125e:	71fb      	strb	r3, [r7, #7]
	while (readBtnUp())
 8001260:	f7ff ffc4 	bl	80011ec <readBtnUp>
 8001264:	4603      	mov	r3, r0
 8001266:	2b00      	cmp	r3, #0
 8001268:	d1f6      	bne.n	8001258 <whichBtn+0xc>
	while (readBtnDw())
 800126a:	e003      	b.n	8001274 <whichBtn+0x28>
		ret |= DW_BTN;
 800126c:	79fb      	ldrb	r3, [r7, #7]
 800126e:	f043 0302 	orr.w	r3, r3, #2
 8001272:	71fb      	strb	r3, [r7, #7]
	while (readBtnDw())
 8001274:	f7ff ffc6 	bl	8001204 <readBtnDw>
 8001278:	4603      	mov	r3, r0
 800127a:	2b00      	cmp	r3, #0
 800127c:	d1f6      	bne.n	800126c <whichBtn+0x20>
	while (readBtnVi())
 800127e:	e003      	b.n	8001288 <whichBtn+0x3c>
		ret |= VI_BTN;
 8001280:	79fb      	ldrb	r3, [r7, #7]
 8001282:	f043 0304 	orr.w	r3, r3, #4
 8001286:	71fb      	strb	r3, [r7, #7]
	while (readBtnVi())
 8001288:	f7ff ffc8 	bl	800121c <readBtnVi>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d1f6      	bne.n	8001280 <whichBtn+0x34>
	if (readBtnOe())
 8001292:	f7ff ffcf 	bl	8001234 <readBtnOe>
 8001296:	4603      	mov	r3, r0
 8001298:	2b00      	cmp	r3, #0
 800129a:	d003      	beq.n	80012a4 <whichBtn+0x58>
		ret |= OE_BTN;
 800129c:	79fb      	ldrb	r3, [r7, #7]
 800129e:	f043 0308 	orr.w	r3, r3, #8
 80012a2:	71fb      	strb	r3, [r7, #7]

	return ret;
 80012a4:	79fb      	ldrb	r3, [r7, #7]
}
 80012a6:	4618      	mov	r0, r3
 80012a8:	3708      	adds	r7, #8
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}
	...

080012b0 <printMsg>:
#include "stm32f4xx_hal_gpio.h"
#include "leds.h"
#include "ssd1306.h"

void printMsg(char *format, ...)
{
 80012b0:	b40f      	push	{r0, r1, r2, r3}
 80012b2:	b580      	push	{r7, lr}
 80012b4:	b096      	sub	sp, #88	; 0x58
 80012b6:	af00      	add	r7, sp, #0
	char str[80];

	/*Extract the the argument list using VA apis */
	va_list args;
	va_start(args, format);
 80012b8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80012bc:	607b      	str	r3, [r7, #4]
	vsprintf(str, format, args);
 80012be:	f107 0308 	add.w	r3, r7, #8
 80012c2:	687a      	ldr	r2, [r7, #4]
 80012c4:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80012c6:	4618      	mov	r0, r3
 80012c8:	f005 fa38 	bl	800673c <vsiprintf>
	HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen(str), HAL_MAX_DELAY);
 80012cc:	f107 0308 	add.w	r3, r7, #8
 80012d0:	4618      	mov	r0, r3
 80012d2:	f7fe ff85 	bl	80001e0 <strlen>
 80012d6:	4603      	mov	r3, r0
 80012d8:	b29a      	uxth	r2, r3
 80012da:	f107 0108 	add.w	r1, r7, #8
 80012de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80012e2:	4805      	ldr	r0, [pc, #20]	; (80012f8 <printMsg+0x48>)
 80012e4:	f004 f8cb 	bl	800547e <HAL_UART_Transmit>
	va_end(args);
}
 80012e8:	bf00      	nop
 80012ea:	3758      	adds	r7, #88	; 0x58
 80012ec:	46bd      	mov	sp, r7
 80012ee:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80012f2:	b004      	add	sp, #16
 80012f4:	4770      	bx	lr
 80012f6:	bf00      	nop
 80012f8:	20000708 	.word	0x20000708

080012fc <i2cScan>:

uint8_t i2cScan(void)
{
 80012fc:	b5b0      	push	{r4, r5, r7, lr}
 80012fe:	b088      	sub	sp, #32
 8001300:	af00      	add	r7, sp, #0
	char info[] = "Scanning I2C bus...\r\n";
 8001302:	4b31      	ldr	r3, [pc, #196]	; (80013c8 <i2cScan+0xcc>)
 8001304:	1d3c      	adds	r4, r7, #4
 8001306:	461d      	mov	r5, r3
 8001308:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800130a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800130c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001310:	6020      	str	r0, [r4, #0]
 8001312:	3404      	adds	r4, #4
 8001314:	8021      	strh	r1, [r4, #0]
	printMsg(info);
 8001316:	1d3b      	adds	r3, r7, #4
 8001318:	4618      	mov	r0, r3
 800131a:	f7ff ffc9 	bl	80012b0 <printMsg>

	uint8_t devices = 0;
 800131e:	2300      	movs	r3, #0
 8001320:	77fb      	strb	r3, [r7, #31]

	HAL_StatusTypeDef res;

	for (uint16_t i = 0; i < 128; i++)
 8001322:	2300      	movs	r3, #0
 8001324:	83bb      	strh	r3, [r7, #28]
 8001326:	e042      	b.n	80013ae <i2cScan+0xb2>
	{
		res = HAL_I2C_IsDeviceReady(&hi2c1, i << 1, 1, 10);
 8001328:	8bbb      	ldrh	r3, [r7, #28]
 800132a:	005b      	lsls	r3, r3, #1
 800132c:	b299      	uxth	r1, r3
 800132e:	230a      	movs	r3, #10
 8001330:	2201      	movs	r2, #1
 8001332:	4826      	ldr	r0, [pc, #152]	; (80013cc <i2cScan+0xd0>)
 8001334:	f002 ff78 	bl	8004228 <HAL_I2C_IsDeviceReady>
 8001338:	4603      	mov	r3, r0
 800133a:	76fb      	strb	r3, [r7, #27]
		if (res == HAL_OK && (i << 1) == SSD1306_I2C_ADDR)
 800133c:	7efb      	ldrb	r3, [r7, #27]
 800133e:	2b00      	cmp	r3, #0
 8001340:	d10d      	bne.n	800135e <i2cScan+0x62>
 8001342:	8bbb      	ldrh	r3, [r7, #28]
 8001344:	005b      	lsls	r3, r3, #1
 8001346:	2b78      	cmp	r3, #120	; 0x78
 8001348:	d109      	bne.n	800135e <i2cScan+0x62>
		{
			devices |= OLED_FOUND;
 800134a:	7ffb      	ldrb	r3, [r7, #31]
 800134c:	f043 0301 	orr.w	r3, r3, #1
 8001350:	77fb      	strb	r3, [r7, #31]
			printMsg("OLED found at 0x%02X\n", i);
 8001352:	8bbb      	ldrh	r3, [r7, #28]
 8001354:	4619      	mov	r1, r3
 8001356:	481e      	ldr	r0, [pc, #120]	; (80013d0 <i2cScan+0xd4>)
 8001358:	f7ff ffaa 	bl	80012b0 <printMsg>
 800135c:	e024      	b.n	80013a8 <i2cScan+0xac>
		}
		else if (res == HAL_OK && (i << 1) == MCP4018_I2C_ADDR)
 800135e:	7efb      	ldrb	r3, [r7, #27]
 8001360:	2b00      	cmp	r3, #0
 8001362:	d10d      	bne.n	8001380 <i2cScan+0x84>
 8001364:	8bbb      	ldrh	r3, [r7, #28]
 8001366:	005b      	lsls	r3, r3, #1
 8001368:	2b5e      	cmp	r3, #94	; 0x5e
 800136a:	d109      	bne.n	8001380 <i2cScan+0x84>
		{
			devices |= POT_FOUND;
 800136c:	7ffb      	ldrb	r3, [r7, #31]
 800136e:	f043 0302 	orr.w	r3, r3, #2
 8001372:	77fb      	strb	r3, [r7, #31]
			printMsg("MCP4018 found at 0x%02X\n", i);
 8001374:	8bbb      	ldrh	r3, [r7, #28]
 8001376:	4619      	mov	r1, r3
 8001378:	4816      	ldr	r0, [pc, #88]	; (80013d4 <i2cScan+0xd8>)
 800137a:	f7ff ff99 	bl	80012b0 <printMsg>
 800137e:	e013      	b.n	80013a8 <i2cScan+0xac>
		}
		else if (res == HAL_OK)
 8001380:	7efb      	ldrb	r3, [r7, #27]
 8001382:	2b00      	cmp	r3, #0
 8001384:	d105      	bne.n	8001392 <i2cScan+0x96>
		{
			printMsg("Unknown device found at 0x%02X\n", i);
 8001386:	8bbb      	ldrh	r3, [r7, #28]
 8001388:	4619      	mov	r1, r3
 800138a:	4813      	ldr	r0, [pc, #76]	; (80013d8 <i2cScan+0xdc>)
 800138c:	f7ff ff90 	bl	80012b0 <printMsg>
 8001390:	e00a      	b.n	80013a8 <i2cScan+0xac>
		}
		else if (res == HAL_OK)
 8001392:	7efb      	ldrb	r3, [r7, #27]
 8001394:	2b00      	cmp	r3, #0
 8001396:	d107      	bne.n	80013a8 <i2cScan+0xac>
		{
			printMsg("Unknown device found at 0x%02X\n", i);
 8001398:	8bbb      	ldrh	r3, [r7, #28]
 800139a:	4619      	mov	r1, r3
 800139c:	480e      	ldr	r0, [pc, #56]	; (80013d8 <i2cScan+0xdc>)
 800139e:	f7ff ff87 	bl	80012b0 <printMsg>
			HAL_Delay(10);
 80013a2:	200a      	movs	r0, #10
 80013a4:	f001 fd1a 	bl	8002ddc <HAL_Delay>
	for (uint16_t i = 0; i < 128; i++)
 80013a8:	8bbb      	ldrh	r3, [r7, #28]
 80013aa:	3301      	adds	r3, #1
 80013ac:	83bb      	strh	r3, [r7, #28]
 80013ae:	8bbb      	ldrh	r3, [r7, #28]
 80013b0:	2b7f      	cmp	r3, #127	; 0x7f
 80013b2:	d9b9      	bls.n	8001328 <i2cScan+0x2c>
		}
	}
	printMsg("returning from scan %02X\n", devices);
 80013b4:	7ffb      	ldrb	r3, [r7, #31]
 80013b6:	4619      	mov	r1, r3
 80013b8:	4808      	ldr	r0, [pc, #32]	; (80013dc <i2cScan+0xe0>)
 80013ba:	f7ff ff79 	bl	80012b0 <printMsg>
	return devices;
 80013be:	7ffb      	ldrb	r3, [r7, #31]
}
 80013c0:	4618      	mov	r0, r3
 80013c2:	3720      	adds	r7, #32
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bdb0      	pop	{r4, r5, r7, pc}
 80013c8:	08008bd0 	.word	0x08008bd0
 80013cc:	20000620 	.word	0x20000620
 80013d0:	08008b60 	.word	0x08008b60
 80013d4:	08008b78 	.word	0x08008b78
 80013d8:	08008b94 	.word	0x08008b94
 80013dc:	08008bb4 	.word	0x08008bb4

080013e0 <errorLEDs>:
 *      Author: adityasehgal
 */

#include "leds.h"

void errorLEDs(uint8_t error) {
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b082      	sub	sp, #8
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	4603      	mov	r3, r0
 80013e8:	71fb      	strb	r3, [r7, #7]
	while (1) {
		if (error == OLED_FOUND) {
 80013ea:	79fb      	ldrb	r3, [r7, #7]
 80013ec:	2b01      	cmp	r3, #1
 80013ee:	d114      	bne.n	800141a <errorLEDs+0x3a>
			HAL_GPIO_TogglePin(CC_LED_PORT, CC_LED_PIN);
 80013f0:	2120      	movs	r1, #32
 80013f2:	4826      	ldr	r0, [pc, #152]	; (800148c <errorLEDs+0xac>)
 80013f4:	f002 fba9 	bl	8003b4a <HAL_GPIO_TogglePin>
			HAL_Delay(FLASH_FREQ);
 80013f8:	2064      	movs	r0, #100	; 0x64
 80013fa:	f001 fcef 	bl	8002ddc <HAL_Delay>
			HAL_GPIO_TogglePin(OE_LED_PORT, OE_LED_PIN);
 80013fe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001402:	4822      	ldr	r0, [pc, #136]	; (800148c <errorLEDs+0xac>)
 8001404:	f002 fba1 	bl	8003b4a <HAL_GPIO_TogglePin>
			HAL_Delay(FLASH_FREQ >> 1);
 8001408:	2032      	movs	r0, #50	; 0x32
 800140a:	f001 fce7 	bl	8002ddc <HAL_Delay>
			HAL_GPIO_TogglePin(OE_LED_PORT, OE_LED_PIN);
 800140e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001412:	481e      	ldr	r0, [pc, #120]	; (800148c <errorLEDs+0xac>)
 8001414:	f002 fb99 	bl	8003b4a <HAL_GPIO_TogglePin>
 8001418:	e7e7      	b.n	80013ea <errorLEDs+0xa>
		} else if (error == POT_FOUND) {
 800141a:	79fb      	ldrb	r3, [r7, #7]
 800141c:	2b02      	cmp	r3, #2
 800141e:	d113      	bne.n	8001448 <errorLEDs+0x68>
			HAL_GPIO_TogglePin(OE_LED_PORT, OE_LED_PIN);
 8001420:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001424:	4819      	ldr	r0, [pc, #100]	; (800148c <errorLEDs+0xac>)
 8001426:	f002 fb90 	bl	8003b4a <HAL_GPIO_TogglePin>
			HAL_Delay(FLASH_FREQ);
 800142a:	2064      	movs	r0, #100	; 0x64
 800142c:	f001 fcd6 	bl	8002ddc <HAL_Delay>
			HAL_GPIO_TogglePin(CC_LED_PORT, CC_LED_PIN);
 8001430:	2120      	movs	r1, #32
 8001432:	4816      	ldr	r0, [pc, #88]	; (800148c <errorLEDs+0xac>)
 8001434:	f002 fb89 	bl	8003b4a <HAL_GPIO_TogglePin>
			HAL_Delay(FLASH_FREQ >> 1);
 8001438:	2032      	movs	r0, #50	; 0x32
 800143a:	f001 fccf 	bl	8002ddc <HAL_Delay>
			HAL_GPIO_TogglePin(CC_LED_PORT, CC_LED_PIN);
 800143e:	2120      	movs	r1, #32
 8001440:	4812      	ldr	r0, [pc, #72]	; (800148c <errorLEDs+0xac>)
 8001442:	f002 fb82 	bl	8003b4a <HAL_GPIO_TogglePin>
 8001446:	e7d0      	b.n	80013ea <errorLEDs+0xa>
		} else if (error == 0) {
 8001448:	79fb      	ldrb	r3, [r7, #7]
 800144a:	2b00      	cmp	r3, #0
 800144c:	d118      	bne.n	8001480 <errorLEDs+0xa0>
			HAL_GPIO_TogglePin(OE_LED_PORT, OE_LED_PIN);
 800144e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001452:	480e      	ldr	r0, [pc, #56]	; (800148c <errorLEDs+0xac>)
 8001454:	f002 fb79 	bl	8003b4a <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(CC_LED_PORT, CC_LED_PIN);
 8001458:	2120      	movs	r1, #32
 800145a:	480c      	ldr	r0, [pc, #48]	; (800148c <errorLEDs+0xac>)
 800145c:	f002 fb75 	bl	8003b4a <HAL_GPIO_TogglePin>
			HAL_Delay(FLASH_FREQ >> 1);
 8001460:	2032      	movs	r0, #50	; 0x32
 8001462:	f001 fcbb 	bl	8002ddc <HAL_Delay>
			HAL_GPIO_TogglePin(OE_LED_PORT, OE_LED_PIN);
 8001466:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800146a:	4808      	ldr	r0, [pc, #32]	; (800148c <errorLEDs+0xac>)
 800146c:	f002 fb6d 	bl	8003b4a <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(CC_LED_PORT, CC_LED_PIN);
 8001470:	2120      	movs	r1, #32
 8001472:	4806      	ldr	r0, [pc, #24]	; (800148c <errorLEDs+0xac>)
 8001474:	f002 fb69 	bl	8003b4a <HAL_GPIO_TogglePin>
			HAL_Delay(FLASH_FREQ >> 1);
 8001478:	2032      	movs	r0, #50	; 0x32
 800147a:	f001 fcaf 	bl	8002ddc <HAL_Delay>
		if (error == OLED_FOUND) {
 800147e:	e7b4      	b.n	80013ea <errorLEDs+0xa>
		} else {
			break;
 8001480:	bf00      	nop
		}
	}
}
 8001482:	bf00      	nop
 8001484:	3708      	adds	r7, #8
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	40020000 	.word	0x40020000

08001490 <viLedOn>:

void viLedOn(void) {
 8001490:	b580      	push	{r7, lr}
 8001492:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(VI_LED_GPIO_Port, VI_LED_Pin, GPIO_PIN_SET);
 8001494:	2201      	movs	r2, #1
 8001496:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800149a:	4802      	ldr	r0, [pc, #8]	; (80014a4 <viLedOn+0x14>)
 800149c:	f002 fb3c 	bl	8003b18 <HAL_GPIO_WritePin>
}
 80014a0:	bf00      	nop
 80014a2:	bd80      	pop	{r7, pc}
 80014a4:	40020000 	.word	0x40020000

080014a8 <viLedOff>:

void viLedOff(void) {
 80014a8:	b580      	push	{r7, lr}
 80014aa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(VI_LED_GPIO_Port, VI_LED_Pin, GPIO_PIN_RESET);
 80014ac:	2200      	movs	r2, #0
 80014ae:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80014b2:	4802      	ldr	r0, [pc, #8]	; (80014bc <viLedOff+0x14>)
 80014b4:	f002 fb30 	bl	8003b18 <HAL_GPIO_WritePin>
}
 80014b8:	bf00      	nop
 80014ba:	bd80      	pop	{r7, pc}
 80014bc:	40020000 	.word	0x40020000

080014c0 <oeLedOn>:

void viLedToggle(void) {
	HAL_GPIO_TogglePin(VI_LED_GPIO_Port, VI_LED_Pin);
}

void oeLedOn(void) {
 80014c0:	b580      	push	{r7, lr}
 80014c2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(OE_LED_GPIO_Port, OE_LED_Pin, GPIO_PIN_SET);
 80014c4:	2201      	movs	r2, #1
 80014c6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80014ca:	4802      	ldr	r0, [pc, #8]	; (80014d4 <oeLedOn+0x14>)
 80014cc:	f002 fb24 	bl	8003b18 <HAL_GPIO_WritePin>
}
 80014d0:	bf00      	nop
 80014d2:	bd80      	pop	{r7, pc}
 80014d4:	40020000 	.word	0x40020000

080014d8 <oeLedOff>:

void oeLedOff(void) {
 80014d8:	b580      	push	{r7, lr}
 80014da:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(OE_LED_GPIO_Port, OE_LED_Pin, GPIO_PIN_RESET);
 80014dc:	2200      	movs	r2, #0
 80014de:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80014e2:	4802      	ldr	r0, [pc, #8]	; (80014ec <oeLedOff+0x14>)
 80014e4:	f002 fb18 	bl	8003b18 <HAL_GPIO_WritePin>
}
 80014e8:	bf00      	nop
 80014ea:	bd80      	pop	{r7, pc}
 80014ec:	40020000 	.word	0x40020000

080014f0 <ccLedOn>:

void oeLedToggle(void) {
	HAL_GPIO_TogglePin(OE_LED_GPIO_Port, OE_LED_Pin);
}

void ccLedOn(void) {
 80014f0:	b580      	push	{r7, lr}
 80014f2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CC_LED_GPIO_Port, CC_LED_Pin, GPIO_PIN_SET);
 80014f4:	2201      	movs	r2, #1
 80014f6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80014fa:	4802      	ldr	r0, [pc, #8]	; (8001504 <ccLedOn+0x14>)
 80014fc:	f002 fb0c 	bl	8003b18 <HAL_GPIO_WritePin>
}
 8001500:	bf00      	nop
 8001502:	bd80      	pop	{r7, pc}
 8001504:	40020800 	.word	0x40020800

08001508 <ccLedOff>:

void ccLedOff(void) {
 8001508:	b580      	push	{r7, lr}
 800150a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CC_LED_GPIO_Port, CC_LED_Pin, GPIO_PIN_RESET);
 800150c:	2200      	movs	r2, #0
 800150e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001512:	4802      	ldr	r0, [pc, #8]	; (800151c <ccLedOff+0x14>)
 8001514:	f002 fb00 	bl	8003b18 <HAL_GPIO_WritePin>
}
 8001518:	bf00      	nop
 800151a:	bd80      	pop	{r7, pc}
 800151c:	40020800 	.word	0x40020800

08001520 <setLeds>:

void ccLedToggle(void) {
	HAL_GPIO_TogglePin(CC_LED_GPIO_Port, CC_LED_Pin);
}

void setLeds(struct Stats psu) {
 8001520:	b580      	push	{r7, lr}
 8001522:	b084      	sub	sp, #16
 8001524:	af00      	add	r7, sp, #0
 8001526:	1d3b      	adds	r3, r7, #4
 8001528:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if (psu.OE == OE_ENABLED) {
 800152c:	7b7b      	ldrb	r3, [r7, #13]
 800152e:	2b01      	cmp	r3, #1
 8001530:	d102      	bne.n	8001538 <setLeds+0x18>
		oeLedOn();
 8001532:	f7ff ffc5 	bl	80014c0 <oeLedOn>
 8001536:	e001      	b.n	800153c <setLeds+0x1c>
	} else {
		oeLedOff();
 8001538:	f7ff ffce 	bl	80014d8 <oeLedOff>
	}

	if (psu.VI == VI_V_SEL) {
 800153c:	7bbb      	ldrb	r3, [r7, #14]
 800153e:	2b01      	cmp	r3, #1
 8001540:	d102      	bne.n	8001548 <setLeds+0x28>
		viLedOn();
 8001542:	f7ff ffa5 	bl	8001490 <viLedOn>
 8001546:	e001      	b.n	800154c <setLeds+0x2c>
	} else {
		viLedOff();
 8001548:	f7ff ffae 	bl	80014a8 <viLedOff>
	}

	if (psu.iLim == I_LIM_SET) {
 800154c:	7b3b      	ldrb	r3, [r7, #12]
 800154e:	2b01      	cmp	r3, #1
 8001550:	d102      	bne.n	8001558 <setLeds+0x38>
		ccLedOn();
 8001552:	f7ff ffcd 	bl	80014f0 <ccLedOn>
	} else {
		ccLedOff();
	}
}
 8001556:	e001      	b.n	800155c <setLeds+0x3c>
		ccLedOff();
 8001558:	f7ff ffd6 	bl	8001508 <ccLedOff>
}
 800155c:	bf00      	nop
 800155e:	3710      	adds	r7, #16
 8001560:	46bd      	mov	sp, r7
 8001562:	bd80      	pop	{r7, pc}

08001564 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001564:	b580      	push	{r7, lr}
 8001566:	b088      	sub	sp, #32
 8001568:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800156a:	f001 fbc5 	bl	8002cf8 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800156e:	f000 f871 	bl	8001654 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001572:	f000 f9c3 	bl	80018fc <MX_GPIO_Init>
	MX_ADC1_Init();
 8001576:	f000 f8d7 	bl	8001728 <MX_ADC1_Init>
	MX_I2C1_Init();
 800157a:	f000 f943 	bl	8001804 <MX_I2C1_Init>
	MX_USART2_UART_Init();
 800157e:	f000 f993 	bl	80018a8 <MX_USART2_UART_Init>
	MX_TIM10_Init();
 8001582:	f000 f96d 	bl	8001860 <MX_TIM10_Init>
	/* USER CODE BEGIN 2 */

	//check for i2c devices
	uint8_t i2cScanRet = i2cScan();
 8001586:	f7ff feb9 	bl	80012fc <i2cScan>
 800158a:	4603      	mov	r3, r0
 800158c:	77fb      	strb	r3, [r7, #31]
	if (!i2cScanRet) {
 800158e:	7ffb      	ldrb	r3, [r7, #31]
 8001590:	2b00      	cmp	r3, #0
 8001592:	d103      	bne.n	800159c <main+0x38>
		errorLEDs(i2cScanRet);
 8001594:	7ffb      	ldrb	r3, [r7, #31]
 8001596:	4618      	mov	r0, r3
 8001598:	f7ff ff22 	bl	80013e0 <errorLEDs>
	}
	printMsg("no I2C errors\n\n");
 800159c:	4828      	ldr	r0, [pc, #160]	; (8001640 <main+0xdc>)
 800159e:	f7ff fe87 	bl	80012b0 <printMsg>

	//initialize entire system
	initPSU();
 80015a2:	f000 fa77 	bl	8001a94 <initPSU>
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {

		//get all info from ADCs
		double Vin = readVin();
 80015a6:	f7ff fc83 	bl	8000eb0 <readVin>
 80015aa:	ed87 0b04 	vstr	d0, [r7, #16]

		double Vout = readVout();
 80015ae:	f7ff fcf7 	bl	8000fa0 <readVout>
 80015b2:	ed87 0b02 	vstr	d0, [r7, #8]

		double Iout = readIOut();
 80015b6:	f7ff fd6b 	bl	8001090 <readIOut>
 80015ba:	ed87 0b00 	vstr	d0, [r7]

		//update display only when enough time has passed
		if (__HAL_TIM_GET_COUNTER(&htim10) - timerVal >= REFRESH_INTERVAL) {
 80015be:	4b21      	ldr	r3, [pc, #132]	; (8001644 <main+0xe0>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015c4:	4a20      	ldr	r2, [pc, #128]	; (8001648 <main+0xe4>)
 80015c6:	8812      	ldrh	r2, [r2, #0]
 80015c8:	1a9b      	subs	r3, r3, r2
 80015ca:	f640 12c3 	movw	r2, #2499	; 0x9c3
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d90d      	bls.n	80015ee <main+0x8a>
			displayVoltageCurrent(Vin, Vout, Iout);
 80015d2:	ed97 2b00 	vldr	d2, [r7]
 80015d6:	ed97 1b02 	vldr	d1, [r7, #8]
 80015da:	ed97 0b04 	vldr	d0, [r7, #16]
 80015de:	f000 fab7 	bl	8001b50 <displayVoltageCurrent>
			timerVal = __HAL_TIM_GET_COUNTER(&htim10);
 80015e2:	4b18      	ldr	r3, [pc, #96]	; (8001644 <main+0xe0>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015e8:	b29a      	uxth	r2, r3
 80015ea:	4b17      	ldr	r3, [pc, #92]	; (8001648 <main+0xe4>)
 80015ec:	801a      	strh	r2, [r3, #0]
		}

		//only handle buttons if interrupt was flagged
		if (swIntFlag == SET) {
 80015ee:	4b17      	ldr	r3, [pc, #92]	; (800164c <main+0xe8>)
 80015f0:	781b      	ldrb	r3, [r3, #0]
 80015f2:	2b01      	cmp	r3, #1
 80015f4:	d108      	bne.n	8001608 <main+0xa4>
			buttonsHandler(whichBtn());
 80015f6:	f7ff fe29 	bl	800124c <whichBtn>
 80015fa:	4603      	mov	r3, r0
 80015fc:	4618      	mov	r0, r3
 80015fe:	f000 fca3 	bl	8001f48 <buttonsHandler>
			swIntFlag = RESET;
 8001602:	4b12      	ldr	r3, [pc, #72]	; (800164c <main+0xe8>)
 8001604:	2200      	movs	r2, #0
 8001606:	701a      	strb	r2, [r3, #0]
		}

		//check for current surpassing set limit
		if (Iout > psuStats.iSet) {
 8001608:	4b11      	ldr	r3, [pc, #68]	; (8001650 <main+0xec>)
 800160a:	685b      	ldr	r3, [r3, #4]
 800160c:	4618      	mov	r0, r3
 800160e:	f7fe ff81 	bl	8000514 <__aeabi_ui2d>
 8001612:	4602      	mov	r2, r0
 8001614:	460b      	mov	r3, r1
 8001616:	e9d7 0100 	ldrd	r0, r1, [r7]
 800161a:	f7ff fa85 	bl	8000b28 <__aeabi_dcmpgt>
 800161e:	4603      	mov	r3, r0
 8001620:	2b00      	cmp	r3, #0
 8001622:	d003      	beq.n	800162c <main+0xc8>
			psuStats.iLim = I_LIM_SET;
 8001624:	4b0a      	ldr	r3, [pc, #40]	; (8001650 <main+0xec>)
 8001626:	2201      	movs	r2, #1
 8001628:	721a      	strb	r2, [r3, #8]
 800162a:	e002      	b.n	8001632 <main+0xce>
		} else {
			psuStats.iLim = I_LIM_NSET;
 800162c:	4b08      	ldr	r3, [pc, #32]	; (8001650 <main+0xec>)
 800162e:	2200      	movs	r2, #0
 8001630:	721a      	strb	r2, [r3, #8]
		}

		//set LEDs according to setup/errors
		setLeds(psuStats);
 8001632:	4b07      	ldr	r3, [pc, #28]	; (8001650 <main+0xec>)
 8001634:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001638:	f7ff ff72 	bl	8001520 <setLeds>
	while (1) {
 800163c:	e7b3      	b.n	80015a6 <main+0x42>
 800163e:	bf00      	nop
 8001640:	08008be8 	.word	0x08008be8
 8001644:	20000674 	.word	0x20000674
 8001648:	2000020a 	.word	0x2000020a
 800164c:	20000208 	.word	0x20000208
 8001650:	200006b4 	.word	0x200006b4

08001654 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001654:	b580      	push	{r7, lr}
 8001656:	b094      	sub	sp, #80	; 0x50
 8001658:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800165a:	f107 0320 	add.w	r3, r7, #32
 800165e:	2230      	movs	r2, #48	; 0x30
 8001660:	2100      	movs	r1, #0
 8001662:	4618      	mov	r0, r3
 8001664:	f004 fbc2 	bl	8005dec <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001668:	f107 030c 	add.w	r3, r7, #12
 800166c:	2200      	movs	r2, #0
 800166e:	601a      	str	r2, [r3, #0]
 8001670:	605a      	str	r2, [r3, #4]
 8001672:	609a      	str	r2, [r3, #8]
 8001674:	60da      	str	r2, [r3, #12]
 8001676:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8001678:	2300      	movs	r3, #0
 800167a:	60bb      	str	r3, [r7, #8]
 800167c:	4b28      	ldr	r3, [pc, #160]	; (8001720 <SystemClock_Config+0xcc>)
 800167e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001680:	4a27      	ldr	r2, [pc, #156]	; (8001720 <SystemClock_Config+0xcc>)
 8001682:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001686:	6413      	str	r3, [r2, #64]	; 0x40
 8001688:	4b25      	ldr	r3, [pc, #148]	; (8001720 <SystemClock_Config+0xcc>)
 800168a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800168c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001690:	60bb      	str	r3, [r7, #8]
 8001692:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001694:	2300      	movs	r3, #0
 8001696:	607b      	str	r3, [r7, #4]
 8001698:	4b22      	ldr	r3, [pc, #136]	; (8001724 <SystemClock_Config+0xd0>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80016a0:	4a20      	ldr	r2, [pc, #128]	; (8001724 <SystemClock_Config+0xd0>)
 80016a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80016a6:	6013      	str	r3, [r2, #0]
 80016a8:	4b1e      	ldr	r3, [pc, #120]	; (8001724 <SystemClock_Config+0xd0>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80016b0:	607b      	str	r3, [r7, #4]
 80016b2:	687b      	ldr	r3, [r7, #4]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80016b4:	2302      	movs	r3, #2
 80016b6:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80016b8:	2301      	movs	r3, #1
 80016ba:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80016bc:	2310      	movs	r3, #16
 80016be:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016c0:	2302      	movs	r3, #2
 80016c2:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80016c4:	2300      	movs	r3, #0
 80016c6:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 80016c8:	2308      	movs	r3, #8
 80016ca:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 84;
 80016cc:	2354      	movs	r3, #84	; 0x54
 80016ce:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80016d0:	2302      	movs	r3, #2
 80016d2:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 80016d4:	2304      	movs	r3, #4
 80016d6:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80016d8:	f107 0320 	add.w	r3, r7, #32
 80016dc:	4618      	mov	r0, r3
 80016de:	f003 f971 	bl	80049c4 <HAL_RCC_OscConfig>
 80016e2:	4603      	mov	r3, r0
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d001      	beq.n	80016ec <SystemClock_Config+0x98>
		Error_Handler();
 80016e8:	f000 fd92 	bl	8002210 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80016ec:	230f      	movs	r3, #15
 80016ee:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016f0:	2302      	movs	r3, #2
 80016f2:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016f4:	2300      	movs	r3, #0
 80016f6:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80016f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016fc:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80016fe:	2300      	movs	r3, #0
 8001700:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8001702:	f107 030c 	add.w	r3, r7, #12
 8001706:	2102      	movs	r1, #2
 8001708:	4618      	mov	r0, r3
 800170a:	f003 fbcb 	bl	8004ea4 <HAL_RCC_ClockConfig>
 800170e:	4603      	mov	r3, r0
 8001710:	2b00      	cmp	r3, #0
 8001712:	d001      	beq.n	8001718 <SystemClock_Config+0xc4>
		Error_Handler();
 8001714:	f000 fd7c 	bl	8002210 <Error_Handler>
	}
}
 8001718:	bf00      	nop
 800171a:	3750      	adds	r7, #80	; 0x50
 800171c:	46bd      	mov	sp, r7
 800171e:	bd80      	pop	{r7, pc}
 8001720:	40023800 	.word	0x40023800
 8001724:	40007000 	.word	0x40007000

08001728 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 8001728:	b580      	push	{r7, lr}
 800172a:	b084      	sub	sp, #16
 800172c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 800172e:	463b      	mov	r3, r7
 8001730:	2200      	movs	r2, #0
 8001732:	601a      	str	r2, [r3, #0]
 8001734:	605a      	str	r2, [r3, #4]
 8001736:	609a      	str	r2, [r3, #8]
 8001738:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN ADC1_Init 1 */

	/* USER CODE END ADC1_Init 1 */
	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc1.Instance = ADC1;
 800173a:	4b2f      	ldr	r3, [pc, #188]	; (80017f8 <MX_ADC1_Init+0xd0>)
 800173c:	4a2f      	ldr	r2, [pc, #188]	; (80017fc <MX_ADC1_Init+0xd4>)
 800173e:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001740:	4b2d      	ldr	r3, [pc, #180]	; (80017f8 <MX_ADC1_Init+0xd0>)
 8001742:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001746:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001748:	4b2b      	ldr	r3, [pc, #172]	; (80017f8 <MX_ADC1_Init+0xd0>)
 800174a:	2200      	movs	r2, #0
 800174c:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = ENABLE;
 800174e:	4b2a      	ldr	r3, [pc, #168]	; (80017f8 <MX_ADC1_Init+0xd0>)
 8001750:	2201      	movs	r2, #1
 8001752:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = ENABLE;
 8001754:	4b28      	ldr	r3, [pc, #160]	; (80017f8 <MX_ADC1_Init+0xd0>)
 8001756:	2201      	movs	r2, #1
 8001758:	761a      	strb	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 800175a:	4b27      	ldr	r3, [pc, #156]	; (80017f8 <MX_ADC1_Init+0xd0>)
 800175c:	2200      	movs	r2, #0
 800175e:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001762:	4b25      	ldr	r3, [pc, #148]	; (80017f8 <MX_ADC1_Init+0xd0>)
 8001764:	2200      	movs	r2, #0
 8001766:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001768:	4b23      	ldr	r3, [pc, #140]	; (80017f8 <MX_ADC1_Init+0xd0>)
 800176a:	4a25      	ldr	r2, [pc, #148]	; (8001800 <MX_ADC1_Init+0xd8>)
 800176c:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800176e:	4b22      	ldr	r3, [pc, #136]	; (80017f8 <MX_ADC1_Init+0xd0>)
 8001770:	2200      	movs	r2, #0
 8001772:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 3;
 8001774:	4b20      	ldr	r3, [pc, #128]	; (80017f8 <MX_ADC1_Init+0xd0>)
 8001776:	2203      	movs	r2, #3
 8001778:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = DISABLE;
 800177a:	4b1f      	ldr	r3, [pc, #124]	; (80017f8 <MX_ADC1_Init+0xd0>)
 800177c:	2200      	movs	r2, #0
 800177e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001782:	4b1d      	ldr	r3, [pc, #116]	; (80017f8 <MX_ADC1_Init+0xd0>)
 8001784:	2201      	movs	r2, #1
 8001786:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8001788:	481b      	ldr	r0, [pc, #108]	; (80017f8 <MX_ADC1_Init+0xd0>)
 800178a:	f001 fb4b 	bl	8002e24 <HAL_ADC_Init>
 800178e:	4603      	mov	r3, r0
 8001790:	2b00      	cmp	r3, #0
 8001792:	d001      	beq.n	8001798 <MX_ADC1_Init+0x70>
		Error_Handler();
 8001794:	f000 fd3c 	bl	8002210 <Error_Handler>
	}
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_0;
 8001798:	2300      	movs	r3, #0
 800179a:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 800179c:	2301      	movs	r3, #1
 800179e:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80017a0:	2300      	movs	r3, #0
 80017a2:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80017a4:	463b      	mov	r3, r7
 80017a6:	4619      	mov	r1, r3
 80017a8:	4813      	ldr	r0, [pc, #76]	; (80017f8 <MX_ADC1_Init+0xd0>)
 80017aa:	f001 fce9 	bl	8003180 <HAL_ADC_ConfigChannel>
 80017ae:	4603      	mov	r3, r0
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d001      	beq.n	80017b8 <MX_ADC1_Init+0x90>
		Error_Handler();
 80017b4:	f000 fd2c 	bl	8002210 <Error_Handler>
	}
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_1;
 80017b8:	2301      	movs	r3, #1
 80017ba:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 2;
 80017bc:	2302      	movs	r3, #2
 80017be:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80017c0:	463b      	mov	r3, r7
 80017c2:	4619      	mov	r1, r3
 80017c4:	480c      	ldr	r0, [pc, #48]	; (80017f8 <MX_ADC1_Init+0xd0>)
 80017c6:	f001 fcdb 	bl	8003180 <HAL_ADC_ConfigChannel>
 80017ca:	4603      	mov	r3, r0
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d001      	beq.n	80017d4 <MX_ADC1_Init+0xac>
		Error_Handler();
 80017d0:	f000 fd1e 	bl	8002210 <Error_Handler>
	}
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_13;
 80017d4:	230d      	movs	r3, #13
 80017d6:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 3;
 80017d8:	2303      	movs	r3, #3
 80017da:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80017dc:	463b      	mov	r3, r7
 80017de:	4619      	mov	r1, r3
 80017e0:	4805      	ldr	r0, [pc, #20]	; (80017f8 <MX_ADC1_Init+0xd0>)
 80017e2:	f001 fccd 	bl	8003180 <HAL_ADC_ConfigChannel>
 80017e6:	4603      	mov	r3, r0
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d001      	beq.n	80017f0 <MX_ADC1_Init+0xc8>
		Error_Handler();
 80017ec:	f000 fd10 	bl	8002210 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 80017f0:	bf00      	nop
 80017f2:	3710      	adds	r7, #16
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bd80      	pop	{r7, pc}
 80017f8:	200006c0 	.word	0x200006c0
 80017fc:	40012000 	.word	0x40012000
 8001800:	0f000001 	.word	0x0f000001

08001804 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8001804:	b580      	push	{r7, lr}
 8001806:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8001808:	4b12      	ldr	r3, [pc, #72]	; (8001854 <MX_I2C1_Init+0x50>)
 800180a:	4a13      	ldr	r2, [pc, #76]	; (8001858 <MX_I2C1_Init+0x54>)
 800180c:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 400000;
 800180e:	4b11      	ldr	r3, [pc, #68]	; (8001854 <MX_I2C1_Init+0x50>)
 8001810:	4a12      	ldr	r2, [pc, #72]	; (800185c <MX_I2C1_Init+0x58>)
 8001812:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001814:	4b0f      	ldr	r3, [pc, #60]	; (8001854 <MX_I2C1_Init+0x50>)
 8001816:	2200      	movs	r2, #0
 8001818:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 800181a:	4b0e      	ldr	r3, [pc, #56]	; (8001854 <MX_I2C1_Init+0x50>)
 800181c:	2200      	movs	r2, #0
 800181e:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001820:	4b0c      	ldr	r3, [pc, #48]	; (8001854 <MX_I2C1_Init+0x50>)
 8001822:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001826:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001828:	4b0a      	ldr	r3, [pc, #40]	; (8001854 <MX_I2C1_Init+0x50>)
 800182a:	2200      	movs	r2, #0
 800182c:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 800182e:	4b09      	ldr	r3, [pc, #36]	; (8001854 <MX_I2C1_Init+0x50>)
 8001830:	2200      	movs	r2, #0
 8001832:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001834:	4b07      	ldr	r3, [pc, #28]	; (8001854 <MX_I2C1_Init+0x50>)
 8001836:	2200      	movs	r2, #0
 8001838:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800183a:	4b06      	ldr	r3, [pc, #24]	; (8001854 <MX_I2C1_Init+0x50>)
 800183c:	2200      	movs	r2, #0
 800183e:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8001840:	4804      	ldr	r0, [pc, #16]	; (8001854 <MX_I2C1_Init+0x50>)
 8001842:	f002 f9b5 	bl	8003bb0 <HAL_I2C_Init>
 8001846:	4603      	mov	r3, r0
 8001848:	2b00      	cmp	r3, #0
 800184a:	d001      	beq.n	8001850 <MX_I2C1_Init+0x4c>
		Error_Handler();
 800184c:	f000 fce0 	bl	8002210 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */
	/* USER CODE END I2C1_Init 2 */

}
 8001850:	bf00      	nop
 8001852:	bd80      	pop	{r7, pc}
 8001854:	20000620 	.word	0x20000620
 8001858:	40005400 	.word	0x40005400
 800185c:	00061a80 	.word	0x00061a80

08001860 <MX_TIM10_Init>:
/**
 * @brief TIM10 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM10_Init(void) {
 8001860:	b580      	push	{r7, lr}
 8001862:	af00      	add	r7, sp, #0
	/* USER CODE END TIM10_Init 0 */

	/* USER CODE BEGIN TIM10_Init 1 */

	/* USER CODE END TIM10_Init 1 */
	htim10.Instance = TIM10;
 8001864:	4b0e      	ldr	r3, [pc, #56]	; (80018a0 <MX_TIM10_Init+0x40>)
 8001866:	4a0f      	ldr	r2, [pc, #60]	; (80018a4 <MX_TIM10_Init+0x44>)
 8001868:	601a      	str	r2, [r3, #0]
	htim10.Init.Prescaler = 8400 - 1;
 800186a:	4b0d      	ldr	r3, [pc, #52]	; (80018a0 <MX_TIM10_Init+0x40>)
 800186c:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8001870:	605a      	str	r2, [r3, #4]
	htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001872:	4b0b      	ldr	r3, [pc, #44]	; (80018a0 <MX_TIM10_Init+0x40>)
 8001874:	2200      	movs	r2, #0
 8001876:	609a      	str	r2, [r3, #8]
	htim10.Init.Period = 65535;
 8001878:	4b09      	ldr	r3, [pc, #36]	; (80018a0 <MX_TIM10_Init+0x40>)
 800187a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800187e:	60da      	str	r2, [r3, #12]
	htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001880:	4b07      	ldr	r3, [pc, #28]	; (80018a0 <MX_TIM10_Init+0x40>)
 8001882:	2200      	movs	r2, #0
 8001884:	611a      	str	r2, [r3, #16]
	htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001886:	4b06      	ldr	r3, [pc, #24]	; (80018a0 <MX_TIM10_Init+0x40>)
 8001888:	2200      	movs	r2, #0
 800188a:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim10) != HAL_OK) {
 800188c:	4804      	ldr	r0, [pc, #16]	; (80018a0 <MX_TIM10_Init+0x40>)
 800188e:	f003 fcd9 	bl	8005244 <HAL_TIM_Base_Init>
 8001892:	4603      	mov	r3, r0
 8001894:	2b00      	cmp	r3, #0
 8001896:	d001      	beq.n	800189c <MX_TIM10_Init+0x3c>
		Error_Handler();
 8001898:	f000 fcba 	bl	8002210 <Error_Handler>
	}
	/* USER CODE BEGIN TIM10_Init 2 */

	/* USER CODE END TIM10_Init 2 */

}
 800189c:	bf00      	nop
 800189e:	bd80      	pop	{r7, pc}
 80018a0:	20000674 	.word	0x20000674
 80018a4:	40014400 	.word	0x40014400

080018a8 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 80018a8:	b580      	push	{r7, lr}
 80018aa:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 80018ac:	4b11      	ldr	r3, [pc, #68]	; (80018f4 <MX_USART2_UART_Init+0x4c>)
 80018ae:	4a12      	ldr	r2, [pc, #72]	; (80018f8 <MX_USART2_UART_Init+0x50>)
 80018b0:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 80018b2:	4b10      	ldr	r3, [pc, #64]	; (80018f4 <MX_USART2_UART_Init+0x4c>)
 80018b4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80018b8:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80018ba:	4b0e      	ldr	r3, [pc, #56]	; (80018f4 <MX_USART2_UART_Init+0x4c>)
 80018bc:	2200      	movs	r2, #0
 80018be:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80018c0:	4b0c      	ldr	r3, [pc, #48]	; (80018f4 <MX_USART2_UART_Init+0x4c>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80018c6:	4b0b      	ldr	r3, [pc, #44]	; (80018f4 <MX_USART2_UART_Init+0x4c>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80018cc:	4b09      	ldr	r3, [pc, #36]	; (80018f4 <MX_USART2_UART_Init+0x4c>)
 80018ce:	220c      	movs	r2, #12
 80018d0:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018d2:	4b08      	ldr	r3, [pc, #32]	; (80018f4 <MX_USART2_UART_Init+0x4c>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80018d8:	4b06      	ldr	r3, [pc, #24]	; (80018f4 <MX_USART2_UART_Init+0x4c>)
 80018da:	2200      	movs	r2, #0
 80018dc:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 80018de:	4805      	ldr	r0, [pc, #20]	; (80018f4 <MX_USART2_UART_Init+0x4c>)
 80018e0:	f003 fd80 	bl	80053e4 <HAL_UART_Init>
 80018e4:	4603      	mov	r3, r0
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d001      	beq.n	80018ee <MX_USART2_UART_Init+0x46>
		Error_Handler();
 80018ea:	f000 fc91 	bl	8002210 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 80018ee:	bf00      	nop
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	bf00      	nop
 80018f4:	20000708 	.word	0x20000708
 80018f8:	40004400 	.word	0x40004400

080018fc <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b08a      	sub	sp, #40	; 0x28
 8001900:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001902:	f107 0314 	add.w	r3, r7, #20
 8001906:	2200      	movs	r2, #0
 8001908:	601a      	str	r2, [r3, #0]
 800190a:	605a      	str	r2, [r3, #4]
 800190c:	609a      	str	r2, [r3, #8]
 800190e:	60da      	str	r2, [r3, #12]
 8001910:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001912:	2300      	movs	r3, #0
 8001914:	613b      	str	r3, [r7, #16]
 8001916:	4b59      	ldr	r3, [pc, #356]	; (8001a7c <MX_GPIO_Init+0x180>)
 8001918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800191a:	4a58      	ldr	r2, [pc, #352]	; (8001a7c <MX_GPIO_Init+0x180>)
 800191c:	f043 0304 	orr.w	r3, r3, #4
 8001920:	6313      	str	r3, [r2, #48]	; 0x30
 8001922:	4b56      	ldr	r3, [pc, #344]	; (8001a7c <MX_GPIO_Init+0x180>)
 8001924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001926:	f003 0304 	and.w	r3, r3, #4
 800192a:	613b      	str	r3, [r7, #16]
 800192c:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800192e:	2300      	movs	r3, #0
 8001930:	60fb      	str	r3, [r7, #12]
 8001932:	4b52      	ldr	r3, [pc, #328]	; (8001a7c <MX_GPIO_Init+0x180>)
 8001934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001936:	4a51      	ldr	r2, [pc, #324]	; (8001a7c <MX_GPIO_Init+0x180>)
 8001938:	f043 0301 	orr.w	r3, r3, #1
 800193c:	6313      	str	r3, [r2, #48]	; 0x30
 800193e:	4b4f      	ldr	r3, [pc, #316]	; (8001a7c <MX_GPIO_Init+0x180>)
 8001940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001942:	f003 0301 	and.w	r3, r3, #1
 8001946:	60fb      	str	r3, [r7, #12]
 8001948:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 800194a:	2300      	movs	r3, #0
 800194c:	60bb      	str	r3, [r7, #8]
 800194e:	4b4b      	ldr	r3, [pc, #300]	; (8001a7c <MX_GPIO_Init+0x180>)
 8001950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001952:	4a4a      	ldr	r2, [pc, #296]	; (8001a7c <MX_GPIO_Init+0x180>)
 8001954:	f043 0308 	orr.w	r3, r3, #8
 8001958:	6313      	str	r3, [r2, #48]	; 0x30
 800195a:	4b48      	ldr	r3, [pc, #288]	; (8001a7c <MX_GPIO_Init+0x180>)
 800195c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800195e:	f003 0308 	and.w	r3, r3, #8
 8001962:	60bb      	str	r3, [r7, #8]
 8001964:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001966:	2300      	movs	r3, #0
 8001968:	607b      	str	r3, [r7, #4]
 800196a:	4b44      	ldr	r3, [pc, #272]	; (8001a7c <MX_GPIO_Init+0x180>)
 800196c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800196e:	4a43      	ldr	r2, [pc, #268]	; (8001a7c <MX_GPIO_Init+0x180>)
 8001970:	f043 0302 	orr.w	r3, r3, #2
 8001974:	6313      	str	r3, [r2, #48]	; 0x30
 8001976:	4b41      	ldr	r3, [pc, #260]	; (8001a7c <MX_GPIO_Init+0x180>)
 8001978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800197a:	f003 0302 	and.w	r3, r3, #2
 800197e:	607b      	str	r3, [r7, #4]
 8001980:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, REG_EN_Pin | CC_LED_Pin, GPIO_PIN_RESET);
 8001982:	2200      	movs	r2, #0
 8001984:	f240 4102 	movw	r1, #1026	; 0x402
 8001988:	483d      	ldr	r0, [pc, #244]	; (8001a80 <MX_GPIO_Init+0x184>)
 800198a:	f002 f8c5 	bl	8003b18 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5 | VI_LED_Pin | OE_LED_Pin,
 800198e:	2200      	movs	r2, #0
 8001990:	f249 0120 	movw	r1, #36896	; 0x9020
 8001994:	483b      	ldr	r0, [pc, #236]	; (8001a84 <MX_GPIO_Init+0x188>)
 8001996:	f002 f8bf 	bl	8003b18 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, nSW_UP_Pin | OLED_RST_Pin, GPIO_PIN_RESET);
 800199a:	2200      	movs	r2, #0
 800199c:	f44f 7188 	mov.w	r1, #272	; 0x110
 80019a0:	4839      	ldr	r0, [pc, #228]	; (8001a88 <MX_GPIO_Init+0x18c>)
 80019a2:	f002 f8b9 	bl	8003b18 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : REG_EN_Pin CC_LED_Pin */
	GPIO_InitStruct.Pin = REG_EN_Pin | CC_LED_Pin;
 80019a6:	f240 4302 	movw	r3, #1026	; 0x402
 80019aa:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019ac:	2301      	movs	r3, #1
 80019ae:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b0:	2300      	movs	r3, #0
 80019b2:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019b4:	2300      	movs	r3, #0
 80019b6:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019b8:	f107 0314 	add.w	r3, r7, #20
 80019bc:	4619      	mov	r1, r3
 80019be:	4830      	ldr	r0, [pc, #192]	; (8001a80 <MX_GPIO_Init+0x184>)
 80019c0:	f001 ff0e 	bl	80037e0 <HAL_GPIO_Init>

	/*Configure GPIO pins : PA5 VI_LED_Pin OE_LED_Pin */
	GPIO_InitStruct.Pin = GPIO_PIN_5 | VI_LED_Pin | OE_LED_Pin;
 80019c4:	f249 0320 	movw	r3, #36896	; 0x9020
 80019c8:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019ca:	2301      	movs	r3, #1
 80019cc:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ce:	2300      	movs	r3, #0
 80019d0:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019d2:	2300      	movs	r3, #0
 80019d4:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019d6:	f107 0314 	add.w	r3, r7, #20
 80019da:	4619      	mov	r1, r3
 80019dc:	4829      	ldr	r0, [pc, #164]	; (8001a84 <MX_GPIO_Init+0x188>)
 80019de:	f001 feff 	bl	80037e0 <HAL_GPIO_Init>

	/*Configure GPIO pin : nSW_INT_Pin */
	GPIO_InitStruct.Pin = nSW_INT_Pin;
 80019e2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80019e6:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80019e8:	4b28      	ldr	r3, [pc, #160]	; (8001a8c <MX_GPIO_Init+0x190>)
 80019ea:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ec:	2300      	movs	r3, #0
 80019ee:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(nSW_INT_GPIO_Port, &GPIO_InitStruct);
 80019f0:	f107 0314 	add.w	r3, r7, #20
 80019f4:	4619      	mov	r1, r3
 80019f6:	4822      	ldr	r0, [pc, #136]	; (8001a80 <MX_GPIO_Init+0x184>)
 80019f8:	f001 fef2 	bl	80037e0 <HAL_GPIO_Init>

	/*Configure GPIO pin : nSW_VI_Pin */
	GPIO_InitStruct.Pin = nSW_VI_Pin;
 80019fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a00:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a02:	2300      	movs	r3, #0
 8001a04:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a06:	2300      	movs	r3, #0
 8001a08:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(nSW_VI_GPIO_Port, &GPIO_InitStruct);
 8001a0a:	f107 0314 	add.w	r3, r7, #20
 8001a0e:	4619      	mov	r1, r3
 8001a10:	481b      	ldr	r0, [pc, #108]	; (8001a80 <MX_GPIO_Init+0x184>)
 8001a12:	f001 fee5 	bl	80037e0 <HAL_GPIO_Init>

	/*Configure GPIO pin : nSW_DW_Pin */
	GPIO_InitStruct.Pin = nSW_DW_Pin;
 8001a16:	2304      	movs	r3, #4
 8001a18:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(nSW_DW_GPIO_Port, &GPIO_InitStruct);
 8001a22:	f107 0314 	add.w	r3, r7, #20
 8001a26:	4619      	mov	r1, r3
 8001a28:	4819      	ldr	r0, [pc, #100]	; (8001a90 <MX_GPIO_Init+0x194>)
 8001a2a:	f001 fed9 	bl	80037e0 <HAL_GPIO_Init>

	/*Configure GPIO pins : nSW_UP_Pin OLED_RST_Pin */
	GPIO_InitStruct.Pin = nSW_UP_Pin | OLED_RST_Pin;
 8001a2e:	f44f 7388 	mov.w	r3, #272	; 0x110
 8001a32:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a34:	2301      	movs	r3, #1
 8001a36:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a40:	f107 0314 	add.w	r3, r7, #20
 8001a44:	4619      	mov	r1, r3
 8001a46:	4810      	ldr	r0, [pc, #64]	; (8001a88 <MX_GPIO_Init+0x18c>)
 8001a48:	f001 feca 	bl	80037e0 <HAL_GPIO_Init>

	/*Configure GPIO pin : nSW_OE_Pin */
	GPIO_InitStruct.Pin = nSW_OE_Pin;
 8001a4c:	2320      	movs	r3, #32
 8001a4e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a50:	2300      	movs	r3, #0
 8001a52:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a54:	2300      	movs	r3, #0
 8001a56:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(nSW_OE_GPIO_Port, &GPIO_InitStruct);
 8001a58:	f107 0314 	add.w	r3, r7, #20
 8001a5c:	4619      	mov	r1, r3
 8001a5e:	480a      	ldr	r0, [pc, #40]	; (8001a88 <MX_GPIO_Init+0x18c>)
 8001a60:	f001 febe 	bl	80037e0 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 0);
 8001a64:	2200      	movs	r2, #0
 8001a66:	2101      	movs	r1, #1
 8001a68:	2028      	movs	r0, #40	; 0x28
 8001a6a:	f001 fe82 	bl	8003772 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001a6e:	2028      	movs	r0, #40	; 0x28
 8001a70:	f001 fe9b 	bl	80037aa <HAL_NVIC_EnableIRQ>

}
 8001a74:	bf00      	nop
 8001a76:	3728      	adds	r7, #40	; 0x28
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}
 8001a7c:	40023800 	.word	0x40023800
 8001a80:	40020800 	.word	0x40020800
 8001a84:	40020000 	.word	0x40020000
 8001a88:	40020400 	.word	0x40020400
 8001a8c:	10210000 	.word	0x10210000
 8001a90:	40020c00 	.word	0x40020c00

08001a94 <initPSU>:

/* USER CODE BEGIN 4 */
void initPSU(void) {
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b082      	sub	sp, #8
 8001a98:	af00      	add	r7, sp, #0
	//init struct for PSU
	psuStats.vSet = V_DEFAULT;
 8001a9a:	4b1d      	ldr	r3, [pc, #116]	; (8001b10 <initPSU+0x7c>)
 8001a9c:	223f      	movs	r2, #63	; 0x3f
 8001a9e:	701a      	strb	r2, [r3, #0]
	psuStats.iSet = I_DEFAULT;
 8001aa0:	4b1b      	ldr	r3, [pc, #108]	; (8001b10 <initPSU+0x7c>)
 8001aa2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001aa6:	605a      	str	r2, [r3, #4]
	psuStats.iLim = I_LIM_DEFAULT;
 8001aa8:	4b19      	ldr	r3, [pc, #100]	; (8001b10 <initPSU+0x7c>)
 8001aaa:	2200      	movs	r2, #0
 8001aac:	721a      	strb	r2, [r3, #8]
	psuStats.VI = VI_DEFAULT;
 8001aae:	4b18      	ldr	r3, [pc, #96]	; (8001b10 <initPSU+0x7c>)
 8001ab0:	2201      	movs	r2, #1
 8001ab2:	729a      	strb	r2, [r3, #10]
	psuStats.OE = OE_DEFAULT;
 8001ab4:	4b16      	ldr	r3, [pc, #88]	; (8001b10 <initPSU+0x7c>)
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	725a      	strb	r2, [r3, #9]

	//show current settings on LEDs
	setLeds(psuStats);
 8001aba:	4b15      	ldr	r3, [pc, #84]	; (8001b10 <initPSU+0x7c>)
 8001abc:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001ac0:	f7ff fd2e 	bl	8001520 <setLeds>

	//init and show logo on OLED
	ssd1306_Init();
 8001ac4:	f000 fc08 	bl	80022d8 <ssd1306_Init>
	ssd1306_Fill(SSD1306_BLACK);
 8001ac8:	2000      	movs	r0, #0
 8001aca:	f000 fc6f 	bl	80023ac <ssd1306_Fill>
	showStartup();
 8001ace:	f000 f829 	bl	8001b24 <showStartup>
	HAL_StatusTypeDef adcRet = HAL_ADC_Start(&hadc1);
 8001ad2:	4810      	ldr	r0, [pc, #64]	; (8001b14 <initPSU+0x80>)
 8001ad4:	f001 f9ea 	bl	8002eac <HAL_ADC_Start>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	71fb      	strb	r3, [r7, #7]
	if (adcRet != HAL_OK) {
 8001adc:	79fb      	ldrb	r3, [r7, #7]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d004      	beq.n	8001aec <initPSU+0x58>
		ssd1306_WriteErrorMsg(2, 12, "ADC start failed");
 8001ae2:	4a0d      	ldr	r2, [pc, #52]	; (8001b18 <initPSU+0x84>)
 8001ae4:	210c      	movs	r1, #12
 8001ae6:	2002      	movs	r0, #2
 8001ae8:	f000 fe70 	bl	80027cc <ssd1306_WriteErrorMsg>
	}

	//set pot value for Vout (half)
	MCP4018_WriteVal(psuStats.vSet);
 8001aec:	4b08      	ldr	r3, [pc, #32]	; (8001b10 <initPSU+0x7c>)
 8001aee:	781b      	ldrb	r3, [r3, #0]
 8001af0:	4618      	mov	r0, r3
 8001af2:	f000 fb93 	bl	800221c <MCP4018_WriteVal>

	//initialize screen update timer
	HAL_TIM_Base_Start(&htim10);
 8001af6:	4809      	ldr	r0, [pc, #36]	; (8001b1c <initPSU+0x88>)
 8001af8:	f003 fbcf 	bl	800529a <HAL_TIM_Base_Start>
	timerVal = __HAL_TIM_GET_COUNTER(&htim10);
 8001afc:	4b07      	ldr	r3, [pc, #28]	; (8001b1c <initPSU+0x88>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b02:	b29a      	uxth	r2, r3
 8001b04:	4b06      	ldr	r3, [pc, #24]	; (8001b20 <initPSU+0x8c>)
 8001b06:	801a      	strh	r2, [r3, #0]
}
 8001b08:	bf00      	nop
 8001b0a:	3708      	adds	r7, #8
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bd80      	pop	{r7, pc}
 8001b10:	200006b4 	.word	0x200006b4
 8001b14:	200006c0 	.word	0x200006c0
 8001b18:	08008bf8 	.word	0x08008bf8
 8001b1c:	20000674 	.word	0x20000674
 8001b20:	2000020a 	.word	0x2000020a

08001b24 <showStartup>:

void showStartup(void) {
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b082      	sub	sp, #8
 8001b28:	af02      	add	r7, sp, #8
	//show logo
	ssd1306_DrawBitMap(0, 0, BOOTSCREEN, 128, 32, SSD1306_WHITE);
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	9301      	str	r3, [sp, #4]
 8001b2e:	2320      	movs	r3, #32
 8001b30:	9300      	str	r3, [sp, #0]
 8001b32:	2380      	movs	r3, #128	; 0x80
 8001b34:	4a05      	ldr	r2, [pc, #20]	; (8001b4c <showStartup+0x28>)
 8001b36:	2100      	movs	r1, #0
 8001b38:	2000      	movs	r0, #0
 8001b3a:	f000 fddb 	bl	80026f4 <ssd1306_DrawBitMap>
	HAL_Delay(2000);
 8001b3e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001b42:	f001 f94b 	bl	8002ddc <HAL_Delay>
}
 8001b46:	bf00      	nop
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bd80      	pop	{r7, pc}
 8001b4c:	08008ce4 	.word	0x08008ce4

08001b50 <displayVoltageCurrent>:

void displayVoltageCurrent(double Vin, double V, double I) {
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b08a      	sub	sp, #40	; 0x28
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	ed87 0b04 	vstr	d0, [r7, #16]
 8001b5a:	ed87 1b02 	vstr	d1, [r7, #8]
 8001b5e:	ed87 2b00 	vstr	d2, [r7]
	//clear screen
	ssd1306_Fill(SSD1306_BLACK);
 8001b62:	2000      	movs	r0, #0
 8001b64:	f000 fc22 	bl	80023ac <ssd1306_Fill>

	char buff[10] = { };
 8001b68:	2300      	movs	r3, #0
 8001b6a:	61fb      	str	r3, [r7, #28]
 8001b6c:	f107 0320 	add.w	r3, r7, #32
 8001b70:	2200      	movs	r2, #0
 8001b72:	601a      	str	r2, [r3, #0]
 8001b74:	809a      	strh	r2, [r3, #4]

	//Display voltage in
	ssd1306_SetCursor(INFO_X, VIN_Y);
 8001b76:	2100      	movs	r1, #0
 8001b78:	2002      	movs	r0, #2
 8001b7a:	f000 fd71 	bl	8002660 <ssd1306_SetCursor>
	ssd1306_WriteString("Vin = ", INFO_TEXT_SIZE, SSD1306_WHITE);
 8001b7e:	4aa7      	ldr	r2, [pc, #668]	; (8001e1c <displayVoltageCurrent+0x2cc>)
 8001b80:	2301      	movs	r3, #1
 8001b82:	ca06      	ldmia	r2, {r1, r2}
 8001b84:	48a6      	ldr	r0, [pc, #664]	; (8001e20 <displayVoltageCurrent+0x2d0>)
 8001b86:	f000 fd45 	bl	8002614 <ssd1306_WriteString>
	if (Vin > 1000) {
 8001b8a:	f04f 0200 	mov.w	r2, #0
 8001b8e:	4ba5      	ldr	r3, [pc, #660]	; (8001e24 <displayVoltageCurrent+0x2d4>)
 8001b90:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001b94:	f7fe ffc8 	bl	8000b28 <__aeabi_dcmpgt>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d01b      	beq.n	8001bd6 <displayVoltageCurrent+0x86>
		sprintf(buff, "%4.2f", Vin / 1000);
 8001b9e:	f04f 0200 	mov.w	r2, #0
 8001ba2:	4ba0      	ldr	r3, [pc, #640]	; (8001e24 <displayVoltageCurrent+0x2d4>)
 8001ba4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001ba8:	f7fe fe58 	bl	800085c <__aeabi_ddiv>
 8001bac:	4602      	mov	r2, r0
 8001bae:	460b      	mov	r3, r1
 8001bb0:	f107 001c 	add.w	r0, r7, #28
 8001bb4:	499c      	ldr	r1, [pc, #624]	; (8001e28 <displayVoltageCurrent+0x2d8>)
 8001bb6:	f004 fd8b 	bl	80066d0 <siprintf>
		ssd1306_WriteString(buff, INFO_TEXT_SIZE, SSD1306_WHITE);
 8001bba:	4a98      	ldr	r2, [pc, #608]	; (8001e1c <displayVoltageCurrent+0x2cc>)
 8001bbc:	f107 001c 	add.w	r0, r7, #28
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	ca06      	ldmia	r2, {r1, r2}
 8001bc4:	f000 fd26 	bl	8002614 <ssd1306_WriteString>
		ssd1306_WriteString("V", INFO_TEXT_SIZE, SSD1306_WHITE);
 8001bc8:	4a94      	ldr	r2, [pc, #592]	; (8001e1c <displayVoltageCurrent+0x2cc>)
 8001bca:	2301      	movs	r3, #1
 8001bcc:	ca06      	ldmia	r2, {r1, r2}
 8001bce:	4897      	ldr	r0, [pc, #604]	; (8001e2c <displayVoltageCurrent+0x2dc>)
 8001bd0:	f000 fd20 	bl	8002614 <ssd1306_WriteString>
 8001bd4:	e013      	b.n	8001bfe <displayVoltageCurrent+0xae>
	} else {
		sprintf(buff, "%4.2f", Vin);
 8001bd6:	f107 001c 	add.w	r0, r7, #28
 8001bda:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001bde:	4992      	ldr	r1, [pc, #584]	; (8001e28 <displayVoltageCurrent+0x2d8>)
 8001be0:	f004 fd76 	bl	80066d0 <siprintf>
		ssd1306_WriteString(buff, INFO_TEXT_SIZE, SSD1306_WHITE);
 8001be4:	4a8d      	ldr	r2, [pc, #564]	; (8001e1c <displayVoltageCurrent+0x2cc>)
 8001be6:	f107 001c 	add.w	r0, r7, #28
 8001bea:	2301      	movs	r3, #1
 8001bec:	ca06      	ldmia	r2, {r1, r2}
 8001bee:	f000 fd11 	bl	8002614 <ssd1306_WriteString>
		ssd1306_WriteString("mV", INFO_TEXT_SIZE, SSD1306_WHITE);
 8001bf2:	4a8a      	ldr	r2, [pc, #552]	; (8001e1c <displayVoltageCurrent+0x2cc>)
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	ca06      	ldmia	r2, {r1, r2}
 8001bf8:	488d      	ldr	r0, [pc, #564]	; (8001e30 <displayVoltageCurrent+0x2e0>)
 8001bfa:	f000 fd0b 	bl	8002614 <ssd1306_WriteString>
	}

	//display whether PSU output is enabled
	ssd1306_SetCursor(ON_OFF_X, VIN_Y);
 8001bfe:	2100      	movs	r1, #0
 8001c00:	2069      	movs	r0, #105	; 0x69
 8001c02:	f000 fd2d 	bl	8002660 <ssd1306_SetCursor>
	if (psuStats.OE == OE_ENABLED)
 8001c06:	4b8b      	ldr	r3, [pc, #556]	; (8001e34 <displayVoltageCurrent+0x2e4>)
 8001c08:	7a5b      	ldrb	r3, [r3, #9]
 8001c0a:	2b01      	cmp	r3, #1
 8001c0c:	d106      	bne.n	8001c1c <displayVoltageCurrent+0xcc>
		ssd1306_WriteString("ON", INFO_TEXT_SIZE, SSD1306_WHITE);
 8001c0e:	4a83      	ldr	r2, [pc, #524]	; (8001e1c <displayVoltageCurrent+0x2cc>)
 8001c10:	2301      	movs	r3, #1
 8001c12:	ca06      	ldmia	r2, {r1, r2}
 8001c14:	4888      	ldr	r0, [pc, #544]	; (8001e38 <displayVoltageCurrent+0x2e8>)
 8001c16:	f000 fcfd 	bl	8002614 <ssd1306_WriteString>
 8001c1a:	e005      	b.n	8001c28 <displayVoltageCurrent+0xd8>
	else
		ssd1306_WriteString("OFF", INFO_TEXT_SIZE, SSD1306_WHITE);
 8001c1c:	4a7f      	ldr	r2, [pc, #508]	; (8001e1c <displayVoltageCurrent+0x2cc>)
 8001c1e:	2301      	movs	r3, #1
 8001c20:	ca06      	ldmia	r2, {r1, r2}
 8001c22:	4886      	ldr	r0, [pc, #536]	; (8001e3c <displayVoltageCurrent+0x2ec>)
 8001c24:	f000 fcf6 	bl	8002614 <ssd1306_WriteString>

	//display set voltage
	ssd1306_SetCursor(INFO_X, VSET_Y);
 8001c28:	210c      	movs	r1, #12
 8001c2a:	2002      	movs	r0, #2
 8001c2c:	f000 fd18 	bl	8002660 <ssd1306_SetCursor>
	ssd1306_WriteString("Vset = ", INFO_TEXT_SIZE, SSD1306_WHITE);
 8001c30:	4a7a      	ldr	r2, [pc, #488]	; (8001e1c <displayVoltageCurrent+0x2cc>)
 8001c32:	2301      	movs	r3, #1
 8001c34:	ca06      	ldmia	r2, {r1, r2}
 8001c36:	4882      	ldr	r0, [pc, #520]	; (8001e40 <displayVoltageCurrent+0x2f0>)
 8001c38:	f000 fcec 	bl	8002614 <ssd1306_WriteString>
	if (vSetCalc() >= 1000) {
 8001c3c:	f000 f9fc 	bl	8002038 <vSetCalc>
 8001c40:	4603      	mov	r3, r0
 8001c42:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001c46:	d32a      	bcc.n	8001c9e <displayVoltageCurrent+0x14e>
		sprintf(buff, "%4.2f", (double) vSetCalc() / 1000.0);
 8001c48:	f000 f9f6 	bl	8002038 <vSetCalc>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	4618      	mov	r0, r3
 8001c50:	f7fe fc60 	bl	8000514 <__aeabi_ui2d>
 8001c54:	f04f 0200 	mov.w	r2, #0
 8001c58:	4b72      	ldr	r3, [pc, #456]	; (8001e24 <displayVoltageCurrent+0x2d4>)
 8001c5a:	f7fe fdff 	bl	800085c <__aeabi_ddiv>
 8001c5e:	4602      	mov	r2, r0
 8001c60:	460b      	mov	r3, r1
 8001c62:	f107 001c 	add.w	r0, r7, #28
 8001c66:	4970      	ldr	r1, [pc, #448]	; (8001e28 <displayVoltageCurrent+0x2d8>)
 8001c68:	f004 fd32 	bl	80066d0 <siprintf>
		ssd1306_WriteString(buff, INFO_TEXT_SIZE, SSD1306_WHITE);
 8001c6c:	4a6b      	ldr	r2, [pc, #428]	; (8001e1c <displayVoltageCurrent+0x2cc>)
 8001c6e:	f107 001c 	add.w	r0, r7, #28
 8001c72:	2301      	movs	r3, #1
 8001c74:	ca06      	ldmia	r2, {r1, r2}
 8001c76:	f000 fccd 	bl	8002614 <ssd1306_WriteString>
		if (psuStats.VI == VI_V_SEL)
 8001c7a:	4b6e      	ldr	r3, [pc, #440]	; (8001e34 <displayVoltageCurrent+0x2e4>)
 8001c7c:	7a9b      	ldrb	r3, [r3, #10]
 8001c7e:	2b01      	cmp	r3, #1
 8001c80:	d106      	bne.n	8001c90 <displayVoltageCurrent+0x140>
			ssd1306_WriteString("V <<", INFO_TEXT_SIZE, SSD1306_WHITE);
 8001c82:	4a66      	ldr	r2, [pc, #408]	; (8001e1c <displayVoltageCurrent+0x2cc>)
 8001c84:	2301      	movs	r3, #1
 8001c86:	ca06      	ldmia	r2, {r1, r2}
 8001c88:	486e      	ldr	r0, [pc, #440]	; (8001e44 <displayVoltageCurrent+0x2f4>)
 8001c8a:	f000 fcc3 	bl	8002614 <ssd1306_WriteString>
 8001c8e:	e02a      	b.n	8001ce6 <displayVoltageCurrent+0x196>
		else
			ssd1306_WriteString("V", INFO_TEXT_SIZE, SSD1306_WHITE);
 8001c90:	4a62      	ldr	r2, [pc, #392]	; (8001e1c <displayVoltageCurrent+0x2cc>)
 8001c92:	2301      	movs	r3, #1
 8001c94:	ca06      	ldmia	r2, {r1, r2}
 8001c96:	4865      	ldr	r0, [pc, #404]	; (8001e2c <displayVoltageCurrent+0x2dc>)
 8001c98:	f000 fcbc 	bl	8002614 <ssd1306_WriteString>
 8001c9c:	e023      	b.n	8001ce6 <displayVoltageCurrent+0x196>
	} else {
		sprintf(buff, "%4.2f", (double) psuStats.vSet);
 8001c9e:	4b65      	ldr	r3, [pc, #404]	; (8001e34 <displayVoltageCurrent+0x2e4>)
 8001ca0:	781b      	ldrb	r3, [r3, #0]
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f7fe fc36 	bl	8000514 <__aeabi_ui2d>
 8001ca8:	4602      	mov	r2, r0
 8001caa:	460b      	mov	r3, r1
 8001cac:	f107 001c 	add.w	r0, r7, #28
 8001cb0:	495d      	ldr	r1, [pc, #372]	; (8001e28 <displayVoltageCurrent+0x2d8>)
 8001cb2:	f004 fd0d 	bl	80066d0 <siprintf>
		ssd1306_WriteString(buff, INFO_TEXT_SIZE, SSD1306_WHITE);
 8001cb6:	4a59      	ldr	r2, [pc, #356]	; (8001e1c <displayVoltageCurrent+0x2cc>)
 8001cb8:	f107 001c 	add.w	r0, r7, #28
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	ca06      	ldmia	r2, {r1, r2}
 8001cc0:	f000 fca8 	bl	8002614 <ssd1306_WriteString>
		if (psuStats.VI == VI_V_SEL)
 8001cc4:	4b5b      	ldr	r3, [pc, #364]	; (8001e34 <displayVoltageCurrent+0x2e4>)
 8001cc6:	7a9b      	ldrb	r3, [r3, #10]
 8001cc8:	2b01      	cmp	r3, #1
 8001cca:	d106      	bne.n	8001cda <displayVoltageCurrent+0x18a>
			ssd1306_WriteString("mV <<", INFO_TEXT_SIZE, SSD1306_WHITE);
 8001ccc:	4a53      	ldr	r2, [pc, #332]	; (8001e1c <displayVoltageCurrent+0x2cc>)
 8001cce:	2301      	movs	r3, #1
 8001cd0:	ca06      	ldmia	r2, {r1, r2}
 8001cd2:	485d      	ldr	r0, [pc, #372]	; (8001e48 <displayVoltageCurrent+0x2f8>)
 8001cd4:	f000 fc9e 	bl	8002614 <ssd1306_WriteString>
 8001cd8:	e005      	b.n	8001ce6 <displayVoltageCurrent+0x196>
		else
			ssd1306_WriteString("mV", INFO_TEXT_SIZE, SSD1306_WHITE);
 8001cda:	4a50      	ldr	r2, [pc, #320]	; (8001e1c <displayVoltageCurrent+0x2cc>)
 8001cdc:	2301      	movs	r3, #1
 8001cde:	ca06      	ldmia	r2, {r1, r2}
 8001ce0:	4853      	ldr	r0, [pc, #332]	; (8001e30 <displayVoltageCurrent+0x2e0>)
 8001ce2:	f000 fc97 	bl	8002614 <ssd1306_WriteString>
	}

	//display output voltage
	ssd1306_SetCursor(INFO_X, VOUT_Y);
 8001ce6:	2118      	movs	r1, #24
 8001ce8:	2002      	movs	r0, #2
 8001cea:	f000 fcb9 	bl	8002660 <ssd1306_SetCursor>
	ssd1306_WriteString("Vout = ", INFO_TEXT_SIZE, SSD1306_WHITE);
 8001cee:	4a4b      	ldr	r2, [pc, #300]	; (8001e1c <displayVoltageCurrent+0x2cc>)
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	ca06      	ldmia	r2, {r1, r2}
 8001cf4:	4855      	ldr	r0, [pc, #340]	; (8001e4c <displayVoltageCurrent+0x2fc>)
 8001cf6:	f000 fc8d 	bl	8002614 <ssd1306_WriteString>
	if (V >= 1000) {
 8001cfa:	f04f 0200 	mov.w	r2, #0
 8001cfe:	4b49      	ldr	r3, [pc, #292]	; (8001e24 <displayVoltageCurrent+0x2d4>)
 8001d00:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001d04:	f7fe ff06 	bl	8000b14 <__aeabi_dcmpge>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d01b      	beq.n	8001d46 <displayVoltageCurrent+0x1f6>
		sprintf(buff, "%4.2f", V / 1000.0);
 8001d0e:	f04f 0200 	mov.w	r2, #0
 8001d12:	4b44      	ldr	r3, [pc, #272]	; (8001e24 <displayVoltageCurrent+0x2d4>)
 8001d14:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001d18:	f7fe fda0 	bl	800085c <__aeabi_ddiv>
 8001d1c:	4602      	mov	r2, r0
 8001d1e:	460b      	mov	r3, r1
 8001d20:	f107 001c 	add.w	r0, r7, #28
 8001d24:	4940      	ldr	r1, [pc, #256]	; (8001e28 <displayVoltageCurrent+0x2d8>)
 8001d26:	f004 fcd3 	bl	80066d0 <siprintf>
		ssd1306_WriteString(buff, INFO_TEXT_SIZE, SSD1306_WHITE);
 8001d2a:	4a3c      	ldr	r2, [pc, #240]	; (8001e1c <displayVoltageCurrent+0x2cc>)
 8001d2c:	f107 001c 	add.w	r0, r7, #28
 8001d30:	2301      	movs	r3, #1
 8001d32:	ca06      	ldmia	r2, {r1, r2}
 8001d34:	f000 fc6e 	bl	8002614 <ssd1306_WriteString>
		ssd1306_WriteString("V", INFO_TEXT_SIZE, SSD1306_WHITE);
 8001d38:	4a38      	ldr	r2, [pc, #224]	; (8001e1c <displayVoltageCurrent+0x2cc>)
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	ca06      	ldmia	r2, {r1, r2}
 8001d3e:	483b      	ldr	r0, [pc, #236]	; (8001e2c <displayVoltageCurrent+0x2dc>)
 8001d40:	f000 fc68 	bl	8002614 <ssd1306_WriteString>
 8001d44:	e013      	b.n	8001d6e <displayVoltageCurrent+0x21e>
	} else {
		sprintf(buff, "%4.2f", V);
 8001d46:	f107 001c 	add.w	r0, r7, #28
 8001d4a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001d4e:	4936      	ldr	r1, [pc, #216]	; (8001e28 <displayVoltageCurrent+0x2d8>)
 8001d50:	f004 fcbe 	bl	80066d0 <siprintf>
		ssd1306_WriteString(buff, INFO_TEXT_SIZE, SSD1306_WHITE);
 8001d54:	4a31      	ldr	r2, [pc, #196]	; (8001e1c <displayVoltageCurrent+0x2cc>)
 8001d56:	f107 001c 	add.w	r0, r7, #28
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	ca06      	ldmia	r2, {r1, r2}
 8001d5e:	f000 fc59 	bl	8002614 <ssd1306_WriteString>
		ssd1306_WriteString("mV", INFO_TEXT_SIZE, SSD1306_WHITE);
 8001d62:	4a2e      	ldr	r2, [pc, #184]	; (8001e1c <displayVoltageCurrent+0x2cc>)
 8001d64:	2301      	movs	r3, #1
 8001d66:	ca06      	ldmia	r2, {r1, r2}
 8001d68:	4831      	ldr	r0, [pc, #196]	; (8001e30 <displayVoltageCurrent+0x2e0>)
 8001d6a:	f000 fc53 	bl	8002614 <ssd1306_WriteString>
	}

	//display set current
	ssd1306_SetCursor(INFO_X, ISET_Y);
 8001d6e:	2124      	movs	r1, #36	; 0x24
 8001d70:	2002      	movs	r0, #2
 8001d72:	f000 fc75 	bl	8002660 <ssd1306_SetCursor>
	ssd1306_WriteString("Iset = ", INFO_TEXT_SIZE, SSD1306_WHITE);
 8001d76:	4a29      	ldr	r2, [pc, #164]	; (8001e1c <displayVoltageCurrent+0x2cc>)
 8001d78:	2301      	movs	r3, #1
 8001d7a:	ca06      	ldmia	r2, {r1, r2}
 8001d7c:	4834      	ldr	r0, [pc, #208]	; (8001e50 <displayVoltageCurrent+0x300>)
 8001d7e:	f000 fc49 	bl	8002614 <ssd1306_WriteString>
	if (psuStats.iSet >= 1000) {
 8001d82:	4b2c      	ldr	r3, [pc, #176]	; (8001e34 <displayVoltageCurrent+0x2e4>)
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001d8a:	d329      	bcc.n	8001de0 <displayVoltageCurrent+0x290>
		sprintf(buff, "%4.2f", (double) psuStats.iSet / 1000.0);
 8001d8c:	4b29      	ldr	r3, [pc, #164]	; (8001e34 <displayVoltageCurrent+0x2e4>)
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	4618      	mov	r0, r3
 8001d92:	f7fe fbbf 	bl	8000514 <__aeabi_ui2d>
 8001d96:	f04f 0200 	mov.w	r2, #0
 8001d9a:	4b22      	ldr	r3, [pc, #136]	; (8001e24 <displayVoltageCurrent+0x2d4>)
 8001d9c:	f7fe fd5e 	bl	800085c <__aeabi_ddiv>
 8001da0:	4602      	mov	r2, r0
 8001da2:	460b      	mov	r3, r1
 8001da4:	f107 001c 	add.w	r0, r7, #28
 8001da8:	491f      	ldr	r1, [pc, #124]	; (8001e28 <displayVoltageCurrent+0x2d8>)
 8001daa:	f004 fc91 	bl	80066d0 <siprintf>
		ssd1306_WriteString(buff, INFO_TEXT_SIZE, SSD1306_WHITE);
 8001dae:	4a1b      	ldr	r2, [pc, #108]	; (8001e1c <displayVoltageCurrent+0x2cc>)
 8001db0:	f107 001c 	add.w	r0, r7, #28
 8001db4:	2301      	movs	r3, #1
 8001db6:	ca06      	ldmia	r2, {r1, r2}
 8001db8:	f000 fc2c 	bl	8002614 <ssd1306_WriteString>
		if (psuStats.VI == VI_I_SEL)
 8001dbc:	4b1d      	ldr	r3, [pc, #116]	; (8001e34 <displayVoltageCurrent+0x2e4>)
 8001dbe:	7a9b      	ldrb	r3, [r3, #10]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d106      	bne.n	8001dd2 <displayVoltageCurrent+0x282>
			ssd1306_WriteString("A <<", INFO_TEXT_SIZE, SSD1306_WHITE);
 8001dc4:	4a15      	ldr	r2, [pc, #84]	; (8001e1c <displayVoltageCurrent+0x2cc>)
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	ca06      	ldmia	r2, {r1, r2}
 8001dca:	4822      	ldr	r0, [pc, #136]	; (8001e54 <displayVoltageCurrent+0x304>)
 8001dcc:	f000 fc22 	bl	8002614 <ssd1306_WriteString>
 8001dd0:	e04c      	b.n	8001e6c <displayVoltageCurrent+0x31c>
		else
			ssd1306_WriteString("A", INFO_TEXT_SIZE, SSD1306_WHITE);
 8001dd2:	4a12      	ldr	r2, [pc, #72]	; (8001e1c <displayVoltageCurrent+0x2cc>)
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	ca06      	ldmia	r2, {r1, r2}
 8001dd8:	481f      	ldr	r0, [pc, #124]	; (8001e58 <displayVoltageCurrent+0x308>)
 8001dda:	f000 fc1b 	bl	8002614 <ssd1306_WriteString>
 8001dde:	e045      	b.n	8001e6c <displayVoltageCurrent+0x31c>
	} else {
		sprintf(buff, "%4.2f", (double) psuStats.iSet);
 8001de0:	4b14      	ldr	r3, [pc, #80]	; (8001e34 <displayVoltageCurrent+0x2e4>)
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	4618      	mov	r0, r3
 8001de6:	f7fe fb95 	bl	8000514 <__aeabi_ui2d>
 8001dea:	4602      	mov	r2, r0
 8001dec:	460b      	mov	r3, r1
 8001dee:	f107 001c 	add.w	r0, r7, #28
 8001df2:	490d      	ldr	r1, [pc, #52]	; (8001e28 <displayVoltageCurrent+0x2d8>)
 8001df4:	f004 fc6c 	bl	80066d0 <siprintf>
		ssd1306_WriteString(buff, INFO_TEXT_SIZE, SSD1306_WHITE);
 8001df8:	4a08      	ldr	r2, [pc, #32]	; (8001e1c <displayVoltageCurrent+0x2cc>)
 8001dfa:	f107 001c 	add.w	r0, r7, #28
 8001dfe:	2301      	movs	r3, #1
 8001e00:	ca06      	ldmia	r2, {r1, r2}
 8001e02:	f000 fc07 	bl	8002614 <ssd1306_WriteString>
		if (psuStats.VI == VI_I_SEL)
 8001e06:	4b0b      	ldr	r3, [pc, #44]	; (8001e34 <displayVoltageCurrent+0x2e4>)
 8001e08:	7a9b      	ldrb	r3, [r3, #10]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d128      	bne.n	8001e60 <displayVoltageCurrent+0x310>
			ssd1306_WriteString("mA <<", INFO_TEXT_SIZE, SSD1306_WHITE);
 8001e0e:	4a03      	ldr	r2, [pc, #12]	; (8001e1c <displayVoltageCurrent+0x2cc>)
 8001e10:	2301      	movs	r3, #1
 8001e12:	ca06      	ldmia	r2, {r1, r2}
 8001e14:	4811      	ldr	r0, [pc, #68]	; (8001e5c <displayVoltageCurrent+0x30c>)
 8001e16:	f000 fbfd 	bl	8002614 <ssd1306_WriteString>
 8001e1a:	e027      	b.n	8001e6c <displayVoltageCurrent+0x31c>
 8001e1c:	20000000 	.word	0x20000000
 8001e20:	08008c0c 	.word	0x08008c0c
 8001e24:	408f4000 	.word	0x408f4000
 8001e28:	08008c14 	.word	0x08008c14
 8001e2c:	08008c1c 	.word	0x08008c1c
 8001e30:	08008c20 	.word	0x08008c20
 8001e34:	200006b4 	.word	0x200006b4
 8001e38:	08008c24 	.word	0x08008c24
 8001e3c:	08008c28 	.word	0x08008c28
 8001e40:	08008c2c 	.word	0x08008c2c
 8001e44:	08008c34 	.word	0x08008c34
 8001e48:	08008c3c 	.word	0x08008c3c
 8001e4c:	08008c44 	.word	0x08008c44
 8001e50:	08008c4c 	.word	0x08008c4c
 8001e54:	08008c54 	.word	0x08008c54
 8001e58:	08008c5c 	.word	0x08008c5c
 8001e5c:	08008c60 	.word	0x08008c60
		else
			ssd1306_WriteString("mA", INFO_TEXT_SIZE, SSD1306_WHITE);
 8001e60:	4a27      	ldr	r2, [pc, #156]	; (8001f00 <displayVoltageCurrent+0x3b0>)
 8001e62:	2301      	movs	r3, #1
 8001e64:	ca06      	ldmia	r2, {r1, r2}
 8001e66:	4827      	ldr	r0, [pc, #156]	; (8001f04 <displayVoltageCurrent+0x3b4>)
 8001e68:	f000 fbd4 	bl	8002614 <ssd1306_WriteString>
	}

	//display output current
	ssd1306_SetCursor(INFO_X, IOUT_Y);
 8001e6c:	2130      	movs	r1, #48	; 0x30
 8001e6e:	2002      	movs	r0, #2
 8001e70:	f000 fbf6 	bl	8002660 <ssd1306_SetCursor>
	ssd1306_WriteString("Iout = ", INFO_TEXT_SIZE, SSD1306_WHITE);
 8001e74:	4a22      	ldr	r2, [pc, #136]	; (8001f00 <displayVoltageCurrent+0x3b0>)
 8001e76:	2301      	movs	r3, #1
 8001e78:	ca06      	ldmia	r2, {r1, r2}
 8001e7a:	4823      	ldr	r0, [pc, #140]	; (8001f08 <displayVoltageCurrent+0x3b8>)
 8001e7c:	f000 fbca 	bl	8002614 <ssd1306_WriteString>
	if (I >= 1000) {
 8001e80:	f04f 0200 	mov.w	r2, #0
 8001e84:	4b21      	ldr	r3, [pc, #132]	; (8001f0c <displayVoltageCurrent+0x3bc>)
 8001e86:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001e8a:	f7fe fe43 	bl	8000b14 <__aeabi_dcmpge>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d01b      	beq.n	8001ecc <displayVoltageCurrent+0x37c>
		sprintf(buff, "%4.2f", I / 1000.0);
 8001e94:	f04f 0200 	mov.w	r2, #0
 8001e98:	4b1c      	ldr	r3, [pc, #112]	; (8001f0c <displayVoltageCurrent+0x3bc>)
 8001e9a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001e9e:	f7fe fcdd 	bl	800085c <__aeabi_ddiv>
 8001ea2:	4602      	mov	r2, r0
 8001ea4:	460b      	mov	r3, r1
 8001ea6:	f107 001c 	add.w	r0, r7, #28
 8001eaa:	4919      	ldr	r1, [pc, #100]	; (8001f10 <displayVoltageCurrent+0x3c0>)
 8001eac:	f004 fc10 	bl	80066d0 <siprintf>
		ssd1306_WriteString(buff, INFO_TEXT_SIZE, SSD1306_WHITE);
 8001eb0:	4a13      	ldr	r2, [pc, #76]	; (8001f00 <displayVoltageCurrent+0x3b0>)
 8001eb2:	f107 001c 	add.w	r0, r7, #28
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	ca06      	ldmia	r2, {r1, r2}
 8001eba:	f000 fbab 	bl	8002614 <ssd1306_WriteString>
		ssd1306_WriteString("A", INFO_TEXT_SIZE, SSD1306_WHITE);
 8001ebe:	4a10      	ldr	r2, [pc, #64]	; (8001f00 <displayVoltageCurrent+0x3b0>)
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	ca06      	ldmia	r2, {r1, r2}
 8001ec4:	4813      	ldr	r0, [pc, #76]	; (8001f14 <displayVoltageCurrent+0x3c4>)
 8001ec6:	f000 fba5 	bl	8002614 <ssd1306_WriteString>
 8001eca:	e013      	b.n	8001ef4 <displayVoltageCurrent+0x3a4>
	} else {
		sprintf(buff, "%4.2f", I);
 8001ecc:	f107 001c 	add.w	r0, r7, #28
 8001ed0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001ed4:	490e      	ldr	r1, [pc, #56]	; (8001f10 <displayVoltageCurrent+0x3c0>)
 8001ed6:	f004 fbfb 	bl	80066d0 <siprintf>
		ssd1306_WriteString(buff, INFO_TEXT_SIZE, SSD1306_WHITE);
 8001eda:	4a09      	ldr	r2, [pc, #36]	; (8001f00 <displayVoltageCurrent+0x3b0>)
 8001edc:	f107 001c 	add.w	r0, r7, #28
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	ca06      	ldmia	r2, {r1, r2}
 8001ee4:	f000 fb96 	bl	8002614 <ssd1306_WriteString>
		ssd1306_WriteString("mA", INFO_TEXT_SIZE, SSD1306_WHITE);
 8001ee8:	4a05      	ldr	r2, [pc, #20]	; (8001f00 <displayVoltageCurrent+0x3b0>)
 8001eea:	2301      	movs	r3, #1
 8001eec:	ca06      	ldmia	r2, {r1, r2}
 8001eee:	4805      	ldr	r0, [pc, #20]	; (8001f04 <displayVoltageCurrent+0x3b4>)
 8001ef0:	f000 fb90 	bl	8002614 <ssd1306_WriteString>
	}

	ssd1306_UpdateScreen();
 8001ef4:	f000 fa7e 	bl	80023f4 <ssd1306_UpdateScreen>
}
 8001ef8:	bf00      	nop
 8001efa:	3728      	adds	r7, #40	; 0x28
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bd80      	pop	{r7, pc}
 8001f00:	20000000 	.word	0x20000000
 8001f04:	08008c68 	.word	0x08008c68
 8001f08:	08008c6c 	.word	0x08008c6c
 8001f0c:	408f4000 	.word	0x408f4000
 8001f10:	08008c14 	.word	0x08008c14
 8001f14:	08008c5c 	.word	0x08008c5c

08001f18 <enableOutput>:

void enableOutput(void) {
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(REG_EN_GPIO_Port, REG_EN_Pin, GPIO_PIN_RESET);
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	2102      	movs	r1, #2
 8001f20:	4802      	ldr	r0, [pc, #8]	; (8001f2c <enableOutput+0x14>)
 8001f22:	f001 fdf9 	bl	8003b18 <HAL_GPIO_WritePin>
}
 8001f26:	bf00      	nop
 8001f28:	bd80      	pop	{r7, pc}
 8001f2a:	bf00      	nop
 8001f2c:	40020800 	.word	0x40020800

08001f30 <disableOutput>:

void disableOutput(void) {
 8001f30:	b580      	push	{r7, lr}
 8001f32:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(REG_EN_GPIO_Port, REG_EN_Pin, GPIO_PIN_SET);
 8001f34:	2201      	movs	r2, #1
 8001f36:	2102      	movs	r1, #2
 8001f38:	4802      	ldr	r0, [pc, #8]	; (8001f44 <disableOutput+0x14>)
 8001f3a:	f001 fded 	bl	8003b18 <HAL_GPIO_WritePin>
}
 8001f3e:	bf00      	nop
 8001f40:	bd80      	pop	{r7, pc}
 8001f42:	bf00      	nop
 8001f44:	40020800 	.word	0x40020800

08001f48 <buttonsHandler>:

void buttonsHandler(uint8_t buttons) {
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b082      	sub	sp, #8
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	4603      	mov	r3, r0
 8001f50:	71fb      	strb	r3, [r7, #7]
	if (buttons & VI_BTN) {
 8001f52:	79fb      	ldrb	r3, [r7, #7]
 8001f54:	f003 0304 	and.w	r3, r3, #4
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d013      	beq.n	8001f84 <buttonsHandler+0x3c>
		if (psuStats.VI == VI_V_SEL) {
 8001f5c:	4b35      	ldr	r3, [pc, #212]	; (8002034 <buttonsHandler+0xec>)
 8001f5e:	7a9b      	ldrb	r3, [r3, #10]
 8001f60:	2b01      	cmp	r3, #1
 8001f62:	d103      	bne.n	8001f6c <buttonsHandler+0x24>
			psuStats.VI = VI_I_SEL;
 8001f64:	4b33      	ldr	r3, [pc, #204]	; (8002034 <buttonsHandler+0xec>)
 8001f66:	2200      	movs	r2, #0
 8001f68:	729a      	strb	r2, [r3, #10]
 8001f6a:	e00b      	b.n	8001f84 <buttonsHandler+0x3c>
		} else if (psuStats.VI == VI_I_SEL) {
 8001f6c:	4b31      	ldr	r3, [pc, #196]	; (8002034 <buttonsHandler+0xec>)
 8001f6e:	7a9b      	ldrb	r3, [r3, #10]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d103      	bne.n	8001f7c <buttonsHandler+0x34>
			psuStats.VI = VI_V_SEL;
 8001f74:	4b2f      	ldr	r3, [pc, #188]	; (8002034 <buttonsHandler+0xec>)
 8001f76:	2201      	movs	r2, #1
 8001f78:	729a      	strb	r2, [r3, #10]
 8001f7a:	e003      	b.n	8001f84 <buttonsHandler+0x3c>
		} else { //something went wrong, reinit psu
			fatalErrorScreen();
 8001f7c:	f000 f876 	bl	800206c <fatalErrorScreen>
			initPSU();
 8001f80:	f7ff fd88 	bl	8001a94 <initPSU>
		}
	}

	if (buttons & UP_BTN) {
 8001f84:	79fb      	ldrb	r3, [r7, #7]
 8001f86:	f003 0301 	and.w	r3, r3, #1
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d015      	beq.n	8001fba <buttonsHandler+0x72>
		if (psuStats.VI & VI_V_SEL) {
 8001f8e:	4b29      	ldr	r3, [pc, #164]	; (8002034 <buttonsHandler+0xec>)
 8001f90:	7a9b      	ldrb	r3, [r3, #10]
 8001f92:	f003 0301 	and.w	r3, r3, #1
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d00b      	beq.n	8001fb2 <buttonsHandler+0x6a>
			psuStats.vSet++;
 8001f9a:	4b26      	ldr	r3, [pc, #152]	; (8002034 <buttonsHandler+0xec>)
 8001f9c:	781b      	ldrb	r3, [r3, #0]
 8001f9e:	3301      	adds	r3, #1
 8001fa0:	b2da      	uxtb	r2, r3
 8001fa2:	4b24      	ldr	r3, [pc, #144]	; (8002034 <buttonsHandler+0xec>)
 8001fa4:	701a      	strb	r2, [r3, #0]
			MCP4018_WriteVal(psuStats.vSet);
 8001fa6:	4b23      	ldr	r3, [pc, #140]	; (8002034 <buttonsHandler+0xec>)
 8001fa8:	781b      	ldrb	r3, [r3, #0]
 8001faa:	4618      	mov	r0, r3
 8001fac:	f000 f936 	bl	800221c <MCP4018_WriteVal>
 8001fb0:	e003      	b.n	8001fba <buttonsHandler+0x72>
		} else if (psuStats.VI & VI_I_SEL) {
			psuStats.iSet++;
		} else { //something went wrong, reinit psu
			fatalErrorScreen();
 8001fb2:	f000 f85b 	bl	800206c <fatalErrorScreen>
			initPSU();
 8001fb6:	f7ff fd6d 	bl	8001a94 <initPSU>
		}
	}

	if (buttons & DW_BTN) {
 8001fba:	79fb      	ldrb	r3, [r7, #7]
 8001fbc:	f003 0302 	and.w	r3, r3, #2
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d015      	beq.n	8001ff0 <buttonsHandler+0xa8>
		if (psuStats.VI & VI_V_SEL) {
 8001fc4:	4b1b      	ldr	r3, [pc, #108]	; (8002034 <buttonsHandler+0xec>)
 8001fc6:	7a9b      	ldrb	r3, [r3, #10]
 8001fc8:	f003 0301 	and.w	r3, r3, #1
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d00b      	beq.n	8001fe8 <buttonsHandler+0xa0>
			psuStats.vSet--;
 8001fd0:	4b18      	ldr	r3, [pc, #96]	; (8002034 <buttonsHandler+0xec>)
 8001fd2:	781b      	ldrb	r3, [r3, #0]
 8001fd4:	3b01      	subs	r3, #1
 8001fd6:	b2da      	uxtb	r2, r3
 8001fd8:	4b16      	ldr	r3, [pc, #88]	; (8002034 <buttonsHandler+0xec>)
 8001fda:	701a      	strb	r2, [r3, #0]
			MCP4018_WriteVal(psuStats.vSet);
 8001fdc:	4b15      	ldr	r3, [pc, #84]	; (8002034 <buttonsHandler+0xec>)
 8001fde:	781b      	ldrb	r3, [r3, #0]
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	f000 f91b 	bl	800221c <MCP4018_WriteVal>
 8001fe6:	e003      	b.n	8001ff0 <buttonsHandler+0xa8>
		} else if (psuStats.VI & VI_I_SEL) {
			psuStats.iSet--;
		} else { //something went wrong, reinit psu
			fatalErrorScreen();
 8001fe8:	f000 f840 	bl	800206c <fatalErrorScreen>
			initPSU();
 8001fec:	f7ff fd52 	bl	8001a94 <initPSU>
		}
	}

	if (buttons & OE_BTN) {
 8001ff0:	79fb      	ldrb	r3, [r7, #7]
 8001ff2:	f003 0308 	and.w	r3, r3, #8
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d017      	beq.n	800202a <buttonsHandler+0xe2>
		if (psuStats.OE == OE_ENABLED) {
 8001ffa:	4b0e      	ldr	r3, [pc, #56]	; (8002034 <buttonsHandler+0xec>)
 8001ffc:	7a5b      	ldrb	r3, [r3, #9]
 8001ffe:	2b01      	cmp	r3, #1
 8002000:	d105      	bne.n	800200e <buttonsHandler+0xc6>
			psuStats.OE = OE_DISABLED;
 8002002:	4b0c      	ldr	r3, [pc, #48]	; (8002034 <buttonsHandler+0xec>)
 8002004:	2200      	movs	r2, #0
 8002006:	725a      	strb	r2, [r3, #9]
			disableOutput();
 8002008:	f7ff ff92 	bl	8001f30 <disableOutput>
		} else { //something went wrong, reinit psu
			fatalErrorScreen();
			initPSU();
		}
	}
}
 800200c:	e00d      	b.n	800202a <buttonsHandler+0xe2>
		} else if (psuStats.OE == OE_DISABLED) {
 800200e:	4b09      	ldr	r3, [pc, #36]	; (8002034 <buttonsHandler+0xec>)
 8002010:	7a5b      	ldrb	r3, [r3, #9]
 8002012:	2b00      	cmp	r3, #0
 8002014:	d105      	bne.n	8002022 <buttonsHandler+0xda>
			psuStats.OE = OE_ENABLED;
 8002016:	4b07      	ldr	r3, [pc, #28]	; (8002034 <buttonsHandler+0xec>)
 8002018:	2201      	movs	r2, #1
 800201a:	725a      	strb	r2, [r3, #9]
			enableOutput();
 800201c:	f7ff ff7c 	bl	8001f18 <enableOutput>
}
 8002020:	e003      	b.n	800202a <buttonsHandler+0xe2>
			fatalErrorScreen();
 8002022:	f000 f823 	bl	800206c <fatalErrorScreen>
			initPSU();
 8002026:	f7ff fd35 	bl	8001a94 <initPSU>
}
 800202a:	bf00      	nop
 800202c:	3708      	adds	r7, #8
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}
 8002032:	bf00      	nop
 8002034:	200006b4 	.word	0x200006b4

08002038 <vSetCalc>:

uint32_t vSetCalc(void) {
 8002038:	b480      	push	{r7}
 800203a:	af00      	add	r7, sp, #0
	return (psuStats.vSet - 0) * (12000 - 0) / (0x7F - 0) + 0;
 800203c:	4b09      	ldr	r3, [pc, #36]	; (8002064 <vSetCalc+0x2c>)
 800203e:	781b      	ldrb	r3, [r3, #0]
 8002040:	461a      	mov	r2, r3
 8002042:	f642 63e0 	movw	r3, #12000	; 0x2ee0
 8002046:	fb03 f302 	mul.w	r3, r3, r2
 800204a:	4a07      	ldr	r2, [pc, #28]	; (8002068 <vSetCalc+0x30>)
 800204c:	fb82 1203 	smull	r1, r2, r2, r3
 8002050:	441a      	add	r2, r3
 8002052:	1192      	asrs	r2, r2, #6
 8002054:	17db      	asrs	r3, r3, #31
 8002056:	1ad3      	subs	r3, r2, r3
}
 8002058:	4618      	mov	r0, r3
 800205a:	46bd      	mov	sp, r7
 800205c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002060:	4770      	bx	lr
 8002062:	bf00      	nop
 8002064:	200006b4 	.word	0x200006b4
 8002068:	81020409 	.word	0x81020409

0800206c <fatalErrorScreen>:

void fatalErrorScreen(void) {
 800206c:	b580      	push	{r7, lr}
 800206e:	af00      	add	r7, sp, #0
	disableOutput();
 8002070:	f7ff ff5e 	bl	8001f30 <disableOutput>
	//clear screen
	ssd1306_Fill(SSD1306_BLACK);
 8002074:	2000      	movs	r0, #0
 8002076:	f000 f999 	bl	80023ac <ssd1306_Fill>

	ssd1306_SetCursor(2, 0);
 800207a:	2100      	movs	r1, #0
 800207c:	2002      	movs	r0, #2
 800207e:	f000 faef 	bl	8002660 <ssd1306_SetCursor>
	ssd1306_WriteString("FATAL", ERROR_TEXT_SIZE, SSD1306_WHITE);
 8002082:	4a4d      	ldr	r2, [pc, #308]	; (80021b8 <fatalErrorScreen+0x14c>)
 8002084:	2301      	movs	r3, #1
 8002086:	ca06      	ldmia	r2, {r1, r2}
 8002088:	484c      	ldr	r0, [pc, #304]	; (80021bc <fatalErrorScreen+0x150>)
 800208a:	f000 fac3 	bl	8002614 <ssd1306_WriteString>
	ssd1306_SetCursor(2, 20);
 800208e:	2114      	movs	r1, #20
 8002090:	2002      	movs	r0, #2
 8002092:	f000 fae5 	bl	8002660 <ssd1306_SetCursor>
	ssd1306_WriteString("ERROR!", ERROR_TEXT_SIZE, SSD1306_WHITE);
 8002096:	4a48      	ldr	r2, [pc, #288]	; (80021b8 <fatalErrorScreen+0x14c>)
 8002098:	2301      	movs	r3, #1
 800209a:	ca06      	ldmia	r2, {r1, r2}
 800209c:	4848      	ldr	r0, [pc, #288]	; (80021c0 <fatalErrorScreen+0x154>)
 800209e:	f000 fab9 	bl	8002614 <ssd1306_WriteString>

	//countdown 5 seconds
	ssd1306_SetCursor(2, 40);
 80020a2:	2128      	movs	r1, #40	; 0x28
 80020a4:	2002      	movs	r0, #2
 80020a6:	f000 fadb 	bl	8002660 <ssd1306_SetCursor>
	ssd1306_WriteString("Reinit(5)!", INFO_TEXT_SIZE, SSD1306_WHITE);
 80020aa:	4a46      	ldr	r2, [pc, #280]	; (80021c4 <fatalErrorScreen+0x158>)
 80020ac:	2301      	movs	r3, #1
 80020ae:	ca06      	ldmia	r2, {r1, r2}
 80020b0:	4845      	ldr	r0, [pc, #276]	; (80021c8 <fatalErrorScreen+0x15c>)
 80020b2:	f000 faaf 	bl	8002614 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 80020b6:	f000 f99d 	bl	80023f4 <ssd1306_UpdateScreen>
	HAL_Delay(1000);
 80020ba:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80020be:	f000 fe8d 	bl	8002ddc <HAL_Delay>

	ssd1306_SetCursor(2, 40);
 80020c2:	2128      	movs	r1, #40	; 0x28
 80020c4:	2002      	movs	r0, #2
 80020c6:	f000 facb 	bl	8002660 <ssd1306_SetCursor>
	ssd1306_WriteString("Reinit(4)!.", INFO_TEXT_SIZE, SSD1306_WHITE);
 80020ca:	4a3e      	ldr	r2, [pc, #248]	; (80021c4 <fatalErrorScreen+0x158>)
 80020cc:	2301      	movs	r3, #1
 80020ce:	ca06      	ldmia	r2, {r1, r2}
 80020d0:	483e      	ldr	r0, [pc, #248]	; (80021cc <fatalErrorScreen+0x160>)
 80020d2:	f000 fa9f 	bl	8002614 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 80020d6:	f000 f98d 	bl	80023f4 <ssd1306_UpdateScreen>
	HAL_Delay(1000);
 80020da:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80020de:	f000 fe7d 	bl	8002ddc <HAL_Delay>

	ssd1306_SetCursor(2, 40);
 80020e2:	2128      	movs	r1, #40	; 0x28
 80020e4:	2002      	movs	r0, #2
 80020e6:	f000 fabb 	bl	8002660 <ssd1306_SetCursor>
	ssd1306_WriteString("Reinit(3)!..", INFO_TEXT_SIZE, SSD1306_WHITE);
 80020ea:	4a36      	ldr	r2, [pc, #216]	; (80021c4 <fatalErrorScreen+0x158>)
 80020ec:	2301      	movs	r3, #1
 80020ee:	ca06      	ldmia	r2, {r1, r2}
 80020f0:	4837      	ldr	r0, [pc, #220]	; (80021d0 <fatalErrorScreen+0x164>)
 80020f2:	f000 fa8f 	bl	8002614 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 80020f6:	f000 f97d 	bl	80023f4 <ssd1306_UpdateScreen>
	HAL_Delay(1000);
 80020fa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80020fe:	f000 fe6d 	bl	8002ddc <HAL_Delay>

	ssd1306_SetCursor(2, 40);
 8002102:	2128      	movs	r1, #40	; 0x28
 8002104:	2002      	movs	r0, #2
 8002106:	f000 faab 	bl	8002660 <ssd1306_SetCursor>
	ssd1306_WriteString("Reinit(2)!...", INFO_TEXT_SIZE, SSD1306_WHITE);
 800210a:	4a2e      	ldr	r2, [pc, #184]	; (80021c4 <fatalErrorScreen+0x158>)
 800210c:	2301      	movs	r3, #1
 800210e:	ca06      	ldmia	r2, {r1, r2}
 8002110:	4830      	ldr	r0, [pc, #192]	; (80021d4 <fatalErrorScreen+0x168>)
 8002112:	f000 fa7f 	bl	8002614 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8002116:	f000 f96d 	bl	80023f4 <ssd1306_UpdateScreen>
	HAL_Delay(1000);
 800211a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800211e:	f000 fe5d 	bl	8002ddc <HAL_Delay>

	ssd1306_SetCursor(2, 40);
 8002122:	2128      	movs	r1, #40	; 0x28
 8002124:	2002      	movs	r0, #2
 8002126:	f000 fa9b 	bl	8002660 <ssd1306_SetCursor>
	ssd1306_WriteString("Reinit(1)!....", INFO_TEXT_SIZE, SSD1306_WHITE);
 800212a:	4a26      	ldr	r2, [pc, #152]	; (80021c4 <fatalErrorScreen+0x158>)
 800212c:	2301      	movs	r3, #1
 800212e:	ca06      	ldmia	r2, {r1, r2}
 8002130:	4829      	ldr	r0, [pc, #164]	; (80021d8 <fatalErrorScreen+0x16c>)
 8002132:	f000 fa6f 	bl	8002614 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8002136:	f000 f95d 	bl	80023f4 <ssd1306_UpdateScreen>
	HAL_Delay(1000);
 800213a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800213e:	f000 fe4d 	bl	8002ddc <HAL_Delay>

	ssd1306_SetCursor(2, 40);
 8002142:	2128      	movs	r1, #40	; 0x28
 8002144:	2002      	movs	r0, #2
 8002146:	f000 fa8b 	bl	8002660 <ssd1306_SetCursor>
	ssd1306_WriteString("Reinit(0)!.....", INFO_TEXT_SIZE, SSD1306_WHITE);
 800214a:	4a1e      	ldr	r2, [pc, #120]	; (80021c4 <fatalErrorScreen+0x158>)
 800214c:	2301      	movs	r3, #1
 800214e:	ca06      	ldmia	r2, {r1, r2}
 8002150:	4822      	ldr	r0, [pc, #136]	; (80021dc <fatalErrorScreen+0x170>)
 8002152:	f000 fa5f 	bl	8002614 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8002156:	f000 f94d 	bl	80023f4 <ssd1306_UpdateScreen>
	HAL_Delay(1000);
 800215a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800215e:	f000 fe3d 	bl	8002ddc <HAL_Delay>

	//flash screen
	ssd1306_Fill(SSD1306_WHITE);
 8002162:	2001      	movs	r0, #1
 8002164:	f000 f922 	bl	80023ac <ssd1306_Fill>
	ssd1306_UpdateScreen();
 8002168:	f000 f944 	bl	80023f4 <ssd1306_UpdateScreen>
	HAL_Delay(50);
 800216c:	2032      	movs	r0, #50	; 0x32
 800216e:	f000 fe35 	bl	8002ddc <HAL_Delay>
	ssd1306_Fill(SSD1306_BLACK);
 8002172:	2000      	movs	r0, #0
 8002174:	f000 f91a 	bl	80023ac <ssd1306_Fill>
	ssd1306_UpdateScreen();
 8002178:	f000 f93c 	bl	80023f4 <ssd1306_UpdateScreen>
	HAL_Delay(50);
 800217c:	2032      	movs	r0, #50	; 0x32
 800217e:	f000 fe2d 	bl	8002ddc <HAL_Delay>
	ssd1306_Fill(SSD1306_WHITE);
 8002182:	2001      	movs	r0, #1
 8002184:	f000 f912 	bl	80023ac <ssd1306_Fill>
	ssd1306_UpdateScreen();
 8002188:	f000 f934 	bl	80023f4 <ssd1306_UpdateScreen>
	HAL_Delay(50);
 800218c:	2032      	movs	r0, #50	; 0x32
 800218e:	f000 fe25 	bl	8002ddc <HAL_Delay>
	ssd1306_Fill(SSD1306_BLACK);
 8002192:	2000      	movs	r0, #0
 8002194:	f000 f90a 	bl	80023ac <ssd1306_Fill>
	ssd1306_UpdateScreen();
 8002198:	f000 f92c 	bl	80023f4 <ssd1306_UpdateScreen>
	HAL_Delay(50);
 800219c:	2032      	movs	r0, #50	; 0x32
 800219e:	f000 fe1d 	bl	8002ddc <HAL_Delay>
	ssd1306_Fill(SSD1306_WHITE);
 80021a2:	2001      	movs	r0, #1
 80021a4:	f000 f902 	bl	80023ac <ssd1306_Fill>
	ssd1306_UpdateScreen();
 80021a8:	f000 f924 	bl	80023f4 <ssd1306_UpdateScreen>
	HAL_Delay(50);
 80021ac:	2032      	movs	r0, #50	; 0x32
 80021ae:	f000 fe15 	bl	8002ddc <HAL_Delay>
}
 80021b2:	bf00      	nop
 80021b4:	bd80      	pop	{r7, pc}
 80021b6:	bf00      	nop
 80021b8:	20000008 	.word	0x20000008
 80021bc:	08008c74 	.word	0x08008c74
 80021c0:	08008c7c 	.word	0x08008c7c
 80021c4:	20000000 	.word	0x20000000
 80021c8:	08008c84 	.word	0x08008c84
 80021cc:	08008c90 	.word	0x08008c90
 80021d0:	08008c9c 	.word	0x08008c9c
 80021d4:	08008cac 	.word	0x08008cac
 80021d8:	08008cbc 	.word	0x08008cbc
 80021dc:	08008ccc 	.word	0x08008ccc

080021e0 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b082      	sub	sp, #8
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	4603      	mov	r3, r0
 80021e8:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == nSW_INT_Pin) // If The INT Source Is EXTI Line9 (A9 Pin)
 80021ea:	88fb      	ldrh	r3, [r7, #6]
 80021ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80021f0:	d105      	bne.n	80021fe <HAL_GPIO_EXTI_Callback+0x1e>
	{
		swIntFlag = SET;
 80021f2:	4b05      	ldr	r3, [pc, #20]	; (8002208 <HAL_GPIO_EXTI_Callback+0x28>)
 80021f4:	2201      	movs	r2, #1
 80021f6:	701a      	strb	r2, [r3, #0]
		printMsg("Int\n");
 80021f8:	4804      	ldr	r0, [pc, #16]	; (800220c <HAL_GPIO_EXTI_Callback+0x2c>)
 80021fa:	f7ff f859 	bl	80012b0 <printMsg>
	}
}
 80021fe:	bf00      	nop
 8002200:	3708      	adds	r7, #8
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}
 8002206:	bf00      	nop
 8002208:	20000208 	.word	0x20000208
 800220c:	08008cdc 	.word	0x08008cdc

08002210 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8002210:	b480      	push	{r7}
 8002212:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002214:	b672      	cpsid	i
}
 8002216:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002218:	e7fe      	b.n	8002218 <Error_Handler+0x8>
	...

0800221c <MCP4018_WriteVal>:
	uint8_t retVal = 0;
	HAL_I2C_Master_Receive(&hi2c1, MCP4018_I2C_ADDR, &retVal, 1, HAL_MAX_DELAY);
	return retVal;
}

void MCP4018_WriteVal(uint8_t val){
 800221c:	b580      	push	{r7, lr}
 800221e:	b084      	sub	sp, #16
 8002220:	af02      	add	r7, sp, #8
 8002222:	4603      	mov	r3, r0
 8002224:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Master_Transmit(&hi2c1, MCP4018_I2C_ADDR, &val, 1, HAL_MAX_DELAY);
 8002226:	1dfa      	adds	r2, r7, #7
 8002228:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800222c:	9300      	str	r3, [sp, #0]
 800222e:	2301      	movs	r3, #1
 8002230:	215e      	movs	r1, #94	; 0x5e
 8002232:	4803      	ldr	r0, [pc, #12]	; (8002240 <MCP4018_WriteVal+0x24>)
 8002234:	f001 fe00 	bl	8003e38 <HAL_I2C_Master_Transmit>
}
 8002238:	bf00      	nop
 800223a:	3708      	adds	r7, #8
 800223c:	46bd      	mov	sp, r7
 800223e:	bd80      	pop	{r7, pc}
 8002240:	20000620 	.word	0x20000620

08002244 <ssd1306_Reset>:
#include <math.h>
#include <stdlib.h>
#include <string.h> // For memcpy

void ssd1306_Reset(void)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(OLED_RST_GPIO_Port, OLED_RST_Pin, GPIO_PIN_RESET);
 8002248:	2200      	movs	r2, #0
 800224a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800224e:	4808      	ldr	r0, [pc, #32]	; (8002270 <ssd1306_Reset+0x2c>)
 8002250:	f001 fc62 	bl	8003b18 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 8002254:	200a      	movs	r0, #10
 8002256:	f000 fdc1 	bl	8002ddc <HAL_Delay>
    HAL_GPIO_WritePin(OLED_RST_GPIO_Port, OLED_RST_Pin, GPIO_PIN_SET);
 800225a:	2201      	movs	r2, #1
 800225c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002260:	4803      	ldr	r0, [pc, #12]	; (8002270 <ssd1306_Reset+0x2c>)
 8002262:	f001 fc59 	bl	8003b18 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 8002266:	200a      	movs	r0, #10
 8002268:	f000 fdb8 	bl	8002ddc <HAL_Delay>
}
 800226c:	bf00      	nop
 800226e:	bd80      	pop	{r7, pc}
 8002270:	40020400 	.word	0x40020400

08002274 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b086      	sub	sp, #24
 8002278:	af04      	add	r7, sp, #16
 800227a:	4603      	mov	r3, r0
 800227c:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&hi2c1, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 800227e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002282:	9302      	str	r3, [sp, #8]
 8002284:	2301      	movs	r3, #1
 8002286:	9301      	str	r3, [sp, #4]
 8002288:	1dfb      	adds	r3, r7, #7
 800228a:	9300      	str	r3, [sp, #0]
 800228c:	2301      	movs	r3, #1
 800228e:	2200      	movs	r2, #0
 8002290:	2178      	movs	r1, #120	; 0x78
 8002292:	4803      	ldr	r0, [pc, #12]	; (80022a0 <ssd1306_WriteCommand+0x2c>)
 8002294:	f001 fece 	bl	8004034 <HAL_I2C_Mem_Write>
}
 8002298:	bf00      	nop
 800229a:	3708      	adds	r7, #8
 800229c:	46bd      	mov	sp, r7
 800229e:	bd80      	pop	{r7, pc}
 80022a0:	20000620 	.word	0x20000620

080022a4 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t *buffer, size_t buff_size)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b086      	sub	sp, #24
 80022a8:	af04      	add	r7, sp, #16
 80022aa:	6078      	str	r0, [r7, #4]
 80022ac:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&hi2c1, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	b29b      	uxth	r3, r3
 80022b2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80022b6:	9202      	str	r2, [sp, #8]
 80022b8:	9301      	str	r3, [sp, #4]
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	9300      	str	r3, [sp, #0]
 80022be:	2301      	movs	r3, #1
 80022c0:	2240      	movs	r2, #64	; 0x40
 80022c2:	2178      	movs	r1, #120	; 0x78
 80022c4:	4803      	ldr	r0, [pc, #12]	; (80022d4 <ssd1306_WriteData+0x30>)
 80022c6:	f001 feb5 	bl	8004034 <HAL_I2C_Mem_Write>
}
 80022ca:	bf00      	nop
 80022cc:	3708      	adds	r7, #8
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}
 80022d2:	bf00      	nop
 80022d4:	20000620 	.word	0x20000620

080022d8 <ssd1306_Init>:
    return ret;
}

// Initialize the oled screen
void ssd1306_Init(void)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 80022dc:	f7ff ffb2 	bl	8002244 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 80022e0:	2064      	movs	r0, #100	; 0x64
 80022e2:	f000 fd7b 	bl	8002ddc <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 80022e6:	2000      	movs	r0, #0
 80022e8:	f000 f9e6 	bl	80026b8 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 80022ec:	2020      	movs	r0, #32
 80022ee:	f7ff ffc1 	bl	8002274 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 80022f2:	2000      	movs	r0, #0
 80022f4:	f7ff ffbe 	bl	8002274 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80022f8:	20b0      	movs	r0, #176	; 0xb0
 80022fa:	f7ff ffbb 	bl	8002274 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 80022fe:	20c8      	movs	r0, #200	; 0xc8
 8002300:	f7ff ffb8 	bl	8002274 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8002304:	2000      	movs	r0, #0
 8002306:	f7ff ffb5 	bl	8002274 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 800230a:	2010      	movs	r0, #16
 800230c:	f7ff ffb2 	bl	8002274 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8002310:	2040      	movs	r0, #64	; 0x40
 8002312:	f7ff ffaf 	bl	8002274 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8002316:	20ff      	movs	r0, #255	; 0xff
 8002318:	f000 f9ba 	bl	8002690 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 800231c:	20a1      	movs	r0, #161	; 0xa1
 800231e:	f7ff ffa9 	bl	8002274 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8002322:	20a6      	movs	r0, #166	; 0xa6
 8002324:	f7ff ffa6 	bl	8002274 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8002328:	20a8      	movs	r0, #168	; 0xa8
 800232a:	f7ff ffa3 	bl	8002274 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 800232e:	203f      	movs	r0, #63	; 0x3f
 8002330:	f7ff ffa0 	bl	8002274 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8002334:	20a4      	movs	r0, #164	; 0xa4
 8002336:	f7ff ff9d 	bl	8002274 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 800233a:	20d3      	movs	r0, #211	; 0xd3
 800233c:	f7ff ff9a 	bl	8002274 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8002340:	2000      	movs	r0, #0
 8002342:	f7ff ff97 	bl	8002274 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8002346:	20d5      	movs	r0, #213	; 0xd5
 8002348:	f7ff ff94 	bl	8002274 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 800234c:	20f0      	movs	r0, #240	; 0xf0
 800234e:	f7ff ff91 	bl	8002274 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8002352:	20d9      	movs	r0, #217	; 0xd9
 8002354:	f7ff ff8e 	bl	8002274 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8002358:	2022      	movs	r0, #34	; 0x22
 800235a:	f7ff ff8b 	bl	8002274 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 800235e:	20da      	movs	r0, #218	; 0xda
 8002360:	f7ff ff88 	bl	8002274 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8002364:	2012      	movs	r0, #18
 8002366:	f7ff ff85 	bl	8002274 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 800236a:	20db      	movs	r0, #219	; 0xdb
 800236c:	f7ff ff82 	bl	8002274 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8002370:	2020      	movs	r0, #32
 8002372:	f7ff ff7f 	bl	8002274 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8002376:	208d      	movs	r0, #141	; 0x8d
 8002378:	f7ff ff7c 	bl	8002274 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 800237c:	2014      	movs	r0, #20
 800237e:	f7ff ff79 	bl	8002274 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1);    //--turn on SSD1306 panel
 8002382:	2001      	movs	r0, #1
 8002384:	f000 f998 	bl	80026b8 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(SSD1306_BLACK);
 8002388:	2000      	movs	r0, #0
 800238a:	f000 f80f 	bl	80023ac <ssd1306_Fill>

    // Flush buffer to screen
    ssd1306_UpdateScreen();
 800238e:	f000 f831 	bl	80023f4 <ssd1306_UpdateScreen>

    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8002392:	4b05      	ldr	r3, [pc, #20]	; (80023a8 <ssd1306_Init+0xd0>)
 8002394:	2200      	movs	r2, #0
 8002396:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8002398:	4b03      	ldr	r3, [pc, #12]	; (80023a8 <ssd1306_Init+0xd0>)
 800239a:	2200      	movs	r2, #0
 800239c:	805a      	strh	r2, [r3, #2]

    SSD1306.Initialized = 1;
 800239e:	4b02      	ldr	r3, [pc, #8]	; (80023a8 <ssd1306_Init+0xd0>)
 80023a0:	2201      	movs	r2, #1
 80023a2:	715a      	strb	r2, [r3, #5]
}
 80023a4:	bf00      	nop
 80023a6:	bd80      	pop	{r7, pc}
 80023a8:	2000060c 	.word	0x2000060c

080023ac <ssd1306_Fill>:

// Fill the whole screen with the given color
void ssd1306_Fill(SSD1306_COLOR color)
{
 80023ac:	b480      	push	{r7}
 80023ae:	b085      	sub	sp, #20
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	4603      	mov	r3, r0
 80023b4:	71fb      	strb	r3, [r7, #7]
    /* Set memory */
    uint32_t i;

    for (i = 0; i < sizeof(SSD1306_Buffer); i++)
 80023b6:	2300      	movs	r3, #0
 80023b8:	60fb      	str	r3, [r7, #12]
 80023ba:	e00d      	b.n	80023d8 <ssd1306_Fill+0x2c>
    {
        SSD1306_Buffer[i] = (color == SSD1306_BLACK) ? 0x00 : 0xFF;
 80023bc:	79fb      	ldrb	r3, [r7, #7]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d101      	bne.n	80023c6 <ssd1306_Fill+0x1a>
 80023c2:	2100      	movs	r1, #0
 80023c4:	e000      	b.n	80023c8 <ssd1306_Fill+0x1c>
 80023c6:	21ff      	movs	r1, #255	; 0xff
 80023c8:	4a09      	ldr	r2, [pc, #36]	; (80023f0 <ssd1306_Fill+0x44>)
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	4413      	add	r3, r2
 80023ce:	460a      	mov	r2, r1
 80023d0:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < sizeof(SSD1306_Buffer); i++)
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	3301      	adds	r3, #1
 80023d6:	60fb      	str	r3, [r7, #12]
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023de:	d3ed      	bcc.n	80023bc <ssd1306_Fill+0x10>
    }
}
 80023e0:	bf00      	nop
 80023e2:	bf00      	nop
 80023e4:	3714      	adds	r7, #20
 80023e6:	46bd      	mov	sp, r7
 80023e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ec:	4770      	bx	lr
 80023ee:	bf00      	nop
 80023f0:	2000020c 	.word	0x2000020c

080023f4 <ssd1306_UpdateScreen>:

// Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen(void)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b082      	sub	sp, #8
 80023f8:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for (uint8_t i = 0; i < SSD1306_HEIGHT / 8; i++)
 80023fa:	2300      	movs	r3, #0
 80023fc:	71fb      	strb	r3, [r7, #7]
 80023fe:	e016      	b.n	800242e <ssd1306_UpdateScreen+0x3a>
    {
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8002400:	79fb      	ldrb	r3, [r7, #7]
 8002402:	3b50      	subs	r3, #80	; 0x50
 8002404:	b2db      	uxtb	r3, r3
 8002406:	4618      	mov	r0, r3
 8002408:	f7ff ff34 	bl	8002274 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00);
 800240c:	2000      	movs	r0, #0
 800240e:	f7ff ff31 	bl	8002274 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10);
 8002412:	2010      	movs	r0, #16
 8002414:	f7ff ff2e 	bl	8002274 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH * i], SSD1306_WIDTH);
 8002418:	79fb      	ldrb	r3, [r7, #7]
 800241a:	01db      	lsls	r3, r3, #7
 800241c:	4a08      	ldr	r2, [pc, #32]	; (8002440 <ssd1306_UpdateScreen+0x4c>)
 800241e:	4413      	add	r3, r2
 8002420:	2180      	movs	r1, #128	; 0x80
 8002422:	4618      	mov	r0, r3
 8002424:	f7ff ff3e 	bl	80022a4 <ssd1306_WriteData>
    for (uint8_t i = 0; i < SSD1306_HEIGHT / 8; i++)
 8002428:	79fb      	ldrb	r3, [r7, #7]
 800242a:	3301      	adds	r3, #1
 800242c:	71fb      	strb	r3, [r7, #7]
 800242e:	79fb      	ldrb	r3, [r7, #7]
 8002430:	2b07      	cmp	r3, #7
 8002432:	d9e5      	bls.n	8002400 <ssd1306_UpdateScreen+0xc>
    }
}
 8002434:	bf00      	nop
 8002436:	bf00      	nop
 8002438:	3708      	adds	r7, #8
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}
 800243e:	bf00      	nop
 8002440:	2000020c 	.word	0x2000020c

08002444 <ssd1306_DrawPixel>:
//    Draw one pixel in the screenbuffer
//    X => X Coordinate
//    Y => Y Coordinate
//    color => Pixel color
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color)
{
 8002444:	b480      	push	{r7}
 8002446:	b083      	sub	sp, #12
 8002448:	af00      	add	r7, sp, #0
 800244a:	4603      	mov	r3, r0
 800244c:	71fb      	strb	r3, [r7, #7]
 800244e:	460b      	mov	r3, r1
 8002450:	71bb      	strb	r3, [r7, #6]
 8002452:	4613      	mov	r3, r2
 8002454:	717b      	strb	r3, [r7, #5]
    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT)
 8002456:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800245a:	2b00      	cmp	r3, #0
 800245c:	db48      	blt.n	80024f0 <ssd1306_DrawPixel+0xac>
 800245e:	79bb      	ldrb	r3, [r7, #6]
 8002460:	2b3f      	cmp	r3, #63	; 0x3f
 8002462:	d845      	bhi.n	80024f0 <ssd1306_DrawPixel+0xac>
        // Don't write outside the buffer
        return;
    }

    // Check if pixel should be inverted
    if (SSD1306.Inverted)
 8002464:	4b25      	ldr	r3, [pc, #148]	; (80024fc <ssd1306_DrawPixel+0xb8>)
 8002466:	791b      	ldrb	r3, [r3, #4]
 8002468:	2b00      	cmp	r3, #0
 800246a:	d006      	beq.n	800247a <ssd1306_DrawPixel+0x36>
    {
        color = (SSD1306_COLOR)!color;
 800246c:	797b      	ldrb	r3, [r7, #5]
 800246e:	2b00      	cmp	r3, #0
 8002470:	bf0c      	ite	eq
 8002472:	2301      	moveq	r3, #1
 8002474:	2300      	movne	r3, #0
 8002476:	b2db      	uxtb	r3, r3
 8002478:	717b      	strb	r3, [r7, #5]
    }

    // Draw in the right color
    if (color == SSD1306_WHITE)
 800247a:	797b      	ldrb	r3, [r7, #5]
 800247c:	2b01      	cmp	r3, #1
 800247e:	d11a      	bne.n	80024b6 <ssd1306_DrawPixel+0x72>
    {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8002480:	79fa      	ldrb	r2, [r7, #7]
 8002482:	79bb      	ldrb	r3, [r7, #6]
 8002484:	08db      	lsrs	r3, r3, #3
 8002486:	b2d8      	uxtb	r0, r3
 8002488:	4603      	mov	r3, r0
 800248a:	01db      	lsls	r3, r3, #7
 800248c:	4413      	add	r3, r2
 800248e:	4a1c      	ldr	r2, [pc, #112]	; (8002500 <ssd1306_DrawPixel+0xbc>)
 8002490:	5cd3      	ldrb	r3, [r2, r3]
 8002492:	b25a      	sxtb	r2, r3
 8002494:	79bb      	ldrb	r3, [r7, #6]
 8002496:	f003 0307 	and.w	r3, r3, #7
 800249a:	2101      	movs	r1, #1
 800249c:	fa01 f303 	lsl.w	r3, r1, r3
 80024a0:	b25b      	sxtb	r3, r3
 80024a2:	4313      	orrs	r3, r2
 80024a4:	b259      	sxtb	r1, r3
 80024a6:	79fa      	ldrb	r2, [r7, #7]
 80024a8:	4603      	mov	r3, r0
 80024aa:	01db      	lsls	r3, r3, #7
 80024ac:	4413      	add	r3, r2
 80024ae:	b2c9      	uxtb	r1, r1
 80024b0:	4a13      	ldr	r2, [pc, #76]	; (8002500 <ssd1306_DrawPixel+0xbc>)
 80024b2:	54d1      	strb	r1, [r2, r3]
 80024b4:	e01d      	b.n	80024f2 <ssd1306_DrawPixel+0xae>
    }
    else
    {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80024b6:	79fa      	ldrb	r2, [r7, #7]
 80024b8:	79bb      	ldrb	r3, [r7, #6]
 80024ba:	08db      	lsrs	r3, r3, #3
 80024bc:	b2d8      	uxtb	r0, r3
 80024be:	4603      	mov	r3, r0
 80024c0:	01db      	lsls	r3, r3, #7
 80024c2:	4413      	add	r3, r2
 80024c4:	4a0e      	ldr	r2, [pc, #56]	; (8002500 <ssd1306_DrawPixel+0xbc>)
 80024c6:	5cd3      	ldrb	r3, [r2, r3]
 80024c8:	b25a      	sxtb	r2, r3
 80024ca:	79bb      	ldrb	r3, [r7, #6]
 80024cc:	f003 0307 	and.w	r3, r3, #7
 80024d0:	2101      	movs	r1, #1
 80024d2:	fa01 f303 	lsl.w	r3, r1, r3
 80024d6:	b25b      	sxtb	r3, r3
 80024d8:	43db      	mvns	r3, r3
 80024da:	b25b      	sxtb	r3, r3
 80024dc:	4013      	ands	r3, r2
 80024de:	b259      	sxtb	r1, r3
 80024e0:	79fa      	ldrb	r2, [r7, #7]
 80024e2:	4603      	mov	r3, r0
 80024e4:	01db      	lsls	r3, r3, #7
 80024e6:	4413      	add	r3, r2
 80024e8:	b2c9      	uxtb	r1, r1
 80024ea:	4a05      	ldr	r2, [pc, #20]	; (8002500 <ssd1306_DrawPixel+0xbc>)
 80024ec:	54d1      	strb	r1, [r2, r3]
 80024ee:	e000      	b.n	80024f2 <ssd1306_DrawPixel+0xae>
        return;
 80024f0:	bf00      	nop
    }
}
 80024f2:	370c      	adds	r7, #12
 80024f4:	46bd      	mov	sp, r7
 80024f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fa:	4770      	bx	lr
 80024fc:	2000060c 	.word	0x2000060c
 8002500:	2000020c 	.word	0x2000020c

08002504 <ssd1306_WriteChar>:
// Draw 1 char to the screen buffer
// ch       => char om weg te schrijven
// Font     => Font waarmee we gaan schrijven
// color    => SSD1306_BLACK or SSD1306_WHITE
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color)
{
 8002504:	b590      	push	{r4, r7, lr}
 8002506:	b089      	sub	sp, #36	; 0x24
 8002508:	af00      	add	r7, sp, #0
 800250a:	4604      	mov	r4, r0
 800250c:	1d38      	adds	r0, r7, #4
 800250e:	e880 0006 	stmia.w	r0, {r1, r2}
 8002512:	461a      	mov	r2, r3
 8002514:	4623      	mov	r3, r4
 8002516:	73fb      	strb	r3, [r7, #15]
 8002518:	4613      	mov	r3, r2
 800251a:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;

    // Check if character is valid
    if (ch < 32 || ch > 126)
 800251c:	7bfb      	ldrb	r3, [r7, #15]
 800251e:	2b1f      	cmp	r3, #31
 8002520:	d902      	bls.n	8002528 <ssd1306_WriteChar+0x24>
 8002522:	7bfb      	ldrb	r3, [r7, #15]
 8002524:	2b7e      	cmp	r3, #126	; 0x7e
 8002526:	d901      	bls.n	800252c <ssd1306_WriteChar+0x28>
        return 0;
 8002528:	2300      	movs	r3, #0
 800252a:	e06d      	b.n	8002608 <ssd1306_WriteChar+0x104>

    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 800252c:	4b38      	ldr	r3, [pc, #224]	; (8002610 <ssd1306_WriteChar+0x10c>)
 800252e:	881b      	ldrh	r3, [r3, #0]
 8002530:	461a      	mov	r2, r3
 8002532:	793b      	ldrb	r3, [r7, #4]
 8002534:	4413      	add	r3, r2
 8002536:	2b80      	cmp	r3, #128	; 0x80
 8002538:	dc06      	bgt.n	8002548 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 800253a:	4b35      	ldr	r3, [pc, #212]	; (8002610 <ssd1306_WriteChar+0x10c>)
 800253c:	885b      	ldrh	r3, [r3, #2]
 800253e:	461a      	mov	r2, r3
 8002540:	797b      	ldrb	r3, [r7, #5]
 8002542:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8002544:	2b40      	cmp	r3, #64	; 0x40
 8002546:	dd01      	ble.n	800254c <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 8002548:	2300      	movs	r3, #0
 800254a:	e05d      	b.n	8002608 <ssd1306_WriteChar+0x104>
    }

    // Use the font to write
    for (i = 0; i < Font.FontHeight; i++)
 800254c:	2300      	movs	r3, #0
 800254e:	61fb      	str	r3, [r7, #28]
 8002550:	e04c      	b.n	80025ec <ssd1306_WriteChar+0xe8>
    {
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8002552:	68ba      	ldr	r2, [r7, #8]
 8002554:	7bfb      	ldrb	r3, [r7, #15]
 8002556:	3b20      	subs	r3, #32
 8002558:	7979      	ldrb	r1, [r7, #5]
 800255a:	fb01 f303 	mul.w	r3, r1, r3
 800255e:	4619      	mov	r1, r3
 8002560:	69fb      	ldr	r3, [r7, #28]
 8002562:	440b      	add	r3, r1
 8002564:	005b      	lsls	r3, r3, #1
 8002566:	4413      	add	r3, r2
 8002568:	881b      	ldrh	r3, [r3, #0]
 800256a:	617b      	str	r3, [r7, #20]
        for (j = 0; j < Font.FontWidth; j++)
 800256c:	2300      	movs	r3, #0
 800256e:	61bb      	str	r3, [r7, #24]
 8002570:	e034      	b.n	80025dc <ssd1306_WriteChar+0xd8>
        {
            if ((b << j) & 0x8000)
 8002572:	697a      	ldr	r2, [r7, #20]
 8002574:	69bb      	ldr	r3, [r7, #24]
 8002576:	fa02 f303 	lsl.w	r3, r2, r3
 800257a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800257e:	2b00      	cmp	r3, #0
 8002580:	d012      	beq.n	80025a8 <ssd1306_WriteChar+0xa4>
            {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)color);
 8002582:	4b23      	ldr	r3, [pc, #140]	; (8002610 <ssd1306_WriteChar+0x10c>)
 8002584:	881b      	ldrh	r3, [r3, #0]
 8002586:	b2da      	uxtb	r2, r3
 8002588:	69bb      	ldr	r3, [r7, #24]
 800258a:	b2db      	uxtb	r3, r3
 800258c:	4413      	add	r3, r2
 800258e:	b2d8      	uxtb	r0, r3
 8002590:	4b1f      	ldr	r3, [pc, #124]	; (8002610 <ssd1306_WriteChar+0x10c>)
 8002592:	885b      	ldrh	r3, [r3, #2]
 8002594:	b2da      	uxtb	r2, r3
 8002596:	69fb      	ldr	r3, [r7, #28]
 8002598:	b2db      	uxtb	r3, r3
 800259a:	4413      	add	r3, r2
 800259c:	b2db      	uxtb	r3, r3
 800259e:	7bba      	ldrb	r2, [r7, #14]
 80025a0:	4619      	mov	r1, r3
 80025a2:	f7ff ff4f 	bl	8002444 <ssd1306_DrawPixel>
 80025a6:	e016      	b.n	80025d6 <ssd1306_WriteChar+0xd2>
            }
            else
            {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 80025a8:	4b19      	ldr	r3, [pc, #100]	; (8002610 <ssd1306_WriteChar+0x10c>)
 80025aa:	881b      	ldrh	r3, [r3, #0]
 80025ac:	b2da      	uxtb	r2, r3
 80025ae:	69bb      	ldr	r3, [r7, #24]
 80025b0:	b2db      	uxtb	r3, r3
 80025b2:	4413      	add	r3, r2
 80025b4:	b2d8      	uxtb	r0, r3
 80025b6:	4b16      	ldr	r3, [pc, #88]	; (8002610 <ssd1306_WriteChar+0x10c>)
 80025b8:	885b      	ldrh	r3, [r3, #2]
 80025ba:	b2da      	uxtb	r2, r3
 80025bc:	69fb      	ldr	r3, [r7, #28]
 80025be:	b2db      	uxtb	r3, r3
 80025c0:	4413      	add	r3, r2
 80025c2:	b2d9      	uxtb	r1, r3
 80025c4:	7bbb      	ldrb	r3, [r7, #14]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	bf0c      	ite	eq
 80025ca:	2301      	moveq	r3, #1
 80025cc:	2300      	movne	r3, #0
 80025ce:	b2db      	uxtb	r3, r3
 80025d0:	461a      	mov	r2, r3
 80025d2:	f7ff ff37 	bl	8002444 <ssd1306_DrawPixel>
        for (j = 0; j < Font.FontWidth; j++)
 80025d6:	69bb      	ldr	r3, [r7, #24]
 80025d8:	3301      	adds	r3, #1
 80025da:	61bb      	str	r3, [r7, #24]
 80025dc:	793b      	ldrb	r3, [r7, #4]
 80025de:	461a      	mov	r2, r3
 80025e0:	69bb      	ldr	r3, [r7, #24]
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d3c5      	bcc.n	8002572 <ssd1306_WriteChar+0x6e>
    for (i = 0; i < Font.FontHeight; i++)
 80025e6:	69fb      	ldr	r3, [r7, #28]
 80025e8:	3301      	adds	r3, #1
 80025ea:	61fb      	str	r3, [r7, #28]
 80025ec:	797b      	ldrb	r3, [r7, #5]
 80025ee:	461a      	mov	r2, r3
 80025f0:	69fb      	ldr	r3, [r7, #28]
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d3ad      	bcc.n	8002552 <ssd1306_WriteChar+0x4e>
            }
        }
    }

    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 80025f6:	4b06      	ldr	r3, [pc, #24]	; (8002610 <ssd1306_WriteChar+0x10c>)
 80025f8:	881a      	ldrh	r2, [r3, #0]
 80025fa:	793b      	ldrb	r3, [r7, #4]
 80025fc:	b29b      	uxth	r3, r3
 80025fe:	4413      	add	r3, r2
 8002600:	b29a      	uxth	r2, r3
 8002602:	4b03      	ldr	r3, [pc, #12]	; (8002610 <ssd1306_WriteChar+0x10c>)
 8002604:	801a      	strh	r2, [r3, #0]

    // Return written char for validation
    return ch;
 8002606:	7bfb      	ldrb	r3, [r7, #15]
}
 8002608:	4618      	mov	r0, r3
 800260a:	3724      	adds	r7, #36	; 0x24
 800260c:	46bd      	mov	sp, r7
 800260e:	bd90      	pop	{r4, r7, pc}
 8002610:	2000060c 	.word	0x2000060c

08002614 <ssd1306_WriteString>:

// Write full string to screenbuffer
char ssd1306_WriteString(char *str, FontDef Font, SSD1306_COLOR color)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b084      	sub	sp, #16
 8002618:	af00      	add	r7, sp, #0
 800261a:	60f8      	str	r0, [r7, #12]
 800261c:	1d38      	adds	r0, r7, #4
 800261e:	e880 0006 	stmia.w	r0, {r1, r2}
 8002622:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str)
 8002624:	e012      	b.n	800264c <ssd1306_WriteString+0x38>
    {
        if (ssd1306_WriteChar(*str, Font, color) != *str)
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	7818      	ldrb	r0, [r3, #0]
 800262a:	78fb      	ldrb	r3, [r7, #3]
 800262c:	1d3a      	adds	r2, r7, #4
 800262e:	ca06      	ldmia	r2, {r1, r2}
 8002630:	f7ff ff68 	bl	8002504 <ssd1306_WriteChar>
 8002634:	4603      	mov	r3, r0
 8002636:	461a      	mov	r2, r3
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	781b      	ldrb	r3, [r3, #0]
 800263c:	429a      	cmp	r2, r3
 800263e:	d002      	beq.n	8002646 <ssd1306_WriteString+0x32>
        {
            // Char could not be written
            return *str;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	781b      	ldrb	r3, [r3, #0]
 8002644:	e008      	b.n	8002658 <ssd1306_WriteString+0x44>
        }

        // Next char
        str++;
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	3301      	adds	r3, #1
 800264a:	60fb      	str	r3, [r7, #12]
    while (*str)
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	781b      	ldrb	r3, [r3, #0]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d1e8      	bne.n	8002626 <ssd1306_WriteString+0x12>
    }

    // Everything ok
    return *str;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	781b      	ldrb	r3, [r3, #0]
}
 8002658:	4618      	mov	r0, r3
 800265a:	3710      	adds	r7, #16
 800265c:	46bd      	mov	sp, r7
 800265e:	bd80      	pop	{r7, pc}

08002660 <ssd1306_SetCursor>:

// Position the cursor
void ssd1306_SetCursor(uint8_t x, uint8_t y)
{
 8002660:	b480      	push	{r7}
 8002662:	b083      	sub	sp, #12
 8002664:	af00      	add	r7, sp, #0
 8002666:	4603      	mov	r3, r0
 8002668:	460a      	mov	r2, r1
 800266a:	71fb      	strb	r3, [r7, #7]
 800266c:	4613      	mov	r3, r2
 800266e:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8002670:	79fb      	ldrb	r3, [r7, #7]
 8002672:	b29a      	uxth	r2, r3
 8002674:	4b05      	ldr	r3, [pc, #20]	; (800268c <ssd1306_SetCursor+0x2c>)
 8002676:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8002678:	79bb      	ldrb	r3, [r7, #6]
 800267a:	b29a      	uxth	r2, r3
 800267c:	4b03      	ldr	r3, [pc, #12]	; (800268c <ssd1306_SetCursor+0x2c>)
 800267e:	805a      	strh	r2, [r3, #2]
}
 8002680:	bf00      	nop
 8002682:	370c      	adds	r7, #12
 8002684:	46bd      	mov	sp, r7
 8002686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268a:	4770      	bx	lr
 800268c:	2000060c 	.word	0x2000060c

08002690 <ssd1306_SetContrast>:

    return;
}

void ssd1306_SetContrast(const uint8_t value)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b084      	sub	sp, #16
 8002694:	af00      	add	r7, sp, #0
 8002696:	4603      	mov	r3, r0
 8002698:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 800269a:	2381      	movs	r3, #129	; 0x81
 800269c:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 800269e:	7bfb      	ldrb	r3, [r7, #15]
 80026a0:	4618      	mov	r0, r3
 80026a2:	f7ff fde7 	bl	8002274 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 80026a6:	79fb      	ldrb	r3, [r7, #7]
 80026a8:	4618      	mov	r0, r3
 80026aa:	f7ff fde3 	bl	8002274 <ssd1306_WriteCommand>
}
 80026ae:	bf00      	nop
 80026b0:	3710      	adds	r7, #16
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bd80      	pop	{r7, pc}
	...

080026b8 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b084      	sub	sp, #16
 80026bc:	af00      	add	r7, sp, #0
 80026be:	4603      	mov	r3, r0
 80026c0:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on)
 80026c2:	79fb      	ldrb	r3, [r7, #7]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d005      	beq.n	80026d4 <ssd1306_SetDisplayOn+0x1c>
    {
        value = 0xAF; // Display on
 80026c8:	23af      	movs	r3, #175	; 0xaf
 80026ca:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 80026cc:	4b08      	ldr	r3, [pc, #32]	; (80026f0 <ssd1306_SetDisplayOn+0x38>)
 80026ce:	2201      	movs	r2, #1
 80026d0:	719a      	strb	r2, [r3, #6]
 80026d2:	e004      	b.n	80026de <ssd1306_SetDisplayOn+0x26>
    }
    else
    {
        value = 0xAE; // Display off
 80026d4:	23ae      	movs	r3, #174	; 0xae
 80026d6:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 80026d8:	4b05      	ldr	r3, [pc, #20]	; (80026f0 <ssd1306_SetDisplayOn+0x38>)
 80026da:	2200      	movs	r2, #0
 80026dc:	719a      	strb	r2, [r3, #6]
    }
    ssd1306_WriteCommand(value);
 80026de:	7bfb      	ldrb	r3, [r7, #15]
 80026e0:	4618      	mov	r0, r3
 80026e2:	f7ff fdc7 	bl	8002274 <ssd1306_WriteCommand>
}
 80026e6:	bf00      	nop
 80026e8:	3710      	adds	r7, #16
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bd80      	pop	{r7, pc}
 80026ee:	bf00      	nop
 80026f0:	2000060c 	.word	0x2000060c

080026f4 <ssd1306_DrawBitMap>:
uint8_t ssd1306_GetDisplayOn()
{
    return SSD1306.DisplayOn;
}

void ssd1306_DrawBitMap(int16_t x, int16_t y, const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color){
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b086      	sub	sp, #24
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	60ba      	str	r2, [r7, #8]
 80026fc:	461a      	mov	r2, r3
 80026fe:	4603      	mov	r3, r0
 8002700:	81fb      	strh	r3, [r7, #14]
 8002702:	460b      	mov	r3, r1
 8002704:	81bb      	strh	r3, [r7, #12]
 8002706:	4613      	mov	r3, r2
 8002708:	80fb      	strh	r3, [r7, #6]
	int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 800270a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800270e:	3307      	adds	r3, #7
 8002710:	2b00      	cmp	r3, #0
 8002712:	da00      	bge.n	8002716 <ssd1306_DrawBitMap+0x22>
 8002714:	3307      	adds	r3, #7
 8002716:	10db      	asrs	r3, r3, #3
 8002718:	823b      	strh	r3, [r7, #16]
	uint8_t byte = 0;
 800271a:	2300      	movs	r3, #0
 800271c:	75fb      	strb	r3, [r7, #23]

	for (int16_t j = 0; j < h; j++, y++) {
 800271e:	2300      	movs	r3, #0
 8002720:	82bb      	strh	r3, [r7, #20]
 8002722:	e047      	b.n	80027b4 <ssd1306_DrawBitMap+0xc0>
		for (int16_t i = 0; i < w; i++) {
 8002724:	2300      	movs	r3, #0
 8002726:	827b      	strh	r3, [r7, #18]
 8002728:	e032      	b.n	8002790 <ssd1306_DrawBitMap+0x9c>
			if (i & 7)
 800272a:	8a7b      	ldrh	r3, [r7, #18]
 800272c:	f003 0307 	and.w	r3, r3, #7
 8002730:	2b00      	cmp	r3, #0
 8002732:	d003      	beq.n	800273c <ssd1306_DrawBitMap+0x48>
				byte <<= 1;
 8002734:	7dfb      	ldrb	r3, [r7, #23]
 8002736:	005b      	lsls	r3, r3, #1
 8002738:	75fb      	strb	r3, [r7, #23]
 800273a:	e012      	b.n	8002762 <ssd1306_DrawBitMap+0x6e>
			else
				byte = bitmap[j * byteWidth + i / 8];
 800273c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002740:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8002744:	fb02 f203 	mul.w	r2, r2, r3
 8002748:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800274c:	2b00      	cmp	r3, #0
 800274e:	da00      	bge.n	8002752 <ssd1306_DrawBitMap+0x5e>
 8002750:	3307      	adds	r3, #7
 8002752:	10db      	asrs	r3, r3, #3
 8002754:	b21b      	sxth	r3, r3
 8002756:	4413      	add	r3, r2
 8002758:	461a      	mov	r2, r3
 800275a:	68bb      	ldr	r3, [r7, #8]
 800275c:	4413      	add	r3, r2
 800275e:	781b      	ldrb	r3, [r3, #0]
 8002760:	75fb      	strb	r3, [r7, #23]
			if (byte & 0x80)
 8002762:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002766:	2b00      	cmp	r3, #0
 8002768:	da0c      	bge.n	8002784 <ssd1306_DrawBitMap+0x90>
				ssd1306_DrawPixel(x + i, y, color);
 800276a:	89fb      	ldrh	r3, [r7, #14]
 800276c:	b2da      	uxtb	r2, r3
 800276e:	8a7b      	ldrh	r3, [r7, #18]
 8002770:	b2db      	uxtb	r3, r3
 8002772:	4413      	add	r3, r2
 8002774:	b2db      	uxtb	r3, r3
 8002776:	89ba      	ldrh	r2, [r7, #12]
 8002778:	b2d1      	uxtb	r1, r2
 800277a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800277c:	b2d2      	uxtb	r2, r2
 800277e:	4618      	mov	r0, r3
 8002780:	f7ff fe60 	bl	8002444 <ssd1306_DrawPixel>
		for (int16_t i = 0; i < w; i++) {
 8002784:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002788:	b29b      	uxth	r3, r3
 800278a:	3301      	adds	r3, #1
 800278c:	b29b      	uxth	r3, r3
 800278e:	827b      	strh	r3, [r7, #18]
 8002790:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002794:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002798:	429a      	cmp	r2, r3
 800279a:	dbc6      	blt.n	800272a <ssd1306_DrawBitMap+0x36>
	for (int16_t j = 0; j < h; j++, y++) {
 800279c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80027a0:	b29b      	uxth	r3, r3
 80027a2:	3301      	adds	r3, #1
 80027a4:	b29b      	uxth	r3, r3
 80027a6:	82bb      	strh	r3, [r7, #20]
 80027a8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80027ac:	b29b      	uxth	r3, r3
 80027ae:	3301      	adds	r3, #1
 80027b0:	b29b      	uxth	r3, r3
 80027b2:	81bb      	strh	r3, [r7, #12]
 80027b4:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80027b8:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80027bc:	429a      	cmp	r2, r3
 80027be:	dbb1      	blt.n	8002724 <ssd1306_DrawBitMap+0x30>
		}
	}
	ssd1306_UpdateScreen();
 80027c0:	f7ff fe18 	bl	80023f4 <ssd1306_UpdateScreen>
}
 80027c4:	bf00      	nop
 80027c6:	3718      	adds	r7, #24
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bd80      	pop	{r7, pc}

080027cc <ssd1306_WriteErrorMsg>:

void ssd1306_WriteErrorMsg(int16_t x, int16_t y, char *str){
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b082      	sub	sp, #8
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	4603      	mov	r3, r0
 80027d4:	603a      	str	r2, [r7, #0]
 80027d6:	80fb      	strh	r3, [r7, #6]
 80027d8:	460b      	mov	r3, r1
 80027da:	80bb      	strh	r3, [r7, #4]
	ssd1306_Fill(SSD1306_BLACK);
 80027dc:	2000      	movs	r0, #0
 80027de:	f7ff fde5 	bl	80023ac <ssd1306_Fill>
	ssd1306_UpdateScreen();
 80027e2:	f7ff fe07 	bl	80023f4 <ssd1306_UpdateScreen>
	ssd1306_SetCursor(x, y);
 80027e6:	88fb      	ldrh	r3, [r7, #6]
 80027e8:	b2db      	uxtb	r3, r3
 80027ea:	88ba      	ldrh	r2, [r7, #4]
 80027ec:	b2d2      	uxtb	r2, r2
 80027ee:	4611      	mov	r1, r2
 80027f0:	4618      	mov	r0, r3
 80027f2:	f7ff ff35 	bl	8002660 <ssd1306_SetCursor>
	ssd1306_WriteString(str, Font_7x10, SSD1306_WHITE);
 80027f6:	4a06      	ldr	r2, [pc, #24]	; (8002810 <ssd1306_WriteErrorMsg+0x44>)
 80027f8:	2301      	movs	r3, #1
 80027fa:	ca06      	ldmia	r2, {r1, r2}
 80027fc:	6838      	ldr	r0, [r7, #0]
 80027fe:	f7ff ff09 	bl	8002614 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8002802:	f7ff fdf7 	bl	80023f4 <ssd1306_UpdateScreen>
}
 8002806:	bf00      	nop
 8002808:	3708      	adds	r7, #8
 800280a:	46bd      	mov	sp, r7
 800280c:	bd80      	pop	{r7, pc}
 800280e:	bf00      	nop
 8002810:	20000000 	.word	0x20000000

08002814 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002814:	b480      	push	{r7}
 8002816:	b083      	sub	sp, #12
 8002818:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800281a:	2300      	movs	r3, #0
 800281c:	607b      	str	r3, [r7, #4]
 800281e:	4b10      	ldr	r3, [pc, #64]	; (8002860 <HAL_MspInit+0x4c>)
 8002820:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002822:	4a0f      	ldr	r2, [pc, #60]	; (8002860 <HAL_MspInit+0x4c>)
 8002824:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002828:	6453      	str	r3, [r2, #68]	; 0x44
 800282a:	4b0d      	ldr	r3, [pc, #52]	; (8002860 <HAL_MspInit+0x4c>)
 800282c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800282e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002832:	607b      	str	r3, [r7, #4]
 8002834:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002836:	2300      	movs	r3, #0
 8002838:	603b      	str	r3, [r7, #0]
 800283a:	4b09      	ldr	r3, [pc, #36]	; (8002860 <HAL_MspInit+0x4c>)
 800283c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800283e:	4a08      	ldr	r2, [pc, #32]	; (8002860 <HAL_MspInit+0x4c>)
 8002840:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002844:	6413      	str	r3, [r2, #64]	; 0x40
 8002846:	4b06      	ldr	r3, [pc, #24]	; (8002860 <HAL_MspInit+0x4c>)
 8002848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800284a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800284e:	603b      	str	r3, [r7, #0]
 8002850:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002852:	bf00      	nop
 8002854:	370c      	adds	r7, #12
 8002856:	46bd      	mov	sp, r7
 8002858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285c:	4770      	bx	lr
 800285e:	bf00      	nop
 8002860:	40023800 	.word	0x40023800

08002864 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b08a      	sub	sp, #40	; 0x28
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800286c:	f107 0314 	add.w	r3, r7, #20
 8002870:	2200      	movs	r2, #0
 8002872:	601a      	str	r2, [r3, #0]
 8002874:	605a      	str	r2, [r3, #4]
 8002876:	609a      	str	r2, [r3, #8]
 8002878:	60da      	str	r2, [r3, #12]
 800287a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4a24      	ldr	r2, [pc, #144]	; (8002914 <HAL_ADC_MspInit+0xb0>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d141      	bne.n	800290a <HAL_ADC_MspInit+0xa6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002886:	2300      	movs	r3, #0
 8002888:	613b      	str	r3, [r7, #16]
 800288a:	4b23      	ldr	r3, [pc, #140]	; (8002918 <HAL_ADC_MspInit+0xb4>)
 800288c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800288e:	4a22      	ldr	r2, [pc, #136]	; (8002918 <HAL_ADC_MspInit+0xb4>)
 8002890:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002894:	6453      	str	r3, [r2, #68]	; 0x44
 8002896:	4b20      	ldr	r3, [pc, #128]	; (8002918 <HAL_ADC_MspInit+0xb4>)
 8002898:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800289a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800289e:	613b      	str	r3, [r7, #16]
 80028a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80028a2:	2300      	movs	r3, #0
 80028a4:	60fb      	str	r3, [r7, #12]
 80028a6:	4b1c      	ldr	r3, [pc, #112]	; (8002918 <HAL_ADC_MspInit+0xb4>)
 80028a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028aa:	4a1b      	ldr	r2, [pc, #108]	; (8002918 <HAL_ADC_MspInit+0xb4>)
 80028ac:	f043 0304 	orr.w	r3, r3, #4
 80028b0:	6313      	str	r3, [r2, #48]	; 0x30
 80028b2:	4b19      	ldr	r3, [pc, #100]	; (8002918 <HAL_ADC_MspInit+0xb4>)
 80028b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028b6:	f003 0304 	and.w	r3, r3, #4
 80028ba:	60fb      	str	r3, [r7, #12]
 80028bc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028be:	2300      	movs	r3, #0
 80028c0:	60bb      	str	r3, [r7, #8]
 80028c2:	4b15      	ldr	r3, [pc, #84]	; (8002918 <HAL_ADC_MspInit+0xb4>)
 80028c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028c6:	4a14      	ldr	r2, [pc, #80]	; (8002918 <HAL_ADC_MspInit+0xb4>)
 80028c8:	f043 0301 	orr.w	r3, r3, #1
 80028cc:	6313      	str	r3, [r2, #48]	; 0x30
 80028ce:	4b12      	ldr	r3, [pc, #72]	; (8002918 <HAL_ADC_MspInit+0xb4>)
 80028d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028d2:	f003 0301 	and.w	r3, r3, #1
 80028d6:	60bb      	str	r3, [r7, #8]
 80028d8:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC3     ------> ADC1_IN13
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = I_SENSE_Pin;
 80028da:	2308      	movs	r3, #8
 80028dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80028de:	2303      	movs	r3, #3
 80028e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028e2:	2300      	movs	r3, #0
 80028e4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(I_SENSE_GPIO_Port, &GPIO_InitStruct);
 80028e6:	f107 0314 	add.w	r3, r7, #20
 80028ea:	4619      	mov	r1, r3
 80028ec:	480b      	ldr	r0, [pc, #44]	; (800291c <HAL_ADC_MspInit+0xb8>)
 80028ee:	f000 ff77 	bl	80037e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VO_SENSE_Pin|VI_SENSE_Pin;
 80028f2:	2303      	movs	r3, #3
 80028f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80028f6:	2303      	movs	r3, #3
 80028f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028fa:	2300      	movs	r3, #0
 80028fc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028fe:	f107 0314 	add.w	r3, r7, #20
 8002902:	4619      	mov	r1, r3
 8002904:	4806      	ldr	r0, [pc, #24]	; (8002920 <HAL_ADC_MspInit+0xbc>)
 8002906:	f000 ff6b 	bl	80037e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800290a:	bf00      	nop
 800290c:	3728      	adds	r7, #40	; 0x28
 800290e:	46bd      	mov	sp, r7
 8002910:	bd80      	pop	{r7, pc}
 8002912:	bf00      	nop
 8002914:	40012000 	.word	0x40012000
 8002918:	40023800 	.word	0x40023800
 800291c:	40020800 	.word	0x40020800
 8002920:	40020000 	.word	0x40020000

08002924 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b08a      	sub	sp, #40	; 0x28
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800292c:	f107 0314 	add.w	r3, r7, #20
 8002930:	2200      	movs	r2, #0
 8002932:	601a      	str	r2, [r3, #0]
 8002934:	605a      	str	r2, [r3, #4]
 8002936:	609a      	str	r2, [r3, #8]
 8002938:	60da      	str	r2, [r3, #12]
 800293a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4a19      	ldr	r2, [pc, #100]	; (80029a8 <HAL_I2C_MspInit+0x84>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d12b      	bne.n	800299e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002946:	2300      	movs	r3, #0
 8002948:	613b      	str	r3, [r7, #16]
 800294a:	4b18      	ldr	r3, [pc, #96]	; (80029ac <HAL_I2C_MspInit+0x88>)
 800294c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800294e:	4a17      	ldr	r2, [pc, #92]	; (80029ac <HAL_I2C_MspInit+0x88>)
 8002950:	f043 0302 	orr.w	r3, r3, #2
 8002954:	6313      	str	r3, [r2, #48]	; 0x30
 8002956:	4b15      	ldr	r3, [pc, #84]	; (80029ac <HAL_I2C_MspInit+0x88>)
 8002958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800295a:	f003 0302 	and.w	r3, r3, #2
 800295e:	613b      	str	r3, [r7, #16]
 8002960:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002962:	23c0      	movs	r3, #192	; 0xc0
 8002964:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002966:	2312      	movs	r3, #18
 8002968:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800296a:	2301      	movs	r3, #1
 800296c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800296e:	2303      	movs	r3, #3
 8002970:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002972:	2304      	movs	r3, #4
 8002974:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002976:	f107 0314 	add.w	r3, r7, #20
 800297a:	4619      	mov	r1, r3
 800297c:	480c      	ldr	r0, [pc, #48]	; (80029b0 <HAL_I2C_MspInit+0x8c>)
 800297e:	f000 ff2f 	bl	80037e0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002982:	2300      	movs	r3, #0
 8002984:	60fb      	str	r3, [r7, #12]
 8002986:	4b09      	ldr	r3, [pc, #36]	; (80029ac <HAL_I2C_MspInit+0x88>)
 8002988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800298a:	4a08      	ldr	r2, [pc, #32]	; (80029ac <HAL_I2C_MspInit+0x88>)
 800298c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002990:	6413      	str	r3, [r2, #64]	; 0x40
 8002992:	4b06      	ldr	r3, [pc, #24]	; (80029ac <HAL_I2C_MspInit+0x88>)
 8002994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002996:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800299a:	60fb      	str	r3, [r7, #12]
 800299c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800299e:	bf00      	nop
 80029a0:	3728      	adds	r7, #40	; 0x28
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bd80      	pop	{r7, pc}
 80029a6:	bf00      	nop
 80029a8:	40005400 	.word	0x40005400
 80029ac:	40023800 	.word	0x40023800
 80029b0:	40020400 	.word	0x40020400

080029b4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80029b4:	b480      	push	{r7}
 80029b6:	b085      	sub	sp, #20
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM10)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4a0b      	ldr	r2, [pc, #44]	; (80029f0 <HAL_TIM_Base_MspInit+0x3c>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d10d      	bne.n	80029e2 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 80029c6:	2300      	movs	r3, #0
 80029c8:	60fb      	str	r3, [r7, #12]
 80029ca:	4b0a      	ldr	r3, [pc, #40]	; (80029f4 <HAL_TIM_Base_MspInit+0x40>)
 80029cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029ce:	4a09      	ldr	r2, [pc, #36]	; (80029f4 <HAL_TIM_Base_MspInit+0x40>)
 80029d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029d4:	6453      	str	r3, [r2, #68]	; 0x44
 80029d6:	4b07      	ldr	r3, [pc, #28]	; (80029f4 <HAL_TIM_Base_MspInit+0x40>)
 80029d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029de:	60fb      	str	r3, [r7, #12]
 80029e0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 80029e2:	bf00      	nop
 80029e4:	3714      	adds	r7, #20
 80029e6:	46bd      	mov	sp, r7
 80029e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ec:	4770      	bx	lr
 80029ee:	bf00      	nop
 80029f0:	40014400 	.word	0x40014400
 80029f4:	40023800 	.word	0x40023800

080029f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b08a      	sub	sp, #40	; 0x28
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a00:	f107 0314 	add.w	r3, r7, #20
 8002a04:	2200      	movs	r2, #0
 8002a06:	601a      	str	r2, [r3, #0]
 8002a08:	605a      	str	r2, [r3, #4]
 8002a0a:	609a      	str	r2, [r3, #8]
 8002a0c:	60da      	str	r2, [r3, #12]
 8002a0e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4a19      	ldr	r2, [pc, #100]	; (8002a7c <HAL_UART_MspInit+0x84>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d12b      	bne.n	8002a72 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	613b      	str	r3, [r7, #16]
 8002a1e:	4b18      	ldr	r3, [pc, #96]	; (8002a80 <HAL_UART_MspInit+0x88>)
 8002a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a22:	4a17      	ldr	r2, [pc, #92]	; (8002a80 <HAL_UART_MspInit+0x88>)
 8002a24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a28:	6413      	str	r3, [r2, #64]	; 0x40
 8002a2a:	4b15      	ldr	r3, [pc, #84]	; (8002a80 <HAL_UART_MspInit+0x88>)
 8002a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a32:	613b      	str	r3, [r7, #16]
 8002a34:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a36:	2300      	movs	r3, #0
 8002a38:	60fb      	str	r3, [r7, #12]
 8002a3a:	4b11      	ldr	r3, [pc, #68]	; (8002a80 <HAL_UART_MspInit+0x88>)
 8002a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a3e:	4a10      	ldr	r2, [pc, #64]	; (8002a80 <HAL_UART_MspInit+0x88>)
 8002a40:	f043 0301 	orr.w	r3, r3, #1
 8002a44:	6313      	str	r3, [r2, #48]	; 0x30
 8002a46:	4b0e      	ldr	r3, [pc, #56]	; (8002a80 <HAL_UART_MspInit+0x88>)
 8002a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a4a:	f003 0301 	and.w	r3, r3, #1
 8002a4e:	60fb      	str	r3, [r7, #12]
 8002a50:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002a52:	230c      	movs	r3, #12
 8002a54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a56:	2302      	movs	r3, #2
 8002a58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a5e:	2303      	movs	r3, #3
 8002a60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002a62:	2307      	movs	r3, #7
 8002a64:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a66:	f107 0314 	add.w	r3, r7, #20
 8002a6a:	4619      	mov	r1, r3
 8002a6c:	4805      	ldr	r0, [pc, #20]	; (8002a84 <HAL_UART_MspInit+0x8c>)
 8002a6e:	f000 feb7 	bl	80037e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002a72:	bf00      	nop
 8002a74:	3728      	adds	r7, #40	; 0x28
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}
 8002a7a:	bf00      	nop
 8002a7c:	40004400 	.word	0x40004400
 8002a80:	40023800 	.word	0x40023800
 8002a84:	40020000 	.word	0x40020000

08002a88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002a8c:	e7fe      	b.n	8002a8c <NMI_Handler+0x4>

08002a8e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a8e:	b480      	push	{r7}
 8002a90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002a92:	e7fe      	b.n	8002a92 <HardFault_Handler+0x4>

08002a94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002a94:	b480      	push	{r7}
 8002a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002a98:	e7fe      	b.n	8002a98 <MemManage_Handler+0x4>

08002a9a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002a9a:	b480      	push	{r7}
 8002a9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002a9e:	e7fe      	b.n	8002a9e <BusFault_Handler+0x4>

08002aa0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002aa4:	e7fe      	b.n	8002aa4 <UsageFault_Handler+0x4>

08002aa6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002aa6:	b480      	push	{r7}
 8002aa8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002aaa:	bf00      	nop
 8002aac:	46bd      	mov	sp, r7
 8002aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab2:	4770      	bx	lr

08002ab4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002ab8:	bf00      	nop
 8002aba:	46bd      	mov	sp, r7
 8002abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac0:	4770      	bx	lr

08002ac2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002ac2:	b480      	push	{r7}
 8002ac4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002ac6:	bf00      	nop
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ace:	4770      	bx	lr

08002ad0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002ad4:	f000 f962 	bl	8002d9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002ad8:	bf00      	nop
 8002ada:	bd80      	pop	{r7, pc}

08002adc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8002ae0:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8002ae4:	f001 f84c 	bl	8003b80 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002ae8:	bf00      	nop
 8002aea:	bd80      	pop	{r7, pc}

08002aec <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002aec:	b480      	push	{r7}
 8002aee:	af00      	add	r7, sp, #0
	return 1;
 8002af0:	2301      	movs	r3, #1
}
 8002af2:	4618      	mov	r0, r3
 8002af4:	46bd      	mov	sp, r7
 8002af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afa:	4770      	bx	lr

08002afc <_kill>:

int _kill(int pid, int sig)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b082      	sub	sp, #8
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
 8002b04:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002b06:	f003 f939 	bl	8005d7c <__errno>
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	2216      	movs	r2, #22
 8002b0e:	601a      	str	r2, [r3, #0]
	return -1;
 8002b10:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002b14:	4618      	mov	r0, r3
 8002b16:	3708      	adds	r7, #8
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bd80      	pop	{r7, pc}

08002b1c <_exit>:

void _exit (int status)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b082      	sub	sp, #8
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002b24:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002b28:	6878      	ldr	r0, [r7, #4]
 8002b2a:	f7ff ffe7 	bl	8002afc <_kill>
	while (1) {}		/* Make sure we hang here */
 8002b2e:	e7fe      	b.n	8002b2e <_exit+0x12>

08002b30 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b086      	sub	sp, #24
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	60f8      	str	r0, [r7, #12]
 8002b38:	60b9      	str	r1, [r7, #8]
 8002b3a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	617b      	str	r3, [r7, #20]
 8002b40:	e00a      	b.n	8002b58 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002b42:	f3af 8000 	nop.w
 8002b46:	4601      	mov	r1, r0
 8002b48:	68bb      	ldr	r3, [r7, #8]
 8002b4a:	1c5a      	adds	r2, r3, #1
 8002b4c:	60ba      	str	r2, [r7, #8]
 8002b4e:	b2ca      	uxtb	r2, r1
 8002b50:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b52:	697b      	ldr	r3, [r7, #20]
 8002b54:	3301      	adds	r3, #1
 8002b56:	617b      	str	r3, [r7, #20]
 8002b58:	697a      	ldr	r2, [r7, #20]
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	429a      	cmp	r2, r3
 8002b5e:	dbf0      	blt.n	8002b42 <_read+0x12>
	}

return len;
 8002b60:	687b      	ldr	r3, [r7, #4]
}
 8002b62:	4618      	mov	r0, r3
 8002b64:	3718      	adds	r7, #24
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bd80      	pop	{r7, pc}

08002b6a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002b6a:	b580      	push	{r7, lr}
 8002b6c:	b086      	sub	sp, #24
 8002b6e:	af00      	add	r7, sp, #0
 8002b70:	60f8      	str	r0, [r7, #12]
 8002b72:	60b9      	str	r1, [r7, #8]
 8002b74:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b76:	2300      	movs	r3, #0
 8002b78:	617b      	str	r3, [r7, #20]
 8002b7a:	e009      	b.n	8002b90 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002b7c:	68bb      	ldr	r3, [r7, #8]
 8002b7e:	1c5a      	adds	r2, r3, #1
 8002b80:	60ba      	str	r2, [r7, #8]
 8002b82:	781b      	ldrb	r3, [r3, #0]
 8002b84:	4618      	mov	r0, r3
 8002b86:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b8a:	697b      	ldr	r3, [r7, #20]
 8002b8c:	3301      	adds	r3, #1
 8002b8e:	617b      	str	r3, [r7, #20]
 8002b90:	697a      	ldr	r2, [r7, #20]
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	429a      	cmp	r2, r3
 8002b96:	dbf1      	blt.n	8002b7c <_write+0x12>
	}
	return len;
 8002b98:	687b      	ldr	r3, [r7, #4]
}
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	3718      	adds	r7, #24
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	bd80      	pop	{r7, pc}

08002ba2 <_close>:

int _close(int file)
{
 8002ba2:	b480      	push	{r7}
 8002ba4:	b083      	sub	sp, #12
 8002ba6:	af00      	add	r7, sp, #0
 8002ba8:	6078      	str	r0, [r7, #4]
	return -1;
 8002baa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002bae:	4618      	mov	r0, r3
 8002bb0:	370c      	adds	r7, #12
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb8:	4770      	bx	lr

08002bba <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002bba:	b480      	push	{r7}
 8002bbc:	b083      	sub	sp, #12
 8002bbe:	af00      	add	r7, sp, #0
 8002bc0:	6078      	str	r0, [r7, #4]
 8002bc2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002bca:	605a      	str	r2, [r3, #4]
	return 0;
 8002bcc:	2300      	movs	r3, #0
}
 8002bce:	4618      	mov	r0, r3
 8002bd0:	370c      	adds	r7, #12
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd8:	4770      	bx	lr

08002bda <_isatty>:

int _isatty(int file)
{
 8002bda:	b480      	push	{r7}
 8002bdc:	b083      	sub	sp, #12
 8002bde:	af00      	add	r7, sp, #0
 8002be0:	6078      	str	r0, [r7, #4]
	return 1;
 8002be2:	2301      	movs	r3, #1
}
 8002be4:	4618      	mov	r0, r3
 8002be6:	370c      	adds	r7, #12
 8002be8:	46bd      	mov	sp, r7
 8002bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bee:	4770      	bx	lr

08002bf0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	b085      	sub	sp, #20
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	60f8      	str	r0, [r7, #12]
 8002bf8:	60b9      	str	r1, [r7, #8]
 8002bfa:	607a      	str	r2, [r7, #4]
	return 0;
 8002bfc:	2300      	movs	r3, #0
}
 8002bfe:	4618      	mov	r0, r3
 8002c00:	3714      	adds	r7, #20
 8002c02:	46bd      	mov	sp, r7
 8002c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c08:	4770      	bx	lr
	...

08002c0c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b086      	sub	sp, #24
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002c14:	4a14      	ldr	r2, [pc, #80]	; (8002c68 <_sbrk+0x5c>)
 8002c16:	4b15      	ldr	r3, [pc, #84]	; (8002c6c <_sbrk+0x60>)
 8002c18:	1ad3      	subs	r3, r2, r3
 8002c1a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002c1c:	697b      	ldr	r3, [r7, #20]
 8002c1e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002c20:	4b13      	ldr	r3, [pc, #76]	; (8002c70 <_sbrk+0x64>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d102      	bne.n	8002c2e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002c28:	4b11      	ldr	r3, [pc, #68]	; (8002c70 <_sbrk+0x64>)
 8002c2a:	4a12      	ldr	r2, [pc, #72]	; (8002c74 <_sbrk+0x68>)
 8002c2c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002c2e:	4b10      	ldr	r3, [pc, #64]	; (8002c70 <_sbrk+0x64>)
 8002c30:	681a      	ldr	r2, [r3, #0]
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	4413      	add	r3, r2
 8002c36:	693a      	ldr	r2, [r7, #16]
 8002c38:	429a      	cmp	r2, r3
 8002c3a:	d207      	bcs.n	8002c4c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002c3c:	f003 f89e 	bl	8005d7c <__errno>
 8002c40:	4603      	mov	r3, r0
 8002c42:	220c      	movs	r2, #12
 8002c44:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002c46:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002c4a:	e009      	b.n	8002c60 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002c4c:	4b08      	ldr	r3, [pc, #32]	; (8002c70 <_sbrk+0x64>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002c52:	4b07      	ldr	r3, [pc, #28]	; (8002c70 <_sbrk+0x64>)
 8002c54:	681a      	ldr	r2, [r3, #0]
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	4413      	add	r3, r2
 8002c5a:	4a05      	ldr	r2, [pc, #20]	; (8002c70 <_sbrk+0x64>)
 8002c5c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
}
 8002c60:	4618      	mov	r0, r3
 8002c62:	3718      	adds	r7, #24
 8002c64:	46bd      	mov	sp, r7
 8002c66:	bd80      	pop	{r7, pc}
 8002c68:	20018000 	.word	0x20018000
 8002c6c:	00000400 	.word	0x00000400
 8002c70:	20000614 	.word	0x20000614
 8002c74:	20000760 	.word	0x20000760

08002c78 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002c7c:	4b08      	ldr	r3, [pc, #32]	; (8002ca0 <SystemInit+0x28>)
 8002c7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c82:	4a07      	ldr	r2, [pc, #28]	; (8002ca0 <SystemInit+0x28>)
 8002c84:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002c88:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002c8c:	4b04      	ldr	r3, [pc, #16]	; (8002ca0 <SystemInit+0x28>)
 8002c8e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002c92:	609a      	str	r2, [r3, #8]
#endif
}
 8002c94:	bf00      	nop
 8002c96:	46bd      	mov	sp, r7
 8002c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9c:	4770      	bx	lr
 8002c9e:	bf00      	nop
 8002ca0:	e000ed00 	.word	0xe000ed00

08002ca4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002ca4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002cdc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002ca8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002caa:	e003      	b.n	8002cb4 <LoopCopyDataInit>

08002cac <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002cac:	4b0c      	ldr	r3, [pc, #48]	; (8002ce0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002cae:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002cb0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002cb2:	3104      	adds	r1, #4

08002cb4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002cb4:	480b      	ldr	r0, [pc, #44]	; (8002ce4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002cb6:	4b0c      	ldr	r3, [pc, #48]	; (8002ce8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002cb8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002cba:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002cbc:	d3f6      	bcc.n	8002cac <CopyDataInit>
  ldr  r2, =_sbss
 8002cbe:	4a0b      	ldr	r2, [pc, #44]	; (8002cec <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002cc0:	e002      	b.n	8002cc8 <LoopFillZerobss>

08002cc2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002cc2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002cc4:	f842 3b04 	str.w	r3, [r2], #4

08002cc8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002cc8:	4b09      	ldr	r3, [pc, #36]	; (8002cf0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002cca:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002ccc:	d3f9      	bcc.n	8002cc2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002cce:	f7ff ffd3 	bl	8002c78 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002cd2:	f003 f859 	bl	8005d88 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002cd6:	f7fe fc45 	bl	8001564 <main>
  bx  lr    
 8002cda:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002cdc:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 8002ce0:	0800a7b4 	.word	0x0800a7b4
  ldr  r0, =_sdata
 8002ce4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002ce8:	200001ec 	.word	0x200001ec
  ldr  r2, =_sbss
 8002cec:	200001ec 	.word	0x200001ec
  ldr  r3, = _ebss
 8002cf0:	2000075c 	.word	0x2000075c

08002cf4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002cf4:	e7fe      	b.n	8002cf4 <ADC_IRQHandler>
	...

08002cf8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002cfc:	4b0e      	ldr	r3, [pc, #56]	; (8002d38 <HAL_Init+0x40>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4a0d      	ldr	r2, [pc, #52]	; (8002d38 <HAL_Init+0x40>)
 8002d02:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002d06:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002d08:	4b0b      	ldr	r3, [pc, #44]	; (8002d38 <HAL_Init+0x40>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a0a      	ldr	r2, [pc, #40]	; (8002d38 <HAL_Init+0x40>)
 8002d0e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002d12:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002d14:	4b08      	ldr	r3, [pc, #32]	; (8002d38 <HAL_Init+0x40>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4a07      	ldr	r2, [pc, #28]	; (8002d38 <HAL_Init+0x40>)
 8002d1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d1e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d20:	2003      	movs	r0, #3
 8002d22:	f000 fd1b 	bl	800375c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002d26:	2000      	movs	r0, #0
 8002d28:	f000 f808 	bl	8002d3c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002d2c:	f7ff fd72 	bl	8002814 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002d30:	2300      	movs	r3, #0
}
 8002d32:	4618      	mov	r0, r3
 8002d34:	bd80      	pop	{r7, pc}
 8002d36:	bf00      	nop
 8002d38:	40023c00 	.word	0x40023c00

08002d3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b082      	sub	sp, #8
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002d44:	4b12      	ldr	r3, [pc, #72]	; (8002d90 <HAL_InitTick+0x54>)
 8002d46:	681a      	ldr	r2, [r3, #0]
 8002d48:	4b12      	ldr	r3, [pc, #72]	; (8002d94 <HAL_InitTick+0x58>)
 8002d4a:	781b      	ldrb	r3, [r3, #0]
 8002d4c:	4619      	mov	r1, r3
 8002d4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002d52:	fbb3 f3f1 	udiv	r3, r3, r1
 8002d56:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	f000 fd33 	bl	80037c6 <HAL_SYSTICK_Config>
 8002d60:	4603      	mov	r3, r0
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d001      	beq.n	8002d6a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002d66:	2301      	movs	r3, #1
 8002d68:	e00e      	b.n	8002d88 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2b0f      	cmp	r3, #15
 8002d6e:	d80a      	bhi.n	8002d86 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002d70:	2200      	movs	r2, #0
 8002d72:	6879      	ldr	r1, [r7, #4]
 8002d74:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002d78:	f000 fcfb 	bl	8003772 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002d7c:	4a06      	ldr	r2, [pc, #24]	; (8002d98 <HAL_InitTick+0x5c>)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002d82:	2300      	movs	r3, #0
 8002d84:	e000      	b.n	8002d88 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002d86:	2301      	movs	r3, #1
}
 8002d88:	4618      	mov	r0, r3
 8002d8a:	3708      	adds	r7, #8
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	bd80      	pop	{r7, pc}
 8002d90:	20000010 	.word	0x20000010
 8002d94:	20000018 	.word	0x20000018
 8002d98:	20000014 	.word	0x20000014

08002d9c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002da0:	4b06      	ldr	r3, [pc, #24]	; (8002dbc <HAL_IncTick+0x20>)
 8002da2:	781b      	ldrb	r3, [r3, #0]
 8002da4:	461a      	mov	r2, r3
 8002da6:	4b06      	ldr	r3, [pc, #24]	; (8002dc0 <HAL_IncTick+0x24>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4413      	add	r3, r2
 8002dac:	4a04      	ldr	r2, [pc, #16]	; (8002dc0 <HAL_IncTick+0x24>)
 8002dae:	6013      	str	r3, [r2, #0]
}
 8002db0:	bf00      	nop
 8002db2:	46bd      	mov	sp, r7
 8002db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db8:	4770      	bx	lr
 8002dba:	bf00      	nop
 8002dbc:	20000018 	.word	0x20000018
 8002dc0:	20000748 	.word	0x20000748

08002dc4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	af00      	add	r7, sp, #0
  return uwTick;
 8002dc8:	4b03      	ldr	r3, [pc, #12]	; (8002dd8 <HAL_GetTick+0x14>)
 8002dca:	681b      	ldr	r3, [r3, #0]
}
 8002dcc:	4618      	mov	r0, r3
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd4:	4770      	bx	lr
 8002dd6:	bf00      	nop
 8002dd8:	20000748 	.word	0x20000748

08002ddc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b084      	sub	sp, #16
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002de4:	f7ff ffee 	bl	8002dc4 <HAL_GetTick>
 8002de8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002df4:	d005      	beq.n	8002e02 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002df6:	4b0a      	ldr	r3, [pc, #40]	; (8002e20 <HAL_Delay+0x44>)
 8002df8:	781b      	ldrb	r3, [r3, #0]
 8002dfa:	461a      	mov	r2, r3
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	4413      	add	r3, r2
 8002e00:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002e02:	bf00      	nop
 8002e04:	f7ff ffde 	bl	8002dc4 <HAL_GetTick>
 8002e08:	4602      	mov	r2, r0
 8002e0a:	68bb      	ldr	r3, [r7, #8]
 8002e0c:	1ad3      	subs	r3, r2, r3
 8002e0e:	68fa      	ldr	r2, [r7, #12]
 8002e10:	429a      	cmp	r2, r3
 8002e12:	d8f7      	bhi.n	8002e04 <HAL_Delay+0x28>
  {
  }
}
 8002e14:	bf00      	nop
 8002e16:	bf00      	nop
 8002e18:	3710      	adds	r7, #16
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bd80      	pop	{r7, pc}
 8002e1e:	bf00      	nop
 8002e20:	20000018 	.word	0x20000018

08002e24 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b084      	sub	sp, #16
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d101      	bne.n	8002e3a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002e36:	2301      	movs	r3, #1
 8002e38:	e033      	b.n	8002ea2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d109      	bne.n	8002e56 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002e42:	6878      	ldr	r0, [r7, #4]
 8002e44:	f7ff fd0e 	bl	8002864 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2200      	movs	r2, #0
 8002e52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e5a:	f003 0310 	and.w	r3, r3, #16
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d118      	bne.n	8002e94 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e66:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002e6a:	f023 0302 	bic.w	r3, r3, #2
 8002e6e:	f043 0202 	orr.w	r2, r3, #2
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002e76:	6878      	ldr	r0, [r7, #4]
 8002e78:	f000 faa4 	bl	80033c4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2200      	movs	r2, #0
 8002e80:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e86:	f023 0303 	bic.w	r3, r3, #3
 8002e8a:	f043 0201 	orr.w	r2, r3, #1
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	641a      	str	r2, [r3, #64]	; 0x40
 8002e92:	e001      	b.n	8002e98 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002e94:	2301      	movs	r3, #1
 8002e96:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002ea0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	3710      	adds	r7, #16
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bd80      	pop	{r7, pc}
	...

08002eac <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002eac:	b480      	push	{r7}
 8002eae:	b085      	sub	sp, #20
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ebe:	2b01      	cmp	r3, #1
 8002ec0:	d101      	bne.n	8002ec6 <HAL_ADC_Start+0x1a>
 8002ec2:	2302      	movs	r3, #2
 8002ec4:	e08a      	b.n	8002fdc <HAL_ADC_Start+0x130>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2201      	movs	r2, #1
 8002eca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	689b      	ldr	r3, [r3, #8]
 8002ed4:	f003 0301 	and.w	r3, r3, #1
 8002ed8:	2b01      	cmp	r3, #1
 8002eda:	d018      	beq.n	8002f0e <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	689a      	ldr	r2, [r3, #8]
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f042 0201 	orr.w	r2, r2, #1
 8002eea:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002eec:	4b3e      	ldr	r3, [pc, #248]	; (8002fe8 <HAL_ADC_Start+0x13c>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4a3e      	ldr	r2, [pc, #248]	; (8002fec <HAL_ADC_Start+0x140>)
 8002ef2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ef6:	0c9a      	lsrs	r2, r3, #18
 8002ef8:	4613      	mov	r3, r2
 8002efa:	005b      	lsls	r3, r3, #1
 8002efc:	4413      	add	r3, r2
 8002efe:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002f00:	e002      	b.n	8002f08 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002f02:	68bb      	ldr	r3, [r7, #8]
 8002f04:	3b01      	subs	r3, #1
 8002f06:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002f08:	68bb      	ldr	r3, [r7, #8]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d1f9      	bne.n	8002f02 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	689b      	ldr	r3, [r3, #8]
 8002f14:	f003 0301 	and.w	r3, r3, #1
 8002f18:	2b01      	cmp	r3, #1
 8002f1a:	d15e      	bne.n	8002fda <HAL_ADC_Start+0x12e>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f20:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002f24:	f023 0301 	bic.w	r3, r3, #1
 8002f28:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	685b      	ldr	r3, [r3, #4]
 8002f36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d007      	beq.n	8002f4e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f42:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002f46:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f52:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f5a:	d106      	bne.n	8002f6a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f60:	f023 0206 	bic.w	r2, r3, #6
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	645a      	str	r2, [r3, #68]	; 0x44
 8002f68:	e002      	b.n	8002f70 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2200      	movs	r2, #0
 8002f74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002f78:	4b1d      	ldr	r3, [pc, #116]	; (8002ff0 <HAL_ADC_Start+0x144>)
 8002f7a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002f84:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	f003 031f 	and.w	r3, r3, #31
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d10f      	bne.n	8002fb2 <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	689b      	ldr	r3, [r3, #8]
 8002f98:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d11c      	bne.n	8002fda <HAL_ADC_Start+0x12e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	689a      	ldr	r2, [r3, #8]
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002fae:	609a      	str	r2, [r3, #8]
 8002fb0:	e013      	b.n	8002fda <HAL_ADC_Start+0x12e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4a0f      	ldr	r2, [pc, #60]	; (8002ff4 <HAL_ADC_Start+0x148>)
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d10e      	bne.n	8002fda <HAL_ADC_Start+0x12e>
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	689b      	ldr	r3, [r3, #8]
 8002fc2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d107      	bne.n	8002fda <HAL_ADC_Start+0x12e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	689a      	ldr	r2, [r3, #8]
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002fd8:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8002fda:	2300      	movs	r3, #0
}
 8002fdc:	4618      	mov	r0, r3
 8002fde:	3714      	adds	r7, #20
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe6:	4770      	bx	lr
 8002fe8:	20000010 	.word	0x20000010
 8002fec:	431bde83 	.word	0x431bde83
 8002ff0:	40012300 	.word	0x40012300
 8002ff4:	40012000 	.word	0x40012000

08002ff8 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	b083      	sub	sp, #12
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003006:	2b01      	cmp	r3, #1
 8003008:	d101      	bne.n	800300e <HAL_ADC_Stop+0x16>
 800300a:	2302      	movs	r3, #2
 800300c:	e021      	b.n	8003052 <HAL_ADC_Stop+0x5a>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2201      	movs	r2, #1
 8003012:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	689a      	ldr	r2, [r3, #8]
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f022 0201 	bic.w	r2, r2, #1
 8003024:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	689b      	ldr	r3, [r3, #8]
 800302c:	f003 0301 	and.w	r3, r3, #1
 8003030:	2b00      	cmp	r3, #0
 8003032:	d109      	bne.n	8003048 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003038:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800303c:	f023 0301 	bic.w	r3, r3, #1
 8003040:	f043 0201 	orr.w	r2, r3, #1
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2200      	movs	r2, #0
 800304c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003050:	2300      	movs	r3, #0
}
 8003052:	4618      	mov	r0, r3
 8003054:	370c      	adds	r7, #12
 8003056:	46bd      	mov	sp, r7
 8003058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305c:	4770      	bx	lr

0800305e <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800305e:	b580      	push	{r7, lr}
 8003060:	b084      	sub	sp, #16
 8003062:	af00      	add	r7, sp, #0
 8003064:	6078      	str	r0, [r7, #4]
 8003066:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003068:	2300      	movs	r3, #0
 800306a:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	689b      	ldr	r3, [r3, #8]
 8003072:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003076:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800307a:	d113      	bne.n	80030a4 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	689b      	ldr	r3, [r3, #8]
 8003082:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003086:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800308a:	d10b      	bne.n	80030a4 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003090:	f043 0220 	orr.w	r2, r3, #32
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2200      	movs	r2, #0
 800309c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80030a0:	2301      	movs	r3, #1
 80030a2:	e05c      	b.n	800315e <HAL_ADC_PollForConversion+0x100>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80030a4:	f7ff fe8e 	bl	8002dc4 <HAL_GetTick>
 80030a8:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80030aa:	e01a      	b.n	80030e2 <HAL_ADC_PollForConversion+0x84>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80030b2:	d016      	beq.n	80030e2 <HAL_ADC_PollForConversion+0x84>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d007      	beq.n	80030ca <HAL_ADC_PollForConversion+0x6c>
 80030ba:	f7ff fe83 	bl	8002dc4 <HAL_GetTick>
 80030be:	4602      	mov	r2, r0
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	1ad3      	subs	r3, r2, r3
 80030c4:	683a      	ldr	r2, [r7, #0]
 80030c6:	429a      	cmp	r2, r3
 80030c8:	d20b      	bcs.n	80030e2 <HAL_ADC_PollForConversion+0x84>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ce:	f043 0204 	orr.w	r2, r3, #4
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2200      	movs	r2, #0
 80030da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 80030de:	2303      	movs	r3, #3
 80030e0:	e03d      	b.n	800315e <HAL_ADC_PollForConversion+0x100>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f003 0302 	and.w	r3, r3, #2
 80030ec:	2b02      	cmp	r3, #2
 80030ee:	d1dd      	bne.n	80030ac <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f06f 0212 	mvn.w	r2, #18
 80030f8:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030fe:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	689b      	ldr	r3, [r3, #8]
 800310c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003110:	2b00      	cmp	r3, #0
 8003112:	d123      	bne.n	800315c <HAL_ADC_PollForConversion+0xfe>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003118:	2b00      	cmp	r3, #0
 800311a:	d11f      	bne.n	800315c <HAL_ADC_PollForConversion+0xfe>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003122:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003126:	2b00      	cmp	r3, #0
 8003128:	d006      	beq.n	8003138 <HAL_ADC_PollForConversion+0xda>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	689b      	ldr	r3, [r3, #8]
 8003130:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003134:	2b00      	cmp	r3, #0
 8003136:	d111      	bne.n	800315c <HAL_ADC_PollForConversion+0xfe>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800313c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003148:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800314c:	2b00      	cmp	r3, #0
 800314e:	d105      	bne.n	800315c <HAL_ADC_PollForConversion+0xfe>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003154:	f043 0201 	orr.w	r2, r3, #1
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800315c:	2300      	movs	r3, #0
}
 800315e:	4618      	mov	r0, r3
 8003160:	3710      	adds	r7, #16
 8003162:	46bd      	mov	sp, r7
 8003164:	bd80      	pop	{r7, pc}

08003166 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8003166:	b480      	push	{r7}
 8003168:	b083      	sub	sp, #12
 800316a:	af00      	add	r7, sp, #0
 800316c:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8003174:	4618      	mov	r0, r3
 8003176:	370c      	adds	r7, #12
 8003178:	46bd      	mov	sp, r7
 800317a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317e:	4770      	bx	lr

08003180 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003180:	b480      	push	{r7}
 8003182:	b085      	sub	sp, #20
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
 8003188:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800318a:	2300      	movs	r3, #0
 800318c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003194:	2b01      	cmp	r3, #1
 8003196:	d101      	bne.n	800319c <HAL_ADC_ConfigChannel+0x1c>
 8003198:	2302      	movs	r3, #2
 800319a:	e105      	b.n	80033a8 <HAL_ADC_ConfigChannel+0x228>
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2201      	movs	r2, #1
 80031a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	2b09      	cmp	r3, #9
 80031aa:	d925      	bls.n	80031f8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	68d9      	ldr	r1, [r3, #12]
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	b29b      	uxth	r3, r3
 80031b8:	461a      	mov	r2, r3
 80031ba:	4613      	mov	r3, r2
 80031bc:	005b      	lsls	r3, r3, #1
 80031be:	4413      	add	r3, r2
 80031c0:	3b1e      	subs	r3, #30
 80031c2:	2207      	movs	r2, #7
 80031c4:	fa02 f303 	lsl.w	r3, r2, r3
 80031c8:	43da      	mvns	r2, r3
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	400a      	ands	r2, r1
 80031d0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	68d9      	ldr	r1, [r3, #12]
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	689a      	ldr	r2, [r3, #8]
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	b29b      	uxth	r3, r3
 80031e2:	4618      	mov	r0, r3
 80031e4:	4603      	mov	r3, r0
 80031e6:	005b      	lsls	r3, r3, #1
 80031e8:	4403      	add	r3, r0
 80031ea:	3b1e      	subs	r3, #30
 80031ec:	409a      	lsls	r2, r3
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	430a      	orrs	r2, r1
 80031f4:	60da      	str	r2, [r3, #12]
 80031f6:	e022      	b.n	800323e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	6919      	ldr	r1, [r3, #16]
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	b29b      	uxth	r3, r3
 8003204:	461a      	mov	r2, r3
 8003206:	4613      	mov	r3, r2
 8003208:	005b      	lsls	r3, r3, #1
 800320a:	4413      	add	r3, r2
 800320c:	2207      	movs	r2, #7
 800320e:	fa02 f303 	lsl.w	r3, r2, r3
 8003212:	43da      	mvns	r2, r3
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	400a      	ands	r2, r1
 800321a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	6919      	ldr	r1, [r3, #16]
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	689a      	ldr	r2, [r3, #8]
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	b29b      	uxth	r3, r3
 800322c:	4618      	mov	r0, r3
 800322e:	4603      	mov	r3, r0
 8003230:	005b      	lsls	r3, r3, #1
 8003232:	4403      	add	r3, r0
 8003234:	409a      	lsls	r2, r3
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	430a      	orrs	r2, r1
 800323c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	685b      	ldr	r3, [r3, #4]
 8003242:	2b06      	cmp	r3, #6
 8003244:	d824      	bhi.n	8003290 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	685a      	ldr	r2, [r3, #4]
 8003250:	4613      	mov	r3, r2
 8003252:	009b      	lsls	r3, r3, #2
 8003254:	4413      	add	r3, r2
 8003256:	3b05      	subs	r3, #5
 8003258:	221f      	movs	r2, #31
 800325a:	fa02 f303 	lsl.w	r3, r2, r3
 800325e:	43da      	mvns	r2, r3
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	400a      	ands	r2, r1
 8003266:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	b29b      	uxth	r3, r3
 8003274:	4618      	mov	r0, r3
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	685a      	ldr	r2, [r3, #4]
 800327a:	4613      	mov	r3, r2
 800327c:	009b      	lsls	r3, r3, #2
 800327e:	4413      	add	r3, r2
 8003280:	3b05      	subs	r3, #5
 8003282:	fa00 f203 	lsl.w	r2, r0, r3
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	430a      	orrs	r2, r1
 800328c:	635a      	str	r2, [r3, #52]	; 0x34
 800328e:	e04c      	b.n	800332a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	2b0c      	cmp	r3, #12
 8003296:	d824      	bhi.n	80032e2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	685a      	ldr	r2, [r3, #4]
 80032a2:	4613      	mov	r3, r2
 80032a4:	009b      	lsls	r3, r3, #2
 80032a6:	4413      	add	r3, r2
 80032a8:	3b23      	subs	r3, #35	; 0x23
 80032aa:	221f      	movs	r2, #31
 80032ac:	fa02 f303 	lsl.w	r3, r2, r3
 80032b0:	43da      	mvns	r2, r3
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	400a      	ands	r2, r1
 80032b8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	b29b      	uxth	r3, r3
 80032c6:	4618      	mov	r0, r3
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	685a      	ldr	r2, [r3, #4]
 80032cc:	4613      	mov	r3, r2
 80032ce:	009b      	lsls	r3, r3, #2
 80032d0:	4413      	add	r3, r2
 80032d2:	3b23      	subs	r3, #35	; 0x23
 80032d4:	fa00 f203 	lsl.w	r2, r0, r3
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	430a      	orrs	r2, r1
 80032de:	631a      	str	r2, [r3, #48]	; 0x30
 80032e0:	e023      	b.n	800332a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	685a      	ldr	r2, [r3, #4]
 80032ec:	4613      	mov	r3, r2
 80032ee:	009b      	lsls	r3, r3, #2
 80032f0:	4413      	add	r3, r2
 80032f2:	3b41      	subs	r3, #65	; 0x41
 80032f4:	221f      	movs	r2, #31
 80032f6:	fa02 f303 	lsl.w	r3, r2, r3
 80032fa:	43da      	mvns	r2, r3
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	400a      	ands	r2, r1
 8003302:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	b29b      	uxth	r3, r3
 8003310:	4618      	mov	r0, r3
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	685a      	ldr	r2, [r3, #4]
 8003316:	4613      	mov	r3, r2
 8003318:	009b      	lsls	r3, r3, #2
 800331a:	4413      	add	r3, r2
 800331c:	3b41      	subs	r3, #65	; 0x41
 800331e:	fa00 f203 	lsl.w	r2, r0, r3
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	430a      	orrs	r2, r1
 8003328:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800332a:	4b22      	ldr	r3, [pc, #136]	; (80033b4 <HAL_ADC_ConfigChannel+0x234>)
 800332c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4a21      	ldr	r2, [pc, #132]	; (80033b8 <HAL_ADC_ConfigChannel+0x238>)
 8003334:	4293      	cmp	r3, r2
 8003336:	d109      	bne.n	800334c <HAL_ADC_ConfigChannel+0x1cc>
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	2b12      	cmp	r3, #18
 800333e:	d105      	bne.n	800334c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4a19      	ldr	r2, [pc, #100]	; (80033b8 <HAL_ADC_ConfigChannel+0x238>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d123      	bne.n	800339e <HAL_ADC_ConfigChannel+0x21e>
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	2b10      	cmp	r3, #16
 800335c:	d003      	beq.n	8003366 <HAL_ADC_ConfigChannel+0x1e6>
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	2b11      	cmp	r3, #17
 8003364:	d11b      	bne.n	800339e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	2b10      	cmp	r3, #16
 8003378:	d111      	bne.n	800339e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800337a:	4b10      	ldr	r3, [pc, #64]	; (80033bc <HAL_ADC_ConfigChannel+0x23c>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4a10      	ldr	r2, [pc, #64]	; (80033c0 <HAL_ADC_ConfigChannel+0x240>)
 8003380:	fba2 2303 	umull	r2, r3, r2, r3
 8003384:	0c9a      	lsrs	r2, r3, #18
 8003386:	4613      	mov	r3, r2
 8003388:	009b      	lsls	r3, r3, #2
 800338a:	4413      	add	r3, r2
 800338c:	005b      	lsls	r3, r3, #1
 800338e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003390:	e002      	b.n	8003398 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8003392:	68bb      	ldr	r3, [r7, #8]
 8003394:	3b01      	subs	r3, #1
 8003396:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003398:	68bb      	ldr	r3, [r7, #8]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d1f9      	bne.n	8003392 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2200      	movs	r2, #0
 80033a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80033a6:	2300      	movs	r3, #0
}
 80033a8:	4618      	mov	r0, r3
 80033aa:	3714      	adds	r7, #20
 80033ac:	46bd      	mov	sp, r7
 80033ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b2:	4770      	bx	lr
 80033b4:	40012300 	.word	0x40012300
 80033b8:	40012000 	.word	0x40012000
 80033bc:	20000010 	.word	0x20000010
 80033c0:	431bde83 	.word	0x431bde83

080033c4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80033c4:	b480      	push	{r7}
 80033c6:	b085      	sub	sp, #20
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80033cc:	4b79      	ldr	r3, [pc, #484]	; (80035b4 <ADC_Init+0x1f0>)
 80033ce:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	685a      	ldr	r2, [r3, #4]
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	431a      	orrs	r2, r3
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	685a      	ldr	r2, [r3, #4]
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80033f8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	6859      	ldr	r1, [r3, #4]
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	691b      	ldr	r3, [r3, #16]
 8003404:	021a      	lsls	r2, r3, #8
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	430a      	orrs	r2, r1
 800340c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	685a      	ldr	r2, [r3, #4]
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800341c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	6859      	ldr	r1, [r3, #4]
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	689a      	ldr	r2, [r3, #8]
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	430a      	orrs	r2, r1
 800342e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	689a      	ldr	r2, [r3, #8]
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800343e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	6899      	ldr	r1, [r3, #8]
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	68da      	ldr	r2, [r3, #12]
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	430a      	orrs	r2, r1
 8003450:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003456:	4a58      	ldr	r2, [pc, #352]	; (80035b8 <ADC_Init+0x1f4>)
 8003458:	4293      	cmp	r3, r2
 800345a:	d022      	beq.n	80034a2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	689a      	ldr	r2, [r3, #8]
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800346a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	6899      	ldr	r1, [r3, #8]
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	430a      	orrs	r2, r1
 800347c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	689a      	ldr	r2, [r3, #8]
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800348c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	6899      	ldr	r1, [r3, #8]
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	430a      	orrs	r2, r1
 800349e:	609a      	str	r2, [r3, #8]
 80034a0:	e00f      	b.n	80034c2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	689a      	ldr	r2, [r3, #8]
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80034b0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	689a      	ldr	r2, [r3, #8]
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80034c0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	689a      	ldr	r2, [r3, #8]
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f022 0202 	bic.w	r2, r2, #2
 80034d0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	6899      	ldr	r1, [r3, #8]
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	7e1b      	ldrb	r3, [r3, #24]
 80034dc:	005a      	lsls	r2, r3, #1
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	430a      	orrs	r2, r1
 80034e4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d01b      	beq.n	8003528 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	685a      	ldr	r2, [r3, #4]
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80034fe:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	685a      	ldr	r2, [r3, #4]
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800350e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	6859      	ldr	r1, [r3, #4]
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800351a:	3b01      	subs	r3, #1
 800351c:	035a      	lsls	r2, r3, #13
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	430a      	orrs	r2, r1
 8003524:	605a      	str	r2, [r3, #4]
 8003526:	e007      	b.n	8003538 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	685a      	ldr	r2, [r3, #4]
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003536:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003546:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	69db      	ldr	r3, [r3, #28]
 8003552:	3b01      	subs	r3, #1
 8003554:	051a      	lsls	r2, r3, #20
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	430a      	orrs	r2, r1
 800355c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	689a      	ldr	r2, [r3, #8]
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800356c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	6899      	ldr	r1, [r3, #8]
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800357a:	025a      	lsls	r2, r3, #9
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	430a      	orrs	r2, r1
 8003582:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	689a      	ldr	r2, [r3, #8]
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003592:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	6899      	ldr	r1, [r3, #8]
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	695b      	ldr	r3, [r3, #20]
 800359e:	029a      	lsls	r2, r3, #10
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	430a      	orrs	r2, r1
 80035a6:	609a      	str	r2, [r3, #8]
}
 80035a8:	bf00      	nop
 80035aa:	3714      	adds	r7, #20
 80035ac:	46bd      	mov	sp, r7
 80035ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b2:	4770      	bx	lr
 80035b4:	40012300 	.word	0x40012300
 80035b8:	0f000001 	.word	0x0f000001

080035bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80035bc:	b480      	push	{r7}
 80035be:	b085      	sub	sp, #20
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	f003 0307 	and.w	r3, r3, #7
 80035ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80035cc:	4b0c      	ldr	r3, [pc, #48]	; (8003600 <__NVIC_SetPriorityGrouping+0x44>)
 80035ce:	68db      	ldr	r3, [r3, #12]
 80035d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80035d2:	68ba      	ldr	r2, [r7, #8]
 80035d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80035d8:	4013      	ands	r3, r2
 80035da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80035e0:	68bb      	ldr	r3, [r7, #8]
 80035e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80035e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80035e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80035ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80035ee:	4a04      	ldr	r2, [pc, #16]	; (8003600 <__NVIC_SetPriorityGrouping+0x44>)
 80035f0:	68bb      	ldr	r3, [r7, #8]
 80035f2:	60d3      	str	r3, [r2, #12]
}
 80035f4:	bf00      	nop
 80035f6:	3714      	adds	r7, #20
 80035f8:	46bd      	mov	sp, r7
 80035fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fe:	4770      	bx	lr
 8003600:	e000ed00 	.word	0xe000ed00

08003604 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003604:	b480      	push	{r7}
 8003606:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003608:	4b04      	ldr	r3, [pc, #16]	; (800361c <__NVIC_GetPriorityGrouping+0x18>)
 800360a:	68db      	ldr	r3, [r3, #12]
 800360c:	0a1b      	lsrs	r3, r3, #8
 800360e:	f003 0307 	and.w	r3, r3, #7
}
 8003612:	4618      	mov	r0, r3
 8003614:	46bd      	mov	sp, r7
 8003616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361a:	4770      	bx	lr
 800361c:	e000ed00 	.word	0xe000ed00

08003620 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003620:	b480      	push	{r7}
 8003622:	b083      	sub	sp, #12
 8003624:	af00      	add	r7, sp, #0
 8003626:	4603      	mov	r3, r0
 8003628:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800362a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800362e:	2b00      	cmp	r3, #0
 8003630:	db0b      	blt.n	800364a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003632:	79fb      	ldrb	r3, [r7, #7]
 8003634:	f003 021f 	and.w	r2, r3, #31
 8003638:	4907      	ldr	r1, [pc, #28]	; (8003658 <__NVIC_EnableIRQ+0x38>)
 800363a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800363e:	095b      	lsrs	r3, r3, #5
 8003640:	2001      	movs	r0, #1
 8003642:	fa00 f202 	lsl.w	r2, r0, r2
 8003646:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800364a:	bf00      	nop
 800364c:	370c      	adds	r7, #12
 800364e:	46bd      	mov	sp, r7
 8003650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003654:	4770      	bx	lr
 8003656:	bf00      	nop
 8003658:	e000e100 	.word	0xe000e100

0800365c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800365c:	b480      	push	{r7}
 800365e:	b083      	sub	sp, #12
 8003660:	af00      	add	r7, sp, #0
 8003662:	4603      	mov	r3, r0
 8003664:	6039      	str	r1, [r7, #0]
 8003666:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003668:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800366c:	2b00      	cmp	r3, #0
 800366e:	db0a      	blt.n	8003686 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	b2da      	uxtb	r2, r3
 8003674:	490c      	ldr	r1, [pc, #48]	; (80036a8 <__NVIC_SetPriority+0x4c>)
 8003676:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800367a:	0112      	lsls	r2, r2, #4
 800367c:	b2d2      	uxtb	r2, r2
 800367e:	440b      	add	r3, r1
 8003680:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003684:	e00a      	b.n	800369c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	b2da      	uxtb	r2, r3
 800368a:	4908      	ldr	r1, [pc, #32]	; (80036ac <__NVIC_SetPriority+0x50>)
 800368c:	79fb      	ldrb	r3, [r7, #7]
 800368e:	f003 030f 	and.w	r3, r3, #15
 8003692:	3b04      	subs	r3, #4
 8003694:	0112      	lsls	r2, r2, #4
 8003696:	b2d2      	uxtb	r2, r2
 8003698:	440b      	add	r3, r1
 800369a:	761a      	strb	r2, [r3, #24]
}
 800369c:	bf00      	nop
 800369e:	370c      	adds	r7, #12
 80036a0:	46bd      	mov	sp, r7
 80036a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a6:	4770      	bx	lr
 80036a8:	e000e100 	.word	0xe000e100
 80036ac:	e000ed00 	.word	0xe000ed00

080036b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80036b0:	b480      	push	{r7}
 80036b2:	b089      	sub	sp, #36	; 0x24
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	60f8      	str	r0, [r7, #12]
 80036b8:	60b9      	str	r1, [r7, #8]
 80036ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	f003 0307 	and.w	r3, r3, #7
 80036c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80036c4:	69fb      	ldr	r3, [r7, #28]
 80036c6:	f1c3 0307 	rsb	r3, r3, #7
 80036ca:	2b04      	cmp	r3, #4
 80036cc:	bf28      	it	cs
 80036ce:	2304      	movcs	r3, #4
 80036d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80036d2:	69fb      	ldr	r3, [r7, #28]
 80036d4:	3304      	adds	r3, #4
 80036d6:	2b06      	cmp	r3, #6
 80036d8:	d902      	bls.n	80036e0 <NVIC_EncodePriority+0x30>
 80036da:	69fb      	ldr	r3, [r7, #28]
 80036dc:	3b03      	subs	r3, #3
 80036de:	e000      	b.n	80036e2 <NVIC_EncodePriority+0x32>
 80036e0:	2300      	movs	r3, #0
 80036e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036e4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80036e8:	69bb      	ldr	r3, [r7, #24]
 80036ea:	fa02 f303 	lsl.w	r3, r2, r3
 80036ee:	43da      	mvns	r2, r3
 80036f0:	68bb      	ldr	r3, [r7, #8]
 80036f2:	401a      	ands	r2, r3
 80036f4:	697b      	ldr	r3, [r7, #20]
 80036f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80036f8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80036fc:	697b      	ldr	r3, [r7, #20]
 80036fe:	fa01 f303 	lsl.w	r3, r1, r3
 8003702:	43d9      	mvns	r1, r3
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003708:	4313      	orrs	r3, r2
         );
}
 800370a:	4618      	mov	r0, r3
 800370c:	3724      	adds	r7, #36	; 0x24
 800370e:	46bd      	mov	sp, r7
 8003710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003714:	4770      	bx	lr
	...

08003718 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b082      	sub	sp, #8
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	3b01      	subs	r3, #1
 8003724:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003728:	d301      	bcc.n	800372e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800372a:	2301      	movs	r3, #1
 800372c:	e00f      	b.n	800374e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800372e:	4a0a      	ldr	r2, [pc, #40]	; (8003758 <SysTick_Config+0x40>)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	3b01      	subs	r3, #1
 8003734:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003736:	210f      	movs	r1, #15
 8003738:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800373c:	f7ff ff8e 	bl	800365c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003740:	4b05      	ldr	r3, [pc, #20]	; (8003758 <SysTick_Config+0x40>)
 8003742:	2200      	movs	r2, #0
 8003744:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003746:	4b04      	ldr	r3, [pc, #16]	; (8003758 <SysTick_Config+0x40>)
 8003748:	2207      	movs	r2, #7
 800374a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800374c:	2300      	movs	r3, #0
}
 800374e:	4618      	mov	r0, r3
 8003750:	3708      	adds	r7, #8
 8003752:	46bd      	mov	sp, r7
 8003754:	bd80      	pop	{r7, pc}
 8003756:	bf00      	nop
 8003758:	e000e010 	.word	0xe000e010

0800375c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b082      	sub	sp, #8
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003764:	6878      	ldr	r0, [r7, #4]
 8003766:	f7ff ff29 	bl	80035bc <__NVIC_SetPriorityGrouping>
}
 800376a:	bf00      	nop
 800376c:	3708      	adds	r7, #8
 800376e:	46bd      	mov	sp, r7
 8003770:	bd80      	pop	{r7, pc}

08003772 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003772:	b580      	push	{r7, lr}
 8003774:	b086      	sub	sp, #24
 8003776:	af00      	add	r7, sp, #0
 8003778:	4603      	mov	r3, r0
 800377a:	60b9      	str	r1, [r7, #8]
 800377c:	607a      	str	r2, [r7, #4]
 800377e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003780:	2300      	movs	r3, #0
 8003782:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003784:	f7ff ff3e 	bl	8003604 <__NVIC_GetPriorityGrouping>
 8003788:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800378a:	687a      	ldr	r2, [r7, #4]
 800378c:	68b9      	ldr	r1, [r7, #8]
 800378e:	6978      	ldr	r0, [r7, #20]
 8003790:	f7ff ff8e 	bl	80036b0 <NVIC_EncodePriority>
 8003794:	4602      	mov	r2, r0
 8003796:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800379a:	4611      	mov	r1, r2
 800379c:	4618      	mov	r0, r3
 800379e:	f7ff ff5d 	bl	800365c <__NVIC_SetPriority>
}
 80037a2:	bf00      	nop
 80037a4:	3718      	adds	r7, #24
 80037a6:	46bd      	mov	sp, r7
 80037a8:	bd80      	pop	{r7, pc}

080037aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80037aa:	b580      	push	{r7, lr}
 80037ac:	b082      	sub	sp, #8
 80037ae:	af00      	add	r7, sp, #0
 80037b0:	4603      	mov	r3, r0
 80037b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80037b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037b8:	4618      	mov	r0, r3
 80037ba:	f7ff ff31 	bl	8003620 <__NVIC_EnableIRQ>
}
 80037be:	bf00      	nop
 80037c0:	3708      	adds	r7, #8
 80037c2:	46bd      	mov	sp, r7
 80037c4:	bd80      	pop	{r7, pc}

080037c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80037c6:	b580      	push	{r7, lr}
 80037c8:	b082      	sub	sp, #8
 80037ca:	af00      	add	r7, sp, #0
 80037cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80037ce:	6878      	ldr	r0, [r7, #4]
 80037d0:	f7ff ffa2 	bl	8003718 <SysTick_Config>
 80037d4:	4603      	mov	r3, r0
}
 80037d6:	4618      	mov	r0, r3
 80037d8:	3708      	adds	r7, #8
 80037da:	46bd      	mov	sp, r7
 80037dc:	bd80      	pop	{r7, pc}
	...

080037e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80037e0:	b480      	push	{r7}
 80037e2:	b089      	sub	sp, #36	; 0x24
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
 80037e8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80037ea:	2300      	movs	r3, #0
 80037ec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80037ee:	2300      	movs	r3, #0
 80037f0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80037f2:	2300      	movs	r3, #0
 80037f4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80037f6:	2300      	movs	r3, #0
 80037f8:	61fb      	str	r3, [r7, #28]
 80037fa:	e159      	b.n	8003ab0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80037fc:	2201      	movs	r2, #1
 80037fe:	69fb      	ldr	r3, [r7, #28]
 8003800:	fa02 f303 	lsl.w	r3, r2, r3
 8003804:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	697a      	ldr	r2, [r7, #20]
 800380c:	4013      	ands	r3, r2
 800380e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003810:	693a      	ldr	r2, [r7, #16]
 8003812:	697b      	ldr	r3, [r7, #20]
 8003814:	429a      	cmp	r2, r3
 8003816:	f040 8148 	bne.w	8003aaa <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	685b      	ldr	r3, [r3, #4]
 800381e:	2b01      	cmp	r3, #1
 8003820:	d00b      	beq.n	800383a <HAL_GPIO_Init+0x5a>
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	2b02      	cmp	r3, #2
 8003828:	d007      	beq.n	800383a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800382e:	2b11      	cmp	r3, #17
 8003830:	d003      	beq.n	800383a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	2b12      	cmp	r3, #18
 8003838:	d130      	bne.n	800389c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	689b      	ldr	r3, [r3, #8]
 800383e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003840:	69fb      	ldr	r3, [r7, #28]
 8003842:	005b      	lsls	r3, r3, #1
 8003844:	2203      	movs	r2, #3
 8003846:	fa02 f303 	lsl.w	r3, r2, r3
 800384a:	43db      	mvns	r3, r3
 800384c:	69ba      	ldr	r2, [r7, #24]
 800384e:	4013      	ands	r3, r2
 8003850:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	68da      	ldr	r2, [r3, #12]
 8003856:	69fb      	ldr	r3, [r7, #28]
 8003858:	005b      	lsls	r3, r3, #1
 800385a:	fa02 f303 	lsl.w	r3, r2, r3
 800385e:	69ba      	ldr	r2, [r7, #24]
 8003860:	4313      	orrs	r3, r2
 8003862:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	69ba      	ldr	r2, [r7, #24]
 8003868:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	685b      	ldr	r3, [r3, #4]
 800386e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003870:	2201      	movs	r2, #1
 8003872:	69fb      	ldr	r3, [r7, #28]
 8003874:	fa02 f303 	lsl.w	r3, r2, r3
 8003878:	43db      	mvns	r3, r3
 800387a:	69ba      	ldr	r2, [r7, #24]
 800387c:	4013      	ands	r3, r2
 800387e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	685b      	ldr	r3, [r3, #4]
 8003884:	091b      	lsrs	r3, r3, #4
 8003886:	f003 0201 	and.w	r2, r3, #1
 800388a:	69fb      	ldr	r3, [r7, #28]
 800388c:	fa02 f303 	lsl.w	r3, r2, r3
 8003890:	69ba      	ldr	r2, [r7, #24]
 8003892:	4313      	orrs	r3, r2
 8003894:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	69ba      	ldr	r2, [r7, #24]
 800389a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	68db      	ldr	r3, [r3, #12]
 80038a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80038a2:	69fb      	ldr	r3, [r7, #28]
 80038a4:	005b      	lsls	r3, r3, #1
 80038a6:	2203      	movs	r2, #3
 80038a8:	fa02 f303 	lsl.w	r3, r2, r3
 80038ac:	43db      	mvns	r3, r3
 80038ae:	69ba      	ldr	r2, [r7, #24]
 80038b0:	4013      	ands	r3, r2
 80038b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	689a      	ldr	r2, [r3, #8]
 80038b8:	69fb      	ldr	r3, [r7, #28]
 80038ba:	005b      	lsls	r3, r3, #1
 80038bc:	fa02 f303 	lsl.w	r3, r2, r3
 80038c0:	69ba      	ldr	r2, [r7, #24]
 80038c2:	4313      	orrs	r3, r2
 80038c4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	69ba      	ldr	r2, [r7, #24]
 80038ca:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	685b      	ldr	r3, [r3, #4]
 80038d0:	2b02      	cmp	r3, #2
 80038d2:	d003      	beq.n	80038dc <HAL_GPIO_Init+0xfc>
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	685b      	ldr	r3, [r3, #4]
 80038d8:	2b12      	cmp	r3, #18
 80038da:	d123      	bne.n	8003924 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80038dc:	69fb      	ldr	r3, [r7, #28]
 80038de:	08da      	lsrs	r2, r3, #3
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	3208      	adds	r2, #8
 80038e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80038e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80038ea:	69fb      	ldr	r3, [r7, #28]
 80038ec:	f003 0307 	and.w	r3, r3, #7
 80038f0:	009b      	lsls	r3, r3, #2
 80038f2:	220f      	movs	r2, #15
 80038f4:	fa02 f303 	lsl.w	r3, r2, r3
 80038f8:	43db      	mvns	r3, r3
 80038fa:	69ba      	ldr	r2, [r7, #24]
 80038fc:	4013      	ands	r3, r2
 80038fe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	691a      	ldr	r2, [r3, #16]
 8003904:	69fb      	ldr	r3, [r7, #28]
 8003906:	f003 0307 	and.w	r3, r3, #7
 800390a:	009b      	lsls	r3, r3, #2
 800390c:	fa02 f303 	lsl.w	r3, r2, r3
 8003910:	69ba      	ldr	r2, [r7, #24]
 8003912:	4313      	orrs	r3, r2
 8003914:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003916:	69fb      	ldr	r3, [r7, #28]
 8003918:	08da      	lsrs	r2, r3, #3
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	3208      	adds	r2, #8
 800391e:	69b9      	ldr	r1, [r7, #24]
 8003920:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800392a:	69fb      	ldr	r3, [r7, #28]
 800392c:	005b      	lsls	r3, r3, #1
 800392e:	2203      	movs	r2, #3
 8003930:	fa02 f303 	lsl.w	r3, r2, r3
 8003934:	43db      	mvns	r3, r3
 8003936:	69ba      	ldr	r2, [r7, #24]
 8003938:	4013      	ands	r3, r2
 800393a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	685b      	ldr	r3, [r3, #4]
 8003940:	f003 0203 	and.w	r2, r3, #3
 8003944:	69fb      	ldr	r3, [r7, #28]
 8003946:	005b      	lsls	r3, r3, #1
 8003948:	fa02 f303 	lsl.w	r3, r2, r3
 800394c:	69ba      	ldr	r2, [r7, #24]
 800394e:	4313      	orrs	r3, r2
 8003950:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	69ba      	ldr	r2, [r7, #24]
 8003956:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003960:	2b00      	cmp	r3, #0
 8003962:	f000 80a2 	beq.w	8003aaa <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003966:	2300      	movs	r3, #0
 8003968:	60fb      	str	r3, [r7, #12]
 800396a:	4b57      	ldr	r3, [pc, #348]	; (8003ac8 <HAL_GPIO_Init+0x2e8>)
 800396c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800396e:	4a56      	ldr	r2, [pc, #344]	; (8003ac8 <HAL_GPIO_Init+0x2e8>)
 8003970:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003974:	6453      	str	r3, [r2, #68]	; 0x44
 8003976:	4b54      	ldr	r3, [pc, #336]	; (8003ac8 <HAL_GPIO_Init+0x2e8>)
 8003978:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800397a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800397e:	60fb      	str	r3, [r7, #12]
 8003980:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003982:	4a52      	ldr	r2, [pc, #328]	; (8003acc <HAL_GPIO_Init+0x2ec>)
 8003984:	69fb      	ldr	r3, [r7, #28]
 8003986:	089b      	lsrs	r3, r3, #2
 8003988:	3302      	adds	r3, #2
 800398a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800398e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003990:	69fb      	ldr	r3, [r7, #28]
 8003992:	f003 0303 	and.w	r3, r3, #3
 8003996:	009b      	lsls	r3, r3, #2
 8003998:	220f      	movs	r2, #15
 800399a:	fa02 f303 	lsl.w	r3, r2, r3
 800399e:	43db      	mvns	r3, r3
 80039a0:	69ba      	ldr	r2, [r7, #24]
 80039a2:	4013      	ands	r3, r2
 80039a4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	4a49      	ldr	r2, [pc, #292]	; (8003ad0 <HAL_GPIO_Init+0x2f0>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d019      	beq.n	80039e2 <HAL_GPIO_Init+0x202>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	4a48      	ldr	r2, [pc, #288]	; (8003ad4 <HAL_GPIO_Init+0x2f4>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d013      	beq.n	80039de <HAL_GPIO_Init+0x1fe>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	4a47      	ldr	r2, [pc, #284]	; (8003ad8 <HAL_GPIO_Init+0x2f8>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d00d      	beq.n	80039da <HAL_GPIO_Init+0x1fa>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	4a46      	ldr	r2, [pc, #280]	; (8003adc <HAL_GPIO_Init+0x2fc>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d007      	beq.n	80039d6 <HAL_GPIO_Init+0x1f6>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	4a45      	ldr	r2, [pc, #276]	; (8003ae0 <HAL_GPIO_Init+0x300>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d101      	bne.n	80039d2 <HAL_GPIO_Init+0x1f2>
 80039ce:	2304      	movs	r3, #4
 80039d0:	e008      	b.n	80039e4 <HAL_GPIO_Init+0x204>
 80039d2:	2307      	movs	r3, #7
 80039d4:	e006      	b.n	80039e4 <HAL_GPIO_Init+0x204>
 80039d6:	2303      	movs	r3, #3
 80039d8:	e004      	b.n	80039e4 <HAL_GPIO_Init+0x204>
 80039da:	2302      	movs	r3, #2
 80039dc:	e002      	b.n	80039e4 <HAL_GPIO_Init+0x204>
 80039de:	2301      	movs	r3, #1
 80039e0:	e000      	b.n	80039e4 <HAL_GPIO_Init+0x204>
 80039e2:	2300      	movs	r3, #0
 80039e4:	69fa      	ldr	r2, [r7, #28]
 80039e6:	f002 0203 	and.w	r2, r2, #3
 80039ea:	0092      	lsls	r2, r2, #2
 80039ec:	4093      	lsls	r3, r2
 80039ee:	69ba      	ldr	r2, [r7, #24]
 80039f0:	4313      	orrs	r3, r2
 80039f2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80039f4:	4935      	ldr	r1, [pc, #212]	; (8003acc <HAL_GPIO_Init+0x2ec>)
 80039f6:	69fb      	ldr	r3, [r7, #28]
 80039f8:	089b      	lsrs	r3, r3, #2
 80039fa:	3302      	adds	r3, #2
 80039fc:	69ba      	ldr	r2, [r7, #24]
 80039fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003a02:	4b38      	ldr	r3, [pc, #224]	; (8003ae4 <HAL_GPIO_Init+0x304>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a08:	693b      	ldr	r3, [r7, #16]
 8003a0a:	43db      	mvns	r3, r3
 8003a0c:	69ba      	ldr	r2, [r7, #24]
 8003a0e:	4013      	ands	r3, r2
 8003a10:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	685b      	ldr	r3, [r3, #4]
 8003a16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d003      	beq.n	8003a26 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003a1e:	69ba      	ldr	r2, [r7, #24]
 8003a20:	693b      	ldr	r3, [r7, #16]
 8003a22:	4313      	orrs	r3, r2
 8003a24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003a26:	4a2f      	ldr	r2, [pc, #188]	; (8003ae4 <HAL_GPIO_Init+0x304>)
 8003a28:	69bb      	ldr	r3, [r7, #24]
 8003a2a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003a2c:	4b2d      	ldr	r3, [pc, #180]	; (8003ae4 <HAL_GPIO_Init+0x304>)
 8003a2e:	685b      	ldr	r3, [r3, #4]
 8003a30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a32:	693b      	ldr	r3, [r7, #16]
 8003a34:	43db      	mvns	r3, r3
 8003a36:	69ba      	ldr	r2, [r7, #24]
 8003a38:	4013      	ands	r3, r2
 8003a3a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	685b      	ldr	r3, [r3, #4]
 8003a40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d003      	beq.n	8003a50 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003a48:	69ba      	ldr	r2, [r7, #24]
 8003a4a:	693b      	ldr	r3, [r7, #16]
 8003a4c:	4313      	orrs	r3, r2
 8003a4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003a50:	4a24      	ldr	r2, [pc, #144]	; (8003ae4 <HAL_GPIO_Init+0x304>)
 8003a52:	69bb      	ldr	r3, [r7, #24]
 8003a54:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003a56:	4b23      	ldr	r3, [pc, #140]	; (8003ae4 <HAL_GPIO_Init+0x304>)
 8003a58:	689b      	ldr	r3, [r3, #8]
 8003a5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a5c:	693b      	ldr	r3, [r7, #16]
 8003a5e:	43db      	mvns	r3, r3
 8003a60:	69ba      	ldr	r2, [r7, #24]
 8003a62:	4013      	ands	r3, r2
 8003a64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	685b      	ldr	r3, [r3, #4]
 8003a6a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d003      	beq.n	8003a7a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003a72:	69ba      	ldr	r2, [r7, #24]
 8003a74:	693b      	ldr	r3, [r7, #16]
 8003a76:	4313      	orrs	r3, r2
 8003a78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003a7a:	4a1a      	ldr	r2, [pc, #104]	; (8003ae4 <HAL_GPIO_Init+0x304>)
 8003a7c:	69bb      	ldr	r3, [r7, #24]
 8003a7e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003a80:	4b18      	ldr	r3, [pc, #96]	; (8003ae4 <HAL_GPIO_Init+0x304>)
 8003a82:	68db      	ldr	r3, [r3, #12]
 8003a84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a86:	693b      	ldr	r3, [r7, #16]
 8003a88:	43db      	mvns	r3, r3
 8003a8a:	69ba      	ldr	r2, [r7, #24]
 8003a8c:	4013      	ands	r3, r2
 8003a8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	685b      	ldr	r3, [r3, #4]
 8003a94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d003      	beq.n	8003aa4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003a9c:	69ba      	ldr	r2, [r7, #24]
 8003a9e:	693b      	ldr	r3, [r7, #16]
 8003aa0:	4313      	orrs	r3, r2
 8003aa2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003aa4:	4a0f      	ldr	r2, [pc, #60]	; (8003ae4 <HAL_GPIO_Init+0x304>)
 8003aa6:	69bb      	ldr	r3, [r7, #24]
 8003aa8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003aaa:	69fb      	ldr	r3, [r7, #28]
 8003aac:	3301      	adds	r3, #1
 8003aae:	61fb      	str	r3, [r7, #28]
 8003ab0:	69fb      	ldr	r3, [r7, #28]
 8003ab2:	2b0f      	cmp	r3, #15
 8003ab4:	f67f aea2 	bls.w	80037fc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003ab8:	bf00      	nop
 8003aba:	bf00      	nop
 8003abc:	3724      	adds	r7, #36	; 0x24
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac4:	4770      	bx	lr
 8003ac6:	bf00      	nop
 8003ac8:	40023800 	.word	0x40023800
 8003acc:	40013800 	.word	0x40013800
 8003ad0:	40020000 	.word	0x40020000
 8003ad4:	40020400 	.word	0x40020400
 8003ad8:	40020800 	.word	0x40020800
 8003adc:	40020c00 	.word	0x40020c00
 8003ae0:	40021000 	.word	0x40021000
 8003ae4:	40013c00 	.word	0x40013c00

08003ae8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003ae8:	b480      	push	{r7}
 8003aea:	b085      	sub	sp, #20
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
 8003af0:	460b      	mov	r3, r1
 8003af2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	691a      	ldr	r2, [r3, #16]
 8003af8:	887b      	ldrh	r3, [r7, #2]
 8003afa:	4013      	ands	r3, r2
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d002      	beq.n	8003b06 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003b00:	2301      	movs	r3, #1
 8003b02:	73fb      	strb	r3, [r7, #15]
 8003b04:	e001      	b.n	8003b0a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003b06:	2300      	movs	r3, #0
 8003b08:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003b0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	3714      	adds	r7, #20
 8003b10:	46bd      	mov	sp, r7
 8003b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b16:	4770      	bx	lr

08003b18 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b18:	b480      	push	{r7}
 8003b1a:	b083      	sub	sp, #12
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
 8003b20:	460b      	mov	r3, r1
 8003b22:	807b      	strh	r3, [r7, #2]
 8003b24:	4613      	mov	r3, r2
 8003b26:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003b28:	787b      	ldrb	r3, [r7, #1]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d003      	beq.n	8003b36 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003b2e:	887a      	ldrh	r2, [r7, #2]
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003b34:	e003      	b.n	8003b3e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003b36:	887b      	ldrh	r3, [r7, #2]
 8003b38:	041a      	lsls	r2, r3, #16
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	619a      	str	r2, [r3, #24]
}
 8003b3e:	bf00      	nop
 8003b40:	370c      	adds	r7, #12
 8003b42:	46bd      	mov	sp, r7
 8003b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b48:	4770      	bx	lr

08003b4a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003b4a:	b480      	push	{r7}
 8003b4c:	b083      	sub	sp, #12
 8003b4e:	af00      	add	r7, sp, #0
 8003b50:	6078      	str	r0, [r7, #4]
 8003b52:	460b      	mov	r3, r1
 8003b54:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	695a      	ldr	r2, [r3, #20]
 8003b5a:	887b      	ldrh	r3, [r7, #2]
 8003b5c:	401a      	ands	r2, r3
 8003b5e:	887b      	ldrh	r3, [r7, #2]
 8003b60:	429a      	cmp	r2, r3
 8003b62:	d104      	bne.n	8003b6e <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003b64:	887b      	ldrh	r3, [r7, #2]
 8003b66:	041a      	lsls	r2, r3, #16
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8003b6c:	e002      	b.n	8003b74 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8003b6e:	887a      	ldrh	r2, [r7, #2]
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	619a      	str	r2, [r3, #24]
}
 8003b74:	bf00      	nop
 8003b76:	370c      	adds	r7, #12
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7e:	4770      	bx	lr

08003b80 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b082      	sub	sp, #8
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	4603      	mov	r3, r0
 8003b88:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003b8a:	4b08      	ldr	r3, [pc, #32]	; (8003bac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003b8c:	695a      	ldr	r2, [r3, #20]
 8003b8e:	88fb      	ldrh	r3, [r7, #6]
 8003b90:	4013      	ands	r3, r2
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d006      	beq.n	8003ba4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003b96:	4a05      	ldr	r2, [pc, #20]	; (8003bac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003b98:	88fb      	ldrh	r3, [r7, #6]
 8003b9a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003b9c:	88fb      	ldrh	r3, [r7, #6]
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	f7fe fb1e 	bl	80021e0 <HAL_GPIO_EXTI_Callback>
  }
}
 8003ba4:	bf00      	nop
 8003ba6:	3708      	adds	r7, #8
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	bd80      	pop	{r7, pc}
 8003bac:	40013c00 	.word	0x40013c00

08003bb0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b084      	sub	sp, #16
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d101      	bne.n	8003bc2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	e12b      	b.n	8003e1a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bc8:	b2db      	uxtb	r3, r3
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d106      	bne.n	8003bdc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003bd6:	6878      	ldr	r0, [r7, #4]
 8003bd8:	f7fe fea4 	bl	8002924 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2224      	movs	r2, #36	; 0x24
 8003be0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	681a      	ldr	r2, [r3, #0]
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f022 0201 	bic.w	r2, r2, #1
 8003bf2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	681a      	ldr	r2, [r3, #0]
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003c02:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	681a      	ldr	r2, [r3, #0]
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003c12:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003c14:	f001 faee 	bl	80051f4 <HAL_RCC_GetPCLK1Freq>
 8003c18:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	4a81      	ldr	r2, [pc, #516]	; (8003e24 <HAL_I2C_Init+0x274>)
 8003c20:	4293      	cmp	r3, r2
 8003c22:	d807      	bhi.n	8003c34 <HAL_I2C_Init+0x84>
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	4a80      	ldr	r2, [pc, #512]	; (8003e28 <HAL_I2C_Init+0x278>)
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	bf94      	ite	ls
 8003c2c:	2301      	movls	r3, #1
 8003c2e:	2300      	movhi	r3, #0
 8003c30:	b2db      	uxtb	r3, r3
 8003c32:	e006      	b.n	8003c42 <HAL_I2C_Init+0x92>
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	4a7d      	ldr	r2, [pc, #500]	; (8003e2c <HAL_I2C_Init+0x27c>)
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	bf94      	ite	ls
 8003c3c:	2301      	movls	r3, #1
 8003c3e:	2300      	movhi	r3, #0
 8003c40:	b2db      	uxtb	r3, r3
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d001      	beq.n	8003c4a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003c46:	2301      	movs	r3, #1
 8003c48:	e0e7      	b.n	8003e1a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	4a78      	ldr	r2, [pc, #480]	; (8003e30 <HAL_I2C_Init+0x280>)
 8003c4e:	fba2 2303 	umull	r2, r3, r2, r3
 8003c52:	0c9b      	lsrs	r3, r3, #18
 8003c54:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	685b      	ldr	r3, [r3, #4]
 8003c5c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	68ba      	ldr	r2, [r7, #8]
 8003c66:	430a      	orrs	r2, r1
 8003c68:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	6a1b      	ldr	r3, [r3, #32]
 8003c70:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	685b      	ldr	r3, [r3, #4]
 8003c78:	4a6a      	ldr	r2, [pc, #424]	; (8003e24 <HAL_I2C_Init+0x274>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d802      	bhi.n	8003c84 <HAL_I2C_Init+0xd4>
 8003c7e:	68bb      	ldr	r3, [r7, #8]
 8003c80:	3301      	adds	r3, #1
 8003c82:	e009      	b.n	8003c98 <HAL_I2C_Init+0xe8>
 8003c84:	68bb      	ldr	r3, [r7, #8]
 8003c86:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003c8a:	fb02 f303 	mul.w	r3, r2, r3
 8003c8e:	4a69      	ldr	r2, [pc, #420]	; (8003e34 <HAL_I2C_Init+0x284>)
 8003c90:	fba2 2303 	umull	r2, r3, r2, r3
 8003c94:	099b      	lsrs	r3, r3, #6
 8003c96:	3301      	adds	r3, #1
 8003c98:	687a      	ldr	r2, [r7, #4]
 8003c9a:	6812      	ldr	r2, [r2, #0]
 8003c9c:	430b      	orrs	r3, r1
 8003c9e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	69db      	ldr	r3, [r3, #28]
 8003ca6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003caa:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	685b      	ldr	r3, [r3, #4]
 8003cb2:	495c      	ldr	r1, [pc, #368]	; (8003e24 <HAL_I2C_Init+0x274>)
 8003cb4:	428b      	cmp	r3, r1
 8003cb6:	d819      	bhi.n	8003cec <HAL_I2C_Init+0x13c>
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	1e59      	subs	r1, r3, #1
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	685b      	ldr	r3, [r3, #4]
 8003cc0:	005b      	lsls	r3, r3, #1
 8003cc2:	fbb1 f3f3 	udiv	r3, r1, r3
 8003cc6:	1c59      	adds	r1, r3, #1
 8003cc8:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003ccc:	400b      	ands	r3, r1
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d00a      	beq.n	8003ce8 <HAL_I2C_Init+0x138>
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	1e59      	subs	r1, r3, #1
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	685b      	ldr	r3, [r3, #4]
 8003cda:	005b      	lsls	r3, r3, #1
 8003cdc:	fbb1 f3f3 	udiv	r3, r1, r3
 8003ce0:	3301      	adds	r3, #1
 8003ce2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ce6:	e051      	b.n	8003d8c <HAL_I2C_Init+0x1dc>
 8003ce8:	2304      	movs	r3, #4
 8003cea:	e04f      	b.n	8003d8c <HAL_I2C_Init+0x1dc>
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	689b      	ldr	r3, [r3, #8]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d111      	bne.n	8003d18 <HAL_I2C_Init+0x168>
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	1e58      	subs	r0, r3, #1
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6859      	ldr	r1, [r3, #4]
 8003cfc:	460b      	mov	r3, r1
 8003cfe:	005b      	lsls	r3, r3, #1
 8003d00:	440b      	add	r3, r1
 8003d02:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d06:	3301      	adds	r3, #1
 8003d08:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	bf0c      	ite	eq
 8003d10:	2301      	moveq	r3, #1
 8003d12:	2300      	movne	r3, #0
 8003d14:	b2db      	uxtb	r3, r3
 8003d16:	e012      	b.n	8003d3e <HAL_I2C_Init+0x18e>
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	1e58      	subs	r0, r3, #1
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6859      	ldr	r1, [r3, #4]
 8003d20:	460b      	mov	r3, r1
 8003d22:	009b      	lsls	r3, r3, #2
 8003d24:	440b      	add	r3, r1
 8003d26:	0099      	lsls	r1, r3, #2
 8003d28:	440b      	add	r3, r1
 8003d2a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d2e:	3301      	adds	r3, #1
 8003d30:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	bf0c      	ite	eq
 8003d38:	2301      	moveq	r3, #1
 8003d3a:	2300      	movne	r3, #0
 8003d3c:	b2db      	uxtb	r3, r3
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d001      	beq.n	8003d46 <HAL_I2C_Init+0x196>
 8003d42:	2301      	movs	r3, #1
 8003d44:	e022      	b.n	8003d8c <HAL_I2C_Init+0x1dc>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	689b      	ldr	r3, [r3, #8]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d10e      	bne.n	8003d6c <HAL_I2C_Init+0x1bc>
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	1e58      	subs	r0, r3, #1
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6859      	ldr	r1, [r3, #4]
 8003d56:	460b      	mov	r3, r1
 8003d58:	005b      	lsls	r3, r3, #1
 8003d5a:	440b      	add	r3, r1
 8003d5c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d60:	3301      	adds	r3, #1
 8003d62:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d66:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d6a:	e00f      	b.n	8003d8c <HAL_I2C_Init+0x1dc>
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	1e58      	subs	r0, r3, #1
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6859      	ldr	r1, [r3, #4]
 8003d74:	460b      	mov	r3, r1
 8003d76:	009b      	lsls	r3, r3, #2
 8003d78:	440b      	add	r3, r1
 8003d7a:	0099      	lsls	r1, r3, #2
 8003d7c:	440b      	add	r3, r1
 8003d7e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d82:	3301      	adds	r3, #1
 8003d84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d88:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003d8c:	6879      	ldr	r1, [r7, #4]
 8003d8e:	6809      	ldr	r1, [r1, #0]
 8003d90:	4313      	orrs	r3, r2
 8003d92:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	69da      	ldr	r2, [r3, #28]
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6a1b      	ldr	r3, [r3, #32]
 8003da6:	431a      	orrs	r2, r3
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	430a      	orrs	r2, r1
 8003dae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	689b      	ldr	r3, [r3, #8]
 8003db6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003dba:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003dbe:	687a      	ldr	r2, [r7, #4]
 8003dc0:	6911      	ldr	r1, [r2, #16]
 8003dc2:	687a      	ldr	r2, [r7, #4]
 8003dc4:	68d2      	ldr	r2, [r2, #12]
 8003dc6:	4311      	orrs	r1, r2
 8003dc8:	687a      	ldr	r2, [r7, #4]
 8003dca:	6812      	ldr	r2, [r2, #0]
 8003dcc:	430b      	orrs	r3, r1
 8003dce:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	68db      	ldr	r3, [r3, #12]
 8003dd6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	695a      	ldr	r2, [r3, #20]
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	699b      	ldr	r3, [r3, #24]
 8003de2:	431a      	orrs	r2, r3
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	430a      	orrs	r2, r1
 8003dea:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	681a      	ldr	r2, [r3, #0]
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f042 0201 	orr.w	r2, r2, #1
 8003dfa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2200      	movs	r2, #0
 8003e00:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2220      	movs	r2, #32
 8003e06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2200      	movs	r2, #0
 8003e14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003e18:	2300      	movs	r3, #0
}
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	3710      	adds	r7, #16
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	bd80      	pop	{r7, pc}
 8003e22:	bf00      	nop
 8003e24:	000186a0 	.word	0x000186a0
 8003e28:	001e847f 	.word	0x001e847f
 8003e2c:	003d08ff 	.word	0x003d08ff
 8003e30:	431bde83 	.word	0x431bde83
 8003e34:	10624dd3 	.word	0x10624dd3

08003e38 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b088      	sub	sp, #32
 8003e3c:	af02      	add	r7, sp, #8
 8003e3e:	60f8      	str	r0, [r7, #12]
 8003e40:	607a      	str	r2, [r7, #4]
 8003e42:	461a      	mov	r2, r3
 8003e44:	460b      	mov	r3, r1
 8003e46:	817b      	strh	r3, [r7, #10]
 8003e48:	4613      	mov	r3, r2
 8003e4a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003e4c:	f7fe ffba 	bl	8002dc4 <HAL_GetTick>
 8003e50:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e58:	b2db      	uxtb	r3, r3
 8003e5a:	2b20      	cmp	r3, #32
 8003e5c:	f040 80e0 	bne.w	8004020 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003e60:	697b      	ldr	r3, [r7, #20]
 8003e62:	9300      	str	r3, [sp, #0]
 8003e64:	2319      	movs	r3, #25
 8003e66:	2201      	movs	r2, #1
 8003e68:	4970      	ldr	r1, [pc, #448]	; (800402c <HAL_I2C_Master_Transmit+0x1f4>)
 8003e6a:	68f8      	ldr	r0, [r7, #12]
 8003e6c:	f000 fc22 	bl	80046b4 <I2C_WaitOnFlagUntilTimeout>
 8003e70:	4603      	mov	r3, r0
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d001      	beq.n	8003e7a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003e76:	2302      	movs	r3, #2
 8003e78:	e0d3      	b.n	8004022 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e80:	2b01      	cmp	r3, #1
 8003e82:	d101      	bne.n	8003e88 <HAL_I2C_Master_Transmit+0x50>
 8003e84:	2302      	movs	r3, #2
 8003e86:	e0cc      	b.n	8004022 <HAL_I2C_Master_Transmit+0x1ea>
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	2201      	movs	r2, #1
 8003e8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f003 0301 	and.w	r3, r3, #1
 8003e9a:	2b01      	cmp	r3, #1
 8003e9c:	d007      	beq.n	8003eae <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	681a      	ldr	r2, [r3, #0]
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f042 0201 	orr.w	r2, r2, #1
 8003eac:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	681a      	ldr	r2, [r3, #0]
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003ebc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	2221      	movs	r2, #33	; 0x21
 8003ec2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	2210      	movs	r2, #16
 8003eca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	687a      	ldr	r2, [r7, #4]
 8003ed8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	893a      	ldrh	r2, [r7, #8]
 8003ede:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ee4:	b29a      	uxth	r2, r3
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	4a50      	ldr	r2, [pc, #320]	; (8004030 <HAL_I2C_Master_Transmit+0x1f8>)
 8003eee:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003ef0:	8979      	ldrh	r1, [r7, #10]
 8003ef2:	697b      	ldr	r3, [r7, #20]
 8003ef4:	6a3a      	ldr	r2, [r7, #32]
 8003ef6:	68f8      	ldr	r0, [r7, #12]
 8003ef8:	f000 fac4 	bl	8004484 <I2C_MasterRequestWrite>
 8003efc:	4603      	mov	r3, r0
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d001      	beq.n	8003f06 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003f02:	2301      	movs	r3, #1
 8003f04:	e08d      	b.n	8004022 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f06:	2300      	movs	r3, #0
 8003f08:	613b      	str	r3, [r7, #16]
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	695b      	ldr	r3, [r3, #20]
 8003f10:	613b      	str	r3, [r7, #16]
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	699b      	ldr	r3, [r3, #24]
 8003f18:	613b      	str	r3, [r7, #16]
 8003f1a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003f1c:	e066      	b.n	8003fec <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f1e:	697a      	ldr	r2, [r7, #20]
 8003f20:	6a39      	ldr	r1, [r7, #32]
 8003f22:	68f8      	ldr	r0, [r7, #12]
 8003f24:	f000 fc9c 	bl	8004860 <I2C_WaitOnTXEFlagUntilTimeout>
 8003f28:	4603      	mov	r3, r0
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d00d      	beq.n	8003f4a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f32:	2b04      	cmp	r3, #4
 8003f34:	d107      	bne.n	8003f46 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	681a      	ldr	r2, [r3, #0]
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f44:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003f46:	2301      	movs	r3, #1
 8003f48:	e06b      	b.n	8004022 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f4e:	781a      	ldrb	r2, [r3, #0]
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f5a:	1c5a      	adds	r2, r3, #1
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f64:	b29b      	uxth	r3, r3
 8003f66:	3b01      	subs	r3, #1
 8003f68:	b29a      	uxth	r2, r3
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f72:	3b01      	subs	r3, #1
 8003f74:	b29a      	uxth	r2, r3
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	695b      	ldr	r3, [r3, #20]
 8003f80:	f003 0304 	and.w	r3, r3, #4
 8003f84:	2b04      	cmp	r3, #4
 8003f86:	d11b      	bne.n	8003fc0 <HAL_I2C_Master_Transmit+0x188>
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d017      	beq.n	8003fc0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f94:	781a      	ldrb	r2, [r3, #0]
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fa0:	1c5a      	adds	r2, r3, #1
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003faa:	b29b      	uxth	r3, r3
 8003fac:	3b01      	subs	r3, #1
 8003fae:	b29a      	uxth	r2, r3
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fb8:	3b01      	subs	r3, #1
 8003fba:	b29a      	uxth	r2, r3
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003fc0:	697a      	ldr	r2, [r7, #20]
 8003fc2:	6a39      	ldr	r1, [r7, #32]
 8003fc4:	68f8      	ldr	r0, [r7, #12]
 8003fc6:	f000 fc8c 	bl	80048e2 <I2C_WaitOnBTFFlagUntilTimeout>
 8003fca:	4603      	mov	r3, r0
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d00d      	beq.n	8003fec <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fd4:	2b04      	cmp	r3, #4
 8003fd6:	d107      	bne.n	8003fe8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	681a      	ldr	r2, [r3, #0]
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003fe6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003fe8:	2301      	movs	r3, #1
 8003fea:	e01a      	b.n	8004022 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d194      	bne.n	8003f1e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	681a      	ldr	r2, [r3, #0]
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004002:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	2220      	movs	r2, #32
 8004008:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	2200      	movs	r2, #0
 8004010:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	2200      	movs	r2, #0
 8004018:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800401c:	2300      	movs	r3, #0
 800401e:	e000      	b.n	8004022 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004020:	2302      	movs	r3, #2
  }
}
 8004022:	4618      	mov	r0, r3
 8004024:	3718      	adds	r7, #24
 8004026:	46bd      	mov	sp, r7
 8004028:	bd80      	pop	{r7, pc}
 800402a:	bf00      	nop
 800402c:	00100002 	.word	0x00100002
 8004030:	ffff0000 	.word	0xffff0000

08004034 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	b088      	sub	sp, #32
 8004038:	af02      	add	r7, sp, #8
 800403a:	60f8      	str	r0, [r7, #12]
 800403c:	4608      	mov	r0, r1
 800403e:	4611      	mov	r1, r2
 8004040:	461a      	mov	r2, r3
 8004042:	4603      	mov	r3, r0
 8004044:	817b      	strh	r3, [r7, #10]
 8004046:	460b      	mov	r3, r1
 8004048:	813b      	strh	r3, [r7, #8]
 800404a:	4613      	mov	r3, r2
 800404c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800404e:	f7fe feb9 	bl	8002dc4 <HAL_GetTick>
 8004052:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800405a:	b2db      	uxtb	r3, r3
 800405c:	2b20      	cmp	r3, #32
 800405e:	f040 80d9 	bne.w	8004214 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004062:	697b      	ldr	r3, [r7, #20]
 8004064:	9300      	str	r3, [sp, #0]
 8004066:	2319      	movs	r3, #25
 8004068:	2201      	movs	r2, #1
 800406a:	496d      	ldr	r1, [pc, #436]	; (8004220 <HAL_I2C_Mem_Write+0x1ec>)
 800406c:	68f8      	ldr	r0, [r7, #12]
 800406e:	f000 fb21 	bl	80046b4 <I2C_WaitOnFlagUntilTimeout>
 8004072:	4603      	mov	r3, r0
 8004074:	2b00      	cmp	r3, #0
 8004076:	d001      	beq.n	800407c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004078:	2302      	movs	r3, #2
 800407a:	e0cc      	b.n	8004216 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004082:	2b01      	cmp	r3, #1
 8004084:	d101      	bne.n	800408a <HAL_I2C_Mem_Write+0x56>
 8004086:	2302      	movs	r3, #2
 8004088:	e0c5      	b.n	8004216 <HAL_I2C_Mem_Write+0x1e2>
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	2201      	movs	r2, #1
 800408e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f003 0301 	and.w	r3, r3, #1
 800409c:	2b01      	cmp	r3, #1
 800409e:	d007      	beq.n	80040b0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	681a      	ldr	r2, [r3, #0]
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f042 0201 	orr.w	r2, r2, #1
 80040ae:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	681a      	ldr	r2, [r3, #0]
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80040be:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	2221      	movs	r2, #33	; 0x21
 80040c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	2240      	movs	r2, #64	; 0x40
 80040cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	2200      	movs	r2, #0
 80040d4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	6a3a      	ldr	r2, [r7, #32]
 80040da:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80040e0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040e6:	b29a      	uxth	r2, r3
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	4a4d      	ldr	r2, [pc, #308]	; (8004224 <HAL_I2C_Mem_Write+0x1f0>)
 80040f0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80040f2:	88f8      	ldrh	r0, [r7, #6]
 80040f4:	893a      	ldrh	r2, [r7, #8]
 80040f6:	8979      	ldrh	r1, [r7, #10]
 80040f8:	697b      	ldr	r3, [r7, #20]
 80040fa:	9301      	str	r3, [sp, #4]
 80040fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040fe:	9300      	str	r3, [sp, #0]
 8004100:	4603      	mov	r3, r0
 8004102:	68f8      	ldr	r0, [r7, #12]
 8004104:	f000 fa40 	bl	8004588 <I2C_RequestMemoryWrite>
 8004108:	4603      	mov	r3, r0
 800410a:	2b00      	cmp	r3, #0
 800410c:	d052      	beq.n	80041b4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800410e:	2301      	movs	r3, #1
 8004110:	e081      	b.n	8004216 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004112:	697a      	ldr	r2, [r7, #20]
 8004114:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004116:	68f8      	ldr	r0, [r7, #12]
 8004118:	f000 fba2 	bl	8004860 <I2C_WaitOnTXEFlagUntilTimeout>
 800411c:	4603      	mov	r3, r0
 800411e:	2b00      	cmp	r3, #0
 8004120:	d00d      	beq.n	800413e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004126:	2b04      	cmp	r3, #4
 8004128:	d107      	bne.n	800413a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	681a      	ldr	r2, [r3, #0]
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004138:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800413a:	2301      	movs	r3, #1
 800413c:	e06b      	b.n	8004216 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004142:	781a      	ldrb	r2, [r3, #0]
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800414e:	1c5a      	adds	r2, r3, #1
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004158:	3b01      	subs	r3, #1
 800415a:	b29a      	uxth	r2, r3
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004164:	b29b      	uxth	r3, r3
 8004166:	3b01      	subs	r3, #1
 8004168:	b29a      	uxth	r2, r3
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	695b      	ldr	r3, [r3, #20]
 8004174:	f003 0304 	and.w	r3, r3, #4
 8004178:	2b04      	cmp	r3, #4
 800417a:	d11b      	bne.n	80041b4 <HAL_I2C_Mem_Write+0x180>
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004180:	2b00      	cmp	r3, #0
 8004182:	d017      	beq.n	80041b4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004188:	781a      	ldrb	r2, [r3, #0]
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004194:	1c5a      	adds	r2, r3, #1
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800419e:	3b01      	subs	r3, #1
 80041a0:	b29a      	uxth	r2, r3
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041aa:	b29b      	uxth	r3, r3
 80041ac:	3b01      	subs	r3, #1
 80041ae:	b29a      	uxth	r2, r3
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d1aa      	bne.n	8004112 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80041bc:	697a      	ldr	r2, [r7, #20]
 80041be:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80041c0:	68f8      	ldr	r0, [r7, #12]
 80041c2:	f000 fb8e 	bl	80048e2 <I2C_WaitOnBTFFlagUntilTimeout>
 80041c6:	4603      	mov	r3, r0
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d00d      	beq.n	80041e8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041d0:	2b04      	cmp	r3, #4
 80041d2:	d107      	bne.n	80041e4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	681a      	ldr	r2, [r3, #0]
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041e2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80041e4:	2301      	movs	r3, #1
 80041e6:	e016      	b.n	8004216 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	681a      	ldr	r2, [r3, #0]
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041f6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	2220      	movs	r2, #32
 80041fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	2200      	movs	r2, #0
 8004204:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	2200      	movs	r2, #0
 800420c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004210:	2300      	movs	r3, #0
 8004212:	e000      	b.n	8004216 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004214:	2302      	movs	r3, #2
  }
}
 8004216:	4618      	mov	r0, r3
 8004218:	3718      	adds	r7, #24
 800421a:	46bd      	mov	sp, r7
 800421c:	bd80      	pop	{r7, pc}
 800421e:	bf00      	nop
 8004220:	00100002 	.word	0x00100002
 8004224:	ffff0000 	.word	0xffff0000

08004228 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8004228:	b580      	push	{r7, lr}
 800422a:	b08a      	sub	sp, #40	; 0x28
 800422c:	af02      	add	r7, sp, #8
 800422e:	60f8      	str	r0, [r7, #12]
 8004230:	607a      	str	r2, [r7, #4]
 8004232:	603b      	str	r3, [r7, #0]
 8004234:	460b      	mov	r3, r1
 8004236:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8004238:	f7fe fdc4 	bl	8002dc4 <HAL_GetTick>
 800423c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 800423e:	2301      	movs	r3, #1
 8004240:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004248:	b2db      	uxtb	r3, r3
 800424a:	2b20      	cmp	r3, #32
 800424c:	f040 8111 	bne.w	8004472 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004250:	69fb      	ldr	r3, [r7, #28]
 8004252:	9300      	str	r3, [sp, #0]
 8004254:	2319      	movs	r3, #25
 8004256:	2201      	movs	r2, #1
 8004258:	4988      	ldr	r1, [pc, #544]	; (800447c <HAL_I2C_IsDeviceReady+0x254>)
 800425a:	68f8      	ldr	r0, [r7, #12]
 800425c:	f000 fa2a 	bl	80046b4 <I2C_WaitOnFlagUntilTimeout>
 8004260:	4603      	mov	r3, r0
 8004262:	2b00      	cmp	r3, #0
 8004264:	d001      	beq.n	800426a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8004266:	2302      	movs	r3, #2
 8004268:	e104      	b.n	8004474 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004270:	2b01      	cmp	r3, #1
 8004272:	d101      	bne.n	8004278 <HAL_I2C_IsDeviceReady+0x50>
 8004274:	2302      	movs	r3, #2
 8004276:	e0fd      	b.n	8004474 <HAL_I2C_IsDeviceReady+0x24c>
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	2201      	movs	r2, #1
 800427c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f003 0301 	and.w	r3, r3, #1
 800428a:	2b01      	cmp	r3, #1
 800428c:	d007      	beq.n	800429e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	681a      	ldr	r2, [r3, #0]
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f042 0201 	orr.w	r2, r2, #1
 800429c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	681a      	ldr	r2, [r3, #0]
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80042ac:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	2224      	movs	r2, #36	; 0x24
 80042b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	2200      	movs	r2, #0
 80042ba:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	4a70      	ldr	r2, [pc, #448]	; (8004480 <HAL_I2C_IsDeviceReady+0x258>)
 80042c0:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	681a      	ldr	r2, [r3, #0]
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80042d0:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80042d2:	69fb      	ldr	r3, [r7, #28]
 80042d4:	9300      	str	r3, [sp, #0]
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	2200      	movs	r2, #0
 80042da:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80042de:	68f8      	ldr	r0, [r7, #12]
 80042e0:	f000 f9e8 	bl	80046b4 <I2C_WaitOnFlagUntilTimeout>
 80042e4:	4603      	mov	r3, r0
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d00d      	beq.n	8004306 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80042f8:	d103      	bne.n	8004302 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004300:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8004302:	2303      	movs	r3, #3
 8004304:	e0b6      	b.n	8004474 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004306:	897b      	ldrh	r3, [r7, #10]
 8004308:	b2db      	uxtb	r3, r3
 800430a:	461a      	mov	r2, r3
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004314:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8004316:	f7fe fd55 	bl	8002dc4 <HAL_GetTick>
 800431a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	695b      	ldr	r3, [r3, #20]
 8004322:	f003 0302 	and.w	r3, r3, #2
 8004326:	2b02      	cmp	r3, #2
 8004328:	bf0c      	ite	eq
 800432a:	2301      	moveq	r3, #1
 800432c:	2300      	movne	r3, #0
 800432e:	b2db      	uxtb	r3, r3
 8004330:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	695b      	ldr	r3, [r3, #20]
 8004338:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800433c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004340:	bf0c      	ite	eq
 8004342:	2301      	moveq	r3, #1
 8004344:	2300      	movne	r3, #0
 8004346:	b2db      	uxtb	r3, r3
 8004348:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800434a:	e025      	b.n	8004398 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800434c:	f7fe fd3a 	bl	8002dc4 <HAL_GetTick>
 8004350:	4602      	mov	r2, r0
 8004352:	69fb      	ldr	r3, [r7, #28]
 8004354:	1ad3      	subs	r3, r2, r3
 8004356:	683a      	ldr	r2, [r7, #0]
 8004358:	429a      	cmp	r2, r3
 800435a:	d302      	bcc.n	8004362 <HAL_I2C_IsDeviceReady+0x13a>
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d103      	bne.n	800436a <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	22a0      	movs	r2, #160	; 0xa0
 8004366:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	695b      	ldr	r3, [r3, #20]
 8004370:	f003 0302 	and.w	r3, r3, #2
 8004374:	2b02      	cmp	r3, #2
 8004376:	bf0c      	ite	eq
 8004378:	2301      	moveq	r3, #1
 800437a:	2300      	movne	r3, #0
 800437c:	b2db      	uxtb	r3, r3
 800437e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	695b      	ldr	r3, [r3, #20]
 8004386:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800438a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800438e:	bf0c      	ite	eq
 8004390:	2301      	moveq	r3, #1
 8004392:	2300      	movne	r3, #0
 8004394:	b2db      	uxtb	r3, r3
 8004396:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800439e:	b2db      	uxtb	r3, r3
 80043a0:	2ba0      	cmp	r3, #160	; 0xa0
 80043a2:	d005      	beq.n	80043b0 <HAL_I2C_IsDeviceReady+0x188>
 80043a4:	7dfb      	ldrb	r3, [r7, #23]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d102      	bne.n	80043b0 <HAL_I2C_IsDeviceReady+0x188>
 80043aa:	7dbb      	ldrb	r3, [r7, #22]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d0cd      	beq.n	800434c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	2220      	movs	r2, #32
 80043b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	695b      	ldr	r3, [r3, #20]
 80043be:	f003 0302 	and.w	r3, r3, #2
 80043c2:	2b02      	cmp	r3, #2
 80043c4:	d129      	bne.n	800441a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	681a      	ldr	r2, [r3, #0]
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043d4:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043d6:	2300      	movs	r3, #0
 80043d8:	613b      	str	r3, [r7, #16]
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	695b      	ldr	r3, [r3, #20]
 80043e0:	613b      	str	r3, [r7, #16]
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	699b      	ldr	r3, [r3, #24]
 80043e8:	613b      	str	r3, [r7, #16]
 80043ea:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80043ec:	69fb      	ldr	r3, [r7, #28]
 80043ee:	9300      	str	r3, [sp, #0]
 80043f0:	2319      	movs	r3, #25
 80043f2:	2201      	movs	r2, #1
 80043f4:	4921      	ldr	r1, [pc, #132]	; (800447c <HAL_I2C_IsDeviceReady+0x254>)
 80043f6:	68f8      	ldr	r0, [r7, #12]
 80043f8:	f000 f95c 	bl	80046b4 <I2C_WaitOnFlagUntilTimeout>
 80043fc:	4603      	mov	r3, r0
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d001      	beq.n	8004406 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8004402:	2301      	movs	r3, #1
 8004404:	e036      	b.n	8004474 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	2220      	movs	r2, #32
 800440a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	2200      	movs	r2, #0
 8004412:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8004416:	2300      	movs	r3, #0
 8004418:	e02c      	b.n	8004474 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	681a      	ldr	r2, [r3, #0]
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004428:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004432:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004434:	69fb      	ldr	r3, [r7, #28]
 8004436:	9300      	str	r3, [sp, #0]
 8004438:	2319      	movs	r3, #25
 800443a:	2201      	movs	r2, #1
 800443c:	490f      	ldr	r1, [pc, #60]	; (800447c <HAL_I2C_IsDeviceReady+0x254>)
 800443e:	68f8      	ldr	r0, [r7, #12]
 8004440:	f000 f938 	bl	80046b4 <I2C_WaitOnFlagUntilTimeout>
 8004444:	4603      	mov	r3, r0
 8004446:	2b00      	cmp	r3, #0
 8004448:	d001      	beq.n	800444e <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800444a:	2301      	movs	r3, #1
 800444c:	e012      	b.n	8004474 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800444e:	69bb      	ldr	r3, [r7, #24]
 8004450:	3301      	adds	r3, #1
 8004452:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8004454:	69ba      	ldr	r2, [r7, #24]
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	429a      	cmp	r2, r3
 800445a:	f4ff af32 	bcc.w	80042c2 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	2220      	movs	r2, #32
 8004462:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	2200      	movs	r2, #0
 800446a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800446e:	2301      	movs	r3, #1
 8004470:	e000      	b.n	8004474 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8004472:	2302      	movs	r3, #2
  }
}
 8004474:	4618      	mov	r0, r3
 8004476:	3720      	adds	r7, #32
 8004478:	46bd      	mov	sp, r7
 800447a:	bd80      	pop	{r7, pc}
 800447c:	00100002 	.word	0x00100002
 8004480:	ffff0000 	.word	0xffff0000

08004484 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004484:	b580      	push	{r7, lr}
 8004486:	b088      	sub	sp, #32
 8004488:	af02      	add	r7, sp, #8
 800448a:	60f8      	str	r0, [r7, #12]
 800448c:	607a      	str	r2, [r7, #4]
 800448e:	603b      	str	r3, [r7, #0]
 8004490:	460b      	mov	r3, r1
 8004492:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004498:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800449a:	697b      	ldr	r3, [r7, #20]
 800449c:	2b08      	cmp	r3, #8
 800449e:	d006      	beq.n	80044ae <I2C_MasterRequestWrite+0x2a>
 80044a0:	697b      	ldr	r3, [r7, #20]
 80044a2:	2b01      	cmp	r3, #1
 80044a4:	d003      	beq.n	80044ae <I2C_MasterRequestWrite+0x2a>
 80044a6:	697b      	ldr	r3, [r7, #20]
 80044a8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80044ac:	d108      	bne.n	80044c0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	681a      	ldr	r2, [r3, #0]
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80044bc:	601a      	str	r2, [r3, #0]
 80044be:	e00b      	b.n	80044d8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044c4:	2b12      	cmp	r3, #18
 80044c6:	d107      	bne.n	80044d8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	681a      	ldr	r2, [r3, #0]
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80044d6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	9300      	str	r3, [sp, #0]
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2200      	movs	r2, #0
 80044e0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80044e4:	68f8      	ldr	r0, [r7, #12]
 80044e6:	f000 f8e5 	bl	80046b4 <I2C_WaitOnFlagUntilTimeout>
 80044ea:	4603      	mov	r3, r0
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d00d      	beq.n	800450c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80044fe:	d103      	bne.n	8004508 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004506:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004508:	2303      	movs	r3, #3
 800450a:	e035      	b.n	8004578 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	691b      	ldr	r3, [r3, #16]
 8004510:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004514:	d108      	bne.n	8004528 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004516:	897b      	ldrh	r3, [r7, #10]
 8004518:	b2db      	uxtb	r3, r3
 800451a:	461a      	mov	r2, r3
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004524:	611a      	str	r2, [r3, #16]
 8004526:	e01b      	b.n	8004560 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004528:	897b      	ldrh	r3, [r7, #10]
 800452a:	11db      	asrs	r3, r3, #7
 800452c:	b2db      	uxtb	r3, r3
 800452e:	f003 0306 	and.w	r3, r3, #6
 8004532:	b2db      	uxtb	r3, r3
 8004534:	f063 030f 	orn	r3, r3, #15
 8004538:	b2da      	uxtb	r2, r3
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	687a      	ldr	r2, [r7, #4]
 8004544:	490e      	ldr	r1, [pc, #56]	; (8004580 <I2C_MasterRequestWrite+0xfc>)
 8004546:	68f8      	ldr	r0, [r7, #12]
 8004548:	f000 f90b 	bl	8004762 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800454c:	4603      	mov	r3, r0
 800454e:	2b00      	cmp	r3, #0
 8004550:	d001      	beq.n	8004556 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004552:	2301      	movs	r3, #1
 8004554:	e010      	b.n	8004578 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004556:	897b      	ldrh	r3, [r7, #10]
 8004558:	b2da      	uxtb	r2, r3
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	687a      	ldr	r2, [r7, #4]
 8004564:	4907      	ldr	r1, [pc, #28]	; (8004584 <I2C_MasterRequestWrite+0x100>)
 8004566:	68f8      	ldr	r0, [r7, #12]
 8004568:	f000 f8fb 	bl	8004762 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800456c:	4603      	mov	r3, r0
 800456e:	2b00      	cmp	r3, #0
 8004570:	d001      	beq.n	8004576 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004572:	2301      	movs	r3, #1
 8004574:	e000      	b.n	8004578 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004576:	2300      	movs	r3, #0
}
 8004578:	4618      	mov	r0, r3
 800457a:	3718      	adds	r7, #24
 800457c:	46bd      	mov	sp, r7
 800457e:	bd80      	pop	{r7, pc}
 8004580:	00010008 	.word	0x00010008
 8004584:	00010002 	.word	0x00010002

08004588 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004588:	b580      	push	{r7, lr}
 800458a:	b088      	sub	sp, #32
 800458c:	af02      	add	r7, sp, #8
 800458e:	60f8      	str	r0, [r7, #12]
 8004590:	4608      	mov	r0, r1
 8004592:	4611      	mov	r1, r2
 8004594:	461a      	mov	r2, r3
 8004596:	4603      	mov	r3, r0
 8004598:	817b      	strh	r3, [r7, #10]
 800459a:	460b      	mov	r3, r1
 800459c:	813b      	strh	r3, [r7, #8]
 800459e:	4613      	mov	r3, r2
 80045a0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	681a      	ldr	r2, [r3, #0]
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80045b0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80045b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045b4:	9300      	str	r3, [sp, #0]
 80045b6:	6a3b      	ldr	r3, [r7, #32]
 80045b8:	2200      	movs	r2, #0
 80045ba:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80045be:	68f8      	ldr	r0, [r7, #12]
 80045c0:	f000 f878 	bl	80046b4 <I2C_WaitOnFlagUntilTimeout>
 80045c4:	4603      	mov	r3, r0
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d00d      	beq.n	80045e6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80045d8:	d103      	bne.n	80045e2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80045e0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80045e2:	2303      	movs	r3, #3
 80045e4:	e05f      	b.n	80046a6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80045e6:	897b      	ldrh	r3, [r7, #10]
 80045e8:	b2db      	uxtb	r3, r3
 80045ea:	461a      	mov	r2, r3
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80045f4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80045f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045f8:	6a3a      	ldr	r2, [r7, #32]
 80045fa:	492d      	ldr	r1, [pc, #180]	; (80046b0 <I2C_RequestMemoryWrite+0x128>)
 80045fc:	68f8      	ldr	r0, [r7, #12]
 80045fe:	f000 f8b0 	bl	8004762 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004602:	4603      	mov	r3, r0
 8004604:	2b00      	cmp	r3, #0
 8004606:	d001      	beq.n	800460c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004608:	2301      	movs	r3, #1
 800460a:	e04c      	b.n	80046a6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800460c:	2300      	movs	r3, #0
 800460e:	617b      	str	r3, [r7, #20]
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	695b      	ldr	r3, [r3, #20]
 8004616:	617b      	str	r3, [r7, #20]
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	699b      	ldr	r3, [r3, #24]
 800461e:	617b      	str	r3, [r7, #20]
 8004620:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004622:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004624:	6a39      	ldr	r1, [r7, #32]
 8004626:	68f8      	ldr	r0, [r7, #12]
 8004628:	f000 f91a 	bl	8004860 <I2C_WaitOnTXEFlagUntilTimeout>
 800462c:	4603      	mov	r3, r0
 800462e:	2b00      	cmp	r3, #0
 8004630:	d00d      	beq.n	800464e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004636:	2b04      	cmp	r3, #4
 8004638:	d107      	bne.n	800464a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	681a      	ldr	r2, [r3, #0]
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004648:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800464a:	2301      	movs	r3, #1
 800464c:	e02b      	b.n	80046a6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800464e:	88fb      	ldrh	r3, [r7, #6]
 8004650:	2b01      	cmp	r3, #1
 8004652:	d105      	bne.n	8004660 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004654:	893b      	ldrh	r3, [r7, #8]
 8004656:	b2da      	uxtb	r2, r3
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	611a      	str	r2, [r3, #16]
 800465e:	e021      	b.n	80046a4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004660:	893b      	ldrh	r3, [r7, #8]
 8004662:	0a1b      	lsrs	r3, r3, #8
 8004664:	b29b      	uxth	r3, r3
 8004666:	b2da      	uxtb	r2, r3
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800466e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004670:	6a39      	ldr	r1, [r7, #32]
 8004672:	68f8      	ldr	r0, [r7, #12]
 8004674:	f000 f8f4 	bl	8004860 <I2C_WaitOnTXEFlagUntilTimeout>
 8004678:	4603      	mov	r3, r0
 800467a:	2b00      	cmp	r3, #0
 800467c:	d00d      	beq.n	800469a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004682:	2b04      	cmp	r3, #4
 8004684:	d107      	bne.n	8004696 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	681a      	ldr	r2, [r3, #0]
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004694:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004696:	2301      	movs	r3, #1
 8004698:	e005      	b.n	80046a6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800469a:	893b      	ldrh	r3, [r7, #8]
 800469c:	b2da      	uxtb	r2, r3
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80046a4:	2300      	movs	r3, #0
}
 80046a6:	4618      	mov	r0, r3
 80046a8:	3718      	adds	r7, #24
 80046aa:	46bd      	mov	sp, r7
 80046ac:	bd80      	pop	{r7, pc}
 80046ae:	bf00      	nop
 80046b0:	00010002 	.word	0x00010002

080046b4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	b084      	sub	sp, #16
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	60f8      	str	r0, [r7, #12]
 80046bc:	60b9      	str	r1, [r7, #8]
 80046be:	603b      	str	r3, [r7, #0]
 80046c0:	4613      	mov	r3, r2
 80046c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80046c4:	e025      	b.n	8004712 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80046cc:	d021      	beq.n	8004712 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046ce:	f7fe fb79 	bl	8002dc4 <HAL_GetTick>
 80046d2:	4602      	mov	r2, r0
 80046d4:	69bb      	ldr	r3, [r7, #24]
 80046d6:	1ad3      	subs	r3, r2, r3
 80046d8:	683a      	ldr	r2, [r7, #0]
 80046da:	429a      	cmp	r2, r3
 80046dc:	d302      	bcc.n	80046e4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d116      	bne.n	8004712 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	2200      	movs	r2, #0
 80046e8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	2220      	movs	r2, #32
 80046ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	2200      	movs	r2, #0
 80046f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046fe:	f043 0220 	orr.w	r2, r3, #32
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	2200      	movs	r2, #0
 800470a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800470e:	2301      	movs	r3, #1
 8004710:	e023      	b.n	800475a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004712:	68bb      	ldr	r3, [r7, #8]
 8004714:	0c1b      	lsrs	r3, r3, #16
 8004716:	b2db      	uxtb	r3, r3
 8004718:	2b01      	cmp	r3, #1
 800471a:	d10d      	bne.n	8004738 <I2C_WaitOnFlagUntilTimeout+0x84>
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	695b      	ldr	r3, [r3, #20]
 8004722:	43da      	mvns	r2, r3
 8004724:	68bb      	ldr	r3, [r7, #8]
 8004726:	4013      	ands	r3, r2
 8004728:	b29b      	uxth	r3, r3
 800472a:	2b00      	cmp	r3, #0
 800472c:	bf0c      	ite	eq
 800472e:	2301      	moveq	r3, #1
 8004730:	2300      	movne	r3, #0
 8004732:	b2db      	uxtb	r3, r3
 8004734:	461a      	mov	r2, r3
 8004736:	e00c      	b.n	8004752 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	699b      	ldr	r3, [r3, #24]
 800473e:	43da      	mvns	r2, r3
 8004740:	68bb      	ldr	r3, [r7, #8]
 8004742:	4013      	ands	r3, r2
 8004744:	b29b      	uxth	r3, r3
 8004746:	2b00      	cmp	r3, #0
 8004748:	bf0c      	ite	eq
 800474a:	2301      	moveq	r3, #1
 800474c:	2300      	movne	r3, #0
 800474e:	b2db      	uxtb	r3, r3
 8004750:	461a      	mov	r2, r3
 8004752:	79fb      	ldrb	r3, [r7, #7]
 8004754:	429a      	cmp	r2, r3
 8004756:	d0b6      	beq.n	80046c6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004758:	2300      	movs	r3, #0
}
 800475a:	4618      	mov	r0, r3
 800475c:	3710      	adds	r7, #16
 800475e:	46bd      	mov	sp, r7
 8004760:	bd80      	pop	{r7, pc}

08004762 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004762:	b580      	push	{r7, lr}
 8004764:	b084      	sub	sp, #16
 8004766:	af00      	add	r7, sp, #0
 8004768:	60f8      	str	r0, [r7, #12]
 800476a:	60b9      	str	r1, [r7, #8]
 800476c:	607a      	str	r2, [r7, #4]
 800476e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004770:	e051      	b.n	8004816 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	695b      	ldr	r3, [r3, #20]
 8004778:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800477c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004780:	d123      	bne.n	80047ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	681a      	ldr	r2, [r3, #0]
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004790:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800479a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	2200      	movs	r2, #0
 80047a0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	2220      	movs	r2, #32
 80047a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	2200      	movs	r2, #0
 80047ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047b6:	f043 0204 	orr.w	r2, r3, #4
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	2200      	movs	r2, #0
 80047c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80047c6:	2301      	movs	r3, #1
 80047c8:	e046      	b.n	8004858 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80047d0:	d021      	beq.n	8004816 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047d2:	f7fe faf7 	bl	8002dc4 <HAL_GetTick>
 80047d6:	4602      	mov	r2, r0
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	1ad3      	subs	r3, r2, r3
 80047dc:	687a      	ldr	r2, [r7, #4]
 80047de:	429a      	cmp	r2, r3
 80047e0:	d302      	bcc.n	80047e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d116      	bne.n	8004816 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	2200      	movs	r2, #0
 80047ec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	2220      	movs	r2, #32
 80047f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	2200      	movs	r2, #0
 80047fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004802:	f043 0220 	orr.w	r2, r3, #32
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	2200      	movs	r2, #0
 800480e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004812:	2301      	movs	r3, #1
 8004814:	e020      	b.n	8004858 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004816:	68bb      	ldr	r3, [r7, #8]
 8004818:	0c1b      	lsrs	r3, r3, #16
 800481a:	b2db      	uxtb	r3, r3
 800481c:	2b01      	cmp	r3, #1
 800481e:	d10c      	bne.n	800483a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	695b      	ldr	r3, [r3, #20]
 8004826:	43da      	mvns	r2, r3
 8004828:	68bb      	ldr	r3, [r7, #8]
 800482a:	4013      	ands	r3, r2
 800482c:	b29b      	uxth	r3, r3
 800482e:	2b00      	cmp	r3, #0
 8004830:	bf14      	ite	ne
 8004832:	2301      	movne	r3, #1
 8004834:	2300      	moveq	r3, #0
 8004836:	b2db      	uxtb	r3, r3
 8004838:	e00b      	b.n	8004852 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	699b      	ldr	r3, [r3, #24]
 8004840:	43da      	mvns	r2, r3
 8004842:	68bb      	ldr	r3, [r7, #8]
 8004844:	4013      	ands	r3, r2
 8004846:	b29b      	uxth	r3, r3
 8004848:	2b00      	cmp	r3, #0
 800484a:	bf14      	ite	ne
 800484c:	2301      	movne	r3, #1
 800484e:	2300      	moveq	r3, #0
 8004850:	b2db      	uxtb	r3, r3
 8004852:	2b00      	cmp	r3, #0
 8004854:	d18d      	bne.n	8004772 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004856:	2300      	movs	r3, #0
}
 8004858:	4618      	mov	r0, r3
 800485a:	3710      	adds	r7, #16
 800485c:	46bd      	mov	sp, r7
 800485e:	bd80      	pop	{r7, pc}

08004860 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004860:	b580      	push	{r7, lr}
 8004862:	b084      	sub	sp, #16
 8004864:	af00      	add	r7, sp, #0
 8004866:	60f8      	str	r0, [r7, #12]
 8004868:	60b9      	str	r1, [r7, #8]
 800486a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800486c:	e02d      	b.n	80048ca <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800486e:	68f8      	ldr	r0, [r7, #12]
 8004870:	f000 f878 	bl	8004964 <I2C_IsAcknowledgeFailed>
 8004874:	4603      	mov	r3, r0
 8004876:	2b00      	cmp	r3, #0
 8004878:	d001      	beq.n	800487e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800487a:	2301      	movs	r3, #1
 800487c:	e02d      	b.n	80048da <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800487e:	68bb      	ldr	r3, [r7, #8]
 8004880:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004884:	d021      	beq.n	80048ca <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004886:	f7fe fa9d 	bl	8002dc4 <HAL_GetTick>
 800488a:	4602      	mov	r2, r0
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	1ad3      	subs	r3, r2, r3
 8004890:	68ba      	ldr	r2, [r7, #8]
 8004892:	429a      	cmp	r2, r3
 8004894:	d302      	bcc.n	800489c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004896:	68bb      	ldr	r3, [r7, #8]
 8004898:	2b00      	cmp	r3, #0
 800489a:	d116      	bne.n	80048ca <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	2200      	movs	r2, #0
 80048a0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	2220      	movs	r2, #32
 80048a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	2200      	movs	r2, #0
 80048ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048b6:	f043 0220 	orr.w	r2, r3, #32
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	2200      	movs	r2, #0
 80048c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80048c6:	2301      	movs	r3, #1
 80048c8:	e007      	b.n	80048da <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	695b      	ldr	r3, [r3, #20]
 80048d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048d4:	2b80      	cmp	r3, #128	; 0x80
 80048d6:	d1ca      	bne.n	800486e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80048d8:	2300      	movs	r3, #0
}
 80048da:	4618      	mov	r0, r3
 80048dc:	3710      	adds	r7, #16
 80048de:	46bd      	mov	sp, r7
 80048e0:	bd80      	pop	{r7, pc}

080048e2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80048e2:	b580      	push	{r7, lr}
 80048e4:	b084      	sub	sp, #16
 80048e6:	af00      	add	r7, sp, #0
 80048e8:	60f8      	str	r0, [r7, #12]
 80048ea:	60b9      	str	r1, [r7, #8]
 80048ec:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80048ee:	e02d      	b.n	800494c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80048f0:	68f8      	ldr	r0, [r7, #12]
 80048f2:	f000 f837 	bl	8004964 <I2C_IsAcknowledgeFailed>
 80048f6:	4603      	mov	r3, r0
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d001      	beq.n	8004900 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80048fc:	2301      	movs	r3, #1
 80048fe:	e02d      	b.n	800495c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004900:	68bb      	ldr	r3, [r7, #8]
 8004902:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004906:	d021      	beq.n	800494c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004908:	f7fe fa5c 	bl	8002dc4 <HAL_GetTick>
 800490c:	4602      	mov	r2, r0
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	1ad3      	subs	r3, r2, r3
 8004912:	68ba      	ldr	r2, [r7, #8]
 8004914:	429a      	cmp	r2, r3
 8004916:	d302      	bcc.n	800491e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004918:	68bb      	ldr	r3, [r7, #8]
 800491a:	2b00      	cmp	r3, #0
 800491c:	d116      	bne.n	800494c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	2200      	movs	r2, #0
 8004922:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	2220      	movs	r2, #32
 8004928:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	2200      	movs	r2, #0
 8004930:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004938:	f043 0220 	orr.w	r2, r3, #32
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	2200      	movs	r2, #0
 8004944:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004948:	2301      	movs	r3, #1
 800494a:	e007      	b.n	800495c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	695b      	ldr	r3, [r3, #20]
 8004952:	f003 0304 	and.w	r3, r3, #4
 8004956:	2b04      	cmp	r3, #4
 8004958:	d1ca      	bne.n	80048f0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800495a:	2300      	movs	r3, #0
}
 800495c:	4618      	mov	r0, r3
 800495e:	3710      	adds	r7, #16
 8004960:	46bd      	mov	sp, r7
 8004962:	bd80      	pop	{r7, pc}

08004964 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004964:	b480      	push	{r7}
 8004966:	b083      	sub	sp, #12
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	695b      	ldr	r3, [r3, #20]
 8004972:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004976:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800497a:	d11b      	bne.n	80049b4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004984:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	2200      	movs	r2, #0
 800498a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2220      	movs	r2, #32
 8004990:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2200      	movs	r2, #0
 8004998:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049a0:	f043 0204 	orr.w	r2, r3, #4
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2200      	movs	r2, #0
 80049ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80049b0:	2301      	movs	r3, #1
 80049b2:	e000      	b.n	80049b6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80049b4:	2300      	movs	r3, #0
}
 80049b6:	4618      	mov	r0, r3
 80049b8:	370c      	adds	r7, #12
 80049ba:	46bd      	mov	sp, r7
 80049bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c0:	4770      	bx	lr
	...

080049c4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b086      	sub	sp, #24
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d101      	bne.n	80049d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80049d2:	2301      	movs	r3, #1
 80049d4:	e25b      	b.n	8004e8e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f003 0301 	and.w	r3, r3, #1
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d075      	beq.n	8004ace <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80049e2:	4ba3      	ldr	r3, [pc, #652]	; (8004c70 <HAL_RCC_OscConfig+0x2ac>)
 80049e4:	689b      	ldr	r3, [r3, #8]
 80049e6:	f003 030c 	and.w	r3, r3, #12
 80049ea:	2b04      	cmp	r3, #4
 80049ec:	d00c      	beq.n	8004a08 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80049ee:	4ba0      	ldr	r3, [pc, #640]	; (8004c70 <HAL_RCC_OscConfig+0x2ac>)
 80049f0:	689b      	ldr	r3, [r3, #8]
 80049f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80049f6:	2b08      	cmp	r3, #8
 80049f8:	d112      	bne.n	8004a20 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80049fa:	4b9d      	ldr	r3, [pc, #628]	; (8004c70 <HAL_RCC_OscConfig+0x2ac>)
 80049fc:	685b      	ldr	r3, [r3, #4]
 80049fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a02:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004a06:	d10b      	bne.n	8004a20 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a08:	4b99      	ldr	r3, [pc, #612]	; (8004c70 <HAL_RCC_OscConfig+0x2ac>)
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d05b      	beq.n	8004acc <HAL_RCC_OscConfig+0x108>
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	685b      	ldr	r3, [r3, #4]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d157      	bne.n	8004acc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004a1c:	2301      	movs	r3, #1
 8004a1e:	e236      	b.n	8004e8e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	685b      	ldr	r3, [r3, #4]
 8004a24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a28:	d106      	bne.n	8004a38 <HAL_RCC_OscConfig+0x74>
 8004a2a:	4b91      	ldr	r3, [pc, #580]	; (8004c70 <HAL_RCC_OscConfig+0x2ac>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	4a90      	ldr	r2, [pc, #576]	; (8004c70 <HAL_RCC_OscConfig+0x2ac>)
 8004a30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a34:	6013      	str	r3, [r2, #0]
 8004a36:	e01d      	b.n	8004a74 <HAL_RCC_OscConfig+0xb0>
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	685b      	ldr	r3, [r3, #4]
 8004a3c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004a40:	d10c      	bne.n	8004a5c <HAL_RCC_OscConfig+0x98>
 8004a42:	4b8b      	ldr	r3, [pc, #556]	; (8004c70 <HAL_RCC_OscConfig+0x2ac>)
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	4a8a      	ldr	r2, [pc, #552]	; (8004c70 <HAL_RCC_OscConfig+0x2ac>)
 8004a48:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004a4c:	6013      	str	r3, [r2, #0]
 8004a4e:	4b88      	ldr	r3, [pc, #544]	; (8004c70 <HAL_RCC_OscConfig+0x2ac>)
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	4a87      	ldr	r2, [pc, #540]	; (8004c70 <HAL_RCC_OscConfig+0x2ac>)
 8004a54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a58:	6013      	str	r3, [r2, #0]
 8004a5a:	e00b      	b.n	8004a74 <HAL_RCC_OscConfig+0xb0>
 8004a5c:	4b84      	ldr	r3, [pc, #528]	; (8004c70 <HAL_RCC_OscConfig+0x2ac>)
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	4a83      	ldr	r2, [pc, #524]	; (8004c70 <HAL_RCC_OscConfig+0x2ac>)
 8004a62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a66:	6013      	str	r3, [r2, #0]
 8004a68:	4b81      	ldr	r3, [pc, #516]	; (8004c70 <HAL_RCC_OscConfig+0x2ac>)
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	4a80      	ldr	r2, [pc, #512]	; (8004c70 <HAL_RCC_OscConfig+0x2ac>)
 8004a6e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004a72:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	685b      	ldr	r3, [r3, #4]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d013      	beq.n	8004aa4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a7c:	f7fe f9a2 	bl	8002dc4 <HAL_GetTick>
 8004a80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a82:	e008      	b.n	8004a96 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004a84:	f7fe f99e 	bl	8002dc4 <HAL_GetTick>
 8004a88:	4602      	mov	r2, r0
 8004a8a:	693b      	ldr	r3, [r7, #16]
 8004a8c:	1ad3      	subs	r3, r2, r3
 8004a8e:	2b64      	cmp	r3, #100	; 0x64
 8004a90:	d901      	bls.n	8004a96 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004a92:	2303      	movs	r3, #3
 8004a94:	e1fb      	b.n	8004e8e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a96:	4b76      	ldr	r3, [pc, #472]	; (8004c70 <HAL_RCC_OscConfig+0x2ac>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d0f0      	beq.n	8004a84 <HAL_RCC_OscConfig+0xc0>
 8004aa2:	e014      	b.n	8004ace <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004aa4:	f7fe f98e 	bl	8002dc4 <HAL_GetTick>
 8004aa8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004aaa:	e008      	b.n	8004abe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004aac:	f7fe f98a 	bl	8002dc4 <HAL_GetTick>
 8004ab0:	4602      	mov	r2, r0
 8004ab2:	693b      	ldr	r3, [r7, #16]
 8004ab4:	1ad3      	subs	r3, r2, r3
 8004ab6:	2b64      	cmp	r3, #100	; 0x64
 8004ab8:	d901      	bls.n	8004abe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004aba:	2303      	movs	r3, #3
 8004abc:	e1e7      	b.n	8004e8e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004abe:	4b6c      	ldr	r3, [pc, #432]	; (8004c70 <HAL_RCC_OscConfig+0x2ac>)
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d1f0      	bne.n	8004aac <HAL_RCC_OscConfig+0xe8>
 8004aca:	e000      	b.n	8004ace <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004acc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f003 0302 	and.w	r3, r3, #2
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d063      	beq.n	8004ba2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004ada:	4b65      	ldr	r3, [pc, #404]	; (8004c70 <HAL_RCC_OscConfig+0x2ac>)
 8004adc:	689b      	ldr	r3, [r3, #8]
 8004ade:	f003 030c 	and.w	r3, r3, #12
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d00b      	beq.n	8004afe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004ae6:	4b62      	ldr	r3, [pc, #392]	; (8004c70 <HAL_RCC_OscConfig+0x2ac>)
 8004ae8:	689b      	ldr	r3, [r3, #8]
 8004aea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004aee:	2b08      	cmp	r3, #8
 8004af0:	d11c      	bne.n	8004b2c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004af2:	4b5f      	ldr	r3, [pc, #380]	; (8004c70 <HAL_RCC_OscConfig+0x2ac>)
 8004af4:	685b      	ldr	r3, [r3, #4]
 8004af6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d116      	bne.n	8004b2c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004afe:	4b5c      	ldr	r3, [pc, #368]	; (8004c70 <HAL_RCC_OscConfig+0x2ac>)
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f003 0302 	and.w	r3, r3, #2
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d005      	beq.n	8004b16 <HAL_RCC_OscConfig+0x152>
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	68db      	ldr	r3, [r3, #12]
 8004b0e:	2b01      	cmp	r3, #1
 8004b10:	d001      	beq.n	8004b16 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004b12:	2301      	movs	r3, #1
 8004b14:	e1bb      	b.n	8004e8e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b16:	4b56      	ldr	r3, [pc, #344]	; (8004c70 <HAL_RCC_OscConfig+0x2ac>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	691b      	ldr	r3, [r3, #16]
 8004b22:	00db      	lsls	r3, r3, #3
 8004b24:	4952      	ldr	r1, [pc, #328]	; (8004c70 <HAL_RCC_OscConfig+0x2ac>)
 8004b26:	4313      	orrs	r3, r2
 8004b28:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b2a:	e03a      	b.n	8004ba2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	68db      	ldr	r3, [r3, #12]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d020      	beq.n	8004b76 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004b34:	4b4f      	ldr	r3, [pc, #316]	; (8004c74 <HAL_RCC_OscConfig+0x2b0>)
 8004b36:	2201      	movs	r2, #1
 8004b38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b3a:	f7fe f943 	bl	8002dc4 <HAL_GetTick>
 8004b3e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b40:	e008      	b.n	8004b54 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004b42:	f7fe f93f 	bl	8002dc4 <HAL_GetTick>
 8004b46:	4602      	mov	r2, r0
 8004b48:	693b      	ldr	r3, [r7, #16]
 8004b4a:	1ad3      	subs	r3, r2, r3
 8004b4c:	2b02      	cmp	r3, #2
 8004b4e:	d901      	bls.n	8004b54 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004b50:	2303      	movs	r3, #3
 8004b52:	e19c      	b.n	8004e8e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b54:	4b46      	ldr	r3, [pc, #280]	; (8004c70 <HAL_RCC_OscConfig+0x2ac>)
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f003 0302 	and.w	r3, r3, #2
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d0f0      	beq.n	8004b42 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b60:	4b43      	ldr	r3, [pc, #268]	; (8004c70 <HAL_RCC_OscConfig+0x2ac>)
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	691b      	ldr	r3, [r3, #16]
 8004b6c:	00db      	lsls	r3, r3, #3
 8004b6e:	4940      	ldr	r1, [pc, #256]	; (8004c70 <HAL_RCC_OscConfig+0x2ac>)
 8004b70:	4313      	orrs	r3, r2
 8004b72:	600b      	str	r3, [r1, #0]
 8004b74:	e015      	b.n	8004ba2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004b76:	4b3f      	ldr	r3, [pc, #252]	; (8004c74 <HAL_RCC_OscConfig+0x2b0>)
 8004b78:	2200      	movs	r2, #0
 8004b7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b7c:	f7fe f922 	bl	8002dc4 <HAL_GetTick>
 8004b80:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b82:	e008      	b.n	8004b96 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004b84:	f7fe f91e 	bl	8002dc4 <HAL_GetTick>
 8004b88:	4602      	mov	r2, r0
 8004b8a:	693b      	ldr	r3, [r7, #16]
 8004b8c:	1ad3      	subs	r3, r2, r3
 8004b8e:	2b02      	cmp	r3, #2
 8004b90:	d901      	bls.n	8004b96 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004b92:	2303      	movs	r3, #3
 8004b94:	e17b      	b.n	8004e8e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b96:	4b36      	ldr	r3, [pc, #216]	; (8004c70 <HAL_RCC_OscConfig+0x2ac>)
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f003 0302 	and.w	r3, r3, #2
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d1f0      	bne.n	8004b84 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f003 0308 	and.w	r3, r3, #8
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d030      	beq.n	8004c10 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	695b      	ldr	r3, [r3, #20]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d016      	beq.n	8004be4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004bb6:	4b30      	ldr	r3, [pc, #192]	; (8004c78 <HAL_RCC_OscConfig+0x2b4>)
 8004bb8:	2201      	movs	r2, #1
 8004bba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bbc:	f7fe f902 	bl	8002dc4 <HAL_GetTick>
 8004bc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004bc2:	e008      	b.n	8004bd6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004bc4:	f7fe f8fe 	bl	8002dc4 <HAL_GetTick>
 8004bc8:	4602      	mov	r2, r0
 8004bca:	693b      	ldr	r3, [r7, #16]
 8004bcc:	1ad3      	subs	r3, r2, r3
 8004bce:	2b02      	cmp	r3, #2
 8004bd0:	d901      	bls.n	8004bd6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004bd2:	2303      	movs	r3, #3
 8004bd4:	e15b      	b.n	8004e8e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004bd6:	4b26      	ldr	r3, [pc, #152]	; (8004c70 <HAL_RCC_OscConfig+0x2ac>)
 8004bd8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004bda:	f003 0302 	and.w	r3, r3, #2
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d0f0      	beq.n	8004bc4 <HAL_RCC_OscConfig+0x200>
 8004be2:	e015      	b.n	8004c10 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004be4:	4b24      	ldr	r3, [pc, #144]	; (8004c78 <HAL_RCC_OscConfig+0x2b4>)
 8004be6:	2200      	movs	r2, #0
 8004be8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004bea:	f7fe f8eb 	bl	8002dc4 <HAL_GetTick>
 8004bee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004bf0:	e008      	b.n	8004c04 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004bf2:	f7fe f8e7 	bl	8002dc4 <HAL_GetTick>
 8004bf6:	4602      	mov	r2, r0
 8004bf8:	693b      	ldr	r3, [r7, #16]
 8004bfa:	1ad3      	subs	r3, r2, r3
 8004bfc:	2b02      	cmp	r3, #2
 8004bfe:	d901      	bls.n	8004c04 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004c00:	2303      	movs	r3, #3
 8004c02:	e144      	b.n	8004e8e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c04:	4b1a      	ldr	r3, [pc, #104]	; (8004c70 <HAL_RCC_OscConfig+0x2ac>)
 8004c06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c08:	f003 0302 	and.w	r3, r3, #2
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d1f0      	bne.n	8004bf2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f003 0304 	and.w	r3, r3, #4
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	f000 80a0 	beq.w	8004d5e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004c1e:	2300      	movs	r3, #0
 8004c20:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004c22:	4b13      	ldr	r3, [pc, #76]	; (8004c70 <HAL_RCC_OscConfig+0x2ac>)
 8004c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d10f      	bne.n	8004c4e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c2e:	2300      	movs	r3, #0
 8004c30:	60bb      	str	r3, [r7, #8]
 8004c32:	4b0f      	ldr	r3, [pc, #60]	; (8004c70 <HAL_RCC_OscConfig+0x2ac>)
 8004c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c36:	4a0e      	ldr	r2, [pc, #56]	; (8004c70 <HAL_RCC_OscConfig+0x2ac>)
 8004c38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c3c:	6413      	str	r3, [r2, #64]	; 0x40
 8004c3e:	4b0c      	ldr	r3, [pc, #48]	; (8004c70 <HAL_RCC_OscConfig+0x2ac>)
 8004c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c46:	60bb      	str	r3, [r7, #8]
 8004c48:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004c4a:	2301      	movs	r3, #1
 8004c4c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c4e:	4b0b      	ldr	r3, [pc, #44]	; (8004c7c <HAL_RCC_OscConfig+0x2b8>)
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d121      	bne.n	8004c9e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004c5a:	4b08      	ldr	r3, [pc, #32]	; (8004c7c <HAL_RCC_OscConfig+0x2b8>)
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	4a07      	ldr	r2, [pc, #28]	; (8004c7c <HAL_RCC_OscConfig+0x2b8>)
 8004c60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c64:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004c66:	f7fe f8ad 	bl	8002dc4 <HAL_GetTick>
 8004c6a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c6c:	e011      	b.n	8004c92 <HAL_RCC_OscConfig+0x2ce>
 8004c6e:	bf00      	nop
 8004c70:	40023800 	.word	0x40023800
 8004c74:	42470000 	.word	0x42470000
 8004c78:	42470e80 	.word	0x42470e80
 8004c7c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c80:	f7fe f8a0 	bl	8002dc4 <HAL_GetTick>
 8004c84:	4602      	mov	r2, r0
 8004c86:	693b      	ldr	r3, [r7, #16]
 8004c88:	1ad3      	subs	r3, r2, r3
 8004c8a:	2b02      	cmp	r3, #2
 8004c8c:	d901      	bls.n	8004c92 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004c8e:	2303      	movs	r3, #3
 8004c90:	e0fd      	b.n	8004e8e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c92:	4b81      	ldr	r3, [pc, #516]	; (8004e98 <HAL_RCC_OscConfig+0x4d4>)
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d0f0      	beq.n	8004c80 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	689b      	ldr	r3, [r3, #8]
 8004ca2:	2b01      	cmp	r3, #1
 8004ca4:	d106      	bne.n	8004cb4 <HAL_RCC_OscConfig+0x2f0>
 8004ca6:	4b7d      	ldr	r3, [pc, #500]	; (8004e9c <HAL_RCC_OscConfig+0x4d8>)
 8004ca8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004caa:	4a7c      	ldr	r2, [pc, #496]	; (8004e9c <HAL_RCC_OscConfig+0x4d8>)
 8004cac:	f043 0301 	orr.w	r3, r3, #1
 8004cb0:	6713      	str	r3, [r2, #112]	; 0x70
 8004cb2:	e01c      	b.n	8004cee <HAL_RCC_OscConfig+0x32a>
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	689b      	ldr	r3, [r3, #8]
 8004cb8:	2b05      	cmp	r3, #5
 8004cba:	d10c      	bne.n	8004cd6 <HAL_RCC_OscConfig+0x312>
 8004cbc:	4b77      	ldr	r3, [pc, #476]	; (8004e9c <HAL_RCC_OscConfig+0x4d8>)
 8004cbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cc0:	4a76      	ldr	r2, [pc, #472]	; (8004e9c <HAL_RCC_OscConfig+0x4d8>)
 8004cc2:	f043 0304 	orr.w	r3, r3, #4
 8004cc6:	6713      	str	r3, [r2, #112]	; 0x70
 8004cc8:	4b74      	ldr	r3, [pc, #464]	; (8004e9c <HAL_RCC_OscConfig+0x4d8>)
 8004cca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ccc:	4a73      	ldr	r2, [pc, #460]	; (8004e9c <HAL_RCC_OscConfig+0x4d8>)
 8004cce:	f043 0301 	orr.w	r3, r3, #1
 8004cd2:	6713      	str	r3, [r2, #112]	; 0x70
 8004cd4:	e00b      	b.n	8004cee <HAL_RCC_OscConfig+0x32a>
 8004cd6:	4b71      	ldr	r3, [pc, #452]	; (8004e9c <HAL_RCC_OscConfig+0x4d8>)
 8004cd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cda:	4a70      	ldr	r2, [pc, #448]	; (8004e9c <HAL_RCC_OscConfig+0x4d8>)
 8004cdc:	f023 0301 	bic.w	r3, r3, #1
 8004ce0:	6713      	str	r3, [r2, #112]	; 0x70
 8004ce2:	4b6e      	ldr	r3, [pc, #440]	; (8004e9c <HAL_RCC_OscConfig+0x4d8>)
 8004ce4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ce6:	4a6d      	ldr	r2, [pc, #436]	; (8004e9c <HAL_RCC_OscConfig+0x4d8>)
 8004ce8:	f023 0304 	bic.w	r3, r3, #4
 8004cec:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	689b      	ldr	r3, [r3, #8]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d015      	beq.n	8004d22 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cf6:	f7fe f865 	bl	8002dc4 <HAL_GetTick>
 8004cfa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004cfc:	e00a      	b.n	8004d14 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004cfe:	f7fe f861 	bl	8002dc4 <HAL_GetTick>
 8004d02:	4602      	mov	r2, r0
 8004d04:	693b      	ldr	r3, [r7, #16]
 8004d06:	1ad3      	subs	r3, r2, r3
 8004d08:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d0c:	4293      	cmp	r3, r2
 8004d0e:	d901      	bls.n	8004d14 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004d10:	2303      	movs	r3, #3
 8004d12:	e0bc      	b.n	8004e8e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d14:	4b61      	ldr	r3, [pc, #388]	; (8004e9c <HAL_RCC_OscConfig+0x4d8>)
 8004d16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d18:	f003 0302 	and.w	r3, r3, #2
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d0ee      	beq.n	8004cfe <HAL_RCC_OscConfig+0x33a>
 8004d20:	e014      	b.n	8004d4c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d22:	f7fe f84f 	bl	8002dc4 <HAL_GetTick>
 8004d26:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d28:	e00a      	b.n	8004d40 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004d2a:	f7fe f84b 	bl	8002dc4 <HAL_GetTick>
 8004d2e:	4602      	mov	r2, r0
 8004d30:	693b      	ldr	r3, [r7, #16]
 8004d32:	1ad3      	subs	r3, r2, r3
 8004d34:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d38:	4293      	cmp	r3, r2
 8004d3a:	d901      	bls.n	8004d40 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004d3c:	2303      	movs	r3, #3
 8004d3e:	e0a6      	b.n	8004e8e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d40:	4b56      	ldr	r3, [pc, #344]	; (8004e9c <HAL_RCC_OscConfig+0x4d8>)
 8004d42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d44:	f003 0302 	and.w	r3, r3, #2
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d1ee      	bne.n	8004d2a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004d4c:	7dfb      	ldrb	r3, [r7, #23]
 8004d4e:	2b01      	cmp	r3, #1
 8004d50:	d105      	bne.n	8004d5e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d52:	4b52      	ldr	r3, [pc, #328]	; (8004e9c <HAL_RCC_OscConfig+0x4d8>)
 8004d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d56:	4a51      	ldr	r2, [pc, #324]	; (8004e9c <HAL_RCC_OscConfig+0x4d8>)
 8004d58:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d5c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	699b      	ldr	r3, [r3, #24]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	f000 8092 	beq.w	8004e8c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004d68:	4b4c      	ldr	r3, [pc, #304]	; (8004e9c <HAL_RCC_OscConfig+0x4d8>)
 8004d6a:	689b      	ldr	r3, [r3, #8]
 8004d6c:	f003 030c 	and.w	r3, r3, #12
 8004d70:	2b08      	cmp	r3, #8
 8004d72:	d05c      	beq.n	8004e2e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	699b      	ldr	r3, [r3, #24]
 8004d78:	2b02      	cmp	r3, #2
 8004d7a:	d141      	bne.n	8004e00 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d7c:	4b48      	ldr	r3, [pc, #288]	; (8004ea0 <HAL_RCC_OscConfig+0x4dc>)
 8004d7e:	2200      	movs	r2, #0
 8004d80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d82:	f7fe f81f 	bl	8002dc4 <HAL_GetTick>
 8004d86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d88:	e008      	b.n	8004d9c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d8a:	f7fe f81b 	bl	8002dc4 <HAL_GetTick>
 8004d8e:	4602      	mov	r2, r0
 8004d90:	693b      	ldr	r3, [r7, #16]
 8004d92:	1ad3      	subs	r3, r2, r3
 8004d94:	2b02      	cmp	r3, #2
 8004d96:	d901      	bls.n	8004d9c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004d98:	2303      	movs	r3, #3
 8004d9a:	e078      	b.n	8004e8e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d9c:	4b3f      	ldr	r3, [pc, #252]	; (8004e9c <HAL_RCC_OscConfig+0x4d8>)
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d1f0      	bne.n	8004d8a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	69da      	ldr	r2, [r3, #28]
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	6a1b      	ldr	r3, [r3, #32]
 8004db0:	431a      	orrs	r2, r3
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004db6:	019b      	lsls	r3, r3, #6
 8004db8:	431a      	orrs	r2, r3
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dbe:	085b      	lsrs	r3, r3, #1
 8004dc0:	3b01      	subs	r3, #1
 8004dc2:	041b      	lsls	r3, r3, #16
 8004dc4:	431a      	orrs	r2, r3
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dca:	061b      	lsls	r3, r3, #24
 8004dcc:	4933      	ldr	r1, [pc, #204]	; (8004e9c <HAL_RCC_OscConfig+0x4d8>)
 8004dce:	4313      	orrs	r3, r2
 8004dd0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004dd2:	4b33      	ldr	r3, [pc, #204]	; (8004ea0 <HAL_RCC_OscConfig+0x4dc>)
 8004dd4:	2201      	movs	r2, #1
 8004dd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004dd8:	f7fd fff4 	bl	8002dc4 <HAL_GetTick>
 8004ddc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004dde:	e008      	b.n	8004df2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004de0:	f7fd fff0 	bl	8002dc4 <HAL_GetTick>
 8004de4:	4602      	mov	r2, r0
 8004de6:	693b      	ldr	r3, [r7, #16]
 8004de8:	1ad3      	subs	r3, r2, r3
 8004dea:	2b02      	cmp	r3, #2
 8004dec:	d901      	bls.n	8004df2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004dee:	2303      	movs	r3, #3
 8004df0:	e04d      	b.n	8004e8e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004df2:	4b2a      	ldr	r3, [pc, #168]	; (8004e9c <HAL_RCC_OscConfig+0x4d8>)
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d0f0      	beq.n	8004de0 <HAL_RCC_OscConfig+0x41c>
 8004dfe:	e045      	b.n	8004e8c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e00:	4b27      	ldr	r3, [pc, #156]	; (8004ea0 <HAL_RCC_OscConfig+0x4dc>)
 8004e02:	2200      	movs	r2, #0
 8004e04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e06:	f7fd ffdd 	bl	8002dc4 <HAL_GetTick>
 8004e0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e0c:	e008      	b.n	8004e20 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e0e:	f7fd ffd9 	bl	8002dc4 <HAL_GetTick>
 8004e12:	4602      	mov	r2, r0
 8004e14:	693b      	ldr	r3, [r7, #16]
 8004e16:	1ad3      	subs	r3, r2, r3
 8004e18:	2b02      	cmp	r3, #2
 8004e1a:	d901      	bls.n	8004e20 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004e1c:	2303      	movs	r3, #3
 8004e1e:	e036      	b.n	8004e8e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e20:	4b1e      	ldr	r3, [pc, #120]	; (8004e9c <HAL_RCC_OscConfig+0x4d8>)
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d1f0      	bne.n	8004e0e <HAL_RCC_OscConfig+0x44a>
 8004e2c:	e02e      	b.n	8004e8c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	699b      	ldr	r3, [r3, #24]
 8004e32:	2b01      	cmp	r3, #1
 8004e34:	d101      	bne.n	8004e3a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004e36:	2301      	movs	r3, #1
 8004e38:	e029      	b.n	8004e8e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004e3a:	4b18      	ldr	r3, [pc, #96]	; (8004e9c <HAL_RCC_OscConfig+0x4d8>)
 8004e3c:	685b      	ldr	r3, [r3, #4]
 8004e3e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	69db      	ldr	r3, [r3, #28]
 8004e4a:	429a      	cmp	r2, r3
 8004e4c:	d11c      	bne.n	8004e88 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e58:	429a      	cmp	r2, r3
 8004e5a:	d115      	bne.n	8004e88 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004e5c:	68fa      	ldr	r2, [r7, #12]
 8004e5e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004e62:	4013      	ands	r3, r2
 8004e64:	687a      	ldr	r2, [r7, #4]
 8004e66:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004e68:	4293      	cmp	r3, r2
 8004e6a:	d10d      	bne.n	8004e88 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004e76:	429a      	cmp	r2, r3
 8004e78:	d106      	bne.n	8004e88 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004e84:	429a      	cmp	r2, r3
 8004e86:	d001      	beq.n	8004e8c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8004e88:	2301      	movs	r3, #1
 8004e8a:	e000      	b.n	8004e8e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8004e8c:	2300      	movs	r3, #0
}
 8004e8e:	4618      	mov	r0, r3
 8004e90:	3718      	adds	r7, #24
 8004e92:	46bd      	mov	sp, r7
 8004e94:	bd80      	pop	{r7, pc}
 8004e96:	bf00      	nop
 8004e98:	40007000 	.word	0x40007000
 8004e9c:	40023800 	.word	0x40023800
 8004ea0:	42470060 	.word	0x42470060

08004ea4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	b084      	sub	sp, #16
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
 8004eac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d101      	bne.n	8004eb8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004eb4:	2301      	movs	r3, #1
 8004eb6:	e0cc      	b.n	8005052 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004eb8:	4b68      	ldr	r3, [pc, #416]	; (800505c <HAL_RCC_ClockConfig+0x1b8>)
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f003 030f 	and.w	r3, r3, #15
 8004ec0:	683a      	ldr	r2, [r7, #0]
 8004ec2:	429a      	cmp	r2, r3
 8004ec4:	d90c      	bls.n	8004ee0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ec6:	4b65      	ldr	r3, [pc, #404]	; (800505c <HAL_RCC_ClockConfig+0x1b8>)
 8004ec8:	683a      	ldr	r2, [r7, #0]
 8004eca:	b2d2      	uxtb	r2, r2
 8004ecc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ece:	4b63      	ldr	r3, [pc, #396]	; (800505c <HAL_RCC_ClockConfig+0x1b8>)
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f003 030f 	and.w	r3, r3, #15
 8004ed6:	683a      	ldr	r2, [r7, #0]
 8004ed8:	429a      	cmp	r2, r3
 8004eda:	d001      	beq.n	8004ee0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004edc:	2301      	movs	r3, #1
 8004ede:	e0b8      	b.n	8005052 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f003 0302 	and.w	r3, r3, #2
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d020      	beq.n	8004f2e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f003 0304 	and.w	r3, r3, #4
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d005      	beq.n	8004f04 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004ef8:	4b59      	ldr	r3, [pc, #356]	; (8005060 <HAL_RCC_ClockConfig+0x1bc>)
 8004efa:	689b      	ldr	r3, [r3, #8]
 8004efc:	4a58      	ldr	r2, [pc, #352]	; (8005060 <HAL_RCC_ClockConfig+0x1bc>)
 8004efe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004f02:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f003 0308 	and.w	r3, r3, #8
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d005      	beq.n	8004f1c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004f10:	4b53      	ldr	r3, [pc, #332]	; (8005060 <HAL_RCC_ClockConfig+0x1bc>)
 8004f12:	689b      	ldr	r3, [r3, #8]
 8004f14:	4a52      	ldr	r2, [pc, #328]	; (8005060 <HAL_RCC_ClockConfig+0x1bc>)
 8004f16:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004f1a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004f1c:	4b50      	ldr	r3, [pc, #320]	; (8005060 <HAL_RCC_ClockConfig+0x1bc>)
 8004f1e:	689b      	ldr	r3, [r3, #8]
 8004f20:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	689b      	ldr	r3, [r3, #8]
 8004f28:	494d      	ldr	r1, [pc, #308]	; (8005060 <HAL_RCC_ClockConfig+0x1bc>)
 8004f2a:	4313      	orrs	r3, r2
 8004f2c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f003 0301 	and.w	r3, r3, #1
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d044      	beq.n	8004fc4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	685b      	ldr	r3, [r3, #4]
 8004f3e:	2b01      	cmp	r3, #1
 8004f40:	d107      	bne.n	8004f52 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f42:	4b47      	ldr	r3, [pc, #284]	; (8005060 <HAL_RCC_ClockConfig+0x1bc>)
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d119      	bne.n	8004f82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f4e:	2301      	movs	r3, #1
 8004f50:	e07f      	b.n	8005052 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	685b      	ldr	r3, [r3, #4]
 8004f56:	2b02      	cmp	r3, #2
 8004f58:	d003      	beq.n	8004f62 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004f5e:	2b03      	cmp	r3, #3
 8004f60:	d107      	bne.n	8004f72 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f62:	4b3f      	ldr	r3, [pc, #252]	; (8005060 <HAL_RCC_ClockConfig+0x1bc>)
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d109      	bne.n	8004f82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f6e:	2301      	movs	r3, #1
 8004f70:	e06f      	b.n	8005052 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f72:	4b3b      	ldr	r3, [pc, #236]	; (8005060 <HAL_RCC_ClockConfig+0x1bc>)
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f003 0302 	and.w	r3, r3, #2
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d101      	bne.n	8004f82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f7e:	2301      	movs	r3, #1
 8004f80:	e067      	b.n	8005052 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004f82:	4b37      	ldr	r3, [pc, #220]	; (8005060 <HAL_RCC_ClockConfig+0x1bc>)
 8004f84:	689b      	ldr	r3, [r3, #8]
 8004f86:	f023 0203 	bic.w	r2, r3, #3
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	685b      	ldr	r3, [r3, #4]
 8004f8e:	4934      	ldr	r1, [pc, #208]	; (8005060 <HAL_RCC_ClockConfig+0x1bc>)
 8004f90:	4313      	orrs	r3, r2
 8004f92:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004f94:	f7fd ff16 	bl	8002dc4 <HAL_GetTick>
 8004f98:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f9a:	e00a      	b.n	8004fb2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f9c:	f7fd ff12 	bl	8002dc4 <HAL_GetTick>
 8004fa0:	4602      	mov	r2, r0
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	1ad3      	subs	r3, r2, r3
 8004fa6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d901      	bls.n	8004fb2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004fae:	2303      	movs	r3, #3
 8004fb0:	e04f      	b.n	8005052 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004fb2:	4b2b      	ldr	r3, [pc, #172]	; (8005060 <HAL_RCC_ClockConfig+0x1bc>)
 8004fb4:	689b      	ldr	r3, [r3, #8]
 8004fb6:	f003 020c 	and.w	r2, r3, #12
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	685b      	ldr	r3, [r3, #4]
 8004fbe:	009b      	lsls	r3, r3, #2
 8004fc0:	429a      	cmp	r2, r3
 8004fc2:	d1eb      	bne.n	8004f9c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004fc4:	4b25      	ldr	r3, [pc, #148]	; (800505c <HAL_RCC_ClockConfig+0x1b8>)
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f003 030f 	and.w	r3, r3, #15
 8004fcc:	683a      	ldr	r2, [r7, #0]
 8004fce:	429a      	cmp	r2, r3
 8004fd0:	d20c      	bcs.n	8004fec <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004fd2:	4b22      	ldr	r3, [pc, #136]	; (800505c <HAL_RCC_ClockConfig+0x1b8>)
 8004fd4:	683a      	ldr	r2, [r7, #0]
 8004fd6:	b2d2      	uxtb	r2, r2
 8004fd8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004fda:	4b20      	ldr	r3, [pc, #128]	; (800505c <HAL_RCC_ClockConfig+0x1b8>)
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f003 030f 	and.w	r3, r3, #15
 8004fe2:	683a      	ldr	r2, [r7, #0]
 8004fe4:	429a      	cmp	r2, r3
 8004fe6:	d001      	beq.n	8004fec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004fe8:	2301      	movs	r3, #1
 8004fea:	e032      	b.n	8005052 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f003 0304 	and.w	r3, r3, #4
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d008      	beq.n	800500a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ff8:	4b19      	ldr	r3, [pc, #100]	; (8005060 <HAL_RCC_ClockConfig+0x1bc>)
 8004ffa:	689b      	ldr	r3, [r3, #8]
 8004ffc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	68db      	ldr	r3, [r3, #12]
 8005004:	4916      	ldr	r1, [pc, #88]	; (8005060 <HAL_RCC_ClockConfig+0x1bc>)
 8005006:	4313      	orrs	r3, r2
 8005008:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f003 0308 	and.w	r3, r3, #8
 8005012:	2b00      	cmp	r3, #0
 8005014:	d009      	beq.n	800502a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005016:	4b12      	ldr	r3, [pc, #72]	; (8005060 <HAL_RCC_ClockConfig+0x1bc>)
 8005018:	689b      	ldr	r3, [r3, #8]
 800501a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	691b      	ldr	r3, [r3, #16]
 8005022:	00db      	lsls	r3, r3, #3
 8005024:	490e      	ldr	r1, [pc, #56]	; (8005060 <HAL_RCC_ClockConfig+0x1bc>)
 8005026:	4313      	orrs	r3, r2
 8005028:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800502a:	f000 f821 	bl	8005070 <HAL_RCC_GetSysClockFreq>
 800502e:	4602      	mov	r2, r0
 8005030:	4b0b      	ldr	r3, [pc, #44]	; (8005060 <HAL_RCC_ClockConfig+0x1bc>)
 8005032:	689b      	ldr	r3, [r3, #8]
 8005034:	091b      	lsrs	r3, r3, #4
 8005036:	f003 030f 	and.w	r3, r3, #15
 800503a:	490a      	ldr	r1, [pc, #40]	; (8005064 <HAL_RCC_ClockConfig+0x1c0>)
 800503c:	5ccb      	ldrb	r3, [r1, r3]
 800503e:	fa22 f303 	lsr.w	r3, r2, r3
 8005042:	4a09      	ldr	r2, [pc, #36]	; (8005068 <HAL_RCC_ClockConfig+0x1c4>)
 8005044:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005046:	4b09      	ldr	r3, [pc, #36]	; (800506c <HAL_RCC_ClockConfig+0x1c8>)
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	4618      	mov	r0, r3
 800504c:	f7fd fe76 	bl	8002d3c <HAL_InitTick>

  return HAL_OK;
 8005050:	2300      	movs	r3, #0
}
 8005052:	4618      	mov	r0, r3
 8005054:	3710      	adds	r7, #16
 8005056:	46bd      	mov	sp, r7
 8005058:	bd80      	pop	{r7, pc}
 800505a:	bf00      	nop
 800505c:	40023c00 	.word	0x40023c00
 8005060:	40023800 	.word	0x40023800
 8005064:	0800a3ac 	.word	0x0800a3ac
 8005068:	20000010 	.word	0x20000010
 800506c:	20000014 	.word	0x20000014

08005070 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005070:	b5b0      	push	{r4, r5, r7, lr}
 8005072:	b084      	sub	sp, #16
 8005074:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005076:	2100      	movs	r1, #0
 8005078:	6079      	str	r1, [r7, #4]
 800507a:	2100      	movs	r1, #0
 800507c:	60f9      	str	r1, [r7, #12]
 800507e:	2100      	movs	r1, #0
 8005080:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8005082:	2100      	movs	r1, #0
 8005084:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005086:	4952      	ldr	r1, [pc, #328]	; (80051d0 <HAL_RCC_GetSysClockFreq+0x160>)
 8005088:	6889      	ldr	r1, [r1, #8]
 800508a:	f001 010c 	and.w	r1, r1, #12
 800508e:	2908      	cmp	r1, #8
 8005090:	d00d      	beq.n	80050ae <HAL_RCC_GetSysClockFreq+0x3e>
 8005092:	2908      	cmp	r1, #8
 8005094:	f200 8094 	bhi.w	80051c0 <HAL_RCC_GetSysClockFreq+0x150>
 8005098:	2900      	cmp	r1, #0
 800509a:	d002      	beq.n	80050a2 <HAL_RCC_GetSysClockFreq+0x32>
 800509c:	2904      	cmp	r1, #4
 800509e:	d003      	beq.n	80050a8 <HAL_RCC_GetSysClockFreq+0x38>
 80050a0:	e08e      	b.n	80051c0 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80050a2:	4b4c      	ldr	r3, [pc, #304]	; (80051d4 <HAL_RCC_GetSysClockFreq+0x164>)
 80050a4:	60bb      	str	r3, [r7, #8]
       break;
 80050a6:	e08e      	b.n	80051c6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80050a8:	4b4b      	ldr	r3, [pc, #300]	; (80051d8 <HAL_RCC_GetSysClockFreq+0x168>)
 80050aa:	60bb      	str	r3, [r7, #8]
      break;
 80050ac:	e08b      	b.n	80051c6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80050ae:	4948      	ldr	r1, [pc, #288]	; (80051d0 <HAL_RCC_GetSysClockFreq+0x160>)
 80050b0:	6849      	ldr	r1, [r1, #4]
 80050b2:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80050b6:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80050b8:	4945      	ldr	r1, [pc, #276]	; (80051d0 <HAL_RCC_GetSysClockFreq+0x160>)
 80050ba:	6849      	ldr	r1, [r1, #4]
 80050bc:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80050c0:	2900      	cmp	r1, #0
 80050c2:	d024      	beq.n	800510e <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80050c4:	4942      	ldr	r1, [pc, #264]	; (80051d0 <HAL_RCC_GetSysClockFreq+0x160>)
 80050c6:	6849      	ldr	r1, [r1, #4]
 80050c8:	0989      	lsrs	r1, r1, #6
 80050ca:	4608      	mov	r0, r1
 80050cc:	f04f 0100 	mov.w	r1, #0
 80050d0:	f240 14ff 	movw	r4, #511	; 0x1ff
 80050d4:	f04f 0500 	mov.w	r5, #0
 80050d8:	ea00 0204 	and.w	r2, r0, r4
 80050dc:	ea01 0305 	and.w	r3, r1, r5
 80050e0:	493d      	ldr	r1, [pc, #244]	; (80051d8 <HAL_RCC_GetSysClockFreq+0x168>)
 80050e2:	fb01 f003 	mul.w	r0, r1, r3
 80050e6:	2100      	movs	r1, #0
 80050e8:	fb01 f102 	mul.w	r1, r1, r2
 80050ec:	1844      	adds	r4, r0, r1
 80050ee:	493a      	ldr	r1, [pc, #232]	; (80051d8 <HAL_RCC_GetSysClockFreq+0x168>)
 80050f0:	fba2 0101 	umull	r0, r1, r2, r1
 80050f4:	1863      	adds	r3, r4, r1
 80050f6:	4619      	mov	r1, r3
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	461a      	mov	r2, r3
 80050fc:	f04f 0300 	mov.w	r3, #0
 8005100:	f7fb fd5a 	bl	8000bb8 <__aeabi_uldivmod>
 8005104:	4602      	mov	r2, r0
 8005106:	460b      	mov	r3, r1
 8005108:	4613      	mov	r3, r2
 800510a:	60fb      	str	r3, [r7, #12]
 800510c:	e04a      	b.n	80051a4 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800510e:	4b30      	ldr	r3, [pc, #192]	; (80051d0 <HAL_RCC_GetSysClockFreq+0x160>)
 8005110:	685b      	ldr	r3, [r3, #4]
 8005112:	099b      	lsrs	r3, r3, #6
 8005114:	461a      	mov	r2, r3
 8005116:	f04f 0300 	mov.w	r3, #0
 800511a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800511e:	f04f 0100 	mov.w	r1, #0
 8005122:	ea02 0400 	and.w	r4, r2, r0
 8005126:	ea03 0501 	and.w	r5, r3, r1
 800512a:	4620      	mov	r0, r4
 800512c:	4629      	mov	r1, r5
 800512e:	f04f 0200 	mov.w	r2, #0
 8005132:	f04f 0300 	mov.w	r3, #0
 8005136:	014b      	lsls	r3, r1, #5
 8005138:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800513c:	0142      	lsls	r2, r0, #5
 800513e:	4610      	mov	r0, r2
 8005140:	4619      	mov	r1, r3
 8005142:	1b00      	subs	r0, r0, r4
 8005144:	eb61 0105 	sbc.w	r1, r1, r5
 8005148:	f04f 0200 	mov.w	r2, #0
 800514c:	f04f 0300 	mov.w	r3, #0
 8005150:	018b      	lsls	r3, r1, #6
 8005152:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005156:	0182      	lsls	r2, r0, #6
 8005158:	1a12      	subs	r2, r2, r0
 800515a:	eb63 0301 	sbc.w	r3, r3, r1
 800515e:	f04f 0000 	mov.w	r0, #0
 8005162:	f04f 0100 	mov.w	r1, #0
 8005166:	00d9      	lsls	r1, r3, #3
 8005168:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800516c:	00d0      	lsls	r0, r2, #3
 800516e:	4602      	mov	r2, r0
 8005170:	460b      	mov	r3, r1
 8005172:	1912      	adds	r2, r2, r4
 8005174:	eb45 0303 	adc.w	r3, r5, r3
 8005178:	f04f 0000 	mov.w	r0, #0
 800517c:	f04f 0100 	mov.w	r1, #0
 8005180:	0299      	lsls	r1, r3, #10
 8005182:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8005186:	0290      	lsls	r0, r2, #10
 8005188:	4602      	mov	r2, r0
 800518a:	460b      	mov	r3, r1
 800518c:	4610      	mov	r0, r2
 800518e:	4619      	mov	r1, r3
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	461a      	mov	r2, r3
 8005194:	f04f 0300 	mov.w	r3, #0
 8005198:	f7fb fd0e 	bl	8000bb8 <__aeabi_uldivmod>
 800519c:	4602      	mov	r2, r0
 800519e:	460b      	mov	r3, r1
 80051a0:	4613      	mov	r3, r2
 80051a2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80051a4:	4b0a      	ldr	r3, [pc, #40]	; (80051d0 <HAL_RCC_GetSysClockFreq+0x160>)
 80051a6:	685b      	ldr	r3, [r3, #4]
 80051a8:	0c1b      	lsrs	r3, r3, #16
 80051aa:	f003 0303 	and.w	r3, r3, #3
 80051ae:	3301      	adds	r3, #1
 80051b0:	005b      	lsls	r3, r3, #1
 80051b2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80051b4:	68fa      	ldr	r2, [r7, #12]
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80051bc:	60bb      	str	r3, [r7, #8]
      break;
 80051be:	e002      	b.n	80051c6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80051c0:	4b04      	ldr	r3, [pc, #16]	; (80051d4 <HAL_RCC_GetSysClockFreq+0x164>)
 80051c2:	60bb      	str	r3, [r7, #8]
      break;
 80051c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80051c6:	68bb      	ldr	r3, [r7, #8]
}
 80051c8:	4618      	mov	r0, r3
 80051ca:	3710      	adds	r7, #16
 80051cc:	46bd      	mov	sp, r7
 80051ce:	bdb0      	pop	{r4, r5, r7, pc}
 80051d0:	40023800 	.word	0x40023800
 80051d4:	00f42400 	.word	0x00f42400
 80051d8:	017d7840 	.word	0x017d7840

080051dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80051dc:	b480      	push	{r7}
 80051de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80051e0:	4b03      	ldr	r3, [pc, #12]	; (80051f0 <HAL_RCC_GetHCLKFreq+0x14>)
 80051e2:	681b      	ldr	r3, [r3, #0]
}
 80051e4:	4618      	mov	r0, r3
 80051e6:	46bd      	mov	sp, r7
 80051e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ec:	4770      	bx	lr
 80051ee:	bf00      	nop
 80051f0:	20000010 	.word	0x20000010

080051f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80051f4:	b580      	push	{r7, lr}
 80051f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80051f8:	f7ff fff0 	bl	80051dc <HAL_RCC_GetHCLKFreq>
 80051fc:	4602      	mov	r2, r0
 80051fe:	4b05      	ldr	r3, [pc, #20]	; (8005214 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005200:	689b      	ldr	r3, [r3, #8]
 8005202:	0a9b      	lsrs	r3, r3, #10
 8005204:	f003 0307 	and.w	r3, r3, #7
 8005208:	4903      	ldr	r1, [pc, #12]	; (8005218 <HAL_RCC_GetPCLK1Freq+0x24>)
 800520a:	5ccb      	ldrb	r3, [r1, r3]
 800520c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005210:	4618      	mov	r0, r3
 8005212:	bd80      	pop	{r7, pc}
 8005214:	40023800 	.word	0x40023800
 8005218:	0800a3bc 	.word	0x0800a3bc

0800521c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800521c:	b580      	push	{r7, lr}
 800521e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005220:	f7ff ffdc 	bl	80051dc <HAL_RCC_GetHCLKFreq>
 8005224:	4602      	mov	r2, r0
 8005226:	4b05      	ldr	r3, [pc, #20]	; (800523c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005228:	689b      	ldr	r3, [r3, #8]
 800522a:	0b5b      	lsrs	r3, r3, #13
 800522c:	f003 0307 	and.w	r3, r3, #7
 8005230:	4903      	ldr	r1, [pc, #12]	; (8005240 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005232:	5ccb      	ldrb	r3, [r1, r3]
 8005234:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005238:	4618      	mov	r0, r3
 800523a:	bd80      	pop	{r7, pc}
 800523c:	40023800 	.word	0x40023800
 8005240:	0800a3bc 	.word	0x0800a3bc

08005244 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005244:	b580      	push	{r7, lr}
 8005246:	b082      	sub	sp, #8
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2b00      	cmp	r3, #0
 8005250:	d101      	bne.n	8005256 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005252:	2301      	movs	r3, #1
 8005254:	e01d      	b.n	8005292 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800525c:	b2db      	uxtb	r3, r3
 800525e:	2b00      	cmp	r3, #0
 8005260:	d106      	bne.n	8005270 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	2200      	movs	r2, #0
 8005266:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800526a:	6878      	ldr	r0, [r7, #4]
 800526c:	f7fd fba2 	bl	80029b4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2202      	movs	r2, #2
 8005274:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681a      	ldr	r2, [r3, #0]
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	3304      	adds	r3, #4
 8005280:	4619      	mov	r1, r3
 8005282:	4610      	mov	r0, r2
 8005284:	f000 f82e 	bl	80052e4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2201      	movs	r2, #1
 800528c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005290:	2300      	movs	r3, #0
}
 8005292:	4618      	mov	r0, r3
 8005294:	3708      	adds	r7, #8
 8005296:	46bd      	mov	sp, r7
 8005298:	bd80      	pop	{r7, pc}

0800529a <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800529a:	b480      	push	{r7}
 800529c:	b085      	sub	sp, #20
 800529e:	af00      	add	r7, sp, #0
 80052a0:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	2202      	movs	r2, #2
 80052a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	689b      	ldr	r3, [r3, #8]
 80052b0:	f003 0307 	and.w	r3, r3, #7
 80052b4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	2b06      	cmp	r3, #6
 80052ba:	d007      	beq.n	80052cc <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	681a      	ldr	r2, [r3, #0]
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f042 0201 	orr.w	r2, r2, #1
 80052ca:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2201      	movs	r2, #1
 80052d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80052d4:	2300      	movs	r3, #0
}
 80052d6:	4618      	mov	r0, r3
 80052d8:	3714      	adds	r7, #20
 80052da:	46bd      	mov	sp, r7
 80052dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e0:	4770      	bx	lr
	...

080052e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80052e4:	b480      	push	{r7}
 80052e6:	b085      	sub	sp, #20
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
 80052ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	4a34      	ldr	r2, [pc, #208]	; (80053c8 <TIM_Base_SetConfig+0xe4>)
 80052f8:	4293      	cmp	r3, r2
 80052fa:	d00f      	beq.n	800531c <TIM_Base_SetConfig+0x38>
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005302:	d00b      	beq.n	800531c <TIM_Base_SetConfig+0x38>
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	4a31      	ldr	r2, [pc, #196]	; (80053cc <TIM_Base_SetConfig+0xe8>)
 8005308:	4293      	cmp	r3, r2
 800530a:	d007      	beq.n	800531c <TIM_Base_SetConfig+0x38>
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	4a30      	ldr	r2, [pc, #192]	; (80053d0 <TIM_Base_SetConfig+0xec>)
 8005310:	4293      	cmp	r3, r2
 8005312:	d003      	beq.n	800531c <TIM_Base_SetConfig+0x38>
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	4a2f      	ldr	r2, [pc, #188]	; (80053d4 <TIM_Base_SetConfig+0xf0>)
 8005318:	4293      	cmp	r3, r2
 800531a:	d108      	bne.n	800532e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005322:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005324:	683b      	ldr	r3, [r7, #0]
 8005326:	685b      	ldr	r3, [r3, #4]
 8005328:	68fa      	ldr	r2, [r7, #12]
 800532a:	4313      	orrs	r3, r2
 800532c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	4a25      	ldr	r2, [pc, #148]	; (80053c8 <TIM_Base_SetConfig+0xe4>)
 8005332:	4293      	cmp	r3, r2
 8005334:	d01b      	beq.n	800536e <TIM_Base_SetConfig+0x8a>
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800533c:	d017      	beq.n	800536e <TIM_Base_SetConfig+0x8a>
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	4a22      	ldr	r2, [pc, #136]	; (80053cc <TIM_Base_SetConfig+0xe8>)
 8005342:	4293      	cmp	r3, r2
 8005344:	d013      	beq.n	800536e <TIM_Base_SetConfig+0x8a>
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	4a21      	ldr	r2, [pc, #132]	; (80053d0 <TIM_Base_SetConfig+0xec>)
 800534a:	4293      	cmp	r3, r2
 800534c:	d00f      	beq.n	800536e <TIM_Base_SetConfig+0x8a>
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	4a20      	ldr	r2, [pc, #128]	; (80053d4 <TIM_Base_SetConfig+0xf0>)
 8005352:	4293      	cmp	r3, r2
 8005354:	d00b      	beq.n	800536e <TIM_Base_SetConfig+0x8a>
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	4a1f      	ldr	r2, [pc, #124]	; (80053d8 <TIM_Base_SetConfig+0xf4>)
 800535a:	4293      	cmp	r3, r2
 800535c:	d007      	beq.n	800536e <TIM_Base_SetConfig+0x8a>
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	4a1e      	ldr	r2, [pc, #120]	; (80053dc <TIM_Base_SetConfig+0xf8>)
 8005362:	4293      	cmp	r3, r2
 8005364:	d003      	beq.n	800536e <TIM_Base_SetConfig+0x8a>
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	4a1d      	ldr	r2, [pc, #116]	; (80053e0 <TIM_Base_SetConfig+0xfc>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d108      	bne.n	8005380 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005374:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005376:	683b      	ldr	r3, [r7, #0]
 8005378:	68db      	ldr	r3, [r3, #12]
 800537a:	68fa      	ldr	r2, [r7, #12]
 800537c:	4313      	orrs	r3, r2
 800537e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005386:	683b      	ldr	r3, [r7, #0]
 8005388:	695b      	ldr	r3, [r3, #20]
 800538a:	4313      	orrs	r3, r2
 800538c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	68fa      	ldr	r2, [r7, #12]
 8005392:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	689a      	ldr	r2, [r3, #8]
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	681a      	ldr	r2, [r3, #0]
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	4a08      	ldr	r2, [pc, #32]	; (80053c8 <TIM_Base_SetConfig+0xe4>)
 80053a8:	4293      	cmp	r3, r2
 80053aa:	d103      	bne.n	80053b4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	691a      	ldr	r2, [r3, #16]
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2201      	movs	r2, #1
 80053b8:	615a      	str	r2, [r3, #20]
}
 80053ba:	bf00      	nop
 80053bc:	3714      	adds	r7, #20
 80053be:	46bd      	mov	sp, r7
 80053c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c4:	4770      	bx	lr
 80053c6:	bf00      	nop
 80053c8:	40010000 	.word	0x40010000
 80053cc:	40000400 	.word	0x40000400
 80053d0:	40000800 	.word	0x40000800
 80053d4:	40000c00 	.word	0x40000c00
 80053d8:	40014000 	.word	0x40014000
 80053dc:	40014400 	.word	0x40014400
 80053e0:	40014800 	.word	0x40014800

080053e4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80053e4:	b580      	push	{r7, lr}
 80053e6:	b082      	sub	sp, #8
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d101      	bne.n	80053f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80053f2:	2301      	movs	r3, #1
 80053f4:	e03f      	b.n	8005476 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80053fc:	b2db      	uxtb	r3, r3
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d106      	bne.n	8005410 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	2200      	movs	r2, #0
 8005406:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800540a:	6878      	ldr	r0, [r7, #4]
 800540c:	f7fd faf4 	bl	80029f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2224      	movs	r2, #36	; 0x24
 8005414:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	68da      	ldr	r2, [r3, #12]
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005426:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005428:	6878      	ldr	r0, [r7, #4]
 800542a:	f000 f90b 	bl	8005644 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	691a      	ldr	r2, [r3, #16]
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800543c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	695a      	ldr	r2, [r3, #20]
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800544c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	68da      	ldr	r2, [r3, #12]
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800545c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	2200      	movs	r2, #0
 8005462:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2220      	movs	r2, #32
 8005468:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2220      	movs	r2, #32
 8005470:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8005474:	2300      	movs	r3, #0
}
 8005476:	4618      	mov	r0, r3
 8005478:	3708      	adds	r7, #8
 800547a:	46bd      	mov	sp, r7
 800547c:	bd80      	pop	{r7, pc}

0800547e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800547e:	b580      	push	{r7, lr}
 8005480:	b088      	sub	sp, #32
 8005482:	af02      	add	r7, sp, #8
 8005484:	60f8      	str	r0, [r7, #12]
 8005486:	60b9      	str	r1, [r7, #8]
 8005488:	603b      	str	r3, [r7, #0]
 800548a:	4613      	mov	r3, r2
 800548c:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800548e:	2300      	movs	r3, #0
 8005490:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005498:	b2db      	uxtb	r3, r3
 800549a:	2b20      	cmp	r3, #32
 800549c:	f040 8083 	bne.w	80055a6 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80054a0:	68bb      	ldr	r3, [r7, #8]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d002      	beq.n	80054ac <HAL_UART_Transmit+0x2e>
 80054a6:	88fb      	ldrh	r3, [r7, #6]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d101      	bne.n	80054b0 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80054ac:	2301      	movs	r3, #1
 80054ae:	e07b      	b.n	80055a8 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80054b6:	2b01      	cmp	r3, #1
 80054b8:	d101      	bne.n	80054be <HAL_UART_Transmit+0x40>
 80054ba:	2302      	movs	r3, #2
 80054bc:	e074      	b.n	80055a8 <HAL_UART_Transmit+0x12a>
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	2201      	movs	r2, #1
 80054c2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	2200      	movs	r2, #0
 80054ca:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	2221      	movs	r2, #33	; 0x21
 80054d0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80054d4:	f7fd fc76 	bl	8002dc4 <HAL_GetTick>
 80054d8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	88fa      	ldrh	r2, [r7, #6]
 80054de:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	88fa      	ldrh	r2, [r7, #6]
 80054e4:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	2200      	movs	r2, #0
 80054ea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80054ee:	e042      	b.n	8005576 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80054f4:	b29b      	uxth	r3, r3
 80054f6:	3b01      	subs	r3, #1
 80054f8:	b29a      	uxth	r2, r3
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	689b      	ldr	r3, [r3, #8]
 8005502:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005506:	d122      	bne.n	800554e <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	9300      	str	r3, [sp, #0]
 800550c:	697b      	ldr	r3, [r7, #20]
 800550e:	2200      	movs	r2, #0
 8005510:	2180      	movs	r1, #128	; 0x80
 8005512:	68f8      	ldr	r0, [r7, #12]
 8005514:	f000 f84c 	bl	80055b0 <UART_WaitOnFlagUntilTimeout>
 8005518:	4603      	mov	r3, r0
 800551a:	2b00      	cmp	r3, #0
 800551c:	d001      	beq.n	8005522 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 800551e:	2303      	movs	r3, #3
 8005520:	e042      	b.n	80055a8 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8005522:	68bb      	ldr	r3, [r7, #8]
 8005524:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8005526:	693b      	ldr	r3, [r7, #16]
 8005528:	881b      	ldrh	r3, [r3, #0]
 800552a:	461a      	mov	r2, r3
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005534:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	691b      	ldr	r3, [r3, #16]
 800553a:	2b00      	cmp	r3, #0
 800553c:	d103      	bne.n	8005546 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 800553e:	68bb      	ldr	r3, [r7, #8]
 8005540:	3302      	adds	r3, #2
 8005542:	60bb      	str	r3, [r7, #8]
 8005544:	e017      	b.n	8005576 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8005546:	68bb      	ldr	r3, [r7, #8]
 8005548:	3301      	adds	r3, #1
 800554a:	60bb      	str	r3, [r7, #8]
 800554c:	e013      	b.n	8005576 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	9300      	str	r3, [sp, #0]
 8005552:	697b      	ldr	r3, [r7, #20]
 8005554:	2200      	movs	r2, #0
 8005556:	2180      	movs	r1, #128	; 0x80
 8005558:	68f8      	ldr	r0, [r7, #12]
 800555a:	f000 f829 	bl	80055b0 <UART_WaitOnFlagUntilTimeout>
 800555e:	4603      	mov	r3, r0
 8005560:	2b00      	cmp	r3, #0
 8005562:	d001      	beq.n	8005568 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8005564:	2303      	movs	r3, #3
 8005566:	e01f      	b.n	80055a8 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8005568:	68bb      	ldr	r3, [r7, #8]
 800556a:	1c5a      	adds	r2, r3, #1
 800556c:	60ba      	str	r2, [r7, #8]
 800556e:	781a      	ldrb	r2, [r3, #0]
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800557a:	b29b      	uxth	r3, r3
 800557c:	2b00      	cmp	r3, #0
 800557e:	d1b7      	bne.n	80054f0 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005580:	683b      	ldr	r3, [r7, #0]
 8005582:	9300      	str	r3, [sp, #0]
 8005584:	697b      	ldr	r3, [r7, #20]
 8005586:	2200      	movs	r2, #0
 8005588:	2140      	movs	r1, #64	; 0x40
 800558a:	68f8      	ldr	r0, [r7, #12]
 800558c:	f000 f810 	bl	80055b0 <UART_WaitOnFlagUntilTimeout>
 8005590:	4603      	mov	r3, r0
 8005592:	2b00      	cmp	r3, #0
 8005594:	d001      	beq.n	800559a <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8005596:	2303      	movs	r3, #3
 8005598:	e006      	b.n	80055a8 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	2220      	movs	r2, #32
 800559e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80055a2:	2300      	movs	r3, #0
 80055a4:	e000      	b.n	80055a8 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80055a6:	2302      	movs	r3, #2
  }
}
 80055a8:	4618      	mov	r0, r3
 80055aa:	3718      	adds	r7, #24
 80055ac:	46bd      	mov	sp, r7
 80055ae:	bd80      	pop	{r7, pc}

080055b0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80055b0:	b580      	push	{r7, lr}
 80055b2:	b084      	sub	sp, #16
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	60f8      	str	r0, [r7, #12]
 80055b8:	60b9      	str	r1, [r7, #8]
 80055ba:	603b      	str	r3, [r7, #0]
 80055bc:	4613      	mov	r3, r2
 80055be:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80055c0:	e02c      	b.n	800561c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80055c2:	69bb      	ldr	r3, [r7, #24]
 80055c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80055c8:	d028      	beq.n	800561c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80055ca:	69bb      	ldr	r3, [r7, #24]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d007      	beq.n	80055e0 <UART_WaitOnFlagUntilTimeout+0x30>
 80055d0:	f7fd fbf8 	bl	8002dc4 <HAL_GetTick>
 80055d4:	4602      	mov	r2, r0
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	1ad3      	subs	r3, r2, r3
 80055da:	69ba      	ldr	r2, [r7, #24]
 80055dc:	429a      	cmp	r2, r3
 80055de:	d21d      	bcs.n	800561c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	68da      	ldr	r2, [r3, #12]
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80055ee:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	695a      	ldr	r2, [r3, #20]
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f022 0201 	bic.w	r2, r2, #1
 80055fe:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	2220      	movs	r2, #32
 8005604:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	2220      	movs	r2, #32
 800560c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	2200      	movs	r2, #0
 8005614:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8005618:	2303      	movs	r3, #3
 800561a:	e00f      	b.n	800563c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	681a      	ldr	r2, [r3, #0]
 8005622:	68bb      	ldr	r3, [r7, #8]
 8005624:	4013      	ands	r3, r2
 8005626:	68ba      	ldr	r2, [r7, #8]
 8005628:	429a      	cmp	r2, r3
 800562a:	bf0c      	ite	eq
 800562c:	2301      	moveq	r3, #1
 800562e:	2300      	movne	r3, #0
 8005630:	b2db      	uxtb	r3, r3
 8005632:	461a      	mov	r2, r3
 8005634:	79fb      	ldrb	r3, [r7, #7]
 8005636:	429a      	cmp	r2, r3
 8005638:	d0c3      	beq.n	80055c2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800563a:	2300      	movs	r3, #0
}
 800563c:	4618      	mov	r0, r3
 800563e:	3710      	adds	r7, #16
 8005640:	46bd      	mov	sp, r7
 8005642:	bd80      	pop	{r7, pc}

08005644 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005644:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005648:	b0bd      	sub	sp, #244	; 0xf4
 800564a:	af00      	add	r7, sp, #0
 800564c:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005650:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	691b      	ldr	r3, [r3, #16]
 8005658:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800565c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005660:	68d9      	ldr	r1, [r3, #12]
 8005662:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005666:	681a      	ldr	r2, [r3, #0]
 8005668:	ea40 0301 	orr.w	r3, r0, r1
 800566c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800566e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005672:	689a      	ldr	r2, [r3, #8]
 8005674:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005678:	691b      	ldr	r3, [r3, #16]
 800567a:	431a      	orrs	r2, r3
 800567c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005680:	695b      	ldr	r3, [r3, #20]
 8005682:	431a      	orrs	r2, r3
 8005684:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005688:	69db      	ldr	r3, [r3, #28]
 800568a:	4313      	orrs	r3, r2
 800568c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  MODIFY_REG(huart->Instance->CR1,
 8005690:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	68db      	ldr	r3, [r3, #12]
 8005698:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800569c:	f021 010c 	bic.w	r1, r1, #12
 80056a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80056a4:	681a      	ldr	r2, [r3, #0]
 80056a6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80056aa:	430b      	orrs	r3, r1
 80056ac:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80056ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	695b      	ldr	r3, [r3, #20]
 80056b6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80056ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80056be:	6999      	ldr	r1, [r3, #24]
 80056c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80056c4:	681a      	ldr	r2, [r3, #0]
 80056c6:	ea40 0301 	orr.w	r3, r0, r1
 80056ca:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80056cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80056d0:	69db      	ldr	r3, [r3, #28]
 80056d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80056d6:	f040 81a5 	bne.w	8005a24 <UART_SetConfig+0x3e0>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80056da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80056de:	681a      	ldr	r2, [r3, #0]
 80056e0:	4bcd      	ldr	r3, [pc, #820]	; (8005a18 <UART_SetConfig+0x3d4>)
 80056e2:	429a      	cmp	r2, r3
 80056e4:	d006      	beq.n	80056f4 <UART_SetConfig+0xb0>
 80056e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80056ea:	681a      	ldr	r2, [r3, #0]
 80056ec:	4bcb      	ldr	r3, [pc, #812]	; (8005a1c <UART_SetConfig+0x3d8>)
 80056ee:	429a      	cmp	r2, r3
 80056f0:	f040 80cb 	bne.w	800588a <UART_SetConfig+0x246>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80056f4:	f7ff fd92 	bl	800521c <HAL_RCC_GetPCLK2Freq>
 80056f8:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80056fc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005700:	461c      	mov	r4, r3
 8005702:	f04f 0500 	mov.w	r5, #0
 8005706:	4622      	mov	r2, r4
 8005708:	462b      	mov	r3, r5
 800570a:	1891      	adds	r1, r2, r2
 800570c:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 8005710:	415b      	adcs	r3, r3
 8005712:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005716:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800571a:	1912      	adds	r2, r2, r4
 800571c:	eb45 0303 	adc.w	r3, r5, r3
 8005720:	f04f 0000 	mov.w	r0, #0
 8005724:	f04f 0100 	mov.w	r1, #0
 8005728:	00d9      	lsls	r1, r3, #3
 800572a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800572e:	00d0      	lsls	r0, r2, #3
 8005730:	4602      	mov	r2, r0
 8005732:	460b      	mov	r3, r1
 8005734:	1911      	adds	r1, r2, r4
 8005736:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 800573a:	416b      	adcs	r3, r5
 800573c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005740:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005744:	685b      	ldr	r3, [r3, #4]
 8005746:	461a      	mov	r2, r3
 8005748:	f04f 0300 	mov.w	r3, #0
 800574c:	1891      	adds	r1, r2, r2
 800574e:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 8005752:	415b      	adcs	r3, r3
 8005754:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005758:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 800575c:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8005760:	f7fb fa2a 	bl	8000bb8 <__aeabi_uldivmod>
 8005764:	4602      	mov	r2, r0
 8005766:	460b      	mov	r3, r1
 8005768:	4bad      	ldr	r3, [pc, #692]	; (8005a20 <UART_SetConfig+0x3dc>)
 800576a:	fba3 2302 	umull	r2, r3, r3, r2
 800576e:	095b      	lsrs	r3, r3, #5
 8005770:	011e      	lsls	r6, r3, #4
 8005772:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005776:	461c      	mov	r4, r3
 8005778:	f04f 0500 	mov.w	r5, #0
 800577c:	4622      	mov	r2, r4
 800577e:	462b      	mov	r3, r5
 8005780:	1891      	adds	r1, r2, r2
 8005782:	67b9      	str	r1, [r7, #120]	; 0x78
 8005784:	415b      	adcs	r3, r3
 8005786:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005788:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 800578c:	1912      	adds	r2, r2, r4
 800578e:	eb45 0303 	adc.w	r3, r5, r3
 8005792:	f04f 0000 	mov.w	r0, #0
 8005796:	f04f 0100 	mov.w	r1, #0
 800579a:	00d9      	lsls	r1, r3, #3
 800579c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80057a0:	00d0      	lsls	r0, r2, #3
 80057a2:	4602      	mov	r2, r0
 80057a4:	460b      	mov	r3, r1
 80057a6:	1911      	adds	r1, r2, r4
 80057a8:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 80057ac:	416b      	adcs	r3, r5
 80057ae:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80057b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057b6:	685b      	ldr	r3, [r3, #4]
 80057b8:	461a      	mov	r2, r3
 80057ba:	f04f 0300 	mov.w	r3, #0
 80057be:	1891      	adds	r1, r2, r2
 80057c0:	6739      	str	r1, [r7, #112]	; 0x70
 80057c2:	415b      	adcs	r3, r3
 80057c4:	677b      	str	r3, [r7, #116]	; 0x74
 80057c6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80057ca:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 80057ce:	f7fb f9f3 	bl	8000bb8 <__aeabi_uldivmod>
 80057d2:	4602      	mov	r2, r0
 80057d4:	460b      	mov	r3, r1
 80057d6:	4b92      	ldr	r3, [pc, #584]	; (8005a20 <UART_SetConfig+0x3dc>)
 80057d8:	fba3 1302 	umull	r1, r3, r3, r2
 80057dc:	095b      	lsrs	r3, r3, #5
 80057de:	2164      	movs	r1, #100	; 0x64
 80057e0:	fb01 f303 	mul.w	r3, r1, r3
 80057e4:	1ad3      	subs	r3, r2, r3
 80057e6:	00db      	lsls	r3, r3, #3
 80057e8:	3332      	adds	r3, #50	; 0x32
 80057ea:	4a8d      	ldr	r2, [pc, #564]	; (8005a20 <UART_SetConfig+0x3dc>)
 80057ec:	fba2 2303 	umull	r2, r3, r2, r3
 80057f0:	095b      	lsrs	r3, r3, #5
 80057f2:	005b      	lsls	r3, r3, #1
 80057f4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80057f8:	441e      	add	r6, r3
 80057fa:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80057fe:	4618      	mov	r0, r3
 8005800:	f04f 0100 	mov.w	r1, #0
 8005804:	4602      	mov	r2, r0
 8005806:	460b      	mov	r3, r1
 8005808:	1894      	adds	r4, r2, r2
 800580a:	66bc      	str	r4, [r7, #104]	; 0x68
 800580c:	415b      	adcs	r3, r3
 800580e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005810:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8005814:	1812      	adds	r2, r2, r0
 8005816:	eb41 0303 	adc.w	r3, r1, r3
 800581a:	f04f 0400 	mov.w	r4, #0
 800581e:	f04f 0500 	mov.w	r5, #0
 8005822:	00dd      	lsls	r5, r3, #3
 8005824:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005828:	00d4      	lsls	r4, r2, #3
 800582a:	4622      	mov	r2, r4
 800582c:	462b      	mov	r3, r5
 800582e:	1814      	adds	r4, r2, r0
 8005830:	f8c7 40c8 	str.w	r4, [r7, #200]	; 0xc8
 8005834:	414b      	adcs	r3, r1
 8005836:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800583a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800583e:	685b      	ldr	r3, [r3, #4]
 8005840:	461a      	mov	r2, r3
 8005842:	f04f 0300 	mov.w	r3, #0
 8005846:	1891      	adds	r1, r2, r2
 8005848:	6639      	str	r1, [r7, #96]	; 0x60
 800584a:	415b      	adcs	r3, r3
 800584c:	667b      	str	r3, [r7, #100]	; 0x64
 800584e:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8005852:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005856:	f7fb f9af 	bl	8000bb8 <__aeabi_uldivmod>
 800585a:	4602      	mov	r2, r0
 800585c:	460b      	mov	r3, r1
 800585e:	4b70      	ldr	r3, [pc, #448]	; (8005a20 <UART_SetConfig+0x3dc>)
 8005860:	fba3 1302 	umull	r1, r3, r3, r2
 8005864:	095b      	lsrs	r3, r3, #5
 8005866:	2164      	movs	r1, #100	; 0x64
 8005868:	fb01 f303 	mul.w	r3, r1, r3
 800586c:	1ad3      	subs	r3, r2, r3
 800586e:	00db      	lsls	r3, r3, #3
 8005870:	3332      	adds	r3, #50	; 0x32
 8005872:	4a6b      	ldr	r2, [pc, #428]	; (8005a20 <UART_SetConfig+0x3dc>)
 8005874:	fba2 2303 	umull	r2, r3, r2, r3
 8005878:	095b      	lsrs	r3, r3, #5
 800587a:	f003 0207 	and.w	r2, r3, #7
 800587e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	4432      	add	r2, r6
 8005886:	609a      	str	r2, [r3, #8]
 8005888:	e26d      	b.n	8005d66 <UART_SetConfig+0x722>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800588a:	f7ff fcb3 	bl	80051f4 <HAL_RCC_GetPCLK1Freq>
 800588e:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005892:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005896:	461c      	mov	r4, r3
 8005898:	f04f 0500 	mov.w	r5, #0
 800589c:	4622      	mov	r2, r4
 800589e:	462b      	mov	r3, r5
 80058a0:	1891      	adds	r1, r2, r2
 80058a2:	65b9      	str	r1, [r7, #88]	; 0x58
 80058a4:	415b      	adcs	r3, r3
 80058a6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80058a8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80058ac:	1912      	adds	r2, r2, r4
 80058ae:	eb45 0303 	adc.w	r3, r5, r3
 80058b2:	f04f 0000 	mov.w	r0, #0
 80058b6:	f04f 0100 	mov.w	r1, #0
 80058ba:	00d9      	lsls	r1, r3, #3
 80058bc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80058c0:	00d0      	lsls	r0, r2, #3
 80058c2:	4602      	mov	r2, r0
 80058c4:	460b      	mov	r3, r1
 80058c6:	1911      	adds	r1, r2, r4
 80058c8:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 80058cc:	416b      	adcs	r3, r5
 80058ce:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80058d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80058d6:	685b      	ldr	r3, [r3, #4]
 80058d8:	461a      	mov	r2, r3
 80058da:	f04f 0300 	mov.w	r3, #0
 80058de:	1891      	adds	r1, r2, r2
 80058e0:	6539      	str	r1, [r7, #80]	; 0x50
 80058e2:	415b      	adcs	r3, r3
 80058e4:	657b      	str	r3, [r7, #84]	; 0x54
 80058e6:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80058ea:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 80058ee:	f7fb f963 	bl	8000bb8 <__aeabi_uldivmod>
 80058f2:	4602      	mov	r2, r0
 80058f4:	460b      	mov	r3, r1
 80058f6:	4b4a      	ldr	r3, [pc, #296]	; (8005a20 <UART_SetConfig+0x3dc>)
 80058f8:	fba3 2302 	umull	r2, r3, r3, r2
 80058fc:	095b      	lsrs	r3, r3, #5
 80058fe:	011e      	lsls	r6, r3, #4
 8005900:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005904:	461c      	mov	r4, r3
 8005906:	f04f 0500 	mov.w	r5, #0
 800590a:	4622      	mov	r2, r4
 800590c:	462b      	mov	r3, r5
 800590e:	1891      	adds	r1, r2, r2
 8005910:	64b9      	str	r1, [r7, #72]	; 0x48
 8005912:	415b      	adcs	r3, r3
 8005914:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005916:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800591a:	1912      	adds	r2, r2, r4
 800591c:	eb45 0303 	adc.w	r3, r5, r3
 8005920:	f04f 0000 	mov.w	r0, #0
 8005924:	f04f 0100 	mov.w	r1, #0
 8005928:	00d9      	lsls	r1, r3, #3
 800592a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800592e:	00d0      	lsls	r0, r2, #3
 8005930:	4602      	mov	r2, r0
 8005932:	460b      	mov	r3, r1
 8005934:	1911      	adds	r1, r2, r4
 8005936:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 800593a:	416b      	adcs	r3, r5
 800593c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005940:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005944:	685b      	ldr	r3, [r3, #4]
 8005946:	461a      	mov	r2, r3
 8005948:	f04f 0300 	mov.w	r3, #0
 800594c:	1891      	adds	r1, r2, r2
 800594e:	6439      	str	r1, [r7, #64]	; 0x40
 8005950:	415b      	adcs	r3, r3
 8005952:	647b      	str	r3, [r7, #68]	; 0x44
 8005954:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005958:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 800595c:	f7fb f92c 	bl	8000bb8 <__aeabi_uldivmod>
 8005960:	4602      	mov	r2, r0
 8005962:	460b      	mov	r3, r1
 8005964:	4b2e      	ldr	r3, [pc, #184]	; (8005a20 <UART_SetConfig+0x3dc>)
 8005966:	fba3 1302 	umull	r1, r3, r3, r2
 800596a:	095b      	lsrs	r3, r3, #5
 800596c:	2164      	movs	r1, #100	; 0x64
 800596e:	fb01 f303 	mul.w	r3, r1, r3
 8005972:	1ad3      	subs	r3, r2, r3
 8005974:	00db      	lsls	r3, r3, #3
 8005976:	3332      	adds	r3, #50	; 0x32
 8005978:	4a29      	ldr	r2, [pc, #164]	; (8005a20 <UART_SetConfig+0x3dc>)
 800597a:	fba2 2303 	umull	r2, r3, r2, r3
 800597e:	095b      	lsrs	r3, r3, #5
 8005980:	005b      	lsls	r3, r3, #1
 8005982:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005986:	441e      	add	r6, r3
 8005988:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800598c:	4618      	mov	r0, r3
 800598e:	f04f 0100 	mov.w	r1, #0
 8005992:	4602      	mov	r2, r0
 8005994:	460b      	mov	r3, r1
 8005996:	1894      	adds	r4, r2, r2
 8005998:	63bc      	str	r4, [r7, #56]	; 0x38
 800599a:	415b      	adcs	r3, r3
 800599c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800599e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80059a2:	1812      	adds	r2, r2, r0
 80059a4:	eb41 0303 	adc.w	r3, r1, r3
 80059a8:	f04f 0400 	mov.w	r4, #0
 80059ac:	f04f 0500 	mov.w	r5, #0
 80059b0:	00dd      	lsls	r5, r3, #3
 80059b2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80059b6:	00d4      	lsls	r4, r2, #3
 80059b8:	4622      	mov	r2, r4
 80059ba:	462b      	mov	r3, r5
 80059bc:	1814      	adds	r4, r2, r0
 80059be:	f8c7 40b0 	str.w	r4, [r7, #176]	; 0xb0
 80059c2:	414b      	adcs	r3, r1
 80059c4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80059c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059cc:	685b      	ldr	r3, [r3, #4]
 80059ce:	461a      	mov	r2, r3
 80059d0:	f04f 0300 	mov.w	r3, #0
 80059d4:	1891      	adds	r1, r2, r2
 80059d6:	6339      	str	r1, [r7, #48]	; 0x30
 80059d8:	415b      	adcs	r3, r3
 80059da:	637b      	str	r3, [r7, #52]	; 0x34
 80059dc:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80059e0:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80059e4:	f7fb f8e8 	bl	8000bb8 <__aeabi_uldivmod>
 80059e8:	4602      	mov	r2, r0
 80059ea:	460b      	mov	r3, r1
 80059ec:	4b0c      	ldr	r3, [pc, #48]	; (8005a20 <UART_SetConfig+0x3dc>)
 80059ee:	fba3 1302 	umull	r1, r3, r3, r2
 80059f2:	095b      	lsrs	r3, r3, #5
 80059f4:	2164      	movs	r1, #100	; 0x64
 80059f6:	fb01 f303 	mul.w	r3, r1, r3
 80059fa:	1ad3      	subs	r3, r2, r3
 80059fc:	00db      	lsls	r3, r3, #3
 80059fe:	3332      	adds	r3, #50	; 0x32
 8005a00:	4a07      	ldr	r2, [pc, #28]	; (8005a20 <UART_SetConfig+0x3dc>)
 8005a02:	fba2 2303 	umull	r2, r3, r2, r3
 8005a06:	095b      	lsrs	r3, r3, #5
 8005a08:	f003 0207 	and.w	r2, r3, #7
 8005a0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	4432      	add	r2, r6
 8005a14:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8005a16:	e1a6      	b.n	8005d66 <UART_SetConfig+0x722>
 8005a18:	40011000 	.word	0x40011000
 8005a1c:	40011400 	.word	0x40011400
 8005a20:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005a24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a28:	681a      	ldr	r2, [r3, #0]
 8005a2a:	4bd1      	ldr	r3, [pc, #836]	; (8005d70 <UART_SetConfig+0x72c>)
 8005a2c:	429a      	cmp	r2, r3
 8005a2e:	d006      	beq.n	8005a3e <UART_SetConfig+0x3fa>
 8005a30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a34:	681a      	ldr	r2, [r3, #0]
 8005a36:	4bcf      	ldr	r3, [pc, #828]	; (8005d74 <UART_SetConfig+0x730>)
 8005a38:	429a      	cmp	r2, r3
 8005a3a:	f040 80ca 	bne.w	8005bd2 <UART_SetConfig+0x58e>
      pclk = HAL_RCC_GetPCLK2Freq();
 8005a3e:	f7ff fbed 	bl	800521c <HAL_RCC_GetPCLK2Freq>
 8005a42:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005a46:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005a4a:	461c      	mov	r4, r3
 8005a4c:	f04f 0500 	mov.w	r5, #0
 8005a50:	4622      	mov	r2, r4
 8005a52:	462b      	mov	r3, r5
 8005a54:	1891      	adds	r1, r2, r2
 8005a56:	62b9      	str	r1, [r7, #40]	; 0x28
 8005a58:	415b      	adcs	r3, r3
 8005a5a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005a5c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005a60:	1912      	adds	r2, r2, r4
 8005a62:	eb45 0303 	adc.w	r3, r5, r3
 8005a66:	f04f 0000 	mov.w	r0, #0
 8005a6a:	f04f 0100 	mov.w	r1, #0
 8005a6e:	00d9      	lsls	r1, r3, #3
 8005a70:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005a74:	00d0      	lsls	r0, r2, #3
 8005a76:	4602      	mov	r2, r0
 8005a78:	460b      	mov	r3, r1
 8005a7a:	eb12 0a04 	adds.w	sl, r2, r4
 8005a7e:	eb43 0b05 	adc.w	fp, r3, r5
 8005a82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a86:	685b      	ldr	r3, [r3, #4]
 8005a88:	4618      	mov	r0, r3
 8005a8a:	f04f 0100 	mov.w	r1, #0
 8005a8e:	f04f 0200 	mov.w	r2, #0
 8005a92:	f04f 0300 	mov.w	r3, #0
 8005a96:	008b      	lsls	r3, r1, #2
 8005a98:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005a9c:	0082      	lsls	r2, r0, #2
 8005a9e:	4650      	mov	r0, sl
 8005aa0:	4659      	mov	r1, fp
 8005aa2:	f7fb f889 	bl	8000bb8 <__aeabi_uldivmod>
 8005aa6:	4602      	mov	r2, r0
 8005aa8:	460b      	mov	r3, r1
 8005aaa:	4bb3      	ldr	r3, [pc, #716]	; (8005d78 <UART_SetConfig+0x734>)
 8005aac:	fba3 2302 	umull	r2, r3, r3, r2
 8005ab0:	095b      	lsrs	r3, r3, #5
 8005ab2:	011e      	lsls	r6, r3, #4
 8005ab4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005ab8:	4618      	mov	r0, r3
 8005aba:	f04f 0100 	mov.w	r1, #0
 8005abe:	4602      	mov	r2, r0
 8005ac0:	460b      	mov	r3, r1
 8005ac2:	1894      	adds	r4, r2, r2
 8005ac4:	623c      	str	r4, [r7, #32]
 8005ac6:	415b      	adcs	r3, r3
 8005ac8:	627b      	str	r3, [r7, #36]	; 0x24
 8005aca:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005ace:	1812      	adds	r2, r2, r0
 8005ad0:	eb41 0303 	adc.w	r3, r1, r3
 8005ad4:	f04f 0400 	mov.w	r4, #0
 8005ad8:	f04f 0500 	mov.w	r5, #0
 8005adc:	00dd      	lsls	r5, r3, #3
 8005ade:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005ae2:	00d4      	lsls	r4, r2, #3
 8005ae4:	4622      	mov	r2, r4
 8005ae6:	462b      	mov	r3, r5
 8005ae8:	1814      	adds	r4, r2, r0
 8005aea:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 8005aee:	414b      	adcs	r3, r1
 8005af0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005af4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005af8:	685b      	ldr	r3, [r3, #4]
 8005afa:	4618      	mov	r0, r3
 8005afc:	f04f 0100 	mov.w	r1, #0
 8005b00:	f04f 0200 	mov.w	r2, #0
 8005b04:	f04f 0300 	mov.w	r3, #0
 8005b08:	008b      	lsls	r3, r1, #2
 8005b0a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005b0e:	0082      	lsls	r2, r0, #2
 8005b10:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8005b14:	f7fb f850 	bl	8000bb8 <__aeabi_uldivmod>
 8005b18:	4602      	mov	r2, r0
 8005b1a:	460b      	mov	r3, r1
 8005b1c:	4b96      	ldr	r3, [pc, #600]	; (8005d78 <UART_SetConfig+0x734>)
 8005b1e:	fba3 1302 	umull	r1, r3, r3, r2
 8005b22:	095b      	lsrs	r3, r3, #5
 8005b24:	2164      	movs	r1, #100	; 0x64
 8005b26:	fb01 f303 	mul.w	r3, r1, r3
 8005b2a:	1ad3      	subs	r3, r2, r3
 8005b2c:	011b      	lsls	r3, r3, #4
 8005b2e:	3332      	adds	r3, #50	; 0x32
 8005b30:	4a91      	ldr	r2, [pc, #580]	; (8005d78 <UART_SetConfig+0x734>)
 8005b32:	fba2 2303 	umull	r2, r3, r2, r3
 8005b36:	095b      	lsrs	r3, r3, #5
 8005b38:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005b3c:	441e      	add	r6, r3
 8005b3e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005b42:	4618      	mov	r0, r3
 8005b44:	f04f 0100 	mov.w	r1, #0
 8005b48:	4602      	mov	r2, r0
 8005b4a:	460b      	mov	r3, r1
 8005b4c:	1894      	adds	r4, r2, r2
 8005b4e:	61bc      	str	r4, [r7, #24]
 8005b50:	415b      	adcs	r3, r3
 8005b52:	61fb      	str	r3, [r7, #28]
 8005b54:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005b58:	1812      	adds	r2, r2, r0
 8005b5a:	eb41 0303 	adc.w	r3, r1, r3
 8005b5e:	f04f 0400 	mov.w	r4, #0
 8005b62:	f04f 0500 	mov.w	r5, #0
 8005b66:	00dd      	lsls	r5, r3, #3
 8005b68:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005b6c:	00d4      	lsls	r4, r2, #3
 8005b6e:	4622      	mov	r2, r4
 8005b70:	462b      	mov	r3, r5
 8005b72:	1814      	adds	r4, r2, r0
 8005b74:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
 8005b78:	414b      	adcs	r3, r1
 8005b7a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005b7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b82:	685b      	ldr	r3, [r3, #4]
 8005b84:	4618      	mov	r0, r3
 8005b86:	f04f 0100 	mov.w	r1, #0
 8005b8a:	f04f 0200 	mov.w	r2, #0
 8005b8e:	f04f 0300 	mov.w	r3, #0
 8005b92:	008b      	lsls	r3, r1, #2
 8005b94:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005b98:	0082      	lsls	r2, r0, #2
 8005b9a:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8005b9e:	f7fb f80b 	bl	8000bb8 <__aeabi_uldivmod>
 8005ba2:	4602      	mov	r2, r0
 8005ba4:	460b      	mov	r3, r1
 8005ba6:	4b74      	ldr	r3, [pc, #464]	; (8005d78 <UART_SetConfig+0x734>)
 8005ba8:	fba3 1302 	umull	r1, r3, r3, r2
 8005bac:	095b      	lsrs	r3, r3, #5
 8005bae:	2164      	movs	r1, #100	; 0x64
 8005bb0:	fb01 f303 	mul.w	r3, r1, r3
 8005bb4:	1ad3      	subs	r3, r2, r3
 8005bb6:	011b      	lsls	r3, r3, #4
 8005bb8:	3332      	adds	r3, #50	; 0x32
 8005bba:	4a6f      	ldr	r2, [pc, #444]	; (8005d78 <UART_SetConfig+0x734>)
 8005bbc:	fba2 2303 	umull	r2, r3, r2, r3
 8005bc0:	095b      	lsrs	r3, r3, #5
 8005bc2:	f003 020f 	and.w	r2, r3, #15
 8005bc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	4432      	add	r2, r6
 8005bce:	609a      	str	r2, [r3, #8]
 8005bd0:	e0c9      	b.n	8005d66 <UART_SetConfig+0x722>
      pclk = HAL_RCC_GetPCLK1Freq();
 8005bd2:	f7ff fb0f 	bl	80051f4 <HAL_RCC_GetPCLK1Freq>
 8005bd6:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005bda:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005bde:	461c      	mov	r4, r3
 8005be0:	f04f 0500 	mov.w	r5, #0
 8005be4:	4622      	mov	r2, r4
 8005be6:	462b      	mov	r3, r5
 8005be8:	1891      	adds	r1, r2, r2
 8005bea:	6139      	str	r1, [r7, #16]
 8005bec:	415b      	adcs	r3, r3
 8005bee:	617b      	str	r3, [r7, #20]
 8005bf0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005bf4:	1912      	adds	r2, r2, r4
 8005bf6:	eb45 0303 	adc.w	r3, r5, r3
 8005bfa:	f04f 0000 	mov.w	r0, #0
 8005bfe:	f04f 0100 	mov.w	r1, #0
 8005c02:	00d9      	lsls	r1, r3, #3
 8005c04:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005c08:	00d0      	lsls	r0, r2, #3
 8005c0a:	4602      	mov	r2, r0
 8005c0c:	460b      	mov	r3, r1
 8005c0e:	eb12 0804 	adds.w	r8, r2, r4
 8005c12:	eb43 0905 	adc.w	r9, r3, r5
 8005c16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c1a:	685b      	ldr	r3, [r3, #4]
 8005c1c:	4618      	mov	r0, r3
 8005c1e:	f04f 0100 	mov.w	r1, #0
 8005c22:	f04f 0200 	mov.w	r2, #0
 8005c26:	f04f 0300 	mov.w	r3, #0
 8005c2a:	008b      	lsls	r3, r1, #2
 8005c2c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005c30:	0082      	lsls	r2, r0, #2
 8005c32:	4640      	mov	r0, r8
 8005c34:	4649      	mov	r1, r9
 8005c36:	f7fa ffbf 	bl	8000bb8 <__aeabi_uldivmod>
 8005c3a:	4602      	mov	r2, r0
 8005c3c:	460b      	mov	r3, r1
 8005c3e:	4b4e      	ldr	r3, [pc, #312]	; (8005d78 <UART_SetConfig+0x734>)
 8005c40:	fba3 2302 	umull	r2, r3, r3, r2
 8005c44:	095b      	lsrs	r3, r3, #5
 8005c46:	011e      	lsls	r6, r3, #4
 8005c48:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	f04f 0100 	mov.w	r1, #0
 8005c52:	4602      	mov	r2, r0
 8005c54:	460b      	mov	r3, r1
 8005c56:	1894      	adds	r4, r2, r2
 8005c58:	60bc      	str	r4, [r7, #8]
 8005c5a:	415b      	adcs	r3, r3
 8005c5c:	60fb      	str	r3, [r7, #12]
 8005c5e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005c62:	1812      	adds	r2, r2, r0
 8005c64:	eb41 0303 	adc.w	r3, r1, r3
 8005c68:	f04f 0400 	mov.w	r4, #0
 8005c6c:	f04f 0500 	mov.w	r5, #0
 8005c70:	00dd      	lsls	r5, r3, #3
 8005c72:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005c76:	00d4      	lsls	r4, r2, #3
 8005c78:	4622      	mov	r2, r4
 8005c7a:	462b      	mov	r3, r5
 8005c7c:	1814      	adds	r4, r2, r0
 8005c7e:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 8005c82:	414b      	adcs	r3, r1
 8005c84:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005c88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c8c:	685b      	ldr	r3, [r3, #4]
 8005c8e:	4618      	mov	r0, r3
 8005c90:	f04f 0100 	mov.w	r1, #0
 8005c94:	f04f 0200 	mov.w	r2, #0
 8005c98:	f04f 0300 	mov.w	r3, #0
 8005c9c:	008b      	lsls	r3, r1, #2
 8005c9e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005ca2:	0082      	lsls	r2, r0, #2
 8005ca4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005ca8:	f7fa ff86 	bl	8000bb8 <__aeabi_uldivmod>
 8005cac:	4602      	mov	r2, r0
 8005cae:	460b      	mov	r3, r1
 8005cb0:	4b31      	ldr	r3, [pc, #196]	; (8005d78 <UART_SetConfig+0x734>)
 8005cb2:	fba3 1302 	umull	r1, r3, r3, r2
 8005cb6:	095b      	lsrs	r3, r3, #5
 8005cb8:	2164      	movs	r1, #100	; 0x64
 8005cba:	fb01 f303 	mul.w	r3, r1, r3
 8005cbe:	1ad3      	subs	r3, r2, r3
 8005cc0:	011b      	lsls	r3, r3, #4
 8005cc2:	3332      	adds	r3, #50	; 0x32
 8005cc4:	4a2c      	ldr	r2, [pc, #176]	; (8005d78 <UART_SetConfig+0x734>)
 8005cc6:	fba2 2303 	umull	r2, r3, r2, r3
 8005cca:	095b      	lsrs	r3, r3, #5
 8005ccc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005cd0:	441e      	add	r6, r3
 8005cd2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005cd6:	4618      	mov	r0, r3
 8005cd8:	f04f 0100 	mov.w	r1, #0
 8005cdc:	4602      	mov	r2, r0
 8005cde:	460b      	mov	r3, r1
 8005ce0:	1894      	adds	r4, r2, r2
 8005ce2:	603c      	str	r4, [r7, #0]
 8005ce4:	415b      	adcs	r3, r3
 8005ce6:	607b      	str	r3, [r7, #4]
 8005ce8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005cec:	1812      	adds	r2, r2, r0
 8005cee:	eb41 0303 	adc.w	r3, r1, r3
 8005cf2:	f04f 0400 	mov.w	r4, #0
 8005cf6:	f04f 0500 	mov.w	r5, #0
 8005cfa:	00dd      	lsls	r5, r3, #3
 8005cfc:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005d00:	00d4      	lsls	r4, r2, #3
 8005d02:	4622      	mov	r2, r4
 8005d04:	462b      	mov	r3, r5
 8005d06:	1814      	adds	r4, r2, r0
 8005d08:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 8005d0c:	414b      	adcs	r3, r1
 8005d0e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005d12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d16:	685b      	ldr	r3, [r3, #4]
 8005d18:	4618      	mov	r0, r3
 8005d1a:	f04f 0100 	mov.w	r1, #0
 8005d1e:	f04f 0200 	mov.w	r2, #0
 8005d22:	f04f 0300 	mov.w	r3, #0
 8005d26:	008b      	lsls	r3, r1, #2
 8005d28:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005d2c:	0082      	lsls	r2, r0, #2
 8005d2e:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8005d32:	f7fa ff41 	bl	8000bb8 <__aeabi_uldivmod>
 8005d36:	4602      	mov	r2, r0
 8005d38:	460b      	mov	r3, r1
 8005d3a:	4b0f      	ldr	r3, [pc, #60]	; (8005d78 <UART_SetConfig+0x734>)
 8005d3c:	fba3 1302 	umull	r1, r3, r3, r2
 8005d40:	095b      	lsrs	r3, r3, #5
 8005d42:	2164      	movs	r1, #100	; 0x64
 8005d44:	fb01 f303 	mul.w	r3, r1, r3
 8005d48:	1ad3      	subs	r3, r2, r3
 8005d4a:	011b      	lsls	r3, r3, #4
 8005d4c:	3332      	adds	r3, #50	; 0x32
 8005d4e:	4a0a      	ldr	r2, [pc, #40]	; (8005d78 <UART_SetConfig+0x734>)
 8005d50:	fba2 2303 	umull	r2, r3, r2, r3
 8005d54:	095b      	lsrs	r3, r3, #5
 8005d56:	f003 020f 	and.w	r2, r3, #15
 8005d5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	4432      	add	r2, r6
 8005d62:	609a      	str	r2, [r3, #8]
}
 8005d64:	e7ff      	b.n	8005d66 <UART_SetConfig+0x722>
 8005d66:	bf00      	nop
 8005d68:	37f4      	adds	r7, #244	; 0xf4
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d70:	40011000 	.word	0x40011000
 8005d74:	40011400 	.word	0x40011400
 8005d78:	51eb851f 	.word	0x51eb851f

08005d7c <__errno>:
 8005d7c:	4b01      	ldr	r3, [pc, #4]	; (8005d84 <__errno+0x8>)
 8005d7e:	6818      	ldr	r0, [r3, #0]
 8005d80:	4770      	bx	lr
 8005d82:	bf00      	nop
 8005d84:	2000001c 	.word	0x2000001c

08005d88 <__libc_init_array>:
 8005d88:	b570      	push	{r4, r5, r6, lr}
 8005d8a:	4d0d      	ldr	r5, [pc, #52]	; (8005dc0 <__libc_init_array+0x38>)
 8005d8c:	4c0d      	ldr	r4, [pc, #52]	; (8005dc4 <__libc_init_array+0x3c>)
 8005d8e:	1b64      	subs	r4, r4, r5
 8005d90:	10a4      	asrs	r4, r4, #2
 8005d92:	2600      	movs	r6, #0
 8005d94:	42a6      	cmp	r6, r4
 8005d96:	d109      	bne.n	8005dac <__libc_init_array+0x24>
 8005d98:	4d0b      	ldr	r5, [pc, #44]	; (8005dc8 <__libc_init_array+0x40>)
 8005d9a:	4c0c      	ldr	r4, [pc, #48]	; (8005dcc <__libc_init_array+0x44>)
 8005d9c:	f002 fed4 	bl	8008b48 <_init>
 8005da0:	1b64      	subs	r4, r4, r5
 8005da2:	10a4      	asrs	r4, r4, #2
 8005da4:	2600      	movs	r6, #0
 8005da6:	42a6      	cmp	r6, r4
 8005da8:	d105      	bne.n	8005db6 <__libc_init_array+0x2e>
 8005daa:	bd70      	pop	{r4, r5, r6, pc}
 8005dac:	f855 3b04 	ldr.w	r3, [r5], #4
 8005db0:	4798      	blx	r3
 8005db2:	3601      	adds	r6, #1
 8005db4:	e7ee      	b.n	8005d94 <__libc_init_array+0xc>
 8005db6:	f855 3b04 	ldr.w	r3, [r5], #4
 8005dba:	4798      	blx	r3
 8005dbc:	3601      	adds	r6, #1
 8005dbe:	e7f2      	b.n	8005da6 <__libc_init_array+0x1e>
 8005dc0:	0800a7ac 	.word	0x0800a7ac
 8005dc4:	0800a7ac 	.word	0x0800a7ac
 8005dc8:	0800a7ac 	.word	0x0800a7ac
 8005dcc:	0800a7b0 	.word	0x0800a7b0

08005dd0 <memcpy>:
 8005dd0:	440a      	add	r2, r1
 8005dd2:	4291      	cmp	r1, r2
 8005dd4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8005dd8:	d100      	bne.n	8005ddc <memcpy+0xc>
 8005dda:	4770      	bx	lr
 8005ddc:	b510      	push	{r4, lr}
 8005dde:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005de2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005de6:	4291      	cmp	r1, r2
 8005de8:	d1f9      	bne.n	8005dde <memcpy+0xe>
 8005dea:	bd10      	pop	{r4, pc}

08005dec <memset>:
 8005dec:	4402      	add	r2, r0
 8005dee:	4603      	mov	r3, r0
 8005df0:	4293      	cmp	r3, r2
 8005df2:	d100      	bne.n	8005df6 <memset+0xa>
 8005df4:	4770      	bx	lr
 8005df6:	f803 1b01 	strb.w	r1, [r3], #1
 8005dfa:	e7f9      	b.n	8005df0 <memset+0x4>

08005dfc <__cvt>:
 8005dfc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005e00:	ec55 4b10 	vmov	r4, r5, d0
 8005e04:	2d00      	cmp	r5, #0
 8005e06:	460e      	mov	r6, r1
 8005e08:	4619      	mov	r1, r3
 8005e0a:	462b      	mov	r3, r5
 8005e0c:	bfbb      	ittet	lt
 8005e0e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005e12:	461d      	movlt	r5, r3
 8005e14:	2300      	movge	r3, #0
 8005e16:	232d      	movlt	r3, #45	; 0x2d
 8005e18:	700b      	strb	r3, [r1, #0]
 8005e1a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005e1c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005e20:	4691      	mov	r9, r2
 8005e22:	f023 0820 	bic.w	r8, r3, #32
 8005e26:	bfbc      	itt	lt
 8005e28:	4622      	movlt	r2, r4
 8005e2a:	4614      	movlt	r4, r2
 8005e2c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005e30:	d005      	beq.n	8005e3e <__cvt+0x42>
 8005e32:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005e36:	d100      	bne.n	8005e3a <__cvt+0x3e>
 8005e38:	3601      	adds	r6, #1
 8005e3a:	2102      	movs	r1, #2
 8005e3c:	e000      	b.n	8005e40 <__cvt+0x44>
 8005e3e:	2103      	movs	r1, #3
 8005e40:	ab03      	add	r3, sp, #12
 8005e42:	9301      	str	r3, [sp, #4]
 8005e44:	ab02      	add	r3, sp, #8
 8005e46:	9300      	str	r3, [sp, #0]
 8005e48:	ec45 4b10 	vmov	d0, r4, r5
 8005e4c:	4653      	mov	r3, sl
 8005e4e:	4632      	mov	r2, r6
 8005e50:	f000 fd0a 	bl	8006868 <_dtoa_r>
 8005e54:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005e58:	4607      	mov	r7, r0
 8005e5a:	d102      	bne.n	8005e62 <__cvt+0x66>
 8005e5c:	f019 0f01 	tst.w	r9, #1
 8005e60:	d022      	beq.n	8005ea8 <__cvt+0xac>
 8005e62:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005e66:	eb07 0906 	add.w	r9, r7, r6
 8005e6a:	d110      	bne.n	8005e8e <__cvt+0x92>
 8005e6c:	783b      	ldrb	r3, [r7, #0]
 8005e6e:	2b30      	cmp	r3, #48	; 0x30
 8005e70:	d10a      	bne.n	8005e88 <__cvt+0x8c>
 8005e72:	2200      	movs	r2, #0
 8005e74:	2300      	movs	r3, #0
 8005e76:	4620      	mov	r0, r4
 8005e78:	4629      	mov	r1, r5
 8005e7a:	f7fa fe2d 	bl	8000ad8 <__aeabi_dcmpeq>
 8005e7e:	b918      	cbnz	r0, 8005e88 <__cvt+0x8c>
 8005e80:	f1c6 0601 	rsb	r6, r6, #1
 8005e84:	f8ca 6000 	str.w	r6, [sl]
 8005e88:	f8da 3000 	ldr.w	r3, [sl]
 8005e8c:	4499      	add	r9, r3
 8005e8e:	2200      	movs	r2, #0
 8005e90:	2300      	movs	r3, #0
 8005e92:	4620      	mov	r0, r4
 8005e94:	4629      	mov	r1, r5
 8005e96:	f7fa fe1f 	bl	8000ad8 <__aeabi_dcmpeq>
 8005e9a:	b108      	cbz	r0, 8005ea0 <__cvt+0xa4>
 8005e9c:	f8cd 900c 	str.w	r9, [sp, #12]
 8005ea0:	2230      	movs	r2, #48	; 0x30
 8005ea2:	9b03      	ldr	r3, [sp, #12]
 8005ea4:	454b      	cmp	r3, r9
 8005ea6:	d307      	bcc.n	8005eb8 <__cvt+0xbc>
 8005ea8:	9b03      	ldr	r3, [sp, #12]
 8005eaa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005eac:	1bdb      	subs	r3, r3, r7
 8005eae:	4638      	mov	r0, r7
 8005eb0:	6013      	str	r3, [r2, #0]
 8005eb2:	b004      	add	sp, #16
 8005eb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005eb8:	1c59      	adds	r1, r3, #1
 8005eba:	9103      	str	r1, [sp, #12]
 8005ebc:	701a      	strb	r2, [r3, #0]
 8005ebe:	e7f0      	b.n	8005ea2 <__cvt+0xa6>

08005ec0 <__exponent>:
 8005ec0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005ec2:	4603      	mov	r3, r0
 8005ec4:	2900      	cmp	r1, #0
 8005ec6:	bfb8      	it	lt
 8005ec8:	4249      	neglt	r1, r1
 8005eca:	f803 2b02 	strb.w	r2, [r3], #2
 8005ece:	bfb4      	ite	lt
 8005ed0:	222d      	movlt	r2, #45	; 0x2d
 8005ed2:	222b      	movge	r2, #43	; 0x2b
 8005ed4:	2909      	cmp	r1, #9
 8005ed6:	7042      	strb	r2, [r0, #1]
 8005ed8:	dd2a      	ble.n	8005f30 <__exponent+0x70>
 8005eda:	f10d 0407 	add.w	r4, sp, #7
 8005ede:	46a4      	mov	ip, r4
 8005ee0:	270a      	movs	r7, #10
 8005ee2:	46a6      	mov	lr, r4
 8005ee4:	460a      	mov	r2, r1
 8005ee6:	fb91 f6f7 	sdiv	r6, r1, r7
 8005eea:	fb07 1516 	mls	r5, r7, r6, r1
 8005eee:	3530      	adds	r5, #48	; 0x30
 8005ef0:	2a63      	cmp	r2, #99	; 0x63
 8005ef2:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8005ef6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8005efa:	4631      	mov	r1, r6
 8005efc:	dcf1      	bgt.n	8005ee2 <__exponent+0x22>
 8005efe:	3130      	adds	r1, #48	; 0x30
 8005f00:	f1ae 0502 	sub.w	r5, lr, #2
 8005f04:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005f08:	1c44      	adds	r4, r0, #1
 8005f0a:	4629      	mov	r1, r5
 8005f0c:	4561      	cmp	r1, ip
 8005f0e:	d30a      	bcc.n	8005f26 <__exponent+0x66>
 8005f10:	f10d 0209 	add.w	r2, sp, #9
 8005f14:	eba2 020e 	sub.w	r2, r2, lr
 8005f18:	4565      	cmp	r5, ip
 8005f1a:	bf88      	it	hi
 8005f1c:	2200      	movhi	r2, #0
 8005f1e:	4413      	add	r3, r2
 8005f20:	1a18      	subs	r0, r3, r0
 8005f22:	b003      	add	sp, #12
 8005f24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005f26:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005f2a:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005f2e:	e7ed      	b.n	8005f0c <__exponent+0x4c>
 8005f30:	2330      	movs	r3, #48	; 0x30
 8005f32:	3130      	adds	r1, #48	; 0x30
 8005f34:	7083      	strb	r3, [r0, #2]
 8005f36:	70c1      	strb	r1, [r0, #3]
 8005f38:	1d03      	adds	r3, r0, #4
 8005f3a:	e7f1      	b.n	8005f20 <__exponent+0x60>

08005f3c <_printf_float>:
 8005f3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f40:	ed2d 8b02 	vpush	{d8}
 8005f44:	b08d      	sub	sp, #52	; 0x34
 8005f46:	460c      	mov	r4, r1
 8005f48:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005f4c:	4616      	mov	r6, r2
 8005f4e:	461f      	mov	r7, r3
 8005f50:	4605      	mov	r5, r0
 8005f52:	f001 fa75 	bl	8007440 <_localeconv_r>
 8005f56:	f8d0 a000 	ldr.w	sl, [r0]
 8005f5a:	4650      	mov	r0, sl
 8005f5c:	f7fa f940 	bl	80001e0 <strlen>
 8005f60:	2300      	movs	r3, #0
 8005f62:	930a      	str	r3, [sp, #40]	; 0x28
 8005f64:	6823      	ldr	r3, [r4, #0]
 8005f66:	9305      	str	r3, [sp, #20]
 8005f68:	f8d8 3000 	ldr.w	r3, [r8]
 8005f6c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005f70:	3307      	adds	r3, #7
 8005f72:	f023 0307 	bic.w	r3, r3, #7
 8005f76:	f103 0208 	add.w	r2, r3, #8
 8005f7a:	f8c8 2000 	str.w	r2, [r8]
 8005f7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f82:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005f86:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8005f8a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005f8e:	9307      	str	r3, [sp, #28]
 8005f90:	f8cd 8018 	str.w	r8, [sp, #24]
 8005f94:	ee08 0a10 	vmov	s16, r0
 8005f98:	4b9f      	ldr	r3, [pc, #636]	; (8006218 <_printf_float+0x2dc>)
 8005f9a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005f9e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005fa2:	f7fa fdcb 	bl	8000b3c <__aeabi_dcmpun>
 8005fa6:	bb88      	cbnz	r0, 800600c <_printf_float+0xd0>
 8005fa8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005fac:	4b9a      	ldr	r3, [pc, #616]	; (8006218 <_printf_float+0x2dc>)
 8005fae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005fb2:	f7fa fda5 	bl	8000b00 <__aeabi_dcmple>
 8005fb6:	bb48      	cbnz	r0, 800600c <_printf_float+0xd0>
 8005fb8:	2200      	movs	r2, #0
 8005fba:	2300      	movs	r3, #0
 8005fbc:	4640      	mov	r0, r8
 8005fbe:	4649      	mov	r1, r9
 8005fc0:	f7fa fd94 	bl	8000aec <__aeabi_dcmplt>
 8005fc4:	b110      	cbz	r0, 8005fcc <_printf_float+0x90>
 8005fc6:	232d      	movs	r3, #45	; 0x2d
 8005fc8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005fcc:	4b93      	ldr	r3, [pc, #588]	; (800621c <_printf_float+0x2e0>)
 8005fce:	4894      	ldr	r0, [pc, #592]	; (8006220 <_printf_float+0x2e4>)
 8005fd0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005fd4:	bf94      	ite	ls
 8005fd6:	4698      	movls	r8, r3
 8005fd8:	4680      	movhi	r8, r0
 8005fda:	2303      	movs	r3, #3
 8005fdc:	6123      	str	r3, [r4, #16]
 8005fde:	9b05      	ldr	r3, [sp, #20]
 8005fe0:	f023 0204 	bic.w	r2, r3, #4
 8005fe4:	6022      	str	r2, [r4, #0]
 8005fe6:	f04f 0900 	mov.w	r9, #0
 8005fea:	9700      	str	r7, [sp, #0]
 8005fec:	4633      	mov	r3, r6
 8005fee:	aa0b      	add	r2, sp, #44	; 0x2c
 8005ff0:	4621      	mov	r1, r4
 8005ff2:	4628      	mov	r0, r5
 8005ff4:	f000 f9d8 	bl	80063a8 <_printf_common>
 8005ff8:	3001      	adds	r0, #1
 8005ffa:	f040 8090 	bne.w	800611e <_printf_float+0x1e2>
 8005ffe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006002:	b00d      	add	sp, #52	; 0x34
 8006004:	ecbd 8b02 	vpop	{d8}
 8006008:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800600c:	4642      	mov	r2, r8
 800600e:	464b      	mov	r3, r9
 8006010:	4640      	mov	r0, r8
 8006012:	4649      	mov	r1, r9
 8006014:	f7fa fd92 	bl	8000b3c <__aeabi_dcmpun>
 8006018:	b140      	cbz	r0, 800602c <_printf_float+0xf0>
 800601a:	464b      	mov	r3, r9
 800601c:	2b00      	cmp	r3, #0
 800601e:	bfbc      	itt	lt
 8006020:	232d      	movlt	r3, #45	; 0x2d
 8006022:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006026:	487f      	ldr	r0, [pc, #508]	; (8006224 <_printf_float+0x2e8>)
 8006028:	4b7f      	ldr	r3, [pc, #508]	; (8006228 <_printf_float+0x2ec>)
 800602a:	e7d1      	b.n	8005fd0 <_printf_float+0x94>
 800602c:	6863      	ldr	r3, [r4, #4]
 800602e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8006032:	9206      	str	r2, [sp, #24]
 8006034:	1c5a      	adds	r2, r3, #1
 8006036:	d13f      	bne.n	80060b8 <_printf_float+0x17c>
 8006038:	2306      	movs	r3, #6
 800603a:	6063      	str	r3, [r4, #4]
 800603c:	9b05      	ldr	r3, [sp, #20]
 800603e:	6861      	ldr	r1, [r4, #4]
 8006040:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006044:	2300      	movs	r3, #0
 8006046:	9303      	str	r3, [sp, #12]
 8006048:	ab0a      	add	r3, sp, #40	; 0x28
 800604a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800604e:	ab09      	add	r3, sp, #36	; 0x24
 8006050:	ec49 8b10 	vmov	d0, r8, r9
 8006054:	9300      	str	r3, [sp, #0]
 8006056:	6022      	str	r2, [r4, #0]
 8006058:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800605c:	4628      	mov	r0, r5
 800605e:	f7ff fecd 	bl	8005dfc <__cvt>
 8006062:	9b06      	ldr	r3, [sp, #24]
 8006064:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006066:	2b47      	cmp	r3, #71	; 0x47
 8006068:	4680      	mov	r8, r0
 800606a:	d108      	bne.n	800607e <_printf_float+0x142>
 800606c:	1cc8      	adds	r0, r1, #3
 800606e:	db02      	blt.n	8006076 <_printf_float+0x13a>
 8006070:	6863      	ldr	r3, [r4, #4]
 8006072:	4299      	cmp	r1, r3
 8006074:	dd41      	ble.n	80060fa <_printf_float+0x1be>
 8006076:	f1ab 0b02 	sub.w	fp, fp, #2
 800607a:	fa5f fb8b 	uxtb.w	fp, fp
 800607e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006082:	d820      	bhi.n	80060c6 <_printf_float+0x18a>
 8006084:	3901      	subs	r1, #1
 8006086:	465a      	mov	r2, fp
 8006088:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800608c:	9109      	str	r1, [sp, #36]	; 0x24
 800608e:	f7ff ff17 	bl	8005ec0 <__exponent>
 8006092:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006094:	1813      	adds	r3, r2, r0
 8006096:	2a01      	cmp	r2, #1
 8006098:	4681      	mov	r9, r0
 800609a:	6123      	str	r3, [r4, #16]
 800609c:	dc02      	bgt.n	80060a4 <_printf_float+0x168>
 800609e:	6822      	ldr	r2, [r4, #0]
 80060a0:	07d2      	lsls	r2, r2, #31
 80060a2:	d501      	bpl.n	80060a8 <_printf_float+0x16c>
 80060a4:	3301      	adds	r3, #1
 80060a6:	6123      	str	r3, [r4, #16]
 80060a8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d09c      	beq.n	8005fea <_printf_float+0xae>
 80060b0:	232d      	movs	r3, #45	; 0x2d
 80060b2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80060b6:	e798      	b.n	8005fea <_printf_float+0xae>
 80060b8:	9a06      	ldr	r2, [sp, #24]
 80060ba:	2a47      	cmp	r2, #71	; 0x47
 80060bc:	d1be      	bne.n	800603c <_printf_float+0x100>
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d1bc      	bne.n	800603c <_printf_float+0x100>
 80060c2:	2301      	movs	r3, #1
 80060c4:	e7b9      	b.n	800603a <_printf_float+0xfe>
 80060c6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80060ca:	d118      	bne.n	80060fe <_printf_float+0x1c2>
 80060cc:	2900      	cmp	r1, #0
 80060ce:	6863      	ldr	r3, [r4, #4]
 80060d0:	dd0b      	ble.n	80060ea <_printf_float+0x1ae>
 80060d2:	6121      	str	r1, [r4, #16]
 80060d4:	b913      	cbnz	r3, 80060dc <_printf_float+0x1a0>
 80060d6:	6822      	ldr	r2, [r4, #0]
 80060d8:	07d0      	lsls	r0, r2, #31
 80060da:	d502      	bpl.n	80060e2 <_printf_float+0x1a6>
 80060dc:	3301      	adds	r3, #1
 80060de:	440b      	add	r3, r1
 80060e0:	6123      	str	r3, [r4, #16]
 80060e2:	65a1      	str	r1, [r4, #88]	; 0x58
 80060e4:	f04f 0900 	mov.w	r9, #0
 80060e8:	e7de      	b.n	80060a8 <_printf_float+0x16c>
 80060ea:	b913      	cbnz	r3, 80060f2 <_printf_float+0x1b6>
 80060ec:	6822      	ldr	r2, [r4, #0]
 80060ee:	07d2      	lsls	r2, r2, #31
 80060f0:	d501      	bpl.n	80060f6 <_printf_float+0x1ba>
 80060f2:	3302      	adds	r3, #2
 80060f4:	e7f4      	b.n	80060e0 <_printf_float+0x1a4>
 80060f6:	2301      	movs	r3, #1
 80060f8:	e7f2      	b.n	80060e0 <_printf_float+0x1a4>
 80060fa:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80060fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006100:	4299      	cmp	r1, r3
 8006102:	db05      	blt.n	8006110 <_printf_float+0x1d4>
 8006104:	6823      	ldr	r3, [r4, #0]
 8006106:	6121      	str	r1, [r4, #16]
 8006108:	07d8      	lsls	r0, r3, #31
 800610a:	d5ea      	bpl.n	80060e2 <_printf_float+0x1a6>
 800610c:	1c4b      	adds	r3, r1, #1
 800610e:	e7e7      	b.n	80060e0 <_printf_float+0x1a4>
 8006110:	2900      	cmp	r1, #0
 8006112:	bfd4      	ite	le
 8006114:	f1c1 0202 	rsble	r2, r1, #2
 8006118:	2201      	movgt	r2, #1
 800611a:	4413      	add	r3, r2
 800611c:	e7e0      	b.n	80060e0 <_printf_float+0x1a4>
 800611e:	6823      	ldr	r3, [r4, #0]
 8006120:	055a      	lsls	r2, r3, #21
 8006122:	d407      	bmi.n	8006134 <_printf_float+0x1f8>
 8006124:	6923      	ldr	r3, [r4, #16]
 8006126:	4642      	mov	r2, r8
 8006128:	4631      	mov	r1, r6
 800612a:	4628      	mov	r0, r5
 800612c:	47b8      	blx	r7
 800612e:	3001      	adds	r0, #1
 8006130:	d12c      	bne.n	800618c <_printf_float+0x250>
 8006132:	e764      	b.n	8005ffe <_printf_float+0xc2>
 8006134:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006138:	f240 80e0 	bls.w	80062fc <_printf_float+0x3c0>
 800613c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006140:	2200      	movs	r2, #0
 8006142:	2300      	movs	r3, #0
 8006144:	f7fa fcc8 	bl	8000ad8 <__aeabi_dcmpeq>
 8006148:	2800      	cmp	r0, #0
 800614a:	d034      	beq.n	80061b6 <_printf_float+0x27a>
 800614c:	4a37      	ldr	r2, [pc, #220]	; (800622c <_printf_float+0x2f0>)
 800614e:	2301      	movs	r3, #1
 8006150:	4631      	mov	r1, r6
 8006152:	4628      	mov	r0, r5
 8006154:	47b8      	blx	r7
 8006156:	3001      	adds	r0, #1
 8006158:	f43f af51 	beq.w	8005ffe <_printf_float+0xc2>
 800615c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006160:	429a      	cmp	r2, r3
 8006162:	db02      	blt.n	800616a <_printf_float+0x22e>
 8006164:	6823      	ldr	r3, [r4, #0]
 8006166:	07d8      	lsls	r0, r3, #31
 8006168:	d510      	bpl.n	800618c <_printf_float+0x250>
 800616a:	ee18 3a10 	vmov	r3, s16
 800616e:	4652      	mov	r2, sl
 8006170:	4631      	mov	r1, r6
 8006172:	4628      	mov	r0, r5
 8006174:	47b8      	blx	r7
 8006176:	3001      	adds	r0, #1
 8006178:	f43f af41 	beq.w	8005ffe <_printf_float+0xc2>
 800617c:	f04f 0800 	mov.w	r8, #0
 8006180:	f104 091a 	add.w	r9, r4, #26
 8006184:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006186:	3b01      	subs	r3, #1
 8006188:	4543      	cmp	r3, r8
 800618a:	dc09      	bgt.n	80061a0 <_printf_float+0x264>
 800618c:	6823      	ldr	r3, [r4, #0]
 800618e:	079b      	lsls	r3, r3, #30
 8006190:	f100 8105 	bmi.w	800639e <_printf_float+0x462>
 8006194:	68e0      	ldr	r0, [r4, #12]
 8006196:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006198:	4298      	cmp	r0, r3
 800619a:	bfb8      	it	lt
 800619c:	4618      	movlt	r0, r3
 800619e:	e730      	b.n	8006002 <_printf_float+0xc6>
 80061a0:	2301      	movs	r3, #1
 80061a2:	464a      	mov	r2, r9
 80061a4:	4631      	mov	r1, r6
 80061a6:	4628      	mov	r0, r5
 80061a8:	47b8      	blx	r7
 80061aa:	3001      	adds	r0, #1
 80061ac:	f43f af27 	beq.w	8005ffe <_printf_float+0xc2>
 80061b0:	f108 0801 	add.w	r8, r8, #1
 80061b4:	e7e6      	b.n	8006184 <_printf_float+0x248>
 80061b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	dc39      	bgt.n	8006230 <_printf_float+0x2f4>
 80061bc:	4a1b      	ldr	r2, [pc, #108]	; (800622c <_printf_float+0x2f0>)
 80061be:	2301      	movs	r3, #1
 80061c0:	4631      	mov	r1, r6
 80061c2:	4628      	mov	r0, r5
 80061c4:	47b8      	blx	r7
 80061c6:	3001      	adds	r0, #1
 80061c8:	f43f af19 	beq.w	8005ffe <_printf_float+0xc2>
 80061cc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80061d0:	4313      	orrs	r3, r2
 80061d2:	d102      	bne.n	80061da <_printf_float+0x29e>
 80061d4:	6823      	ldr	r3, [r4, #0]
 80061d6:	07d9      	lsls	r1, r3, #31
 80061d8:	d5d8      	bpl.n	800618c <_printf_float+0x250>
 80061da:	ee18 3a10 	vmov	r3, s16
 80061de:	4652      	mov	r2, sl
 80061e0:	4631      	mov	r1, r6
 80061e2:	4628      	mov	r0, r5
 80061e4:	47b8      	blx	r7
 80061e6:	3001      	adds	r0, #1
 80061e8:	f43f af09 	beq.w	8005ffe <_printf_float+0xc2>
 80061ec:	f04f 0900 	mov.w	r9, #0
 80061f0:	f104 0a1a 	add.w	sl, r4, #26
 80061f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80061f6:	425b      	negs	r3, r3
 80061f8:	454b      	cmp	r3, r9
 80061fa:	dc01      	bgt.n	8006200 <_printf_float+0x2c4>
 80061fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80061fe:	e792      	b.n	8006126 <_printf_float+0x1ea>
 8006200:	2301      	movs	r3, #1
 8006202:	4652      	mov	r2, sl
 8006204:	4631      	mov	r1, r6
 8006206:	4628      	mov	r0, r5
 8006208:	47b8      	blx	r7
 800620a:	3001      	adds	r0, #1
 800620c:	f43f aef7 	beq.w	8005ffe <_printf_float+0xc2>
 8006210:	f109 0901 	add.w	r9, r9, #1
 8006214:	e7ee      	b.n	80061f4 <_printf_float+0x2b8>
 8006216:	bf00      	nop
 8006218:	7fefffff 	.word	0x7fefffff
 800621c:	0800a3c8 	.word	0x0800a3c8
 8006220:	0800a3cc 	.word	0x0800a3cc
 8006224:	0800a3d4 	.word	0x0800a3d4
 8006228:	0800a3d0 	.word	0x0800a3d0
 800622c:	0800a3d8 	.word	0x0800a3d8
 8006230:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006232:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006234:	429a      	cmp	r2, r3
 8006236:	bfa8      	it	ge
 8006238:	461a      	movge	r2, r3
 800623a:	2a00      	cmp	r2, #0
 800623c:	4691      	mov	r9, r2
 800623e:	dc37      	bgt.n	80062b0 <_printf_float+0x374>
 8006240:	f04f 0b00 	mov.w	fp, #0
 8006244:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006248:	f104 021a 	add.w	r2, r4, #26
 800624c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800624e:	9305      	str	r3, [sp, #20]
 8006250:	eba3 0309 	sub.w	r3, r3, r9
 8006254:	455b      	cmp	r3, fp
 8006256:	dc33      	bgt.n	80062c0 <_printf_float+0x384>
 8006258:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800625c:	429a      	cmp	r2, r3
 800625e:	db3b      	blt.n	80062d8 <_printf_float+0x39c>
 8006260:	6823      	ldr	r3, [r4, #0]
 8006262:	07da      	lsls	r2, r3, #31
 8006264:	d438      	bmi.n	80062d8 <_printf_float+0x39c>
 8006266:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006268:	9b05      	ldr	r3, [sp, #20]
 800626a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800626c:	1ad3      	subs	r3, r2, r3
 800626e:	eba2 0901 	sub.w	r9, r2, r1
 8006272:	4599      	cmp	r9, r3
 8006274:	bfa8      	it	ge
 8006276:	4699      	movge	r9, r3
 8006278:	f1b9 0f00 	cmp.w	r9, #0
 800627c:	dc35      	bgt.n	80062ea <_printf_float+0x3ae>
 800627e:	f04f 0800 	mov.w	r8, #0
 8006282:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006286:	f104 0a1a 	add.w	sl, r4, #26
 800628a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800628e:	1a9b      	subs	r3, r3, r2
 8006290:	eba3 0309 	sub.w	r3, r3, r9
 8006294:	4543      	cmp	r3, r8
 8006296:	f77f af79 	ble.w	800618c <_printf_float+0x250>
 800629a:	2301      	movs	r3, #1
 800629c:	4652      	mov	r2, sl
 800629e:	4631      	mov	r1, r6
 80062a0:	4628      	mov	r0, r5
 80062a2:	47b8      	blx	r7
 80062a4:	3001      	adds	r0, #1
 80062a6:	f43f aeaa 	beq.w	8005ffe <_printf_float+0xc2>
 80062aa:	f108 0801 	add.w	r8, r8, #1
 80062ae:	e7ec      	b.n	800628a <_printf_float+0x34e>
 80062b0:	4613      	mov	r3, r2
 80062b2:	4631      	mov	r1, r6
 80062b4:	4642      	mov	r2, r8
 80062b6:	4628      	mov	r0, r5
 80062b8:	47b8      	blx	r7
 80062ba:	3001      	adds	r0, #1
 80062bc:	d1c0      	bne.n	8006240 <_printf_float+0x304>
 80062be:	e69e      	b.n	8005ffe <_printf_float+0xc2>
 80062c0:	2301      	movs	r3, #1
 80062c2:	4631      	mov	r1, r6
 80062c4:	4628      	mov	r0, r5
 80062c6:	9205      	str	r2, [sp, #20]
 80062c8:	47b8      	blx	r7
 80062ca:	3001      	adds	r0, #1
 80062cc:	f43f ae97 	beq.w	8005ffe <_printf_float+0xc2>
 80062d0:	9a05      	ldr	r2, [sp, #20]
 80062d2:	f10b 0b01 	add.w	fp, fp, #1
 80062d6:	e7b9      	b.n	800624c <_printf_float+0x310>
 80062d8:	ee18 3a10 	vmov	r3, s16
 80062dc:	4652      	mov	r2, sl
 80062de:	4631      	mov	r1, r6
 80062e0:	4628      	mov	r0, r5
 80062e2:	47b8      	blx	r7
 80062e4:	3001      	adds	r0, #1
 80062e6:	d1be      	bne.n	8006266 <_printf_float+0x32a>
 80062e8:	e689      	b.n	8005ffe <_printf_float+0xc2>
 80062ea:	9a05      	ldr	r2, [sp, #20]
 80062ec:	464b      	mov	r3, r9
 80062ee:	4442      	add	r2, r8
 80062f0:	4631      	mov	r1, r6
 80062f2:	4628      	mov	r0, r5
 80062f4:	47b8      	blx	r7
 80062f6:	3001      	adds	r0, #1
 80062f8:	d1c1      	bne.n	800627e <_printf_float+0x342>
 80062fa:	e680      	b.n	8005ffe <_printf_float+0xc2>
 80062fc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80062fe:	2a01      	cmp	r2, #1
 8006300:	dc01      	bgt.n	8006306 <_printf_float+0x3ca>
 8006302:	07db      	lsls	r3, r3, #31
 8006304:	d538      	bpl.n	8006378 <_printf_float+0x43c>
 8006306:	2301      	movs	r3, #1
 8006308:	4642      	mov	r2, r8
 800630a:	4631      	mov	r1, r6
 800630c:	4628      	mov	r0, r5
 800630e:	47b8      	blx	r7
 8006310:	3001      	adds	r0, #1
 8006312:	f43f ae74 	beq.w	8005ffe <_printf_float+0xc2>
 8006316:	ee18 3a10 	vmov	r3, s16
 800631a:	4652      	mov	r2, sl
 800631c:	4631      	mov	r1, r6
 800631e:	4628      	mov	r0, r5
 8006320:	47b8      	blx	r7
 8006322:	3001      	adds	r0, #1
 8006324:	f43f ae6b 	beq.w	8005ffe <_printf_float+0xc2>
 8006328:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800632c:	2200      	movs	r2, #0
 800632e:	2300      	movs	r3, #0
 8006330:	f7fa fbd2 	bl	8000ad8 <__aeabi_dcmpeq>
 8006334:	b9d8      	cbnz	r0, 800636e <_printf_float+0x432>
 8006336:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006338:	f108 0201 	add.w	r2, r8, #1
 800633c:	3b01      	subs	r3, #1
 800633e:	4631      	mov	r1, r6
 8006340:	4628      	mov	r0, r5
 8006342:	47b8      	blx	r7
 8006344:	3001      	adds	r0, #1
 8006346:	d10e      	bne.n	8006366 <_printf_float+0x42a>
 8006348:	e659      	b.n	8005ffe <_printf_float+0xc2>
 800634a:	2301      	movs	r3, #1
 800634c:	4652      	mov	r2, sl
 800634e:	4631      	mov	r1, r6
 8006350:	4628      	mov	r0, r5
 8006352:	47b8      	blx	r7
 8006354:	3001      	adds	r0, #1
 8006356:	f43f ae52 	beq.w	8005ffe <_printf_float+0xc2>
 800635a:	f108 0801 	add.w	r8, r8, #1
 800635e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006360:	3b01      	subs	r3, #1
 8006362:	4543      	cmp	r3, r8
 8006364:	dcf1      	bgt.n	800634a <_printf_float+0x40e>
 8006366:	464b      	mov	r3, r9
 8006368:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800636c:	e6dc      	b.n	8006128 <_printf_float+0x1ec>
 800636e:	f04f 0800 	mov.w	r8, #0
 8006372:	f104 0a1a 	add.w	sl, r4, #26
 8006376:	e7f2      	b.n	800635e <_printf_float+0x422>
 8006378:	2301      	movs	r3, #1
 800637a:	4642      	mov	r2, r8
 800637c:	e7df      	b.n	800633e <_printf_float+0x402>
 800637e:	2301      	movs	r3, #1
 8006380:	464a      	mov	r2, r9
 8006382:	4631      	mov	r1, r6
 8006384:	4628      	mov	r0, r5
 8006386:	47b8      	blx	r7
 8006388:	3001      	adds	r0, #1
 800638a:	f43f ae38 	beq.w	8005ffe <_printf_float+0xc2>
 800638e:	f108 0801 	add.w	r8, r8, #1
 8006392:	68e3      	ldr	r3, [r4, #12]
 8006394:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006396:	1a5b      	subs	r3, r3, r1
 8006398:	4543      	cmp	r3, r8
 800639a:	dcf0      	bgt.n	800637e <_printf_float+0x442>
 800639c:	e6fa      	b.n	8006194 <_printf_float+0x258>
 800639e:	f04f 0800 	mov.w	r8, #0
 80063a2:	f104 0919 	add.w	r9, r4, #25
 80063a6:	e7f4      	b.n	8006392 <_printf_float+0x456>

080063a8 <_printf_common>:
 80063a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80063ac:	4616      	mov	r6, r2
 80063ae:	4699      	mov	r9, r3
 80063b0:	688a      	ldr	r2, [r1, #8]
 80063b2:	690b      	ldr	r3, [r1, #16]
 80063b4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80063b8:	4293      	cmp	r3, r2
 80063ba:	bfb8      	it	lt
 80063bc:	4613      	movlt	r3, r2
 80063be:	6033      	str	r3, [r6, #0]
 80063c0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80063c4:	4607      	mov	r7, r0
 80063c6:	460c      	mov	r4, r1
 80063c8:	b10a      	cbz	r2, 80063ce <_printf_common+0x26>
 80063ca:	3301      	adds	r3, #1
 80063cc:	6033      	str	r3, [r6, #0]
 80063ce:	6823      	ldr	r3, [r4, #0]
 80063d0:	0699      	lsls	r1, r3, #26
 80063d2:	bf42      	ittt	mi
 80063d4:	6833      	ldrmi	r3, [r6, #0]
 80063d6:	3302      	addmi	r3, #2
 80063d8:	6033      	strmi	r3, [r6, #0]
 80063da:	6825      	ldr	r5, [r4, #0]
 80063dc:	f015 0506 	ands.w	r5, r5, #6
 80063e0:	d106      	bne.n	80063f0 <_printf_common+0x48>
 80063e2:	f104 0a19 	add.w	sl, r4, #25
 80063e6:	68e3      	ldr	r3, [r4, #12]
 80063e8:	6832      	ldr	r2, [r6, #0]
 80063ea:	1a9b      	subs	r3, r3, r2
 80063ec:	42ab      	cmp	r3, r5
 80063ee:	dc26      	bgt.n	800643e <_printf_common+0x96>
 80063f0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80063f4:	1e13      	subs	r3, r2, #0
 80063f6:	6822      	ldr	r2, [r4, #0]
 80063f8:	bf18      	it	ne
 80063fa:	2301      	movne	r3, #1
 80063fc:	0692      	lsls	r2, r2, #26
 80063fe:	d42b      	bmi.n	8006458 <_printf_common+0xb0>
 8006400:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006404:	4649      	mov	r1, r9
 8006406:	4638      	mov	r0, r7
 8006408:	47c0      	blx	r8
 800640a:	3001      	adds	r0, #1
 800640c:	d01e      	beq.n	800644c <_printf_common+0xa4>
 800640e:	6823      	ldr	r3, [r4, #0]
 8006410:	68e5      	ldr	r5, [r4, #12]
 8006412:	6832      	ldr	r2, [r6, #0]
 8006414:	f003 0306 	and.w	r3, r3, #6
 8006418:	2b04      	cmp	r3, #4
 800641a:	bf08      	it	eq
 800641c:	1aad      	subeq	r5, r5, r2
 800641e:	68a3      	ldr	r3, [r4, #8]
 8006420:	6922      	ldr	r2, [r4, #16]
 8006422:	bf0c      	ite	eq
 8006424:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006428:	2500      	movne	r5, #0
 800642a:	4293      	cmp	r3, r2
 800642c:	bfc4      	itt	gt
 800642e:	1a9b      	subgt	r3, r3, r2
 8006430:	18ed      	addgt	r5, r5, r3
 8006432:	2600      	movs	r6, #0
 8006434:	341a      	adds	r4, #26
 8006436:	42b5      	cmp	r5, r6
 8006438:	d11a      	bne.n	8006470 <_printf_common+0xc8>
 800643a:	2000      	movs	r0, #0
 800643c:	e008      	b.n	8006450 <_printf_common+0xa8>
 800643e:	2301      	movs	r3, #1
 8006440:	4652      	mov	r2, sl
 8006442:	4649      	mov	r1, r9
 8006444:	4638      	mov	r0, r7
 8006446:	47c0      	blx	r8
 8006448:	3001      	adds	r0, #1
 800644a:	d103      	bne.n	8006454 <_printf_common+0xac>
 800644c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006450:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006454:	3501      	adds	r5, #1
 8006456:	e7c6      	b.n	80063e6 <_printf_common+0x3e>
 8006458:	18e1      	adds	r1, r4, r3
 800645a:	1c5a      	adds	r2, r3, #1
 800645c:	2030      	movs	r0, #48	; 0x30
 800645e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006462:	4422      	add	r2, r4
 8006464:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006468:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800646c:	3302      	adds	r3, #2
 800646e:	e7c7      	b.n	8006400 <_printf_common+0x58>
 8006470:	2301      	movs	r3, #1
 8006472:	4622      	mov	r2, r4
 8006474:	4649      	mov	r1, r9
 8006476:	4638      	mov	r0, r7
 8006478:	47c0      	blx	r8
 800647a:	3001      	adds	r0, #1
 800647c:	d0e6      	beq.n	800644c <_printf_common+0xa4>
 800647e:	3601      	adds	r6, #1
 8006480:	e7d9      	b.n	8006436 <_printf_common+0x8e>
	...

08006484 <_printf_i>:
 8006484:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006488:	460c      	mov	r4, r1
 800648a:	4691      	mov	r9, r2
 800648c:	7e27      	ldrb	r7, [r4, #24]
 800648e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006490:	2f78      	cmp	r7, #120	; 0x78
 8006492:	4680      	mov	r8, r0
 8006494:	469a      	mov	sl, r3
 8006496:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800649a:	d807      	bhi.n	80064ac <_printf_i+0x28>
 800649c:	2f62      	cmp	r7, #98	; 0x62
 800649e:	d80a      	bhi.n	80064b6 <_printf_i+0x32>
 80064a0:	2f00      	cmp	r7, #0
 80064a2:	f000 80d8 	beq.w	8006656 <_printf_i+0x1d2>
 80064a6:	2f58      	cmp	r7, #88	; 0x58
 80064a8:	f000 80a3 	beq.w	80065f2 <_printf_i+0x16e>
 80064ac:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80064b0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80064b4:	e03a      	b.n	800652c <_printf_i+0xa8>
 80064b6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80064ba:	2b15      	cmp	r3, #21
 80064bc:	d8f6      	bhi.n	80064ac <_printf_i+0x28>
 80064be:	a001      	add	r0, pc, #4	; (adr r0, 80064c4 <_printf_i+0x40>)
 80064c0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80064c4:	0800651d 	.word	0x0800651d
 80064c8:	08006531 	.word	0x08006531
 80064cc:	080064ad 	.word	0x080064ad
 80064d0:	080064ad 	.word	0x080064ad
 80064d4:	080064ad 	.word	0x080064ad
 80064d8:	080064ad 	.word	0x080064ad
 80064dc:	08006531 	.word	0x08006531
 80064e0:	080064ad 	.word	0x080064ad
 80064e4:	080064ad 	.word	0x080064ad
 80064e8:	080064ad 	.word	0x080064ad
 80064ec:	080064ad 	.word	0x080064ad
 80064f0:	0800663d 	.word	0x0800663d
 80064f4:	08006561 	.word	0x08006561
 80064f8:	0800661f 	.word	0x0800661f
 80064fc:	080064ad 	.word	0x080064ad
 8006500:	080064ad 	.word	0x080064ad
 8006504:	0800665f 	.word	0x0800665f
 8006508:	080064ad 	.word	0x080064ad
 800650c:	08006561 	.word	0x08006561
 8006510:	080064ad 	.word	0x080064ad
 8006514:	080064ad 	.word	0x080064ad
 8006518:	08006627 	.word	0x08006627
 800651c:	680b      	ldr	r3, [r1, #0]
 800651e:	1d1a      	adds	r2, r3, #4
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	600a      	str	r2, [r1, #0]
 8006524:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006528:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800652c:	2301      	movs	r3, #1
 800652e:	e0a3      	b.n	8006678 <_printf_i+0x1f4>
 8006530:	6825      	ldr	r5, [r4, #0]
 8006532:	6808      	ldr	r0, [r1, #0]
 8006534:	062e      	lsls	r6, r5, #24
 8006536:	f100 0304 	add.w	r3, r0, #4
 800653a:	d50a      	bpl.n	8006552 <_printf_i+0xce>
 800653c:	6805      	ldr	r5, [r0, #0]
 800653e:	600b      	str	r3, [r1, #0]
 8006540:	2d00      	cmp	r5, #0
 8006542:	da03      	bge.n	800654c <_printf_i+0xc8>
 8006544:	232d      	movs	r3, #45	; 0x2d
 8006546:	426d      	negs	r5, r5
 8006548:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800654c:	485e      	ldr	r0, [pc, #376]	; (80066c8 <_printf_i+0x244>)
 800654e:	230a      	movs	r3, #10
 8006550:	e019      	b.n	8006586 <_printf_i+0x102>
 8006552:	f015 0f40 	tst.w	r5, #64	; 0x40
 8006556:	6805      	ldr	r5, [r0, #0]
 8006558:	600b      	str	r3, [r1, #0]
 800655a:	bf18      	it	ne
 800655c:	b22d      	sxthne	r5, r5
 800655e:	e7ef      	b.n	8006540 <_printf_i+0xbc>
 8006560:	680b      	ldr	r3, [r1, #0]
 8006562:	6825      	ldr	r5, [r4, #0]
 8006564:	1d18      	adds	r0, r3, #4
 8006566:	6008      	str	r0, [r1, #0]
 8006568:	0628      	lsls	r0, r5, #24
 800656a:	d501      	bpl.n	8006570 <_printf_i+0xec>
 800656c:	681d      	ldr	r5, [r3, #0]
 800656e:	e002      	b.n	8006576 <_printf_i+0xf2>
 8006570:	0669      	lsls	r1, r5, #25
 8006572:	d5fb      	bpl.n	800656c <_printf_i+0xe8>
 8006574:	881d      	ldrh	r5, [r3, #0]
 8006576:	4854      	ldr	r0, [pc, #336]	; (80066c8 <_printf_i+0x244>)
 8006578:	2f6f      	cmp	r7, #111	; 0x6f
 800657a:	bf0c      	ite	eq
 800657c:	2308      	moveq	r3, #8
 800657e:	230a      	movne	r3, #10
 8006580:	2100      	movs	r1, #0
 8006582:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006586:	6866      	ldr	r6, [r4, #4]
 8006588:	60a6      	str	r6, [r4, #8]
 800658a:	2e00      	cmp	r6, #0
 800658c:	bfa2      	ittt	ge
 800658e:	6821      	ldrge	r1, [r4, #0]
 8006590:	f021 0104 	bicge.w	r1, r1, #4
 8006594:	6021      	strge	r1, [r4, #0]
 8006596:	b90d      	cbnz	r5, 800659c <_printf_i+0x118>
 8006598:	2e00      	cmp	r6, #0
 800659a:	d04d      	beq.n	8006638 <_printf_i+0x1b4>
 800659c:	4616      	mov	r6, r2
 800659e:	fbb5 f1f3 	udiv	r1, r5, r3
 80065a2:	fb03 5711 	mls	r7, r3, r1, r5
 80065a6:	5dc7      	ldrb	r7, [r0, r7]
 80065a8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80065ac:	462f      	mov	r7, r5
 80065ae:	42bb      	cmp	r3, r7
 80065b0:	460d      	mov	r5, r1
 80065b2:	d9f4      	bls.n	800659e <_printf_i+0x11a>
 80065b4:	2b08      	cmp	r3, #8
 80065b6:	d10b      	bne.n	80065d0 <_printf_i+0x14c>
 80065b8:	6823      	ldr	r3, [r4, #0]
 80065ba:	07df      	lsls	r7, r3, #31
 80065bc:	d508      	bpl.n	80065d0 <_printf_i+0x14c>
 80065be:	6923      	ldr	r3, [r4, #16]
 80065c0:	6861      	ldr	r1, [r4, #4]
 80065c2:	4299      	cmp	r1, r3
 80065c4:	bfde      	ittt	le
 80065c6:	2330      	movle	r3, #48	; 0x30
 80065c8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80065cc:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 80065d0:	1b92      	subs	r2, r2, r6
 80065d2:	6122      	str	r2, [r4, #16]
 80065d4:	f8cd a000 	str.w	sl, [sp]
 80065d8:	464b      	mov	r3, r9
 80065da:	aa03      	add	r2, sp, #12
 80065dc:	4621      	mov	r1, r4
 80065de:	4640      	mov	r0, r8
 80065e0:	f7ff fee2 	bl	80063a8 <_printf_common>
 80065e4:	3001      	adds	r0, #1
 80065e6:	d14c      	bne.n	8006682 <_printf_i+0x1fe>
 80065e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80065ec:	b004      	add	sp, #16
 80065ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065f2:	4835      	ldr	r0, [pc, #212]	; (80066c8 <_printf_i+0x244>)
 80065f4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80065f8:	6823      	ldr	r3, [r4, #0]
 80065fa:	680e      	ldr	r6, [r1, #0]
 80065fc:	061f      	lsls	r7, r3, #24
 80065fe:	f856 5b04 	ldr.w	r5, [r6], #4
 8006602:	600e      	str	r6, [r1, #0]
 8006604:	d514      	bpl.n	8006630 <_printf_i+0x1ac>
 8006606:	07d9      	lsls	r1, r3, #31
 8006608:	bf44      	itt	mi
 800660a:	f043 0320 	orrmi.w	r3, r3, #32
 800660e:	6023      	strmi	r3, [r4, #0]
 8006610:	b91d      	cbnz	r5, 800661a <_printf_i+0x196>
 8006612:	6823      	ldr	r3, [r4, #0]
 8006614:	f023 0320 	bic.w	r3, r3, #32
 8006618:	6023      	str	r3, [r4, #0]
 800661a:	2310      	movs	r3, #16
 800661c:	e7b0      	b.n	8006580 <_printf_i+0xfc>
 800661e:	6823      	ldr	r3, [r4, #0]
 8006620:	f043 0320 	orr.w	r3, r3, #32
 8006624:	6023      	str	r3, [r4, #0]
 8006626:	2378      	movs	r3, #120	; 0x78
 8006628:	4828      	ldr	r0, [pc, #160]	; (80066cc <_printf_i+0x248>)
 800662a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800662e:	e7e3      	b.n	80065f8 <_printf_i+0x174>
 8006630:	065e      	lsls	r6, r3, #25
 8006632:	bf48      	it	mi
 8006634:	b2ad      	uxthmi	r5, r5
 8006636:	e7e6      	b.n	8006606 <_printf_i+0x182>
 8006638:	4616      	mov	r6, r2
 800663a:	e7bb      	b.n	80065b4 <_printf_i+0x130>
 800663c:	680b      	ldr	r3, [r1, #0]
 800663e:	6826      	ldr	r6, [r4, #0]
 8006640:	6960      	ldr	r0, [r4, #20]
 8006642:	1d1d      	adds	r5, r3, #4
 8006644:	600d      	str	r5, [r1, #0]
 8006646:	0635      	lsls	r5, r6, #24
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	d501      	bpl.n	8006650 <_printf_i+0x1cc>
 800664c:	6018      	str	r0, [r3, #0]
 800664e:	e002      	b.n	8006656 <_printf_i+0x1d2>
 8006650:	0671      	lsls	r1, r6, #25
 8006652:	d5fb      	bpl.n	800664c <_printf_i+0x1c8>
 8006654:	8018      	strh	r0, [r3, #0]
 8006656:	2300      	movs	r3, #0
 8006658:	6123      	str	r3, [r4, #16]
 800665a:	4616      	mov	r6, r2
 800665c:	e7ba      	b.n	80065d4 <_printf_i+0x150>
 800665e:	680b      	ldr	r3, [r1, #0]
 8006660:	1d1a      	adds	r2, r3, #4
 8006662:	600a      	str	r2, [r1, #0]
 8006664:	681e      	ldr	r6, [r3, #0]
 8006666:	6862      	ldr	r2, [r4, #4]
 8006668:	2100      	movs	r1, #0
 800666a:	4630      	mov	r0, r6
 800666c:	f7f9 fdc0 	bl	80001f0 <memchr>
 8006670:	b108      	cbz	r0, 8006676 <_printf_i+0x1f2>
 8006672:	1b80      	subs	r0, r0, r6
 8006674:	6060      	str	r0, [r4, #4]
 8006676:	6863      	ldr	r3, [r4, #4]
 8006678:	6123      	str	r3, [r4, #16]
 800667a:	2300      	movs	r3, #0
 800667c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006680:	e7a8      	b.n	80065d4 <_printf_i+0x150>
 8006682:	6923      	ldr	r3, [r4, #16]
 8006684:	4632      	mov	r2, r6
 8006686:	4649      	mov	r1, r9
 8006688:	4640      	mov	r0, r8
 800668a:	47d0      	blx	sl
 800668c:	3001      	adds	r0, #1
 800668e:	d0ab      	beq.n	80065e8 <_printf_i+0x164>
 8006690:	6823      	ldr	r3, [r4, #0]
 8006692:	079b      	lsls	r3, r3, #30
 8006694:	d413      	bmi.n	80066be <_printf_i+0x23a>
 8006696:	68e0      	ldr	r0, [r4, #12]
 8006698:	9b03      	ldr	r3, [sp, #12]
 800669a:	4298      	cmp	r0, r3
 800669c:	bfb8      	it	lt
 800669e:	4618      	movlt	r0, r3
 80066a0:	e7a4      	b.n	80065ec <_printf_i+0x168>
 80066a2:	2301      	movs	r3, #1
 80066a4:	4632      	mov	r2, r6
 80066a6:	4649      	mov	r1, r9
 80066a8:	4640      	mov	r0, r8
 80066aa:	47d0      	blx	sl
 80066ac:	3001      	adds	r0, #1
 80066ae:	d09b      	beq.n	80065e8 <_printf_i+0x164>
 80066b0:	3501      	adds	r5, #1
 80066b2:	68e3      	ldr	r3, [r4, #12]
 80066b4:	9903      	ldr	r1, [sp, #12]
 80066b6:	1a5b      	subs	r3, r3, r1
 80066b8:	42ab      	cmp	r3, r5
 80066ba:	dcf2      	bgt.n	80066a2 <_printf_i+0x21e>
 80066bc:	e7eb      	b.n	8006696 <_printf_i+0x212>
 80066be:	2500      	movs	r5, #0
 80066c0:	f104 0619 	add.w	r6, r4, #25
 80066c4:	e7f5      	b.n	80066b2 <_printf_i+0x22e>
 80066c6:	bf00      	nop
 80066c8:	0800a3da 	.word	0x0800a3da
 80066cc:	0800a3eb 	.word	0x0800a3eb

080066d0 <siprintf>:
 80066d0:	b40e      	push	{r1, r2, r3}
 80066d2:	b500      	push	{lr}
 80066d4:	b09c      	sub	sp, #112	; 0x70
 80066d6:	ab1d      	add	r3, sp, #116	; 0x74
 80066d8:	9002      	str	r0, [sp, #8]
 80066da:	9006      	str	r0, [sp, #24]
 80066dc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80066e0:	4809      	ldr	r0, [pc, #36]	; (8006708 <siprintf+0x38>)
 80066e2:	9107      	str	r1, [sp, #28]
 80066e4:	9104      	str	r1, [sp, #16]
 80066e6:	4909      	ldr	r1, [pc, #36]	; (800670c <siprintf+0x3c>)
 80066e8:	f853 2b04 	ldr.w	r2, [r3], #4
 80066ec:	9105      	str	r1, [sp, #20]
 80066ee:	6800      	ldr	r0, [r0, #0]
 80066f0:	9301      	str	r3, [sp, #4]
 80066f2:	a902      	add	r1, sp, #8
 80066f4:	f001 fb44 	bl	8007d80 <_svfiprintf_r>
 80066f8:	9b02      	ldr	r3, [sp, #8]
 80066fa:	2200      	movs	r2, #0
 80066fc:	701a      	strb	r2, [r3, #0]
 80066fe:	b01c      	add	sp, #112	; 0x70
 8006700:	f85d eb04 	ldr.w	lr, [sp], #4
 8006704:	b003      	add	sp, #12
 8006706:	4770      	bx	lr
 8006708:	2000001c 	.word	0x2000001c
 800670c:	ffff0208 	.word	0xffff0208

08006710 <_vsiprintf_r>:
 8006710:	b500      	push	{lr}
 8006712:	b09b      	sub	sp, #108	; 0x6c
 8006714:	9100      	str	r1, [sp, #0]
 8006716:	9104      	str	r1, [sp, #16]
 8006718:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800671c:	9105      	str	r1, [sp, #20]
 800671e:	9102      	str	r1, [sp, #8]
 8006720:	4905      	ldr	r1, [pc, #20]	; (8006738 <_vsiprintf_r+0x28>)
 8006722:	9103      	str	r1, [sp, #12]
 8006724:	4669      	mov	r1, sp
 8006726:	f001 fb2b 	bl	8007d80 <_svfiprintf_r>
 800672a:	9b00      	ldr	r3, [sp, #0]
 800672c:	2200      	movs	r2, #0
 800672e:	701a      	strb	r2, [r3, #0]
 8006730:	b01b      	add	sp, #108	; 0x6c
 8006732:	f85d fb04 	ldr.w	pc, [sp], #4
 8006736:	bf00      	nop
 8006738:	ffff0208 	.word	0xffff0208

0800673c <vsiprintf>:
 800673c:	4613      	mov	r3, r2
 800673e:	460a      	mov	r2, r1
 8006740:	4601      	mov	r1, r0
 8006742:	4802      	ldr	r0, [pc, #8]	; (800674c <vsiprintf+0x10>)
 8006744:	6800      	ldr	r0, [r0, #0]
 8006746:	f7ff bfe3 	b.w	8006710 <_vsiprintf_r>
 800674a:	bf00      	nop
 800674c:	2000001c 	.word	0x2000001c

08006750 <quorem>:
 8006750:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006754:	6903      	ldr	r3, [r0, #16]
 8006756:	690c      	ldr	r4, [r1, #16]
 8006758:	42a3      	cmp	r3, r4
 800675a:	4607      	mov	r7, r0
 800675c:	f2c0 8081 	blt.w	8006862 <quorem+0x112>
 8006760:	3c01      	subs	r4, #1
 8006762:	f101 0814 	add.w	r8, r1, #20
 8006766:	f100 0514 	add.w	r5, r0, #20
 800676a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800676e:	9301      	str	r3, [sp, #4]
 8006770:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006774:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006778:	3301      	adds	r3, #1
 800677a:	429a      	cmp	r2, r3
 800677c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006780:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006784:	fbb2 f6f3 	udiv	r6, r2, r3
 8006788:	d331      	bcc.n	80067ee <quorem+0x9e>
 800678a:	f04f 0e00 	mov.w	lr, #0
 800678e:	4640      	mov	r0, r8
 8006790:	46ac      	mov	ip, r5
 8006792:	46f2      	mov	sl, lr
 8006794:	f850 2b04 	ldr.w	r2, [r0], #4
 8006798:	b293      	uxth	r3, r2
 800679a:	fb06 e303 	mla	r3, r6, r3, lr
 800679e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80067a2:	b29b      	uxth	r3, r3
 80067a4:	ebaa 0303 	sub.w	r3, sl, r3
 80067a8:	0c12      	lsrs	r2, r2, #16
 80067aa:	f8dc a000 	ldr.w	sl, [ip]
 80067ae:	fb06 e202 	mla	r2, r6, r2, lr
 80067b2:	fa13 f38a 	uxtah	r3, r3, sl
 80067b6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80067ba:	fa1f fa82 	uxth.w	sl, r2
 80067be:	f8dc 2000 	ldr.w	r2, [ip]
 80067c2:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80067c6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80067ca:	b29b      	uxth	r3, r3
 80067cc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80067d0:	4581      	cmp	r9, r0
 80067d2:	f84c 3b04 	str.w	r3, [ip], #4
 80067d6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80067da:	d2db      	bcs.n	8006794 <quorem+0x44>
 80067dc:	f855 300b 	ldr.w	r3, [r5, fp]
 80067e0:	b92b      	cbnz	r3, 80067ee <quorem+0x9e>
 80067e2:	9b01      	ldr	r3, [sp, #4]
 80067e4:	3b04      	subs	r3, #4
 80067e6:	429d      	cmp	r5, r3
 80067e8:	461a      	mov	r2, r3
 80067ea:	d32e      	bcc.n	800684a <quorem+0xfa>
 80067ec:	613c      	str	r4, [r7, #16]
 80067ee:	4638      	mov	r0, r7
 80067f0:	f001 f8b0 	bl	8007954 <__mcmp>
 80067f4:	2800      	cmp	r0, #0
 80067f6:	db24      	blt.n	8006842 <quorem+0xf2>
 80067f8:	3601      	adds	r6, #1
 80067fa:	4628      	mov	r0, r5
 80067fc:	f04f 0c00 	mov.w	ip, #0
 8006800:	f858 2b04 	ldr.w	r2, [r8], #4
 8006804:	f8d0 e000 	ldr.w	lr, [r0]
 8006808:	b293      	uxth	r3, r2
 800680a:	ebac 0303 	sub.w	r3, ip, r3
 800680e:	0c12      	lsrs	r2, r2, #16
 8006810:	fa13 f38e 	uxtah	r3, r3, lr
 8006814:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006818:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800681c:	b29b      	uxth	r3, r3
 800681e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006822:	45c1      	cmp	r9, r8
 8006824:	f840 3b04 	str.w	r3, [r0], #4
 8006828:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800682c:	d2e8      	bcs.n	8006800 <quorem+0xb0>
 800682e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006832:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006836:	b922      	cbnz	r2, 8006842 <quorem+0xf2>
 8006838:	3b04      	subs	r3, #4
 800683a:	429d      	cmp	r5, r3
 800683c:	461a      	mov	r2, r3
 800683e:	d30a      	bcc.n	8006856 <quorem+0x106>
 8006840:	613c      	str	r4, [r7, #16]
 8006842:	4630      	mov	r0, r6
 8006844:	b003      	add	sp, #12
 8006846:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800684a:	6812      	ldr	r2, [r2, #0]
 800684c:	3b04      	subs	r3, #4
 800684e:	2a00      	cmp	r2, #0
 8006850:	d1cc      	bne.n	80067ec <quorem+0x9c>
 8006852:	3c01      	subs	r4, #1
 8006854:	e7c7      	b.n	80067e6 <quorem+0x96>
 8006856:	6812      	ldr	r2, [r2, #0]
 8006858:	3b04      	subs	r3, #4
 800685a:	2a00      	cmp	r2, #0
 800685c:	d1f0      	bne.n	8006840 <quorem+0xf0>
 800685e:	3c01      	subs	r4, #1
 8006860:	e7eb      	b.n	800683a <quorem+0xea>
 8006862:	2000      	movs	r0, #0
 8006864:	e7ee      	b.n	8006844 <quorem+0xf4>
	...

08006868 <_dtoa_r>:
 8006868:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800686c:	ed2d 8b02 	vpush	{d8}
 8006870:	ec57 6b10 	vmov	r6, r7, d0
 8006874:	b095      	sub	sp, #84	; 0x54
 8006876:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006878:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800687c:	9105      	str	r1, [sp, #20]
 800687e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8006882:	4604      	mov	r4, r0
 8006884:	9209      	str	r2, [sp, #36]	; 0x24
 8006886:	930f      	str	r3, [sp, #60]	; 0x3c
 8006888:	b975      	cbnz	r5, 80068a8 <_dtoa_r+0x40>
 800688a:	2010      	movs	r0, #16
 800688c:	f000 fddc 	bl	8007448 <malloc>
 8006890:	4602      	mov	r2, r0
 8006892:	6260      	str	r0, [r4, #36]	; 0x24
 8006894:	b920      	cbnz	r0, 80068a0 <_dtoa_r+0x38>
 8006896:	4bb2      	ldr	r3, [pc, #712]	; (8006b60 <_dtoa_r+0x2f8>)
 8006898:	21ea      	movs	r1, #234	; 0xea
 800689a:	48b2      	ldr	r0, [pc, #712]	; (8006b64 <_dtoa_r+0x2fc>)
 800689c:	f001 fb80 	bl	8007fa0 <__assert_func>
 80068a0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80068a4:	6005      	str	r5, [r0, #0]
 80068a6:	60c5      	str	r5, [r0, #12]
 80068a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80068aa:	6819      	ldr	r1, [r3, #0]
 80068ac:	b151      	cbz	r1, 80068c4 <_dtoa_r+0x5c>
 80068ae:	685a      	ldr	r2, [r3, #4]
 80068b0:	604a      	str	r2, [r1, #4]
 80068b2:	2301      	movs	r3, #1
 80068b4:	4093      	lsls	r3, r2
 80068b6:	608b      	str	r3, [r1, #8]
 80068b8:	4620      	mov	r0, r4
 80068ba:	f000 fe0d 	bl	80074d8 <_Bfree>
 80068be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80068c0:	2200      	movs	r2, #0
 80068c2:	601a      	str	r2, [r3, #0]
 80068c4:	1e3b      	subs	r3, r7, #0
 80068c6:	bfb9      	ittee	lt
 80068c8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80068cc:	9303      	strlt	r3, [sp, #12]
 80068ce:	2300      	movge	r3, #0
 80068d0:	f8c8 3000 	strge.w	r3, [r8]
 80068d4:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80068d8:	4ba3      	ldr	r3, [pc, #652]	; (8006b68 <_dtoa_r+0x300>)
 80068da:	bfbc      	itt	lt
 80068dc:	2201      	movlt	r2, #1
 80068de:	f8c8 2000 	strlt.w	r2, [r8]
 80068e2:	ea33 0309 	bics.w	r3, r3, r9
 80068e6:	d11b      	bne.n	8006920 <_dtoa_r+0xb8>
 80068e8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80068ea:	f242 730f 	movw	r3, #9999	; 0x270f
 80068ee:	6013      	str	r3, [r2, #0]
 80068f0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80068f4:	4333      	orrs	r3, r6
 80068f6:	f000 857a 	beq.w	80073ee <_dtoa_r+0xb86>
 80068fa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80068fc:	b963      	cbnz	r3, 8006918 <_dtoa_r+0xb0>
 80068fe:	4b9b      	ldr	r3, [pc, #620]	; (8006b6c <_dtoa_r+0x304>)
 8006900:	e024      	b.n	800694c <_dtoa_r+0xe4>
 8006902:	4b9b      	ldr	r3, [pc, #620]	; (8006b70 <_dtoa_r+0x308>)
 8006904:	9300      	str	r3, [sp, #0]
 8006906:	3308      	adds	r3, #8
 8006908:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800690a:	6013      	str	r3, [r2, #0]
 800690c:	9800      	ldr	r0, [sp, #0]
 800690e:	b015      	add	sp, #84	; 0x54
 8006910:	ecbd 8b02 	vpop	{d8}
 8006914:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006918:	4b94      	ldr	r3, [pc, #592]	; (8006b6c <_dtoa_r+0x304>)
 800691a:	9300      	str	r3, [sp, #0]
 800691c:	3303      	adds	r3, #3
 800691e:	e7f3      	b.n	8006908 <_dtoa_r+0xa0>
 8006920:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006924:	2200      	movs	r2, #0
 8006926:	ec51 0b17 	vmov	r0, r1, d7
 800692a:	2300      	movs	r3, #0
 800692c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8006930:	f7fa f8d2 	bl	8000ad8 <__aeabi_dcmpeq>
 8006934:	4680      	mov	r8, r0
 8006936:	b158      	cbz	r0, 8006950 <_dtoa_r+0xe8>
 8006938:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800693a:	2301      	movs	r3, #1
 800693c:	6013      	str	r3, [r2, #0]
 800693e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006940:	2b00      	cmp	r3, #0
 8006942:	f000 8551 	beq.w	80073e8 <_dtoa_r+0xb80>
 8006946:	488b      	ldr	r0, [pc, #556]	; (8006b74 <_dtoa_r+0x30c>)
 8006948:	6018      	str	r0, [r3, #0]
 800694a:	1e43      	subs	r3, r0, #1
 800694c:	9300      	str	r3, [sp, #0]
 800694e:	e7dd      	b.n	800690c <_dtoa_r+0xa4>
 8006950:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8006954:	aa12      	add	r2, sp, #72	; 0x48
 8006956:	a913      	add	r1, sp, #76	; 0x4c
 8006958:	4620      	mov	r0, r4
 800695a:	f001 f89f 	bl	8007a9c <__d2b>
 800695e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006962:	4683      	mov	fp, r0
 8006964:	2d00      	cmp	r5, #0
 8006966:	d07c      	beq.n	8006a62 <_dtoa_r+0x1fa>
 8006968:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800696a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800696e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006972:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8006976:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800697a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800697e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006982:	4b7d      	ldr	r3, [pc, #500]	; (8006b78 <_dtoa_r+0x310>)
 8006984:	2200      	movs	r2, #0
 8006986:	4630      	mov	r0, r6
 8006988:	4639      	mov	r1, r7
 800698a:	f7f9 fc85 	bl	8000298 <__aeabi_dsub>
 800698e:	a36e      	add	r3, pc, #440	; (adr r3, 8006b48 <_dtoa_r+0x2e0>)
 8006990:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006994:	f7f9 fe38 	bl	8000608 <__aeabi_dmul>
 8006998:	a36d      	add	r3, pc, #436	; (adr r3, 8006b50 <_dtoa_r+0x2e8>)
 800699a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800699e:	f7f9 fc7d 	bl	800029c <__adddf3>
 80069a2:	4606      	mov	r6, r0
 80069a4:	4628      	mov	r0, r5
 80069a6:	460f      	mov	r7, r1
 80069a8:	f7f9 fdc4 	bl	8000534 <__aeabi_i2d>
 80069ac:	a36a      	add	r3, pc, #424	; (adr r3, 8006b58 <_dtoa_r+0x2f0>)
 80069ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069b2:	f7f9 fe29 	bl	8000608 <__aeabi_dmul>
 80069b6:	4602      	mov	r2, r0
 80069b8:	460b      	mov	r3, r1
 80069ba:	4630      	mov	r0, r6
 80069bc:	4639      	mov	r1, r7
 80069be:	f7f9 fc6d 	bl	800029c <__adddf3>
 80069c2:	4606      	mov	r6, r0
 80069c4:	460f      	mov	r7, r1
 80069c6:	f7fa f8cf 	bl	8000b68 <__aeabi_d2iz>
 80069ca:	2200      	movs	r2, #0
 80069cc:	4682      	mov	sl, r0
 80069ce:	2300      	movs	r3, #0
 80069d0:	4630      	mov	r0, r6
 80069d2:	4639      	mov	r1, r7
 80069d4:	f7fa f88a 	bl	8000aec <__aeabi_dcmplt>
 80069d8:	b148      	cbz	r0, 80069ee <_dtoa_r+0x186>
 80069da:	4650      	mov	r0, sl
 80069dc:	f7f9 fdaa 	bl	8000534 <__aeabi_i2d>
 80069e0:	4632      	mov	r2, r6
 80069e2:	463b      	mov	r3, r7
 80069e4:	f7fa f878 	bl	8000ad8 <__aeabi_dcmpeq>
 80069e8:	b908      	cbnz	r0, 80069ee <_dtoa_r+0x186>
 80069ea:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80069ee:	f1ba 0f16 	cmp.w	sl, #22
 80069f2:	d854      	bhi.n	8006a9e <_dtoa_r+0x236>
 80069f4:	4b61      	ldr	r3, [pc, #388]	; (8006b7c <_dtoa_r+0x314>)
 80069f6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80069fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069fe:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006a02:	f7fa f873 	bl	8000aec <__aeabi_dcmplt>
 8006a06:	2800      	cmp	r0, #0
 8006a08:	d04b      	beq.n	8006aa2 <_dtoa_r+0x23a>
 8006a0a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8006a0e:	2300      	movs	r3, #0
 8006a10:	930e      	str	r3, [sp, #56]	; 0x38
 8006a12:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006a14:	1b5d      	subs	r5, r3, r5
 8006a16:	1e6b      	subs	r3, r5, #1
 8006a18:	9304      	str	r3, [sp, #16]
 8006a1a:	bf43      	ittte	mi
 8006a1c:	2300      	movmi	r3, #0
 8006a1e:	f1c5 0801 	rsbmi	r8, r5, #1
 8006a22:	9304      	strmi	r3, [sp, #16]
 8006a24:	f04f 0800 	movpl.w	r8, #0
 8006a28:	f1ba 0f00 	cmp.w	sl, #0
 8006a2c:	db3b      	blt.n	8006aa6 <_dtoa_r+0x23e>
 8006a2e:	9b04      	ldr	r3, [sp, #16]
 8006a30:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8006a34:	4453      	add	r3, sl
 8006a36:	9304      	str	r3, [sp, #16]
 8006a38:	2300      	movs	r3, #0
 8006a3a:	9306      	str	r3, [sp, #24]
 8006a3c:	9b05      	ldr	r3, [sp, #20]
 8006a3e:	2b09      	cmp	r3, #9
 8006a40:	d869      	bhi.n	8006b16 <_dtoa_r+0x2ae>
 8006a42:	2b05      	cmp	r3, #5
 8006a44:	bfc4      	itt	gt
 8006a46:	3b04      	subgt	r3, #4
 8006a48:	9305      	strgt	r3, [sp, #20]
 8006a4a:	9b05      	ldr	r3, [sp, #20]
 8006a4c:	f1a3 0302 	sub.w	r3, r3, #2
 8006a50:	bfcc      	ite	gt
 8006a52:	2500      	movgt	r5, #0
 8006a54:	2501      	movle	r5, #1
 8006a56:	2b03      	cmp	r3, #3
 8006a58:	d869      	bhi.n	8006b2e <_dtoa_r+0x2c6>
 8006a5a:	e8df f003 	tbb	[pc, r3]
 8006a5e:	4e2c      	.short	0x4e2c
 8006a60:	5a4c      	.short	0x5a4c
 8006a62:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8006a66:	441d      	add	r5, r3
 8006a68:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8006a6c:	2b20      	cmp	r3, #32
 8006a6e:	bfc1      	itttt	gt
 8006a70:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006a74:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8006a78:	fa09 f303 	lslgt.w	r3, r9, r3
 8006a7c:	fa26 f000 	lsrgt.w	r0, r6, r0
 8006a80:	bfda      	itte	le
 8006a82:	f1c3 0320 	rsble	r3, r3, #32
 8006a86:	fa06 f003 	lslle.w	r0, r6, r3
 8006a8a:	4318      	orrgt	r0, r3
 8006a8c:	f7f9 fd42 	bl	8000514 <__aeabi_ui2d>
 8006a90:	2301      	movs	r3, #1
 8006a92:	4606      	mov	r6, r0
 8006a94:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8006a98:	3d01      	subs	r5, #1
 8006a9a:	9310      	str	r3, [sp, #64]	; 0x40
 8006a9c:	e771      	b.n	8006982 <_dtoa_r+0x11a>
 8006a9e:	2301      	movs	r3, #1
 8006aa0:	e7b6      	b.n	8006a10 <_dtoa_r+0x1a8>
 8006aa2:	900e      	str	r0, [sp, #56]	; 0x38
 8006aa4:	e7b5      	b.n	8006a12 <_dtoa_r+0x1aa>
 8006aa6:	f1ca 0300 	rsb	r3, sl, #0
 8006aaa:	9306      	str	r3, [sp, #24]
 8006aac:	2300      	movs	r3, #0
 8006aae:	eba8 080a 	sub.w	r8, r8, sl
 8006ab2:	930d      	str	r3, [sp, #52]	; 0x34
 8006ab4:	e7c2      	b.n	8006a3c <_dtoa_r+0x1d4>
 8006ab6:	2300      	movs	r3, #0
 8006ab8:	9308      	str	r3, [sp, #32]
 8006aba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	dc39      	bgt.n	8006b34 <_dtoa_r+0x2cc>
 8006ac0:	f04f 0901 	mov.w	r9, #1
 8006ac4:	f8cd 9004 	str.w	r9, [sp, #4]
 8006ac8:	464b      	mov	r3, r9
 8006aca:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8006ace:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8006ad0:	2200      	movs	r2, #0
 8006ad2:	6042      	str	r2, [r0, #4]
 8006ad4:	2204      	movs	r2, #4
 8006ad6:	f102 0614 	add.w	r6, r2, #20
 8006ada:	429e      	cmp	r6, r3
 8006adc:	6841      	ldr	r1, [r0, #4]
 8006ade:	d92f      	bls.n	8006b40 <_dtoa_r+0x2d8>
 8006ae0:	4620      	mov	r0, r4
 8006ae2:	f000 fcb9 	bl	8007458 <_Balloc>
 8006ae6:	9000      	str	r0, [sp, #0]
 8006ae8:	2800      	cmp	r0, #0
 8006aea:	d14b      	bne.n	8006b84 <_dtoa_r+0x31c>
 8006aec:	4b24      	ldr	r3, [pc, #144]	; (8006b80 <_dtoa_r+0x318>)
 8006aee:	4602      	mov	r2, r0
 8006af0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006af4:	e6d1      	b.n	800689a <_dtoa_r+0x32>
 8006af6:	2301      	movs	r3, #1
 8006af8:	e7de      	b.n	8006ab8 <_dtoa_r+0x250>
 8006afa:	2300      	movs	r3, #0
 8006afc:	9308      	str	r3, [sp, #32]
 8006afe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b00:	eb0a 0903 	add.w	r9, sl, r3
 8006b04:	f109 0301 	add.w	r3, r9, #1
 8006b08:	2b01      	cmp	r3, #1
 8006b0a:	9301      	str	r3, [sp, #4]
 8006b0c:	bfb8      	it	lt
 8006b0e:	2301      	movlt	r3, #1
 8006b10:	e7dd      	b.n	8006ace <_dtoa_r+0x266>
 8006b12:	2301      	movs	r3, #1
 8006b14:	e7f2      	b.n	8006afc <_dtoa_r+0x294>
 8006b16:	2501      	movs	r5, #1
 8006b18:	2300      	movs	r3, #0
 8006b1a:	9305      	str	r3, [sp, #20]
 8006b1c:	9508      	str	r5, [sp, #32]
 8006b1e:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8006b22:	2200      	movs	r2, #0
 8006b24:	f8cd 9004 	str.w	r9, [sp, #4]
 8006b28:	2312      	movs	r3, #18
 8006b2a:	9209      	str	r2, [sp, #36]	; 0x24
 8006b2c:	e7cf      	b.n	8006ace <_dtoa_r+0x266>
 8006b2e:	2301      	movs	r3, #1
 8006b30:	9308      	str	r3, [sp, #32]
 8006b32:	e7f4      	b.n	8006b1e <_dtoa_r+0x2b6>
 8006b34:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8006b38:	f8cd 9004 	str.w	r9, [sp, #4]
 8006b3c:	464b      	mov	r3, r9
 8006b3e:	e7c6      	b.n	8006ace <_dtoa_r+0x266>
 8006b40:	3101      	adds	r1, #1
 8006b42:	6041      	str	r1, [r0, #4]
 8006b44:	0052      	lsls	r2, r2, #1
 8006b46:	e7c6      	b.n	8006ad6 <_dtoa_r+0x26e>
 8006b48:	636f4361 	.word	0x636f4361
 8006b4c:	3fd287a7 	.word	0x3fd287a7
 8006b50:	8b60c8b3 	.word	0x8b60c8b3
 8006b54:	3fc68a28 	.word	0x3fc68a28
 8006b58:	509f79fb 	.word	0x509f79fb
 8006b5c:	3fd34413 	.word	0x3fd34413
 8006b60:	0800a409 	.word	0x0800a409
 8006b64:	0800a420 	.word	0x0800a420
 8006b68:	7ff00000 	.word	0x7ff00000
 8006b6c:	0800a405 	.word	0x0800a405
 8006b70:	0800a3fc 	.word	0x0800a3fc
 8006b74:	0800a3d9 	.word	0x0800a3d9
 8006b78:	3ff80000 	.word	0x3ff80000
 8006b7c:	0800a518 	.word	0x0800a518
 8006b80:	0800a47f 	.word	0x0800a47f
 8006b84:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006b86:	9a00      	ldr	r2, [sp, #0]
 8006b88:	601a      	str	r2, [r3, #0]
 8006b8a:	9b01      	ldr	r3, [sp, #4]
 8006b8c:	2b0e      	cmp	r3, #14
 8006b8e:	f200 80ad 	bhi.w	8006cec <_dtoa_r+0x484>
 8006b92:	2d00      	cmp	r5, #0
 8006b94:	f000 80aa 	beq.w	8006cec <_dtoa_r+0x484>
 8006b98:	f1ba 0f00 	cmp.w	sl, #0
 8006b9c:	dd36      	ble.n	8006c0c <_dtoa_r+0x3a4>
 8006b9e:	4ac3      	ldr	r2, [pc, #780]	; (8006eac <_dtoa_r+0x644>)
 8006ba0:	f00a 030f 	and.w	r3, sl, #15
 8006ba4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006ba8:	ed93 7b00 	vldr	d7, [r3]
 8006bac:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8006bb0:	ea4f 172a 	mov.w	r7, sl, asr #4
 8006bb4:	eeb0 8a47 	vmov.f32	s16, s14
 8006bb8:	eef0 8a67 	vmov.f32	s17, s15
 8006bbc:	d016      	beq.n	8006bec <_dtoa_r+0x384>
 8006bbe:	4bbc      	ldr	r3, [pc, #752]	; (8006eb0 <_dtoa_r+0x648>)
 8006bc0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006bc4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006bc8:	f7f9 fe48 	bl	800085c <__aeabi_ddiv>
 8006bcc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006bd0:	f007 070f 	and.w	r7, r7, #15
 8006bd4:	2503      	movs	r5, #3
 8006bd6:	4eb6      	ldr	r6, [pc, #728]	; (8006eb0 <_dtoa_r+0x648>)
 8006bd8:	b957      	cbnz	r7, 8006bf0 <_dtoa_r+0x388>
 8006bda:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006bde:	ec53 2b18 	vmov	r2, r3, d8
 8006be2:	f7f9 fe3b 	bl	800085c <__aeabi_ddiv>
 8006be6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006bea:	e029      	b.n	8006c40 <_dtoa_r+0x3d8>
 8006bec:	2502      	movs	r5, #2
 8006bee:	e7f2      	b.n	8006bd6 <_dtoa_r+0x36e>
 8006bf0:	07f9      	lsls	r1, r7, #31
 8006bf2:	d508      	bpl.n	8006c06 <_dtoa_r+0x39e>
 8006bf4:	ec51 0b18 	vmov	r0, r1, d8
 8006bf8:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006bfc:	f7f9 fd04 	bl	8000608 <__aeabi_dmul>
 8006c00:	ec41 0b18 	vmov	d8, r0, r1
 8006c04:	3501      	adds	r5, #1
 8006c06:	107f      	asrs	r7, r7, #1
 8006c08:	3608      	adds	r6, #8
 8006c0a:	e7e5      	b.n	8006bd8 <_dtoa_r+0x370>
 8006c0c:	f000 80a6 	beq.w	8006d5c <_dtoa_r+0x4f4>
 8006c10:	f1ca 0600 	rsb	r6, sl, #0
 8006c14:	4ba5      	ldr	r3, [pc, #660]	; (8006eac <_dtoa_r+0x644>)
 8006c16:	4fa6      	ldr	r7, [pc, #664]	; (8006eb0 <_dtoa_r+0x648>)
 8006c18:	f006 020f 	and.w	r2, r6, #15
 8006c1c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006c20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c24:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006c28:	f7f9 fcee 	bl	8000608 <__aeabi_dmul>
 8006c2c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006c30:	1136      	asrs	r6, r6, #4
 8006c32:	2300      	movs	r3, #0
 8006c34:	2502      	movs	r5, #2
 8006c36:	2e00      	cmp	r6, #0
 8006c38:	f040 8085 	bne.w	8006d46 <_dtoa_r+0x4de>
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d1d2      	bne.n	8006be6 <_dtoa_r+0x37e>
 8006c40:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	f000 808c 	beq.w	8006d60 <_dtoa_r+0x4f8>
 8006c48:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006c4c:	4b99      	ldr	r3, [pc, #612]	; (8006eb4 <_dtoa_r+0x64c>)
 8006c4e:	2200      	movs	r2, #0
 8006c50:	4630      	mov	r0, r6
 8006c52:	4639      	mov	r1, r7
 8006c54:	f7f9 ff4a 	bl	8000aec <__aeabi_dcmplt>
 8006c58:	2800      	cmp	r0, #0
 8006c5a:	f000 8081 	beq.w	8006d60 <_dtoa_r+0x4f8>
 8006c5e:	9b01      	ldr	r3, [sp, #4]
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d07d      	beq.n	8006d60 <_dtoa_r+0x4f8>
 8006c64:	f1b9 0f00 	cmp.w	r9, #0
 8006c68:	dd3c      	ble.n	8006ce4 <_dtoa_r+0x47c>
 8006c6a:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8006c6e:	9307      	str	r3, [sp, #28]
 8006c70:	2200      	movs	r2, #0
 8006c72:	4b91      	ldr	r3, [pc, #580]	; (8006eb8 <_dtoa_r+0x650>)
 8006c74:	4630      	mov	r0, r6
 8006c76:	4639      	mov	r1, r7
 8006c78:	f7f9 fcc6 	bl	8000608 <__aeabi_dmul>
 8006c7c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006c80:	3501      	adds	r5, #1
 8006c82:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8006c86:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006c8a:	4628      	mov	r0, r5
 8006c8c:	f7f9 fc52 	bl	8000534 <__aeabi_i2d>
 8006c90:	4632      	mov	r2, r6
 8006c92:	463b      	mov	r3, r7
 8006c94:	f7f9 fcb8 	bl	8000608 <__aeabi_dmul>
 8006c98:	4b88      	ldr	r3, [pc, #544]	; (8006ebc <_dtoa_r+0x654>)
 8006c9a:	2200      	movs	r2, #0
 8006c9c:	f7f9 fafe 	bl	800029c <__adddf3>
 8006ca0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8006ca4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006ca8:	9303      	str	r3, [sp, #12]
 8006caa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d15c      	bne.n	8006d6a <_dtoa_r+0x502>
 8006cb0:	4b83      	ldr	r3, [pc, #524]	; (8006ec0 <_dtoa_r+0x658>)
 8006cb2:	2200      	movs	r2, #0
 8006cb4:	4630      	mov	r0, r6
 8006cb6:	4639      	mov	r1, r7
 8006cb8:	f7f9 faee 	bl	8000298 <__aeabi_dsub>
 8006cbc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006cc0:	4606      	mov	r6, r0
 8006cc2:	460f      	mov	r7, r1
 8006cc4:	f7f9 ff30 	bl	8000b28 <__aeabi_dcmpgt>
 8006cc8:	2800      	cmp	r0, #0
 8006cca:	f040 8296 	bne.w	80071fa <_dtoa_r+0x992>
 8006cce:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8006cd2:	4630      	mov	r0, r6
 8006cd4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006cd8:	4639      	mov	r1, r7
 8006cda:	f7f9 ff07 	bl	8000aec <__aeabi_dcmplt>
 8006cde:	2800      	cmp	r0, #0
 8006ce0:	f040 8288 	bne.w	80071f4 <_dtoa_r+0x98c>
 8006ce4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006ce8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006cec:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	f2c0 8158 	blt.w	8006fa4 <_dtoa_r+0x73c>
 8006cf4:	f1ba 0f0e 	cmp.w	sl, #14
 8006cf8:	f300 8154 	bgt.w	8006fa4 <_dtoa_r+0x73c>
 8006cfc:	4b6b      	ldr	r3, [pc, #428]	; (8006eac <_dtoa_r+0x644>)
 8006cfe:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006d02:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006d06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	f280 80e3 	bge.w	8006ed4 <_dtoa_r+0x66c>
 8006d0e:	9b01      	ldr	r3, [sp, #4]
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	f300 80df 	bgt.w	8006ed4 <_dtoa_r+0x66c>
 8006d16:	f040 826d 	bne.w	80071f4 <_dtoa_r+0x98c>
 8006d1a:	4b69      	ldr	r3, [pc, #420]	; (8006ec0 <_dtoa_r+0x658>)
 8006d1c:	2200      	movs	r2, #0
 8006d1e:	4640      	mov	r0, r8
 8006d20:	4649      	mov	r1, r9
 8006d22:	f7f9 fc71 	bl	8000608 <__aeabi_dmul>
 8006d26:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006d2a:	f7f9 fef3 	bl	8000b14 <__aeabi_dcmpge>
 8006d2e:	9e01      	ldr	r6, [sp, #4]
 8006d30:	4637      	mov	r7, r6
 8006d32:	2800      	cmp	r0, #0
 8006d34:	f040 8243 	bne.w	80071be <_dtoa_r+0x956>
 8006d38:	9d00      	ldr	r5, [sp, #0]
 8006d3a:	2331      	movs	r3, #49	; 0x31
 8006d3c:	f805 3b01 	strb.w	r3, [r5], #1
 8006d40:	f10a 0a01 	add.w	sl, sl, #1
 8006d44:	e23f      	b.n	80071c6 <_dtoa_r+0x95e>
 8006d46:	07f2      	lsls	r2, r6, #31
 8006d48:	d505      	bpl.n	8006d56 <_dtoa_r+0x4ee>
 8006d4a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006d4e:	f7f9 fc5b 	bl	8000608 <__aeabi_dmul>
 8006d52:	3501      	adds	r5, #1
 8006d54:	2301      	movs	r3, #1
 8006d56:	1076      	asrs	r6, r6, #1
 8006d58:	3708      	adds	r7, #8
 8006d5a:	e76c      	b.n	8006c36 <_dtoa_r+0x3ce>
 8006d5c:	2502      	movs	r5, #2
 8006d5e:	e76f      	b.n	8006c40 <_dtoa_r+0x3d8>
 8006d60:	9b01      	ldr	r3, [sp, #4]
 8006d62:	f8cd a01c 	str.w	sl, [sp, #28]
 8006d66:	930c      	str	r3, [sp, #48]	; 0x30
 8006d68:	e78d      	b.n	8006c86 <_dtoa_r+0x41e>
 8006d6a:	9900      	ldr	r1, [sp, #0]
 8006d6c:	980c      	ldr	r0, [sp, #48]	; 0x30
 8006d6e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006d70:	4b4e      	ldr	r3, [pc, #312]	; (8006eac <_dtoa_r+0x644>)
 8006d72:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006d76:	4401      	add	r1, r0
 8006d78:	9102      	str	r1, [sp, #8]
 8006d7a:	9908      	ldr	r1, [sp, #32]
 8006d7c:	eeb0 8a47 	vmov.f32	s16, s14
 8006d80:	eef0 8a67 	vmov.f32	s17, s15
 8006d84:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006d88:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006d8c:	2900      	cmp	r1, #0
 8006d8e:	d045      	beq.n	8006e1c <_dtoa_r+0x5b4>
 8006d90:	494c      	ldr	r1, [pc, #304]	; (8006ec4 <_dtoa_r+0x65c>)
 8006d92:	2000      	movs	r0, #0
 8006d94:	f7f9 fd62 	bl	800085c <__aeabi_ddiv>
 8006d98:	ec53 2b18 	vmov	r2, r3, d8
 8006d9c:	f7f9 fa7c 	bl	8000298 <__aeabi_dsub>
 8006da0:	9d00      	ldr	r5, [sp, #0]
 8006da2:	ec41 0b18 	vmov	d8, r0, r1
 8006da6:	4639      	mov	r1, r7
 8006da8:	4630      	mov	r0, r6
 8006daa:	f7f9 fedd 	bl	8000b68 <__aeabi_d2iz>
 8006dae:	900c      	str	r0, [sp, #48]	; 0x30
 8006db0:	f7f9 fbc0 	bl	8000534 <__aeabi_i2d>
 8006db4:	4602      	mov	r2, r0
 8006db6:	460b      	mov	r3, r1
 8006db8:	4630      	mov	r0, r6
 8006dba:	4639      	mov	r1, r7
 8006dbc:	f7f9 fa6c 	bl	8000298 <__aeabi_dsub>
 8006dc0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006dc2:	3330      	adds	r3, #48	; 0x30
 8006dc4:	f805 3b01 	strb.w	r3, [r5], #1
 8006dc8:	ec53 2b18 	vmov	r2, r3, d8
 8006dcc:	4606      	mov	r6, r0
 8006dce:	460f      	mov	r7, r1
 8006dd0:	f7f9 fe8c 	bl	8000aec <__aeabi_dcmplt>
 8006dd4:	2800      	cmp	r0, #0
 8006dd6:	d165      	bne.n	8006ea4 <_dtoa_r+0x63c>
 8006dd8:	4632      	mov	r2, r6
 8006dda:	463b      	mov	r3, r7
 8006ddc:	4935      	ldr	r1, [pc, #212]	; (8006eb4 <_dtoa_r+0x64c>)
 8006dde:	2000      	movs	r0, #0
 8006de0:	f7f9 fa5a 	bl	8000298 <__aeabi_dsub>
 8006de4:	ec53 2b18 	vmov	r2, r3, d8
 8006de8:	f7f9 fe80 	bl	8000aec <__aeabi_dcmplt>
 8006dec:	2800      	cmp	r0, #0
 8006dee:	f040 80b9 	bne.w	8006f64 <_dtoa_r+0x6fc>
 8006df2:	9b02      	ldr	r3, [sp, #8]
 8006df4:	429d      	cmp	r5, r3
 8006df6:	f43f af75 	beq.w	8006ce4 <_dtoa_r+0x47c>
 8006dfa:	4b2f      	ldr	r3, [pc, #188]	; (8006eb8 <_dtoa_r+0x650>)
 8006dfc:	ec51 0b18 	vmov	r0, r1, d8
 8006e00:	2200      	movs	r2, #0
 8006e02:	f7f9 fc01 	bl	8000608 <__aeabi_dmul>
 8006e06:	4b2c      	ldr	r3, [pc, #176]	; (8006eb8 <_dtoa_r+0x650>)
 8006e08:	ec41 0b18 	vmov	d8, r0, r1
 8006e0c:	2200      	movs	r2, #0
 8006e0e:	4630      	mov	r0, r6
 8006e10:	4639      	mov	r1, r7
 8006e12:	f7f9 fbf9 	bl	8000608 <__aeabi_dmul>
 8006e16:	4606      	mov	r6, r0
 8006e18:	460f      	mov	r7, r1
 8006e1a:	e7c4      	b.n	8006da6 <_dtoa_r+0x53e>
 8006e1c:	ec51 0b17 	vmov	r0, r1, d7
 8006e20:	f7f9 fbf2 	bl	8000608 <__aeabi_dmul>
 8006e24:	9b02      	ldr	r3, [sp, #8]
 8006e26:	9d00      	ldr	r5, [sp, #0]
 8006e28:	930c      	str	r3, [sp, #48]	; 0x30
 8006e2a:	ec41 0b18 	vmov	d8, r0, r1
 8006e2e:	4639      	mov	r1, r7
 8006e30:	4630      	mov	r0, r6
 8006e32:	f7f9 fe99 	bl	8000b68 <__aeabi_d2iz>
 8006e36:	9011      	str	r0, [sp, #68]	; 0x44
 8006e38:	f7f9 fb7c 	bl	8000534 <__aeabi_i2d>
 8006e3c:	4602      	mov	r2, r0
 8006e3e:	460b      	mov	r3, r1
 8006e40:	4630      	mov	r0, r6
 8006e42:	4639      	mov	r1, r7
 8006e44:	f7f9 fa28 	bl	8000298 <__aeabi_dsub>
 8006e48:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006e4a:	3330      	adds	r3, #48	; 0x30
 8006e4c:	f805 3b01 	strb.w	r3, [r5], #1
 8006e50:	9b02      	ldr	r3, [sp, #8]
 8006e52:	429d      	cmp	r5, r3
 8006e54:	4606      	mov	r6, r0
 8006e56:	460f      	mov	r7, r1
 8006e58:	f04f 0200 	mov.w	r2, #0
 8006e5c:	d134      	bne.n	8006ec8 <_dtoa_r+0x660>
 8006e5e:	4b19      	ldr	r3, [pc, #100]	; (8006ec4 <_dtoa_r+0x65c>)
 8006e60:	ec51 0b18 	vmov	r0, r1, d8
 8006e64:	f7f9 fa1a 	bl	800029c <__adddf3>
 8006e68:	4602      	mov	r2, r0
 8006e6a:	460b      	mov	r3, r1
 8006e6c:	4630      	mov	r0, r6
 8006e6e:	4639      	mov	r1, r7
 8006e70:	f7f9 fe5a 	bl	8000b28 <__aeabi_dcmpgt>
 8006e74:	2800      	cmp	r0, #0
 8006e76:	d175      	bne.n	8006f64 <_dtoa_r+0x6fc>
 8006e78:	ec53 2b18 	vmov	r2, r3, d8
 8006e7c:	4911      	ldr	r1, [pc, #68]	; (8006ec4 <_dtoa_r+0x65c>)
 8006e7e:	2000      	movs	r0, #0
 8006e80:	f7f9 fa0a 	bl	8000298 <__aeabi_dsub>
 8006e84:	4602      	mov	r2, r0
 8006e86:	460b      	mov	r3, r1
 8006e88:	4630      	mov	r0, r6
 8006e8a:	4639      	mov	r1, r7
 8006e8c:	f7f9 fe2e 	bl	8000aec <__aeabi_dcmplt>
 8006e90:	2800      	cmp	r0, #0
 8006e92:	f43f af27 	beq.w	8006ce4 <_dtoa_r+0x47c>
 8006e96:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006e98:	1e6b      	subs	r3, r5, #1
 8006e9a:	930c      	str	r3, [sp, #48]	; 0x30
 8006e9c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006ea0:	2b30      	cmp	r3, #48	; 0x30
 8006ea2:	d0f8      	beq.n	8006e96 <_dtoa_r+0x62e>
 8006ea4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8006ea8:	e04a      	b.n	8006f40 <_dtoa_r+0x6d8>
 8006eaa:	bf00      	nop
 8006eac:	0800a518 	.word	0x0800a518
 8006eb0:	0800a4f0 	.word	0x0800a4f0
 8006eb4:	3ff00000 	.word	0x3ff00000
 8006eb8:	40240000 	.word	0x40240000
 8006ebc:	401c0000 	.word	0x401c0000
 8006ec0:	40140000 	.word	0x40140000
 8006ec4:	3fe00000 	.word	0x3fe00000
 8006ec8:	4baf      	ldr	r3, [pc, #700]	; (8007188 <_dtoa_r+0x920>)
 8006eca:	f7f9 fb9d 	bl	8000608 <__aeabi_dmul>
 8006ece:	4606      	mov	r6, r0
 8006ed0:	460f      	mov	r7, r1
 8006ed2:	e7ac      	b.n	8006e2e <_dtoa_r+0x5c6>
 8006ed4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006ed8:	9d00      	ldr	r5, [sp, #0]
 8006eda:	4642      	mov	r2, r8
 8006edc:	464b      	mov	r3, r9
 8006ede:	4630      	mov	r0, r6
 8006ee0:	4639      	mov	r1, r7
 8006ee2:	f7f9 fcbb 	bl	800085c <__aeabi_ddiv>
 8006ee6:	f7f9 fe3f 	bl	8000b68 <__aeabi_d2iz>
 8006eea:	9002      	str	r0, [sp, #8]
 8006eec:	f7f9 fb22 	bl	8000534 <__aeabi_i2d>
 8006ef0:	4642      	mov	r2, r8
 8006ef2:	464b      	mov	r3, r9
 8006ef4:	f7f9 fb88 	bl	8000608 <__aeabi_dmul>
 8006ef8:	4602      	mov	r2, r0
 8006efa:	460b      	mov	r3, r1
 8006efc:	4630      	mov	r0, r6
 8006efe:	4639      	mov	r1, r7
 8006f00:	f7f9 f9ca 	bl	8000298 <__aeabi_dsub>
 8006f04:	9e02      	ldr	r6, [sp, #8]
 8006f06:	9f01      	ldr	r7, [sp, #4]
 8006f08:	3630      	adds	r6, #48	; 0x30
 8006f0a:	f805 6b01 	strb.w	r6, [r5], #1
 8006f0e:	9e00      	ldr	r6, [sp, #0]
 8006f10:	1bae      	subs	r6, r5, r6
 8006f12:	42b7      	cmp	r7, r6
 8006f14:	4602      	mov	r2, r0
 8006f16:	460b      	mov	r3, r1
 8006f18:	d137      	bne.n	8006f8a <_dtoa_r+0x722>
 8006f1a:	f7f9 f9bf 	bl	800029c <__adddf3>
 8006f1e:	4642      	mov	r2, r8
 8006f20:	464b      	mov	r3, r9
 8006f22:	4606      	mov	r6, r0
 8006f24:	460f      	mov	r7, r1
 8006f26:	f7f9 fdff 	bl	8000b28 <__aeabi_dcmpgt>
 8006f2a:	b9c8      	cbnz	r0, 8006f60 <_dtoa_r+0x6f8>
 8006f2c:	4642      	mov	r2, r8
 8006f2e:	464b      	mov	r3, r9
 8006f30:	4630      	mov	r0, r6
 8006f32:	4639      	mov	r1, r7
 8006f34:	f7f9 fdd0 	bl	8000ad8 <__aeabi_dcmpeq>
 8006f38:	b110      	cbz	r0, 8006f40 <_dtoa_r+0x6d8>
 8006f3a:	9b02      	ldr	r3, [sp, #8]
 8006f3c:	07d9      	lsls	r1, r3, #31
 8006f3e:	d40f      	bmi.n	8006f60 <_dtoa_r+0x6f8>
 8006f40:	4620      	mov	r0, r4
 8006f42:	4659      	mov	r1, fp
 8006f44:	f000 fac8 	bl	80074d8 <_Bfree>
 8006f48:	2300      	movs	r3, #0
 8006f4a:	702b      	strb	r3, [r5, #0]
 8006f4c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006f4e:	f10a 0001 	add.w	r0, sl, #1
 8006f52:	6018      	str	r0, [r3, #0]
 8006f54:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	f43f acd8 	beq.w	800690c <_dtoa_r+0xa4>
 8006f5c:	601d      	str	r5, [r3, #0]
 8006f5e:	e4d5      	b.n	800690c <_dtoa_r+0xa4>
 8006f60:	f8cd a01c 	str.w	sl, [sp, #28]
 8006f64:	462b      	mov	r3, r5
 8006f66:	461d      	mov	r5, r3
 8006f68:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006f6c:	2a39      	cmp	r2, #57	; 0x39
 8006f6e:	d108      	bne.n	8006f82 <_dtoa_r+0x71a>
 8006f70:	9a00      	ldr	r2, [sp, #0]
 8006f72:	429a      	cmp	r2, r3
 8006f74:	d1f7      	bne.n	8006f66 <_dtoa_r+0x6fe>
 8006f76:	9a07      	ldr	r2, [sp, #28]
 8006f78:	9900      	ldr	r1, [sp, #0]
 8006f7a:	3201      	adds	r2, #1
 8006f7c:	9207      	str	r2, [sp, #28]
 8006f7e:	2230      	movs	r2, #48	; 0x30
 8006f80:	700a      	strb	r2, [r1, #0]
 8006f82:	781a      	ldrb	r2, [r3, #0]
 8006f84:	3201      	adds	r2, #1
 8006f86:	701a      	strb	r2, [r3, #0]
 8006f88:	e78c      	b.n	8006ea4 <_dtoa_r+0x63c>
 8006f8a:	4b7f      	ldr	r3, [pc, #508]	; (8007188 <_dtoa_r+0x920>)
 8006f8c:	2200      	movs	r2, #0
 8006f8e:	f7f9 fb3b 	bl	8000608 <__aeabi_dmul>
 8006f92:	2200      	movs	r2, #0
 8006f94:	2300      	movs	r3, #0
 8006f96:	4606      	mov	r6, r0
 8006f98:	460f      	mov	r7, r1
 8006f9a:	f7f9 fd9d 	bl	8000ad8 <__aeabi_dcmpeq>
 8006f9e:	2800      	cmp	r0, #0
 8006fa0:	d09b      	beq.n	8006eda <_dtoa_r+0x672>
 8006fa2:	e7cd      	b.n	8006f40 <_dtoa_r+0x6d8>
 8006fa4:	9a08      	ldr	r2, [sp, #32]
 8006fa6:	2a00      	cmp	r2, #0
 8006fa8:	f000 80c4 	beq.w	8007134 <_dtoa_r+0x8cc>
 8006fac:	9a05      	ldr	r2, [sp, #20]
 8006fae:	2a01      	cmp	r2, #1
 8006fb0:	f300 80a8 	bgt.w	8007104 <_dtoa_r+0x89c>
 8006fb4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006fb6:	2a00      	cmp	r2, #0
 8006fb8:	f000 80a0 	beq.w	80070fc <_dtoa_r+0x894>
 8006fbc:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006fc0:	9e06      	ldr	r6, [sp, #24]
 8006fc2:	4645      	mov	r5, r8
 8006fc4:	9a04      	ldr	r2, [sp, #16]
 8006fc6:	2101      	movs	r1, #1
 8006fc8:	441a      	add	r2, r3
 8006fca:	4620      	mov	r0, r4
 8006fcc:	4498      	add	r8, r3
 8006fce:	9204      	str	r2, [sp, #16]
 8006fd0:	f000 fb3e 	bl	8007650 <__i2b>
 8006fd4:	4607      	mov	r7, r0
 8006fd6:	2d00      	cmp	r5, #0
 8006fd8:	dd0b      	ble.n	8006ff2 <_dtoa_r+0x78a>
 8006fda:	9b04      	ldr	r3, [sp, #16]
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	dd08      	ble.n	8006ff2 <_dtoa_r+0x78a>
 8006fe0:	42ab      	cmp	r3, r5
 8006fe2:	9a04      	ldr	r2, [sp, #16]
 8006fe4:	bfa8      	it	ge
 8006fe6:	462b      	movge	r3, r5
 8006fe8:	eba8 0803 	sub.w	r8, r8, r3
 8006fec:	1aed      	subs	r5, r5, r3
 8006fee:	1ad3      	subs	r3, r2, r3
 8006ff0:	9304      	str	r3, [sp, #16]
 8006ff2:	9b06      	ldr	r3, [sp, #24]
 8006ff4:	b1fb      	cbz	r3, 8007036 <_dtoa_r+0x7ce>
 8006ff6:	9b08      	ldr	r3, [sp, #32]
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	f000 809f 	beq.w	800713c <_dtoa_r+0x8d4>
 8006ffe:	2e00      	cmp	r6, #0
 8007000:	dd11      	ble.n	8007026 <_dtoa_r+0x7be>
 8007002:	4639      	mov	r1, r7
 8007004:	4632      	mov	r2, r6
 8007006:	4620      	mov	r0, r4
 8007008:	f000 fbde 	bl	80077c8 <__pow5mult>
 800700c:	465a      	mov	r2, fp
 800700e:	4601      	mov	r1, r0
 8007010:	4607      	mov	r7, r0
 8007012:	4620      	mov	r0, r4
 8007014:	f000 fb32 	bl	800767c <__multiply>
 8007018:	4659      	mov	r1, fp
 800701a:	9007      	str	r0, [sp, #28]
 800701c:	4620      	mov	r0, r4
 800701e:	f000 fa5b 	bl	80074d8 <_Bfree>
 8007022:	9b07      	ldr	r3, [sp, #28]
 8007024:	469b      	mov	fp, r3
 8007026:	9b06      	ldr	r3, [sp, #24]
 8007028:	1b9a      	subs	r2, r3, r6
 800702a:	d004      	beq.n	8007036 <_dtoa_r+0x7ce>
 800702c:	4659      	mov	r1, fp
 800702e:	4620      	mov	r0, r4
 8007030:	f000 fbca 	bl	80077c8 <__pow5mult>
 8007034:	4683      	mov	fp, r0
 8007036:	2101      	movs	r1, #1
 8007038:	4620      	mov	r0, r4
 800703a:	f000 fb09 	bl	8007650 <__i2b>
 800703e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007040:	2b00      	cmp	r3, #0
 8007042:	4606      	mov	r6, r0
 8007044:	dd7c      	ble.n	8007140 <_dtoa_r+0x8d8>
 8007046:	461a      	mov	r2, r3
 8007048:	4601      	mov	r1, r0
 800704a:	4620      	mov	r0, r4
 800704c:	f000 fbbc 	bl	80077c8 <__pow5mult>
 8007050:	9b05      	ldr	r3, [sp, #20]
 8007052:	2b01      	cmp	r3, #1
 8007054:	4606      	mov	r6, r0
 8007056:	dd76      	ble.n	8007146 <_dtoa_r+0x8de>
 8007058:	2300      	movs	r3, #0
 800705a:	9306      	str	r3, [sp, #24]
 800705c:	6933      	ldr	r3, [r6, #16]
 800705e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007062:	6918      	ldr	r0, [r3, #16]
 8007064:	f000 faa4 	bl	80075b0 <__hi0bits>
 8007068:	f1c0 0020 	rsb	r0, r0, #32
 800706c:	9b04      	ldr	r3, [sp, #16]
 800706e:	4418      	add	r0, r3
 8007070:	f010 001f 	ands.w	r0, r0, #31
 8007074:	f000 8086 	beq.w	8007184 <_dtoa_r+0x91c>
 8007078:	f1c0 0320 	rsb	r3, r0, #32
 800707c:	2b04      	cmp	r3, #4
 800707e:	dd7f      	ble.n	8007180 <_dtoa_r+0x918>
 8007080:	f1c0 001c 	rsb	r0, r0, #28
 8007084:	9b04      	ldr	r3, [sp, #16]
 8007086:	4403      	add	r3, r0
 8007088:	4480      	add	r8, r0
 800708a:	4405      	add	r5, r0
 800708c:	9304      	str	r3, [sp, #16]
 800708e:	f1b8 0f00 	cmp.w	r8, #0
 8007092:	dd05      	ble.n	80070a0 <_dtoa_r+0x838>
 8007094:	4659      	mov	r1, fp
 8007096:	4642      	mov	r2, r8
 8007098:	4620      	mov	r0, r4
 800709a:	f000 fbef 	bl	800787c <__lshift>
 800709e:	4683      	mov	fp, r0
 80070a0:	9b04      	ldr	r3, [sp, #16]
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	dd05      	ble.n	80070b2 <_dtoa_r+0x84a>
 80070a6:	4631      	mov	r1, r6
 80070a8:	461a      	mov	r2, r3
 80070aa:	4620      	mov	r0, r4
 80070ac:	f000 fbe6 	bl	800787c <__lshift>
 80070b0:	4606      	mov	r6, r0
 80070b2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d069      	beq.n	800718c <_dtoa_r+0x924>
 80070b8:	4631      	mov	r1, r6
 80070ba:	4658      	mov	r0, fp
 80070bc:	f000 fc4a 	bl	8007954 <__mcmp>
 80070c0:	2800      	cmp	r0, #0
 80070c2:	da63      	bge.n	800718c <_dtoa_r+0x924>
 80070c4:	2300      	movs	r3, #0
 80070c6:	4659      	mov	r1, fp
 80070c8:	220a      	movs	r2, #10
 80070ca:	4620      	mov	r0, r4
 80070cc:	f000 fa26 	bl	800751c <__multadd>
 80070d0:	9b08      	ldr	r3, [sp, #32]
 80070d2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80070d6:	4683      	mov	fp, r0
 80070d8:	2b00      	cmp	r3, #0
 80070da:	f000 818f 	beq.w	80073fc <_dtoa_r+0xb94>
 80070de:	4639      	mov	r1, r7
 80070e0:	2300      	movs	r3, #0
 80070e2:	220a      	movs	r2, #10
 80070e4:	4620      	mov	r0, r4
 80070e6:	f000 fa19 	bl	800751c <__multadd>
 80070ea:	f1b9 0f00 	cmp.w	r9, #0
 80070ee:	4607      	mov	r7, r0
 80070f0:	f300 808e 	bgt.w	8007210 <_dtoa_r+0x9a8>
 80070f4:	9b05      	ldr	r3, [sp, #20]
 80070f6:	2b02      	cmp	r3, #2
 80070f8:	dc50      	bgt.n	800719c <_dtoa_r+0x934>
 80070fa:	e089      	b.n	8007210 <_dtoa_r+0x9a8>
 80070fc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80070fe:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007102:	e75d      	b.n	8006fc0 <_dtoa_r+0x758>
 8007104:	9b01      	ldr	r3, [sp, #4]
 8007106:	1e5e      	subs	r6, r3, #1
 8007108:	9b06      	ldr	r3, [sp, #24]
 800710a:	42b3      	cmp	r3, r6
 800710c:	bfbf      	itttt	lt
 800710e:	9b06      	ldrlt	r3, [sp, #24]
 8007110:	9606      	strlt	r6, [sp, #24]
 8007112:	1af2      	sublt	r2, r6, r3
 8007114:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8007116:	bfb6      	itet	lt
 8007118:	189b      	addlt	r3, r3, r2
 800711a:	1b9e      	subge	r6, r3, r6
 800711c:	930d      	strlt	r3, [sp, #52]	; 0x34
 800711e:	9b01      	ldr	r3, [sp, #4]
 8007120:	bfb8      	it	lt
 8007122:	2600      	movlt	r6, #0
 8007124:	2b00      	cmp	r3, #0
 8007126:	bfb5      	itete	lt
 8007128:	eba8 0503 	sublt.w	r5, r8, r3
 800712c:	9b01      	ldrge	r3, [sp, #4]
 800712e:	2300      	movlt	r3, #0
 8007130:	4645      	movge	r5, r8
 8007132:	e747      	b.n	8006fc4 <_dtoa_r+0x75c>
 8007134:	9e06      	ldr	r6, [sp, #24]
 8007136:	9f08      	ldr	r7, [sp, #32]
 8007138:	4645      	mov	r5, r8
 800713a:	e74c      	b.n	8006fd6 <_dtoa_r+0x76e>
 800713c:	9a06      	ldr	r2, [sp, #24]
 800713e:	e775      	b.n	800702c <_dtoa_r+0x7c4>
 8007140:	9b05      	ldr	r3, [sp, #20]
 8007142:	2b01      	cmp	r3, #1
 8007144:	dc18      	bgt.n	8007178 <_dtoa_r+0x910>
 8007146:	9b02      	ldr	r3, [sp, #8]
 8007148:	b9b3      	cbnz	r3, 8007178 <_dtoa_r+0x910>
 800714a:	9b03      	ldr	r3, [sp, #12]
 800714c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007150:	b9a3      	cbnz	r3, 800717c <_dtoa_r+0x914>
 8007152:	9b03      	ldr	r3, [sp, #12]
 8007154:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007158:	0d1b      	lsrs	r3, r3, #20
 800715a:	051b      	lsls	r3, r3, #20
 800715c:	b12b      	cbz	r3, 800716a <_dtoa_r+0x902>
 800715e:	9b04      	ldr	r3, [sp, #16]
 8007160:	3301      	adds	r3, #1
 8007162:	9304      	str	r3, [sp, #16]
 8007164:	f108 0801 	add.w	r8, r8, #1
 8007168:	2301      	movs	r3, #1
 800716a:	9306      	str	r3, [sp, #24]
 800716c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800716e:	2b00      	cmp	r3, #0
 8007170:	f47f af74 	bne.w	800705c <_dtoa_r+0x7f4>
 8007174:	2001      	movs	r0, #1
 8007176:	e779      	b.n	800706c <_dtoa_r+0x804>
 8007178:	2300      	movs	r3, #0
 800717a:	e7f6      	b.n	800716a <_dtoa_r+0x902>
 800717c:	9b02      	ldr	r3, [sp, #8]
 800717e:	e7f4      	b.n	800716a <_dtoa_r+0x902>
 8007180:	d085      	beq.n	800708e <_dtoa_r+0x826>
 8007182:	4618      	mov	r0, r3
 8007184:	301c      	adds	r0, #28
 8007186:	e77d      	b.n	8007084 <_dtoa_r+0x81c>
 8007188:	40240000 	.word	0x40240000
 800718c:	9b01      	ldr	r3, [sp, #4]
 800718e:	2b00      	cmp	r3, #0
 8007190:	dc38      	bgt.n	8007204 <_dtoa_r+0x99c>
 8007192:	9b05      	ldr	r3, [sp, #20]
 8007194:	2b02      	cmp	r3, #2
 8007196:	dd35      	ble.n	8007204 <_dtoa_r+0x99c>
 8007198:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800719c:	f1b9 0f00 	cmp.w	r9, #0
 80071a0:	d10d      	bne.n	80071be <_dtoa_r+0x956>
 80071a2:	4631      	mov	r1, r6
 80071a4:	464b      	mov	r3, r9
 80071a6:	2205      	movs	r2, #5
 80071a8:	4620      	mov	r0, r4
 80071aa:	f000 f9b7 	bl	800751c <__multadd>
 80071ae:	4601      	mov	r1, r0
 80071b0:	4606      	mov	r6, r0
 80071b2:	4658      	mov	r0, fp
 80071b4:	f000 fbce 	bl	8007954 <__mcmp>
 80071b8:	2800      	cmp	r0, #0
 80071ba:	f73f adbd 	bgt.w	8006d38 <_dtoa_r+0x4d0>
 80071be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80071c0:	9d00      	ldr	r5, [sp, #0]
 80071c2:	ea6f 0a03 	mvn.w	sl, r3
 80071c6:	f04f 0800 	mov.w	r8, #0
 80071ca:	4631      	mov	r1, r6
 80071cc:	4620      	mov	r0, r4
 80071ce:	f000 f983 	bl	80074d8 <_Bfree>
 80071d2:	2f00      	cmp	r7, #0
 80071d4:	f43f aeb4 	beq.w	8006f40 <_dtoa_r+0x6d8>
 80071d8:	f1b8 0f00 	cmp.w	r8, #0
 80071dc:	d005      	beq.n	80071ea <_dtoa_r+0x982>
 80071de:	45b8      	cmp	r8, r7
 80071e0:	d003      	beq.n	80071ea <_dtoa_r+0x982>
 80071e2:	4641      	mov	r1, r8
 80071e4:	4620      	mov	r0, r4
 80071e6:	f000 f977 	bl	80074d8 <_Bfree>
 80071ea:	4639      	mov	r1, r7
 80071ec:	4620      	mov	r0, r4
 80071ee:	f000 f973 	bl	80074d8 <_Bfree>
 80071f2:	e6a5      	b.n	8006f40 <_dtoa_r+0x6d8>
 80071f4:	2600      	movs	r6, #0
 80071f6:	4637      	mov	r7, r6
 80071f8:	e7e1      	b.n	80071be <_dtoa_r+0x956>
 80071fa:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80071fc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8007200:	4637      	mov	r7, r6
 8007202:	e599      	b.n	8006d38 <_dtoa_r+0x4d0>
 8007204:	9b08      	ldr	r3, [sp, #32]
 8007206:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800720a:	2b00      	cmp	r3, #0
 800720c:	f000 80fd 	beq.w	800740a <_dtoa_r+0xba2>
 8007210:	2d00      	cmp	r5, #0
 8007212:	dd05      	ble.n	8007220 <_dtoa_r+0x9b8>
 8007214:	4639      	mov	r1, r7
 8007216:	462a      	mov	r2, r5
 8007218:	4620      	mov	r0, r4
 800721a:	f000 fb2f 	bl	800787c <__lshift>
 800721e:	4607      	mov	r7, r0
 8007220:	9b06      	ldr	r3, [sp, #24]
 8007222:	2b00      	cmp	r3, #0
 8007224:	d05c      	beq.n	80072e0 <_dtoa_r+0xa78>
 8007226:	6879      	ldr	r1, [r7, #4]
 8007228:	4620      	mov	r0, r4
 800722a:	f000 f915 	bl	8007458 <_Balloc>
 800722e:	4605      	mov	r5, r0
 8007230:	b928      	cbnz	r0, 800723e <_dtoa_r+0x9d6>
 8007232:	4b80      	ldr	r3, [pc, #512]	; (8007434 <_dtoa_r+0xbcc>)
 8007234:	4602      	mov	r2, r0
 8007236:	f240 21ea 	movw	r1, #746	; 0x2ea
 800723a:	f7ff bb2e 	b.w	800689a <_dtoa_r+0x32>
 800723e:	693a      	ldr	r2, [r7, #16]
 8007240:	3202      	adds	r2, #2
 8007242:	0092      	lsls	r2, r2, #2
 8007244:	f107 010c 	add.w	r1, r7, #12
 8007248:	300c      	adds	r0, #12
 800724a:	f7fe fdc1 	bl	8005dd0 <memcpy>
 800724e:	2201      	movs	r2, #1
 8007250:	4629      	mov	r1, r5
 8007252:	4620      	mov	r0, r4
 8007254:	f000 fb12 	bl	800787c <__lshift>
 8007258:	9b00      	ldr	r3, [sp, #0]
 800725a:	3301      	adds	r3, #1
 800725c:	9301      	str	r3, [sp, #4]
 800725e:	9b00      	ldr	r3, [sp, #0]
 8007260:	444b      	add	r3, r9
 8007262:	9307      	str	r3, [sp, #28]
 8007264:	9b02      	ldr	r3, [sp, #8]
 8007266:	f003 0301 	and.w	r3, r3, #1
 800726a:	46b8      	mov	r8, r7
 800726c:	9306      	str	r3, [sp, #24]
 800726e:	4607      	mov	r7, r0
 8007270:	9b01      	ldr	r3, [sp, #4]
 8007272:	4631      	mov	r1, r6
 8007274:	3b01      	subs	r3, #1
 8007276:	4658      	mov	r0, fp
 8007278:	9302      	str	r3, [sp, #8]
 800727a:	f7ff fa69 	bl	8006750 <quorem>
 800727e:	4603      	mov	r3, r0
 8007280:	3330      	adds	r3, #48	; 0x30
 8007282:	9004      	str	r0, [sp, #16]
 8007284:	4641      	mov	r1, r8
 8007286:	4658      	mov	r0, fp
 8007288:	9308      	str	r3, [sp, #32]
 800728a:	f000 fb63 	bl	8007954 <__mcmp>
 800728e:	463a      	mov	r2, r7
 8007290:	4681      	mov	r9, r0
 8007292:	4631      	mov	r1, r6
 8007294:	4620      	mov	r0, r4
 8007296:	f000 fb79 	bl	800798c <__mdiff>
 800729a:	68c2      	ldr	r2, [r0, #12]
 800729c:	9b08      	ldr	r3, [sp, #32]
 800729e:	4605      	mov	r5, r0
 80072a0:	bb02      	cbnz	r2, 80072e4 <_dtoa_r+0xa7c>
 80072a2:	4601      	mov	r1, r0
 80072a4:	4658      	mov	r0, fp
 80072a6:	f000 fb55 	bl	8007954 <__mcmp>
 80072aa:	9b08      	ldr	r3, [sp, #32]
 80072ac:	4602      	mov	r2, r0
 80072ae:	4629      	mov	r1, r5
 80072b0:	4620      	mov	r0, r4
 80072b2:	e9cd 3208 	strd	r3, r2, [sp, #32]
 80072b6:	f000 f90f 	bl	80074d8 <_Bfree>
 80072ba:	9b05      	ldr	r3, [sp, #20]
 80072bc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80072be:	9d01      	ldr	r5, [sp, #4]
 80072c0:	ea43 0102 	orr.w	r1, r3, r2
 80072c4:	9b06      	ldr	r3, [sp, #24]
 80072c6:	430b      	orrs	r3, r1
 80072c8:	9b08      	ldr	r3, [sp, #32]
 80072ca:	d10d      	bne.n	80072e8 <_dtoa_r+0xa80>
 80072cc:	2b39      	cmp	r3, #57	; 0x39
 80072ce:	d029      	beq.n	8007324 <_dtoa_r+0xabc>
 80072d0:	f1b9 0f00 	cmp.w	r9, #0
 80072d4:	dd01      	ble.n	80072da <_dtoa_r+0xa72>
 80072d6:	9b04      	ldr	r3, [sp, #16]
 80072d8:	3331      	adds	r3, #49	; 0x31
 80072da:	9a02      	ldr	r2, [sp, #8]
 80072dc:	7013      	strb	r3, [r2, #0]
 80072de:	e774      	b.n	80071ca <_dtoa_r+0x962>
 80072e0:	4638      	mov	r0, r7
 80072e2:	e7b9      	b.n	8007258 <_dtoa_r+0x9f0>
 80072e4:	2201      	movs	r2, #1
 80072e6:	e7e2      	b.n	80072ae <_dtoa_r+0xa46>
 80072e8:	f1b9 0f00 	cmp.w	r9, #0
 80072ec:	db06      	blt.n	80072fc <_dtoa_r+0xa94>
 80072ee:	9905      	ldr	r1, [sp, #20]
 80072f0:	ea41 0909 	orr.w	r9, r1, r9
 80072f4:	9906      	ldr	r1, [sp, #24]
 80072f6:	ea59 0101 	orrs.w	r1, r9, r1
 80072fa:	d120      	bne.n	800733e <_dtoa_r+0xad6>
 80072fc:	2a00      	cmp	r2, #0
 80072fe:	ddec      	ble.n	80072da <_dtoa_r+0xa72>
 8007300:	4659      	mov	r1, fp
 8007302:	2201      	movs	r2, #1
 8007304:	4620      	mov	r0, r4
 8007306:	9301      	str	r3, [sp, #4]
 8007308:	f000 fab8 	bl	800787c <__lshift>
 800730c:	4631      	mov	r1, r6
 800730e:	4683      	mov	fp, r0
 8007310:	f000 fb20 	bl	8007954 <__mcmp>
 8007314:	2800      	cmp	r0, #0
 8007316:	9b01      	ldr	r3, [sp, #4]
 8007318:	dc02      	bgt.n	8007320 <_dtoa_r+0xab8>
 800731a:	d1de      	bne.n	80072da <_dtoa_r+0xa72>
 800731c:	07da      	lsls	r2, r3, #31
 800731e:	d5dc      	bpl.n	80072da <_dtoa_r+0xa72>
 8007320:	2b39      	cmp	r3, #57	; 0x39
 8007322:	d1d8      	bne.n	80072d6 <_dtoa_r+0xa6e>
 8007324:	9a02      	ldr	r2, [sp, #8]
 8007326:	2339      	movs	r3, #57	; 0x39
 8007328:	7013      	strb	r3, [r2, #0]
 800732a:	462b      	mov	r3, r5
 800732c:	461d      	mov	r5, r3
 800732e:	3b01      	subs	r3, #1
 8007330:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007334:	2a39      	cmp	r2, #57	; 0x39
 8007336:	d050      	beq.n	80073da <_dtoa_r+0xb72>
 8007338:	3201      	adds	r2, #1
 800733a:	701a      	strb	r2, [r3, #0]
 800733c:	e745      	b.n	80071ca <_dtoa_r+0x962>
 800733e:	2a00      	cmp	r2, #0
 8007340:	dd03      	ble.n	800734a <_dtoa_r+0xae2>
 8007342:	2b39      	cmp	r3, #57	; 0x39
 8007344:	d0ee      	beq.n	8007324 <_dtoa_r+0xabc>
 8007346:	3301      	adds	r3, #1
 8007348:	e7c7      	b.n	80072da <_dtoa_r+0xa72>
 800734a:	9a01      	ldr	r2, [sp, #4]
 800734c:	9907      	ldr	r1, [sp, #28]
 800734e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8007352:	428a      	cmp	r2, r1
 8007354:	d02a      	beq.n	80073ac <_dtoa_r+0xb44>
 8007356:	4659      	mov	r1, fp
 8007358:	2300      	movs	r3, #0
 800735a:	220a      	movs	r2, #10
 800735c:	4620      	mov	r0, r4
 800735e:	f000 f8dd 	bl	800751c <__multadd>
 8007362:	45b8      	cmp	r8, r7
 8007364:	4683      	mov	fp, r0
 8007366:	f04f 0300 	mov.w	r3, #0
 800736a:	f04f 020a 	mov.w	r2, #10
 800736e:	4641      	mov	r1, r8
 8007370:	4620      	mov	r0, r4
 8007372:	d107      	bne.n	8007384 <_dtoa_r+0xb1c>
 8007374:	f000 f8d2 	bl	800751c <__multadd>
 8007378:	4680      	mov	r8, r0
 800737a:	4607      	mov	r7, r0
 800737c:	9b01      	ldr	r3, [sp, #4]
 800737e:	3301      	adds	r3, #1
 8007380:	9301      	str	r3, [sp, #4]
 8007382:	e775      	b.n	8007270 <_dtoa_r+0xa08>
 8007384:	f000 f8ca 	bl	800751c <__multadd>
 8007388:	4639      	mov	r1, r7
 800738a:	4680      	mov	r8, r0
 800738c:	2300      	movs	r3, #0
 800738e:	220a      	movs	r2, #10
 8007390:	4620      	mov	r0, r4
 8007392:	f000 f8c3 	bl	800751c <__multadd>
 8007396:	4607      	mov	r7, r0
 8007398:	e7f0      	b.n	800737c <_dtoa_r+0xb14>
 800739a:	f1b9 0f00 	cmp.w	r9, #0
 800739e:	9a00      	ldr	r2, [sp, #0]
 80073a0:	bfcc      	ite	gt
 80073a2:	464d      	movgt	r5, r9
 80073a4:	2501      	movle	r5, #1
 80073a6:	4415      	add	r5, r2
 80073a8:	f04f 0800 	mov.w	r8, #0
 80073ac:	4659      	mov	r1, fp
 80073ae:	2201      	movs	r2, #1
 80073b0:	4620      	mov	r0, r4
 80073b2:	9301      	str	r3, [sp, #4]
 80073b4:	f000 fa62 	bl	800787c <__lshift>
 80073b8:	4631      	mov	r1, r6
 80073ba:	4683      	mov	fp, r0
 80073bc:	f000 faca 	bl	8007954 <__mcmp>
 80073c0:	2800      	cmp	r0, #0
 80073c2:	dcb2      	bgt.n	800732a <_dtoa_r+0xac2>
 80073c4:	d102      	bne.n	80073cc <_dtoa_r+0xb64>
 80073c6:	9b01      	ldr	r3, [sp, #4]
 80073c8:	07db      	lsls	r3, r3, #31
 80073ca:	d4ae      	bmi.n	800732a <_dtoa_r+0xac2>
 80073cc:	462b      	mov	r3, r5
 80073ce:	461d      	mov	r5, r3
 80073d0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80073d4:	2a30      	cmp	r2, #48	; 0x30
 80073d6:	d0fa      	beq.n	80073ce <_dtoa_r+0xb66>
 80073d8:	e6f7      	b.n	80071ca <_dtoa_r+0x962>
 80073da:	9a00      	ldr	r2, [sp, #0]
 80073dc:	429a      	cmp	r2, r3
 80073de:	d1a5      	bne.n	800732c <_dtoa_r+0xac4>
 80073e0:	f10a 0a01 	add.w	sl, sl, #1
 80073e4:	2331      	movs	r3, #49	; 0x31
 80073e6:	e779      	b.n	80072dc <_dtoa_r+0xa74>
 80073e8:	4b13      	ldr	r3, [pc, #76]	; (8007438 <_dtoa_r+0xbd0>)
 80073ea:	f7ff baaf 	b.w	800694c <_dtoa_r+0xe4>
 80073ee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	f47f aa86 	bne.w	8006902 <_dtoa_r+0x9a>
 80073f6:	4b11      	ldr	r3, [pc, #68]	; (800743c <_dtoa_r+0xbd4>)
 80073f8:	f7ff baa8 	b.w	800694c <_dtoa_r+0xe4>
 80073fc:	f1b9 0f00 	cmp.w	r9, #0
 8007400:	dc03      	bgt.n	800740a <_dtoa_r+0xba2>
 8007402:	9b05      	ldr	r3, [sp, #20]
 8007404:	2b02      	cmp	r3, #2
 8007406:	f73f aec9 	bgt.w	800719c <_dtoa_r+0x934>
 800740a:	9d00      	ldr	r5, [sp, #0]
 800740c:	4631      	mov	r1, r6
 800740e:	4658      	mov	r0, fp
 8007410:	f7ff f99e 	bl	8006750 <quorem>
 8007414:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8007418:	f805 3b01 	strb.w	r3, [r5], #1
 800741c:	9a00      	ldr	r2, [sp, #0]
 800741e:	1aaa      	subs	r2, r5, r2
 8007420:	4591      	cmp	r9, r2
 8007422:	ddba      	ble.n	800739a <_dtoa_r+0xb32>
 8007424:	4659      	mov	r1, fp
 8007426:	2300      	movs	r3, #0
 8007428:	220a      	movs	r2, #10
 800742a:	4620      	mov	r0, r4
 800742c:	f000 f876 	bl	800751c <__multadd>
 8007430:	4683      	mov	fp, r0
 8007432:	e7eb      	b.n	800740c <_dtoa_r+0xba4>
 8007434:	0800a47f 	.word	0x0800a47f
 8007438:	0800a3d8 	.word	0x0800a3d8
 800743c:	0800a3fc 	.word	0x0800a3fc

08007440 <_localeconv_r>:
 8007440:	4800      	ldr	r0, [pc, #0]	; (8007444 <_localeconv_r+0x4>)
 8007442:	4770      	bx	lr
 8007444:	20000170 	.word	0x20000170

08007448 <malloc>:
 8007448:	4b02      	ldr	r3, [pc, #8]	; (8007454 <malloc+0xc>)
 800744a:	4601      	mov	r1, r0
 800744c:	6818      	ldr	r0, [r3, #0]
 800744e:	f000 bbe1 	b.w	8007c14 <_malloc_r>
 8007452:	bf00      	nop
 8007454:	2000001c 	.word	0x2000001c

08007458 <_Balloc>:
 8007458:	b570      	push	{r4, r5, r6, lr}
 800745a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800745c:	4604      	mov	r4, r0
 800745e:	460d      	mov	r5, r1
 8007460:	b976      	cbnz	r6, 8007480 <_Balloc+0x28>
 8007462:	2010      	movs	r0, #16
 8007464:	f7ff fff0 	bl	8007448 <malloc>
 8007468:	4602      	mov	r2, r0
 800746a:	6260      	str	r0, [r4, #36]	; 0x24
 800746c:	b920      	cbnz	r0, 8007478 <_Balloc+0x20>
 800746e:	4b18      	ldr	r3, [pc, #96]	; (80074d0 <_Balloc+0x78>)
 8007470:	4818      	ldr	r0, [pc, #96]	; (80074d4 <_Balloc+0x7c>)
 8007472:	2166      	movs	r1, #102	; 0x66
 8007474:	f000 fd94 	bl	8007fa0 <__assert_func>
 8007478:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800747c:	6006      	str	r6, [r0, #0]
 800747e:	60c6      	str	r6, [r0, #12]
 8007480:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007482:	68f3      	ldr	r3, [r6, #12]
 8007484:	b183      	cbz	r3, 80074a8 <_Balloc+0x50>
 8007486:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007488:	68db      	ldr	r3, [r3, #12]
 800748a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800748e:	b9b8      	cbnz	r0, 80074c0 <_Balloc+0x68>
 8007490:	2101      	movs	r1, #1
 8007492:	fa01 f605 	lsl.w	r6, r1, r5
 8007496:	1d72      	adds	r2, r6, #5
 8007498:	0092      	lsls	r2, r2, #2
 800749a:	4620      	mov	r0, r4
 800749c:	f000 fb5a 	bl	8007b54 <_calloc_r>
 80074a0:	b160      	cbz	r0, 80074bc <_Balloc+0x64>
 80074a2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80074a6:	e00e      	b.n	80074c6 <_Balloc+0x6e>
 80074a8:	2221      	movs	r2, #33	; 0x21
 80074aa:	2104      	movs	r1, #4
 80074ac:	4620      	mov	r0, r4
 80074ae:	f000 fb51 	bl	8007b54 <_calloc_r>
 80074b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80074b4:	60f0      	str	r0, [r6, #12]
 80074b6:	68db      	ldr	r3, [r3, #12]
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d1e4      	bne.n	8007486 <_Balloc+0x2e>
 80074bc:	2000      	movs	r0, #0
 80074be:	bd70      	pop	{r4, r5, r6, pc}
 80074c0:	6802      	ldr	r2, [r0, #0]
 80074c2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80074c6:	2300      	movs	r3, #0
 80074c8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80074cc:	e7f7      	b.n	80074be <_Balloc+0x66>
 80074ce:	bf00      	nop
 80074d0:	0800a409 	.word	0x0800a409
 80074d4:	0800a490 	.word	0x0800a490

080074d8 <_Bfree>:
 80074d8:	b570      	push	{r4, r5, r6, lr}
 80074da:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80074dc:	4605      	mov	r5, r0
 80074de:	460c      	mov	r4, r1
 80074e0:	b976      	cbnz	r6, 8007500 <_Bfree+0x28>
 80074e2:	2010      	movs	r0, #16
 80074e4:	f7ff ffb0 	bl	8007448 <malloc>
 80074e8:	4602      	mov	r2, r0
 80074ea:	6268      	str	r0, [r5, #36]	; 0x24
 80074ec:	b920      	cbnz	r0, 80074f8 <_Bfree+0x20>
 80074ee:	4b09      	ldr	r3, [pc, #36]	; (8007514 <_Bfree+0x3c>)
 80074f0:	4809      	ldr	r0, [pc, #36]	; (8007518 <_Bfree+0x40>)
 80074f2:	218a      	movs	r1, #138	; 0x8a
 80074f4:	f000 fd54 	bl	8007fa0 <__assert_func>
 80074f8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80074fc:	6006      	str	r6, [r0, #0]
 80074fe:	60c6      	str	r6, [r0, #12]
 8007500:	b13c      	cbz	r4, 8007512 <_Bfree+0x3a>
 8007502:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007504:	6862      	ldr	r2, [r4, #4]
 8007506:	68db      	ldr	r3, [r3, #12]
 8007508:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800750c:	6021      	str	r1, [r4, #0]
 800750e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007512:	bd70      	pop	{r4, r5, r6, pc}
 8007514:	0800a409 	.word	0x0800a409
 8007518:	0800a490 	.word	0x0800a490

0800751c <__multadd>:
 800751c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007520:	690e      	ldr	r6, [r1, #16]
 8007522:	4607      	mov	r7, r0
 8007524:	4698      	mov	r8, r3
 8007526:	460c      	mov	r4, r1
 8007528:	f101 0014 	add.w	r0, r1, #20
 800752c:	2300      	movs	r3, #0
 800752e:	6805      	ldr	r5, [r0, #0]
 8007530:	b2a9      	uxth	r1, r5
 8007532:	fb02 8101 	mla	r1, r2, r1, r8
 8007536:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800753a:	0c2d      	lsrs	r5, r5, #16
 800753c:	fb02 c505 	mla	r5, r2, r5, ip
 8007540:	b289      	uxth	r1, r1
 8007542:	3301      	adds	r3, #1
 8007544:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8007548:	429e      	cmp	r6, r3
 800754a:	f840 1b04 	str.w	r1, [r0], #4
 800754e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8007552:	dcec      	bgt.n	800752e <__multadd+0x12>
 8007554:	f1b8 0f00 	cmp.w	r8, #0
 8007558:	d022      	beq.n	80075a0 <__multadd+0x84>
 800755a:	68a3      	ldr	r3, [r4, #8]
 800755c:	42b3      	cmp	r3, r6
 800755e:	dc19      	bgt.n	8007594 <__multadd+0x78>
 8007560:	6861      	ldr	r1, [r4, #4]
 8007562:	4638      	mov	r0, r7
 8007564:	3101      	adds	r1, #1
 8007566:	f7ff ff77 	bl	8007458 <_Balloc>
 800756a:	4605      	mov	r5, r0
 800756c:	b928      	cbnz	r0, 800757a <__multadd+0x5e>
 800756e:	4602      	mov	r2, r0
 8007570:	4b0d      	ldr	r3, [pc, #52]	; (80075a8 <__multadd+0x8c>)
 8007572:	480e      	ldr	r0, [pc, #56]	; (80075ac <__multadd+0x90>)
 8007574:	21b5      	movs	r1, #181	; 0xb5
 8007576:	f000 fd13 	bl	8007fa0 <__assert_func>
 800757a:	6922      	ldr	r2, [r4, #16]
 800757c:	3202      	adds	r2, #2
 800757e:	f104 010c 	add.w	r1, r4, #12
 8007582:	0092      	lsls	r2, r2, #2
 8007584:	300c      	adds	r0, #12
 8007586:	f7fe fc23 	bl	8005dd0 <memcpy>
 800758a:	4621      	mov	r1, r4
 800758c:	4638      	mov	r0, r7
 800758e:	f7ff ffa3 	bl	80074d8 <_Bfree>
 8007592:	462c      	mov	r4, r5
 8007594:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8007598:	3601      	adds	r6, #1
 800759a:	f8c3 8014 	str.w	r8, [r3, #20]
 800759e:	6126      	str	r6, [r4, #16]
 80075a0:	4620      	mov	r0, r4
 80075a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80075a6:	bf00      	nop
 80075a8:	0800a47f 	.word	0x0800a47f
 80075ac:	0800a490 	.word	0x0800a490

080075b0 <__hi0bits>:
 80075b0:	0c03      	lsrs	r3, r0, #16
 80075b2:	041b      	lsls	r3, r3, #16
 80075b4:	b9d3      	cbnz	r3, 80075ec <__hi0bits+0x3c>
 80075b6:	0400      	lsls	r0, r0, #16
 80075b8:	2310      	movs	r3, #16
 80075ba:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80075be:	bf04      	itt	eq
 80075c0:	0200      	lsleq	r0, r0, #8
 80075c2:	3308      	addeq	r3, #8
 80075c4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80075c8:	bf04      	itt	eq
 80075ca:	0100      	lsleq	r0, r0, #4
 80075cc:	3304      	addeq	r3, #4
 80075ce:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80075d2:	bf04      	itt	eq
 80075d4:	0080      	lsleq	r0, r0, #2
 80075d6:	3302      	addeq	r3, #2
 80075d8:	2800      	cmp	r0, #0
 80075da:	db05      	blt.n	80075e8 <__hi0bits+0x38>
 80075dc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80075e0:	f103 0301 	add.w	r3, r3, #1
 80075e4:	bf08      	it	eq
 80075e6:	2320      	moveq	r3, #32
 80075e8:	4618      	mov	r0, r3
 80075ea:	4770      	bx	lr
 80075ec:	2300      	movs	r3, #0
 80075ee:	e7e4      	b.n	80075ba <__hi0bits+0xa>

080075f0 <__lo0bits>:
 80075f0:	6803      	ldr	r3, [r0, #0]
 80075f2:	f013 0207 	ands.w	r2, r3, #7
 80075f6:	4601      	mov	r1, r0
 80075f8:	d00b      	beq.n	8007612 <__lo0bits+0x22>
 80075fa:	07da      	lsls	r2, r3, #31
 80075fc:	d424      	bmi.n	8007648 <__lo0bits+0x58>
 80075fe:	0798      	lsls	r0, r3, #30
 8007600:	bf49      	itett	mi
 8007602:	085b      	lsrmi	r3, r3, #1
 8007604:	089b      	lsrpl	r3, r3, #2
 8007606:	2001      	movmi	r0, #1
 8007608:	600b      	strmi	r3, [r1, #0]
 800760a:	bf5c      	itt	pl
 800760c:	600b      	strpl	r3, [r1, #0]
 800760e:	2002      	movpl	r0, #2
 8007610:	4770      	bx	lr
 8007612:	b298      	uxth	r0, r3
 8007614:	b9b0      	cbnz	r0, 8007644 <__lo0bits+0x54>
 8007616:	0c1b      	lsrs	r3, r3, #16
 8007618:	2010      	movs	r0, #16
 800761a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800761e:	bf04      	itt	eq
 8007620:	0a1b      	lsreq	r3, r3, #8
 8007622:	3008      	addeq	r0, #8
 8007624:	071a      	lsls	r2, r3, #28
 8007626:	bf04      	itt	eq
 8007628:	091b      	lsreq	r3, r3, #4
 800762a:	3004      	addeq	r0, #4
 800762c:	079a      	lsls	r2, r3, #30
 800762e:	bf04      	itt	eq
 8007630:	089b      	lsreq	r3, r3, #2
 8007632:	3002      	addeq	r0, #2
 8007634:	07da      	lsls	r2, r3, #31
 8007636:	d403      	bmi.n	8007640 <__lo0bits+0x50>
 8007638:	085b      	lsrs	r3, r3, #1
 800763a:	f100 0001 	add.w	r0, r0, #1
 800763e:	d005      	beq.n	800764c <__lo0bits+0x5c>
 8007640:	600b      	str	r3, [r1, #0]
 8007642:	4770      	bx	lr
 8007644:	4610      	mov	r0, r2
 8007646:	e7e8      	b.n	800761a <__lo0bits+0x2a>
 8007648:	2000      	movs	r0, #0
 800764a:	4770      	bx	lr
 800764c:	2020      	movs	r0, #32
 800764e:	4770      	bx	lr

08007650 <__i2b>:
 8007650:	b510      	push	{r4, lr}
 8007652:	460c      	mov	r4, r1
 8007654:	2101      	movs	r1, #1
 8007656:	f7ff feff 	bl	8007458 <_Balloc>
 800765a:	4602      	mov	r2, r0
 800765c:	b928      	cbnz	r0, 800766a <__i2b+0x1a>
 800765e:	4b05      	ldr	r3, [pc, #20]	; (8007674 <__i2b+0x24>)
 8007660:	4805      	ldr	r0, [pc, #20]	; (8007678 <__i2b+0x28>)
 8007662:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007666:	f000 fc9b 	bl	8007fa0 <__assert_func>
 800766a:	2301      	movs	r3, #1
 800766c:	6144      	str	r4, [r0, #20]
 800766e:	6103      	str	r3, [r0, #16]
 8007670:	bd10      	pop	{r4, pc}
 8007672:	bf00      	nop
 8007674:	0800a47f 	.word	0x0800a47f
 8007678:	0800a490 	.word	0x0800a490

0800767c <__multiply>:
 800767c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007680:	4614      	mov	r4, r2
 8007682:	690a      	ldr	r2, [r1, #16]
 8007684:	6923      	ldr	r3, [r4, #16]
 8007686:	429a      	cmp	r2, r3
 8007688:	bfb8      	it	lt
 800768a:	460b      	movlt	r3, r1
 800768c:	460d      	mov	r5, r1
 800768e:	bfbc      	itt	lt
 8007690:	4625      	movlt	r5, r4
 8007692:	461c      	movlt	r4, r3
 8007694:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8007698:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800769c:	68ab      	ldr	r3, [r5, #8]
 800769e:	6869      	ldr	r1, [r5, #4]
 80076a0:	eb0a 0709 	add.w	r7, sl, r9
 80076a4:	42bb      	cmp	r3, r7
 80076a6:	b085      	sub	sp, #20
 80076a8:	bfb8      	it	lt
 80076aa:	3101      	addlt	r1, #1
 80076ac:	f7ff fed4 	bl	8007458 <_Balloc>
 80076b0:	b930      	cbnz	r0, 80076c0 <__multiply+0x44>
 80076b2:	4602      	mov	r2, r0
 80076b4:	4b42      	ldr	r3, [pc, #264]	; (80077c0 <__multiply+0x144>)
 80076b6:	4843      	ldr	r0, [pc, #268]	; (80077c4 <__multiply+0x148>)
 80076b8:	f240 115d 	movw	r1, #349	; 0x15d
 80076bc:	f000 fc70 	bl	8007fa0 <__assert_func>
 80076c0:	f100 0614 	add.w	r6, r0, #20
 80076c4:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 80076c8:	4633      	mov	r3, r6
 80076ca:	2200      	movs	r2, #0
 80076cc:	4543      	cmp	r3, r8
 80076ce:	d31e      	bcc.n	800770e <__multiply+0x92>
 80076d0:	f105 0c14 	add.w	ip, r5, #20
 80076d4:	f104 0314 	add.w	r3, r4, #20
 80076d8:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 80076dc:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 80076e0:	9202      	str	r2, [sp, #8]
 80076e2:	ebac 0205 	sub.w	r2, ip, r5
 80076e6:	3a15      	subs	r2, #21
 80076e8:	f022 0203 	bic.w	r2, r2, #3
 80076ec:	3204      	adds	r2, #4
 80076ee:	f105 0115 	add.w	r1, r5, #21
 80076f2:	458c      	cmp	ip, r1
 80076f4:	bf38      	it	cc
 80076f6:	2204      	movcc	r2, #4
 80076f8:	9201      	str	r2, [sp, #4]
 80076fa:	9a02      	ldr	r2, [sp, #8]
 80076fc:	9303      	str	r3, [sp, #12]
 80076fe:	429a      	cmp	r2, r3
 8007700:	d808      	bhi.n	8007714 <__multiply+0x98>
 8007702:	2f00      	cmp	r7, #0
 8007704:	dc55      	bgt.n	80077b2 <__multiply+0x136>
 8007706:	6107      	str	r7, [r0, #16]
 8007708:	b005      	add	sp, #20
 800770a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800770e:	f843 2b04 	str.w	r2, [r3], #4
 8007712:	e7db      	b.n	80076cc <__multiply+0x50>
 8007714:	f8b3 a000 	ldrh.w	sl, [r3]
 8007718:	f1ba 0f00 	cmp.w	sl, #0
 800771c:	d020      	beq.n	8007760 <__multiply+0xe4>
 800771e:	f105 0e14 	add.w	lr, r5, #20
 8007722:	46b1      	mov	r9, r6
 8007724:	2200      	movs	r2, #0
 8007726:	f85e 4b04 	ldr.w	r4, [lr], #4
 800772a:	f8d9 b000 	ldr.w	fp, [r9]
 800772e:	b2a1      	uxth	r1, r4
 8007730:	fa1f fb8b 	uxth.w	fp, fp
 8007734:	fb0a b101 	mla	r1, sl, r1, fp
 8007738:	4411      	add	r1, r2
 800773a:	f8d9 2000 	ldr.w	r2, [r9]
 800773e:	0c24      	lsrs	r4, r4, #16
 8007740:	0c12      	lsrs	r2, r2, #16
 8007742:	fb0a 2404 	mla	r4, sl, r4, r2
 8007746:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800774a:	b289      	uxth	r1, r1
 800774c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8007750:	45f4      	cmp	ip, lr
 8007752:	f849 1b04 	str.w	r1, [r9], #4
 8007756:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800775a:	d8e4      	bhi.n	8007726 <__multiply+0xaa>
 800775c:	9901      	ldr	r1, [sp, #4]
 800775e:	5072      	str	r2, [r6, r1]
 8007760:	9a03      	ldr	r2, [sp, #12]
 8007762:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007766:	3304      	adds	r3, #4
 8007768:	f1b9 0f00 	cmp.w	r9, #0
 800776c:	d01f      	beq.n	80077ae <__multiply+0x132>
 800776e:	6834      	ldr	r4, [r6, #0]
 8007770:	f105 0114 	add.w	r1, r5, #20
 8007774:	46b6      	mov	lr, r6
 8007776:	f04f 0a00 	mov.w	sl, #0
 800777a:	880a      	ldrh	r2, [r1, #0]
 800777c:	f8be b002 	ldrh.w	fp, [lr, #2]
 8007780:	fb09 b202 	mla	r2, r9, r2, fp
 8007784:	4492      	add	sl, r2
 8007786:	b2a4      	uxth	r4, r4
 8007788:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800778c:	f84e 4b04 	str.w	r4, [lr], #4
 8007790:	f851 4b04 	ldr.w	r4, [r1], #4
 8007794:	f8be 2000 	ldrh.w	r2, [lr]
 8007798:	0c24      	lsrs	r4, r4, #16
 800779a:	fb09 2404 	mla	r4, r9, r4, r2
 800779e:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80077a2:	458c      	cmp	ip, r1
 80077a4:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80077a8:	d8e7      	bhi.n	800777a <__multiply+0xfe>
 80077aa:	9a01      	ldr	r2, [sp, #4]
 80077ac:	50b4      	str	r4, [r6, r2]
 80077ae:	3604      	adds	r6, #4
 80077b0:	e7a3      	b.n	80076fa <__multiply+0x7e>
 80077b2:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d1a5      	bne.n	8007706 <__multiply+0x8a>
 80077ba:	3f01      	subs	r7, #1
 80077bc:	e7a1      	b.n	8007702 <__multiply+0x86>
 80077be:	bf00      	nop
 80077c0:	0800a47f 	.word	0x0800a47f
 80077c4:	0800a490 	.word	0x0800a490

080077c8 <__pow5mult>:
 80077c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80077cc:	4615      	mov	r5, r2
 80077ce:	f012 0203 	ands.w	r2, r2, #3
 80077d2:	4606      	mov	r6, r0
 80077d4:	460f      	mov	r7, r1
 80077d6:	d007      	beq.n	80077e8 <__pow5mult+0x20>
 80077d8:	4c25      	ldr	r4, [pc, #148]	; (8007870 <__pow5mult+0xa8>)
 80077da:	3a01      	subs	r2, #1
 80077dc:	2300      	movs	r3, #0
 80077de:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80077e2:	f7ff fe9b 	bl	800751c <__multadd>
 80077e6:	4607      	mov	r7, r0
 80077e8:	10ad      	asrs	r5, r5, #2
 80077ea:	d03d      	beq.n	8007868 <__pow5mult+0xa0>
 80077ec:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80077ee:	b97c      	cbnz	r4, 8007810 <__pow5mult+0x48>
 80077f0:	2010      	movs	r0, #16
 80077f2:	f7ff fe29 	bl	8007448 <malloc>
 80077f6:	4602      	mov	r2, r0
 80077f8:	6270      	str	r0, [r6, #36]	; 0x24
 80077fa:	b928      	cbnz	r0, 8007808 <__pow5mult+0x40>
 80077fc:	4b1d      	ldr	r3, [pc, #116]	; (8007874 <__pow5mult+0xac>)
 80077fe:	481e      	ldr	r0, [pc, #120]	; (8007878 <__pow5mult+0xb0>)
 8007800:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007804:	f000 fbcc 	bl	8007fa0 <__assert_func>
 8007808:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800780c:	6004      	str	r4, [r0, #0]
 800780e:	60c4      	str	r4, [r0, #12]
 8007810:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007814:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007818:	b94c      	cbnz	r4, 800782e <__pow5mult+0x66>
 800781a:	f240 2171 	movw	r1, #625	; 0x271
 800781e:	4630      	mov	r0, r6
 8007820:	f7ff ff16 	bl	8007650 <__i2b>
 8007824:	2300      	movs	r3, #0
 8007826:	f8c8 0008 	str.w	r0, [r8, #8]
 800782a:	4604      	mov	r4, r0
 800782c:	6003      	str	r3, [r0, #0]
 800782e:	f04f 0900 	mov.w	r9, #0
 8007832:	07eb      	lsls	r3, r5, #31
 8007834:	d50a      	bpl.n	800784c <__pow5mult+0x84>
 8007836:	4639      	mov	r1, r7
 8007838:	4622      	mov	r2, r4
 800783a:	4630      	mov	r0, r6
 800783c:	f7ff ff1e 	bl	800767c <__multiply>
 8007840:	4639      	mov	r1, r7
 8007842:	4680      	mov	r8, r0
 8007844:	4630      	mov	r0, r6
 8007846:	f7ff fe47 	bl	80074d8 <_Bfree>
 800784a:	4647      	mov	r7, r8
 800784c:	106d      	asrs	r5, r5, #1
 800784e:	d00b      	beq.n	8007868 <__pow5mult+0xa0>
 8007850:	6820      	ldr	r0, [r4, #0]
 8007852:	b938      	cbnz	r0, 8007864 <__pow5mult+0x9c>
 8007854:	4622      	mov	r2, r4
 8007856:	4621      	mov	r1, r4
 8007858:	4630      	mov	r0, r6
 800785a:	f7ff ff0f 	bl	800767c <__multiply>
 800785e:	6020      	str	r0, [r4, #0]
 8007860:	f8c0 9000 	str.w	r9, [r0]
 8007864:	4604      	mov	r4, r0
 8007866:	e7e4      	b.n	8007832 <__pow5mult+0x6a>
 8007868:	4638      	mov	r0, r7
 800786a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800786e:	bf00      	nop
 8007870:	0800a5e0 	.word	0x0800a5e0
 8007874:	0800a409 	.word	0x0800a409
 8007878:	0800a490 	.word	0x0800a490

0800787c <__lshift>:
 800787c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007880:	460c      	mov	r4, r1
 8007882:	6849      	ldr	r1, [r1, #4]
 8007884:	6923      	ldr	r3, [r4, #16]
 8007886:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800788a:	68a3      	ldr	r3, [r4, #8]
 800788c:	4607      	mov	r7, r0
 800788e:	4691      	mov	r9, r2
 8007890:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007894:	f108 0601 	add.w	r6, r8, #1
 8007898:	42b3      	cmp	r3, r6
 800789a:	db0b      	blt.n	80078b4 <__lshift+0x38>
 800789c:	4638      	mov	r0, r7
 800789e:	f7ff fddb 	bl	8007458 <_Balloc>
 80078a2:	4605      	mov	r5, r0
 80078a4:	b948      	cbnz	r0, 80078ba <__lshift+0x3e>
 80078a6:	4602      	mov	r2, r0
 80078a8:	4b28      	ldr	r3, [pc, #160]	; (800794c <__lshift+0xd0>)
 80078aa:	4829      	ldr	r0, [pc, #164]	; (8007950 <__lshift+0xd4>)
 80078ac:	f240 11d9 	movw	r1, #473	; 0x1d9
 80078b0:	f000 fb76 	bl	8007fa0 <__assert_func>
 80078b4:	3101      	adds	r1, #1
 80078b6:	005b      	lsls	r3, r3, #1
 80078b8:	e7ee      	b.n	8007898 <__lshift+0x1c>
 80078ba:	2300      	movs	r3, #0
 80078bc:	f100 0114 	add.w	r1, r0, #20
 80078c0:	f100 0210 	add.w	r2, r0, #16
 80078c4:	4618      	mov	r0, r3
 80078c6:	4553      	cmp	r3, sl
 80078c8:	db33      	blt.n	8007932 <__lshift+0xb6>
 80078ca:	6920      	ldr	r0, [r4, #16]
 80078cc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80078d0:	f104 0314 	add.w	r3, r4, #20
 80078d4:	f019 091f 	ands.w	r9, r9, #31
 80078d8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80078dc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80078e0:	d02b      	beq.n	800793a <__lshift+0xbe>
 80078e2:	f1c9 0e20 	rsb	lr, r9, #32
 80078e6:	468a      	mov	sl, r1
 80078e8:	2200      	movs	r2, #0
 80078ea:	6818      	ldr	r0, [r3, #0]
 80078ec:	fa00 f009 	lsl.w	r0, r0, r9
 80078f0:	4302      	orrs	r2, r0
 80078f2:	f84a 2b04 	str.w	r2, [sl], #4
 80078f6:	f853 2b04 	ldr.w	r2, [r3], #4
 80078fa:	459c      	cmp	ip, r3
 80078fc:	fa22 f20e 	lsr.w	r2, r2, lr
 8007900:	d8f3      	bhi.n	80078ea <__lshift+0x6e>
 8007902:	ebac 0304 	sub.w	r3, ip, r4
 8007906:	3b15      	subs	r3, #21
 8007908:	f023 0303 	bic.w	r3, r3, #3
 800790c:	3304      	adds	r3, #4
 800790e:	f104 0015 	add.w	r0, r4, #21
 8007912:	4584      	cmp	ip, r0
 8007914:	bf38      	it	cc
 8007916:	2304      	movcc	r3, #4
 8007918:	50ca      	str	r2, [r1, r3]
 800791a:	b10a      	cbz	r2, 8007920 <__lshift+0xa4>
 800791c:	f108 0602 	add.w	r6, r8, #2
 8007920:	3e01      	subs	r6, #1
 8007922:	4638      	mov	r0, r7
 8007924:	612e      	str	r6, [r5, #16]
 8007926:	4621      	mov	r1, r4
 8007928:	f7ff fdd6 	bl	80074d8 <_Bfree>
 800792c:	4628      	mov	r0, r5
 800792e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007932:	f842 0f04 	str.w	r0, [r2, #4]!
 8007936:	3301      	adds	r3, #1
 8007938:	e7c5      	b.n	80078c6 <__lshift+0x4a>
 800793a:	3904      	subs	r1, #4
 800793c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007940:	f841 2f04 	str.w	r2, [r1, #4]!
 8007944:	459c      	cmp	ip, r3
 8007946:	d8f9      	bhi.n	800793c <__lshift+0xc0>
 8007948:	e7ea      	b.n	8007920 <__lshift+0xa4>
 800794a:	bf00      	nop
 800794c:	0800a47f 	.word	0x0800a47f
 8007950:	0800a490 	.word	0x0800a490

08007954 <__mcmp>:
 8007954:	b530      	push	{r4, r5, lr}
 8007956:	6902      	ldr	r2, [r0, #16]
 8007958:	690c      	ldr	r4, [r1, #16]
 800795a:	1b12      	subs	r2, r2, r4
 800795c:	d10e      	bne.n	800797c <__mcmp+0x28>
 800795e:	f100 0314 	add.w	r3, r0, #20
 8007962:	3114      	adds	r1, #20
 8007964:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007968:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800796c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007970:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007974:	42a5      	cmp	r5, r4
 8007976:	d003      	beq.n	8007980 <__mcmp+0x2c>
 8007978:	d305      	bcc.n	8007986 <__mcmp+0x32>
 800797a:	2201      	movs	r2, #1
 800797c:	4610      	mov	r0, r2
 800797e:	bd30      	pop	{r4, r5, pc}
 8007980:	4283      	cmp	r3, r0
 8007982:	d3f3      	bcc.n	800796c <__mcmp+0x18>
 8007984:	e7fa      	b.n	800797c <__mcmp+0x28>
 8007986:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800798a:	e7f7      	b.n	800797c <__mcmp+0x28>

0800798c <__mdiff>:
 800798c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007990:	460c      	mov	r4, r1
 8007992:	4606      	mov	r6, r0
 8007994:	4611      	mov	r1, r2
 8007996:	4620      	mov	r0, r4
 8007998:	4617      	mov	r7, r2
 800799a:	f7ff ffdb 	bl	8007954 <__mcmp>
 800799e:	1e05      	subs	r5, r0, #0
 80079a0:	d110      	bne.n	80079c4 <__mdiff+0x38>
 80079a2:	4629      	mov	r1, r5
 80079a4:	4630      	mov	r0, r6
 80079a6:	f7ff fd57 	bl	8007458 <_Balloc>
 80079aa:	b930      	cbnz	r0, 80079ba <__mdiff+0x2e>
 80079ac:	4b39      	ldr	r3, [pc, #228]	; (8007a94 <__mdiff+0x108>)
 80079ae:	4602      	mov	r2, r0
 80079b0:	f240 2132 	movw	r1, #562	; 0x232
 80079b4:	4838      	ldr	r0, [pc, #224]	; (8007a98 <__mdiff+0x10c>)
 80079b6:	f000 faf3 	bl	8007fa0 <__assert_func>
 80079ba:	2301      	movs	r3, #1
 80079bc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80079c0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079c4:	bfa4      	itt	ge
 80079c6:	463b      	movge	r3, r7
 80079c8:	4627      	movge	r7, r4
 80079ca:	4630      	mov	r0, r6
 80079cc:	6879      	ldr	r1, [r7, #4]
 80079ce:	bfa6      	itte	ge
 80079d0:	461c      	movge	r4, r3
 80079d2:	2500      	movge	r5, #0
 80079d4:	2501      	movlt	r5, #1
 80079d6:	f7ff fd3f 	bl	8007458 <_Balloc>
 80079da:	b920      	cbnz	r0, 80079e6 <__mdiff+0x5a>
 80079dc:	4b2d      	ldr	r3, [pc, #180]	; (8007a94 <__mdiff+0x108>)
 80079de:	4602      	mov	r2, r0
 80079e0:	f44f 7110 	mov.w	r1, #576	; 0x240
 80079e4:	e7e6      	b.n	80079b4 <__mdiff+0x28>
 80079e6:	693e      	ldr	r6, [r7, #16]
 80079e8:	60c5      	str	r5, [r0, #12]
 80079ea:	6925      	ldr	r5, [r4, #16]
 80079ec:	f107 0114 	add.w	r1, r7, #20
 80079f0:	f104 0914 	add.w	r9, r4, #20
 80079f4:	f100 0e14 	add.w	lr, r0, #20
 80079f8:	f107 0210 	add.w	r2, r7, #16
 80079fc:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8007a00:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8007a04:	46f2      	mov	sl, lr
 8007a06:	2700      	movs	r7, #0
 8007a08:	f859 3b04 	ldr.w	r3, [r9], #4
 8007a0c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007a10:	fa1f f883 	uxth.w	r8, r3
 8007a14:	fa17 f78b 	uxtah	r7, r7, fp
 8007a18:	0c1b      	lsrs	r3, r3, #16
 8007a1a:	eba7 0808 	sub.w	r8, r7, r8
 8007a1e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007a22:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007a26:	fa1f f888 	uxth.w	r8, r8
 8007a2a:	141f      	asrs	r7, r3, #16
 8007a2c:	454d      	cmp	r5, r9
 8007a2e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007a32:	f84a 3b04 	str.w	r3, [sl], #4
 8007a36:	d8e7      	bhi.n	8007a08 <__mdiff+0x7c>
 8007a38:	1b2b      	subs	r3, r5, r4
 8007a3a:	3b15      	subs	r3, #21
 8007a3c:	f023 0303 	bic.w	r3, r3, #3
 8007a40:	3304      	adds	r3, #4
 8007a42:	3415      	adds	r4, #21
 8007a44:	42a5      	cmp	r5, r4
 8007a46:	bf38      	it	cc
 8007a48:	2304      	movcc	r3, #4
 8007a4a:	4419      	add	r1, r3
 8007a4c:	4473      	add	r3, lr
 8007a4e:	469e      	mov	lr, r3
 8007a50:	460d      	mov	r5, r1
 8007a52:	4565      	cmp	r5, ip
 8007a54:	d30e      	bcc.n	8007a74 <__mdiff+0xe8>
 8007a56:	f10c 0203 	add.w	r2, ip, #3
 8007a5a:	1a52      	subs	r2, r2, r1
 8007a5c:	f022 0203 	bic.w	r2, r2, #3
 8007a60:	3903      	subs	r1, #3
 8007a62:	458c      	cmp	ip, r1
 8007a64:	bf38      	it	cc
 8007a66:	2200      	movcc	r2, #0
 8007a68:	441a      	add	r2, r3
 8007a6a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8007a6e:	b17b      	cbz	r3, 8007a90 <__mdiff+0x104>
 8007a70:	6106      	str	r6, [r0, #16]
 8007a72:	e7a5      	b.n	80079c0 <__mdiff+0x34>
 8007a74:	f855 8b04 	ldr.w	r8, [r5], #4
 8007a78:	fa17 f488 	uxtah	r4, r7, r8
 8007a7c:	1422      	asrs	r2, r4, #16
 8007a7e:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8007a82:	b2a4      	uxth	r4, r4
 8007a84:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8007a88:	f84e 4b04 	str.w	r4, [lr], #4
 8007a8c:	1417      	asrs	r7, r2, #16
 8007a8e:	e7e0      	b.n	8007a52 <__mdiff+0xc6>
 8007a90:	3e01      	subs	r6, #1
 8007a92:	e7ea      	b.n	8007a6a <__mdiff+0xde>
 8007a94:	0800a47f 	.word	0x0800a47f
 8007a98:	0800a490 	.word	0x0800a490

08007a9c <__d2b>:
 8007a9c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007aa0:	4689      	mov	r9, r1
 8007aa2:	2101      	movs	r1, #1
 8007aa4:	ec57 6b10 	vmov	r6, r7, d0
 8007aa8:	4690      	mov	r8, r2
 8007aaa:	f7ff fcd5 	bl	8007458 <_Balloc>
 8007aae:	4604      	mov	r4, r0
 8007ab0:	b930      	cbnz	r0, 8007ac0 <__d2b+0x24>
 8007ab2:	4602      	mov	r2, r0
 8007ab4:	4b25      	ldr	r3, [pc, #148]	; (8007b4c <__d2b+0xb0>)
 8007ab6:	4826      	ldr	r0, [pc, #152]	; (8007b50 <__d2b+0xb4>)
 8007ab8:	f240 310a 	movw	r1, #778	; 0x30a
 8007abc:	f000 fa70 	bl	8007fa0 <__assert_func>
 8007ac0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8007ac4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007ac8:	bb35      	cbnz	r5, 8007b18 <__d2b+0x7c>
 8007aca:	2e00      	cmp	r6, #0
 8007acc:	9301      	str	r3, [sp, #4]
 8007ace:	d028      	beq.n	8007b22 <__d2b+0x86>
 8007ad0:	4668      	mov	r0, sp
 8007ad2:	9600      	str	r6, [sp, #0]
 8007ad4:	f7ff fd8c 	bl	80075f0 <__lo0bits>
 8007ad8:	9900      	ldr	r1, [sp, #0]
 8007ada:	b300      	cbz	r0, 8007b1e <__d2b+0x82>
 8007adc:	9a01      	ldr	r2, [sp, #4]
 8007ade:	f1c0 0320 	rsb	r3, r0, #32
 8007ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8007ae6:	430b      	orrs	r3, r1
 8007ae8:	40c2      	lsrs	r2, r0
 8007aea:	6163      	str	r3, [r4, #20]
 8007aec:	9201      	str	r2, [sp, #4]
 8007aee:	9b01      	ldr	r3, [sp, #4]
 8007af0:	61a3      	str	r3, [r4, #24]
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	bf14      	ite	ne
 8007af6:	2202      	movne	r2, #2
 8007af8:	2201      	moveq	r2, #1
 8007afa:	6122      	str	r2, [r4, #16]
 8007afc:	b1d5      	cbz	r5, 8007b34 <__d2b+0x98>
 8007afe:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007b02:	4405      	add	r5, r0
 8007b04:	f8c9 5000 	str.w	r5, [r9]
 8007b08:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007b0c:	f8c8 0000 	str.w	r0, [r8]
 8007b10:	4620      	mov	r0, r4
 8007b12:	b003      	add	sp, #12
 8007b14:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007b18:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007b1c:	e7d5      	b.n	8007aca <__d2b+0x2e>
 8007b1e:	6161      	str	r1, [r4, #20]
 8007b20:	e7e5      	b.n	8007aee <__d2b+0x52>
 8007b22:	a801      	add	r0, sp, #4
 8007b24:	f7ff fd64 	bl	80075f0 <__lo0bits>
 8007b28:	9b01      	ldr	r3, [sp, #4]
 8007b2a:	6163      	str	r3, [r4, #20]
 8007b2c:	2201      	movs	r2, #1
 8007b2e:	6122      	str	r2, [r4, #16]
 8007b30:	3020      	adds	r0, #32
 8007b32:	e7e3      	b.n	8007afc <__d2b+0x60>
 8007b34:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007b38:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007b3c:	f8c9 0000 	str.w	r0, [r9]
 8007b40:	6918      	ldr	r0, [r3, #16]
 8007b42:	f7ff fd35 	bl	80075b0 <__hi0bits>
 8007b46:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007b4a:	e7df      	b.n	8007b0c <__d2b+0x70>
 8007b4c:	0800a47f 	.word	0x0800a47f
 8007b50:	0800a490 	.word	0x0800a490

08007b54 <_calloc_r>:
 8007b54:	b513      	push	{r0, r1, r4, lr}
 8007b56:	434a      	muls	r2, r1
 8007b58:	4611      	mov	r1, r2
 8007b5a:	9201      	str	r2, [sp, #4]
 8007b5c:	f000 f85a 	bl	8007c14 <_malloc_r>
 8007b60:	4604      	mov	r4, r0
 8007b62:	b118      	cbz	r0, 8007b6c <_calloc_r+0x18>
 8007b64:	9a01      	ldr	r2, [sp, #4]
 8007b66:	2100      	movs	r1, #0
 8007b68:	f7fe f940 	bl	8005dec <memset>
 8007b6c:	4620      	mov	r0, r4
 8007b6e:	b002      	add	sp, #8
 8007b70:	bd10      	pop	{r4, pc}
	...

08007b74 <_free_r>:
 8007b74:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007b76:	2900      	cmp	r1, #0
 8007b78:	d048      	beq.n	8007c0c <_free_r+0x98>
 8007b7a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007b7e:	9001      	str	r0, [sp, #4]
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	f1a1 0404 	sub.w	r4, r1, #4
 8007b86:	bfb8      	it	lt
 8007b88:	18e4      	addlt	r4, r4, r3
 8007b8a:	f000 fa65 	bl	8008058 <__malloc_lock>
 8007b8e:	4a20      	ldr	r2, [pc, #128]	; (8007c10 <_free_r+0x9c>)
 8007b90:	9801      	ldr	r0, [sp, #4]
 8007b92:	6813      	ldr	r3, [r2, #0]
 8007b94:	4615      	mov	r5, r2
 8007b96:	b933      	cbnz	r3, 8007ba6 <_free_r+0x32>
 8007b98:	6063      	str	r3, [r4, #4]
 8007b9a:	6014      	str	r4, [r2, #0]
 8007b9c:	b003      	add	sp, #12
 8007b9e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007ba2:	f000 ba5f 	b.w	8008064 <__malloc_unlock>
 8007ba6:	42a3      	cmp	r3, r4
 8007ba8:	d90b      	bls.n	8007bc2 <_free_r+0x4e>
 8007baa:	6821      	ldr	r1, [r4, #0]
 8007bac:	1862      	adds	r2, r4, r1
 8007bae:	4293      	cmp	r3, r2
 8007bb0:	bf04      	itt	eq
 8007bb2:	681a      	ldreq	r2, [r3, #0]
 8007bb4:	685b      	ldreq	r3, [r3, #4]
 8007bb6:	6063      	str	r3, [r4, #4]
 8007bb8:	bf04      	itt	eq
 8007bba:	1852      	addeq	r2, r2, r1
 8007bbc:	6022      	streq	r2, [r4, #0]
 8007bbe:	602c      	str	r4, [r5, #0]
 8007bc0:	e7ec      	b.n	8007b9c <_free_r+0x28>
 8007bc2:	461a      	mov	r2, r3
 8007bc4:	685b      	ldr	r3, [r3, #4]
 8007bc6:	b10b      	cbz	r3, 8007bcc <_free_r+0x58>
 8007bc8:	42a3      	cmp	r3, r4
 8007bca:	d9fa      	bls.n	8007bc2 <_free_r+0x4e>
 8007bcc:	6811      	ldr	r1, [r2, #0]
 8007bce:	1855      	adds	r5, r2, r1
 8007bd0:	42a5      	cmp	r5, r4
 8007bd2:	d10b      	bne.n	8007bec <_free_r+0x78>
 8007bd4:	6824      	ldr	r4, [r4, #0]
 8007bd6:	4421      	add	r1, r4
 8007bd8:	1854      	adds	r4, r2, r1
 8007bda:	42a3      	cmp	r3, r4
 8007bdc:	6011      	str	r1, [r2, #0]
 8007bde:	d1dd      	bne.n	8007b9c <_free_r+0x28>
 8007be0:	681c      	ldr	r4, [r3, #0]
 8007be2:	685b      	ldr	r3, [r3, #4]
 8007be4:	6053      	str	r3, [r2, #4]
 8007be6:	4421      	add	r1, r4
 8007be8:	6011      	str	r1, [r2, #0]
 8007bea:	e7d7      	b.n	8007b9c <_free_r+0x28>
 8007bec:	d902      	bls.n	8007bf4 <_free_r+0x80>
 8007bee:	230c      	movs	r3, #12
 8007bf0:	6003      	str	r3, [r0, #0]
 8007bf2:	e7d3      	b.n	8007b9c <_free_r+0x28>
 8007bf4:	6825      	ldr	r5, [r4, #0]
 8007bf6:	1961      	adds	r1, r4, r5
 8007bf8:	428b      	cmp	r3, r1
 8007bfa:	bf04      	itt	eq
 8007bfc:	6819      	ldreq	r1, [r3, #0]
 8007bfe:	685b      	ldreq	r3, [r3, #4]
 8007c00:	6063      	str	r3, [r4, #4]
 8007c02:	bf04      	itt	eq
 8007c04:	1949      	addeq	r1, r1, r5
 8007c06:	6021      	streq	r1, [r4, #0]
 8007c08:	6054      	str	r4, [r2, #4]
 8007c0a:	e7c7      	b.n	8007b9c <_free_r+0x28>
 8007c0c:	b003      	add	sp, #12
 8007c0e:	bd30      	pop	{r4, r5, pc}
 8007c10:	20000618 	.word	0x20000618

08007c14 <_malloc_r>:
 8007c14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c16:	1ccd      	adds	r5, r1, #3
 8007c18:	f025 0503 	bic.w	r5, r5, #3
 8007c1c:	3508      	adds	r5, #8
 8007c1e:	2d0c      	cmp	r5, #12
 8007c20:	bf38      	it	cc
 8007c22:	250c      	movcc	r5, #12
 8007c24:	2d00      	cmp	r5, #0
 8007c26:	4606      	mov	r6, r0
 8007c28:	db01      	blt.n	8007c2e <_malloc_r+0x1a>
 8007c2a:	42a9      	cmp	r1, r5
 8007c2c:	d903      	bls.n	8007c36 <_malloc_r+0x22>
 8007c2e:	230c      	movs	r3, #12
 8007c30:	6033      	str	r3, [r6, #0]
 8007c32:	2000      	movs	r0, #0
 8007c34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007c36:	f000 fa0f 	bl	8008058 <__malloc_lock>
 8007c3a:	4921      	ldr	r1, [pc, #132]	; (8007cc0 <_malloc_r+0xac>)
 8007c3c:	680a      	ldr	r2, [r1, #0]
 8007c3e:	4614      	mov	r4, r2
 8007c40:	b99c      	cbnz	r4, 8007c6a <_malloc_r+0x56>
 8007c42:	4f20      	ldr	r7, [pc, #128]	; (8007cc4 <_malloc_r+0xb0>)
 8007c44:	683b      	ldr	r3, [r7, #0]
 8007c46:	b923      	cbnz	r3, 8007c52 <_malloc_r+0x3e>
 8007c48:	4621      	mov	r1, r4
 8007c4a:	4630      	mov	r0, r6
 8007c4c:	f000 f998 	bl	8007f80 <_sbrk_r>
 8007c50:	6038      	str	r0, [r7, #0]
 8007c52:	4629      	mov	r1, r5
 8007c54:	4630      	mov	r0, r6
 8007c56:	f000 f993 	bl	8007f80 <_sbrk_r>
 8007c5a:	1c43      	adds	r3, r0, #1
 8007c5c:	d123      	bne.n	8007ca6 <_malloc_r+0x92>
 8007c5e:	230c      	movs	r3, #12
 8007c60:	6033      	str	r3, [r6, #0]
 8007c62:	4630      	mov	r0, r6
 8007c64:	f000 f9fe 	bl	8008064 <__malloc_unlock>
 8007c68:	e7e3      	b.n	8007c32 <_malloc_r+0x1e>
 8007c6a:	6823      	ldr	r3, [r4, #0]
 8007c6c:	1b5b      	subs	r3, r3, r5
 8007c6e:	d417      	bmi.n	8007ca0 <_malloc_r+0x8c>
 8007c70:	2b0b      	cmp	r3, #11
 8007c72:	d903      	bls.n	8007c7c <_malloc_r+0x68>
 8007c74:	6023      	str	r3, [r4, #0]
 8007c76:	441c      	add	r4, r3
 8007c78:	6025      	str	r5, [r4, #0]
 8007c7a:	e004      	b.n	8007c86 <_malloc_r+0x72>
 8007c7c:	6863      	ldr	r3, [r4, #4]
 8007c7e:	42a2      	cmp	r2, r4
 8007c80:	bf0c      	ite	eq
 8007c82:	600b      	streq	r3, [r1, #0]
 8007c84:	6053      	strne	r3, [r2, #4]
 8007c86:	4630      	mov	r0, r6
 8007c88:	f000 f9ec 	bl	8008064 <__malloc_unlock>
 8007c8c:	f104 000b 	add.w	r0, r4, #11
 8007c90:	1d23      	adds	r3, r4, #4
 8007c92:	f020 0007 	bic.w	r0, r0, #7
 8007c96:	1ac2      	subs	r2, r0, r3
 8007c98:	d0cc      	beq.n	8007c34 <_malloc_r+0x20>
 8007c9a:	1a1b      	subs	r3, r3, r0
 8007c9c:	50a3      	str	r3, [r4, r2]
 8007c9e:	e7c9      	b.n	8007c34 <_malloc_r+0x20>
 8007ca0:	4622      	mov	r2, r4
 8007ca2:	6864      	ldr	r4, [r4, #4]
 8007ca4:	e7cc      	b.n	8007c40 <_malloc_r+0x2c>
 8007ca6:	1cc4      	adds	r4, r0, #3
 8007ca8:	f024 0403 	bic.w	r4, r4, #3
 8007cac:	42a0      	cmp	r0, r4
 8007cae:	d0e3      	beq.n	8007c78 <_malloc_r+0x64>
 8007cb0:	1a21      	subs	r1, r4, r0
 8007cb2:	4630      	mov	r0, r6
 8007cb4:	f000 f964 	bl	8007f80 <_sbrk_r>
 8007cb8:	3001      	adds	r0, #1
 8007cba:	d1dd      	bne.n	8007c78 <_malloc_r+0x64>
 8007cbc:	e7cf      	b.n	8007c5e <_malloc_r+0x4a>
 8007cbe:	bf00      	nop
 8007cc0:	20000618 	.word	0x20000618
 8007cc4:	2000061c 	.word	0x2000061c

08007cc8 <__ssputs_r>:
 8007cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ccc:	688e      	ldr	r6, [r1, #8]
 8007cce:	429e      	cmp	r6, r3
 8007cd0:	4682      	mov	sl, r0
 8007cd2:	460c      	mov	r4, r1
 8007cd4:	4690      	mov	r8, r2
 8007cd6:	461f      	mov	r7, r3
 8007cd8:	d838      	bhi.n	8007d4c <__ssputs_r+0x84>
 8007cda:	898a      	ldrh	r2, [r1, #12]
 8007cdc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007ce0:	d032      	beq.n	8007d48 <__ssputs_r+0x80>
 8007ce2:	6825      	ldr	r5, [r4, #0]
 8007ce4:	6909      	ldr	r1, [r1, #16]
 8007ce6:	eba5 0901 	sub.w	r9, r5, r1
 8007cea:	6965      	ldr	r5, [r4, #20]
 8007cec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007cf0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007cf4:	3301      	adds	r3, #1
 8007cf6:	444b      	add	r3, r9
 8007cf8:	106d      	asrs	r5, r5, #1
 8007cfa:	429d      	cmp	r5, r3
 8007cfc:	bf38      	it	cc
 8007cfe:	461d      	movcc	r5, r3
 8007d00:	0553      	lsls	r3, r2, #21
 8007d02:	d531      	bpl.n	8007d68 <__ssputs_r+0xa0>
 8007d04:	4629      	mov	r1, r5
 8007d06:	f7ff ff85 	bl	8007c14 <_malloc_r>
 8007d0a:	4606      	mov	r6, r0
 8007d0c:	b950      	cbnz	r0, 8007d24 <__ssputs_r+0x5c>
 8007d0e:	230c      	movs	r3, #12
 8007d10:	f8ca 3000 	str.w	r3, [sl]
 8007d14:	89a3      	ldrh	r3, [r4, #12]
 8007d16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007d1a:	81a3      	strh	r3, [r4, #12]
 8007d1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007d20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d24:	6921      	ldr	r1, [r4, #16]
 8007d26:	464a      	mov	r2, r9
 8007d28:	f7fe f852 	bl	8005dd0 <memcpy>
 8007d2c:	89a3      	ldrh	r3, [r4, #12]
 8007d2e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007d32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d36:	81a3      	strh	r3, [r4, #12]
 8007d38:	6126      	str	r6, [r4, #16]
 8007d3a:	6165      	str	r5, [r4, #20]
 8007d3c:	444e      	add	r6, r9
 8007d3e:	eba5 0509 	sub.w	r5, r5, r9
 8007d42:	6026      	str	r6, [r4, #0]
 8007d44:	60a5      	str	r5, [r4, #8]
 8007d46:	463e      	mov	r6, r7
 8007d48:	42be      	cmp	r6, r7
 8007d4a:	d900      	bls.n	8007d4e <__ssputs_r+0x86>
 8007d4c:	463e      	mov	r6, r7
 8007d4e:	4632      	mov	r2, r6
 8007d50:	6820      	ldr	r0, [r4, #0]
 8007d52:	4641      	mov	r1, r8
 8007d54:	f000 f966 	bl	8008024 <memmove>
 8007d58:	68a3      	ldr	r3, [r4, #8]
 8007d5a:	6822      	ldr	r2, [r4, #0]
 8007d5c:	1b9b      	subs	r3, r3, r6
 8007d5e:	4432      	add	r2, r6
 8007d60:	60a3      	str	r3, [r4, #8]
 8007d62:	6022      	str	r2, [r4, #0]
 8007d64:	2000      	movs	r0, #0
 8007d66:	e7db      	b.n	8007d20 <__ssputs_r+0x58>
 8007d68:	462a      	mov	r2, r5
 8007d6a:	f000 f981 	bl	8008070 <_realloc_r>
 8007d6e:	4606      	mov	r6, r0
 8007d70:	2800      	cmp	r0, #0
 8007d72:	d1e1      	bne.n	8007d38 <__ssputs_r+0x70>
 8007d74:	6921      	ldr	r1, [r4, #16]
 8007d76:	4650      	mov	r0, sl
 8007d78:	f7ff fefc 	bl	8007b74 <_free_r>
 8007d7c:	e7c7      	b.n	8007d0e <__ssputs_r+0x46>
	...

08007d80 <_svfiprintf_r>:
 8007d80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d84:	4698      	mov	r8, r3
 8007d86:	898b      	ldrh	r3, [r1, #12]
 8007d88:	061b      	lsls	r3, r3, #24
 8007d8a:	b09d      	sub	sp, #116	; 0x74
 8007d8c:	4607      	mov	r7, r0
 8007d8e:	460d      	mov	r5, r1
 8007d90:	4614      	mov	r4, r2
 8007d92:	d50e      	bpl.n	8007db2 <_svfiprintf_r+0x32>
 8007d94:	690b      	ldr	r3, [r1, #16]
 8007d96:	b963      	cbnz	r3, 8007db2 <_svfiprintf_r+0x32>
 8007d98:	2140      	movs	r1, #64	; 0x40
 8007d9a:	f7ff ff3b 	bl	8007c14 <_malloc_r>
 8007d9e:	6028      	str	r0, [r5, #0]
 8007da0:	6128      	str	r0, [r5, #16]
 8007da2:	b920      	cbnz	r0, 8007dae <_svfiprintf_r+0x2e>
 8007da4:	230c      	movs	r3, #12
 8007da6:	603b      	str	r3, [r7, #0]
 8007da8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007dac:	e0d1      	b.n	8007f52 <_svfiprintf_r+0x1d2>
 8007dae:	2340      	movs	r3, #64	; 0x40
 8007db0:	616b      	str	r3, [r5, #20]
 8007db2:	2300      	movs	r3, #0
 8007db4:	9309      	str	r3, [sp, #36]	; 0x24
 8007db6:	2320      	movs	r3, #32
 8007db8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007dbc:	f8cd 800c 	str.w	r8, [sp, #12]
 8007dc0:	2330      	movs	r3, #48	; 0x30
 8007dc2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007f6c <_svfiprintf_r+0x1ec>
 8007dc6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007dca:	f04f 0901 	mov.w	r9, #1
 8007dce:	4623      	mov	r3, r4
 8007dd0:	469a      	mov	sl, r3
 8007dd2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007dd6:	b10a      	cbz	r2, 8007ddc <_svfiprintf_r+0x5c>
 8007dd8:	2a25      	cmp	r2, #37	; 0x25
 8007dda:	d1f9      	bne.n	8007dd0 <_svfiprintf_r+0x50>
 8007ddc:	ebba 0b04 	subs.w	fp, sl, r4
 8007de0:	d00b      	beq.n	8007dfa <_svfiprintf_r+0x7a>
 8007de2:	465b      	mov	r3, fp
 8007de4:	4622      	mov	r2, r4
 8007de6:	4629      	mov	r1, r5
 8007de8:	4638      	mov	r0, r7
 8007dea:	f7ff ff6d 	bl	8007cc8 <__ssputs_r>
 8007dee:	3001      	adds	r0, #1
 8007df0:	f000 80aa 	beq.w	8007f48 <_svfiprintf_r+0x1c8>
 8007df4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007df6:	445a      	add	r2, fp
 8007df8:	9209      	str	r2, [sp, #36]	; 0x24
 8007dfa:	f89a 3000 	ldrb.w	r3, [sl]
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	f000 80a2 	beq.w	8007f48 <_svfiprintf_r+0x1c8>
 8007e04:	2300      	movs	r3, #0
 8007e06:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007e0a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007e0e:	f10a 0a01 	add.w	sl, sl, #1
 8007e12:	9304      	str	r3, [sp, #16]
 8007e14:	9307      	str	r3, [sp, #28]
 8007e16:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007e1a:	931a      	str	r3, [sp, #104]	; 0x68
 8007e1c:	4654      	mov	r4, sl
 8007e1e:	2205      	movs	r2, #5
 8007e20:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e24:	4851      	ldr	r0, [pc, #324]	; (8007f6c <_svfiprintf_r+0x1ec>)
 8007e26:	f7f8 f9e3 	bl	80001f0 <memchr>
 8007e2a:	9a04      	ldr	r2, [sp, #16]
 8007e2c:	b9d8      	cbnz	r0, 8007e66 <_svfiprintf_r+0xe6>
 8007e2e:	06d0      	lsls	r0, r2, #27
 8007e30:	bf44      	itt	mi
 8007e32:	2320      	movmi	r3, #32
 8007e34:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007e38:	0711      	lsls	r1, r2, #28
 8007e3a:	bf44      	itt	mi
 8007e3c:	232b      	movmi	r3, #43	; 0x2b
 8007e3e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007e42:	f89a 3000 	ldrb.w	r3, [sl]
 8007e46:	2b2a      	cmp	r3, #42	; 0x2a
 8007e48:	d015      	beq.n	8007e76 <_svfiprintf_r+0xf6>
 8007e4a:	9a07      	ldr	r2, [sp, #28]
 8007e4c:	4654      	mov	r4, sl
 8007e4e:	2000      	movs	r0, #0
 8007e50:	f04f 0c0a 	mov.w	ip, #10
 8007e54:	4621      	mov	r1, r4
 8007e56:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007e5a:	3b30      	subs	r3, #48	; 0x30
 8007e5c:	2b09      	cmp	r3, #9
 8007e5e:	d94e      	bls.n	8007efe <_svfiprintf_r+0x17e>
 8007e60:	b1b0      	cbz	r0, 8007e90 <_svfiprintf_r+0x110>
 8007e62:	9207      	str	r2, [sp, #28]
 8007e64:	e014      	b.n	8007e90 <_svfiprintf_r+0x110>
 8007e66:	eba0 0308 	sub.w	r3, r0, r8
 8007e6a:	fa09 f303 	lsl.w	r3, r9, r3
 8007e6e:	4313      	orrs	r3, r2
 8007e70:	9304      	str	r3, [sp, #16]
 8007e72:	46a2      	mov	sl, r4
 8007e74:	e7d2      	b.n	8007e1c <_svfiprintf_r+0x9c>
 8007e76:	9b03      	ldr	r3, [sp, #12]
 8007e78:	1d19      	adds	r1, r3, #4
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	9103      	str	r1, [sp, #12]
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	bfbb      	ittet	lt
 8007e82:	425b      	neglt	r3, r3
 8007e84:	f042 0202 	orrlt.w	r2, r2, #2
 8007e88:	9307      	strge	r3, [sp, #28]
 8007e8a:	9307      	strlt	r3, [sp, #28]
 8007e8c:	bfb8      	it	lt
 8007e8e:	9204      	strlt	r2, [sp, #16]
 8007e90:	7823      	ldrb	r3, [r4, #0]
 8007e92:	2b2e      	cmp	r3, #46	; 0x2e
 8007e94:	d10c      	bne.n	8007eb0 <_svfiprintf_r+0x130>
 8007e96:	7863      	ldrb	r3, [r4, #1]
 8007e98:	2b2a      	cmp	r3, #42	; 0x2a
 8007e9a:	d135      	bne.n	8007f08 <_svfiprintf_r+0x188>
 8007e9c:	9b03      	ldr	r3, [sp, #12]
 8007e9e:	1d1a      	adds	r2, r3, #4
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	9203      	str	r2, [sp, #12]
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	bfb8      	it	lt
 8007ea8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007eac:	3402      	adds	r4, #2
 8007eae:	9305      	str	r3, [sp, #20]
 8007eb0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007f7c <_svfiprintf_r+0x1fc>
 8007eb4:	7821      	ldrb	r1, [r4, #0]
 8007eb6:	2203      	movs	r2, #3
 8007eb8:	4650      	mov	r0, sl
 8007eba:	f7f8 f999 	bl	80001f0 <memchr>
 8007ebe:	b140      	cbz	r0, 8007ed2 <_svfiprintf_r+0x152>
 8007ec0:	2340      	movs	r3, #64	; 0x40
 8007ec2:	eba0 000a 	sub.w	r0, r0, sl
 8007ec6:	fa03 f000 	lsl.w	r0, r3, r0
 8007eca:	9b04      	ldr	r3, [sp, #16]
 8007ecc:	4303      	orrs	r3, r0
 8007ece:	3401      	adds	r4, #1
 8007ed0:	9304      	str	r3, [sp, #16]
 8007ed2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ed6:	4826      	ldr	r0, [pc, #152]	; (8007f70 <_svfiprintf_r+0x1f0>)
 8007ed8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007edc:	2206      	movs	r2, #6
 8007ede:	f7f8 f987 	bl	80001f0 <memchr>
 8007ee2:	2800      	cmp	r0, #0
 8007ee4:	d038      	beq.n	8007f58 <_svfiprintf_r+0x1d8>
 8007ee6:	4b23      	ldr	r3, [pc, #140]	; (8007f74 <_svfiprintf_r+0x1f4>)
 8007ee8:	bb1b      	cbnz	r3, 8007f32 <_svfiprintf_r+0x1b2>
 8007eea:	9b03      	ldr	r3, [sp, #12]
 8007eec:	3307      	adds	r3, #7
 8007eee:	f023 0307 	bic.w	r3, r3, #7
 8007ef2:	3308      	adds	r3, #8
 8007ef4:	9303      	str	r3, [sp, #12]
 8007ef6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ef8:	4433      	add	r3, r6
 8007efa:	9309      	str	r3, [sp, #36]	; 0x24
 8007efc:	e767      	b.n	8007dce <_svfiprintf_r+0x4e>
 8007efe:	fb0c 3202 	mla	r2, ip, r2, r3
 8007f02:	460c      	mov	r4, r1
 8007f04:	2001      	movs	r0, #1
 8007f06:	e7a5      	b.n	8007e54 <_svfiprintf_r+0xd4>
 8007f08:	2300      	movs	r3, #0
 8007f0a:	3401      	adds	r4, #1
 8007f0c:	9305      	str	r3, [sp, #20]
 8007f0e:	4619      	mov	r1, r3
 8007f10:	f04f 0c0a 	mov.w	ip, #10
 8007f14:	4620      	mov	r0, r4
 8007f16:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007f1a:	3a30      	subs	r2, #48	; 0x30
 8007f1c:	2a09      	cmp	r2, #9
 8007f1e:	d903      	bls.n	8007f28 <_svfiprintf_r+0x1a8>
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d0c5      	beq.n	8007eb0 <_svfiprintf_r+0x130>
 8007f24:	9105      	str	r1, [sp, #20]
 8007f26:	e7c3      	b.n	8007eb0 <_svfiprintf_r+0x130>
 8007f28:	fb0c 2101 	mla	r1, ip, r1, r2
 8007f2c:	4604      	mov	r4, r0
 8007f2e:	2301      	movs	r3, #1
 8007f30:	e7f0      	b.n	8007f14 <_svfiprintf_r+0x194>
 8007f32:	ab03      	add	r3, sp, #12
 8007f34:	9300      	str	r3, [sp, #0]
 8007f36:	462a      	mov	r2, r5
 8007f38:	4b0f      	ldr	r3, [pc, #60]	; (8007f78 <_svfiprintf_r+0x1f8>)
 8007f3a:	a904      	add	r1, sp, #16
 8007f3c:	4638      	mov	r0, r7
 8007f3e:	f7fd fffd 	bl	8005f3c <_printf_float>
 8007f42:	1c42      	adds	r2, r0, #1
 8007f44:	4606      	mov	r6, r0
 8007f46:	d1d6      	bne.n	8007ef6 <_svfiprintf_r+0x176>
 8007f48:	89ab      	ldrh	r3, [r5, #12]
 8007f4a:	065b      	lsls	r3, r3, #25
 8007f4c:	f53f af2c 	bmi.w	8007da8 <_svfiprintf_r+0x28>
 8007f50:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007f52:	b01d      	add	sp, #116	; 0x74
 8007f54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f58:	ab03      	add	r3, sp, #12
 8007f5a:	9300      	str	r3, [sp, #0]
 8007f5c:	462a      	mov	r2, r5
 8007f5e:	4b06      	ldr	r3, [pc, #24]	; (8007f78 <_svfiprintf_r+0x1f8>)
 8007f60:	a904      	add	r1, sp, #16
 8007f62:	4638      	mov	r0, r7
 8007f64:	f7fe fa8e 	bl	8006484 <_printf_i>
 8007f68:	e7eb      	b.n	8007f42 <_svfiprintf_r+0x1c2>
 8007f6a:	bf00      	nop
 8007f6c:	0800a5ec 	.word	0x0800a5ec
 8007f70:	0800a5f6 	.word	0x0800a5f6
 8007f74:	08005f3d 	.word	0x08005f3d
 8007f78:	08007cc9 	.word	0x08007cc9
 8007f7c:	0800a5f2 	.word	0x0800a5f2

08007f80 <_sbrk_r>:
 8007f80:	b538      	push	{r3, r4, r5, lr}
 8007f82:	4d06      	ldr	r5, [pc, #24]	; (8007f9c <_sbrk_r+0x1c>)
 8007f84:	2300      	movs	r3, #0
 8007f86:	4604      	mov	r4, r0
 8007f88:	4608      	mov	r0, r1
 8007f8a:	602b      	str	r3, [r5, #0]
 8007f8c:	f7fa fe3e 	bl	8002c0c <_sbrk>
 8007f90:	1c43      	adds	r3, r0, #1
 8007f92:	d102      	bne.n	8007f9a <_sbrk_r+0x1a>
 8007f94:	682b      	ldr	r3, [r5, #0]
 8007f96:	b103      	cbz	r3, 8007f9a <_sbrk_r+0x1a>
 8007f98:	6023      	str	r3, [r4, #0]
 8007f9a:	bd38      	pop	{r3, r4, r5, pc}
 8007f9c:	2000074c 	.word	0x2000074c

08007fa0 <__assert_func>:
 8007fa0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007fa2:	4614      	mov	r4, r2
 8007fa4:	461a      	mov	r2, r3
 8007fa6:	4b09      	ldr	r3, [pc, #36]	; (8007fcc <__assert_func+0x2c>)
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	4605      	mov	r5, r0
 8007fac:	68d8      	ldr	r0, [r3, #12]
 8007fae:	b14c      	cbz	r4, 8007fc4 <__assert_func+0x24>
 8007fb0:	4b07      	ldr	r3, [pc, #28]	; (8007fd0 <__assert_func+0x30>)
 8007fb2:	9100      	str	r1, [sp, #0]
 8007fb4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007fb8:	4906      	ldr	r1, [pc, #24]	; (8007fd4 <__assert_func+0x34>)
 8007fba:	462b      	mov	r3, r5
 8007fbc:	f000 f80e 	bl	8007fdc <fiprintf>
 8007fc0:	f000 faa4 	bl	800850c <abort>
 8007fc4:	4b04      	ldr	r3, [pc, #16]	; (8007fd8 <__assert_func+0x38>)
 8007fc6:	461c      	mov	r4, r3
 8007fc8:	e7f3      	b.n	8007fb2 <__assert_func+0x12>
 8007fca:	bf00      	nop
 8007fcc:	2000001c 	.word	0x2000001c
 8007fd0:	0800a5fd 	.word	0x0800a5fd
 8007fd4:	0800a60a 	.word	0x0800a60a
 8007fd8:	0800a638 	.word	0x0800a638

08007fdc <fiprintf>:
 8007fdc:	b40e      	push	{r1, r2, r3}
 8007fde:	b503      	push	{r0, r1, lr}
 8007fe0:	4601      	mov	r1, r0
 8007fe2:	ab03      	add	r3, sp, #12
 8007fe4:	4805      	ldr	r0, [pc, #20]	; (8007ffc <fiprintf+0x20>)
 8007fe6:	f853 2b04 	ldr.w	r2, [r3], #4
 8007fea:	6800      	ldr	r0, [r0, #0]
 8007fec:	9301      	str	r3, [sp, #4]
 8007fee:	f000 f88f 	bl	8008110 <_vfiprintf_r>
 8007ff2:	b002      	add	sp, #8
 8007ff4:	f85d eb04 	ldr.w	lr, [sp], #4
 8007ff8:	b003      	add	sp, #12
 8007ffa:	4770      	bx	lr
 8007ffc:	2000001c 	.word	0x2000001c

08008000 <__ascii_mbtowc>:
 8008000:	b082      	sub	sp, #8
 8008002:	b901      	cbnz	r1, 8008006 <__ascii_mbtowc+0x6>
 8008004:	a901      	add	r1, sp, #4
 8008006:	b142      	cbz	r2, 800801a <__ascii_mbtowc+0x1a>
 8008008:	b14b      	cbz	r3, 800801e <__ascii_mbtowc+0x1e>
 800800a:	7813      	ldrb	r3, [r2, #0]
 800800c:	600b      	str	r3, [r1, #0]
 800800e:	7812      	ldrb	r2, [r2, #0]
 8008010:	1e10      	subs	r0, r2, #0
 8008012:	bf18      	it	ne
 8008014:	2001      	movne	r0, #1
 8008016:	b002      	add	sp, #8
 8008018:	4770      	bx	lr
 800801a:	4610      	mov	r0, r2
 800801c:	e7fb      	b.n	8008016 <__ascii_mbtowc+0x16>
 800801e:	f06f 0001 	mvn.w	r0, #1
 8008022:	e7f8      	b.n	8008016 <__ascii_mbtowc+0x16>

08008024 <memmove>:
 8008024:	4288      	cmp	r0, r1
 8008026:	b510      	push	{r4, lr}
 8008028:	eb01 0402 	add.w	r4, r1, r2
 800802c:	d902      	bls.n	8008034 <memmove+0x10>
 800802e:	4284      	cmp	r4, r0
 8008030:	4623      	mov	r3, r4
 8008032:	d807      	bhi.n	8008044 <memmove+0x20>
 8008034:	1e43      	subs	r3, r0, #1
 8008036:	42a1      	cmp	r1, r4
 8008038:	d008      	beq.n	800804c <memmove+0x28>
 800803a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800803e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008042:	e7f8      	b.n	8008036 <memmove+0x12>
 8008044:	4402      	add	r2, r0
 8008046:	4601      	mov	r1, r0
 8008048:	428a      	cmp	r2, r1
 800804a:	d100      	bne.n	800804e <memmove+0x2a>
 800804c:	bd10      	pop	{r4, pc}
 800804e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008052:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008056:	e7f7      	b.n	8008048 <memmove+0x24>

08008058 <__malloc_lock>:
 8008058:	4801      	ldr	r0, [pc, #4]	; (8008060 <__malloc_lock+0x8>)
 800805a:	f000 bc17 	b.w	800888c <__retarget_lock_acquire_recursive>
 800805e:	bf00      	nop
 8008060:	20000754 	.word	0x20000754

08008064 <__malloc_unlock>:
 8008064:	4801      	ldr	r0, [pc, #4]	; (800806c <__malloc_unlock+0x8>)
 8008066:	f000 bc12 	b.w	800888e <__retarget_lock_release_recursive>
 800806a:	bf00      	nop
 800806c:	20000754 	.word	0x20000754

08008070 <_realloc_r>:
 8008070:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008072:	4607      	mov	r7, r0
 8008074:	4614      	mov	r4, r2
 8008076:	460e      	mov	r6, r1
 8008078:	b921      	cbnz	r1, 8008084 <_realloc_r+0x14>
 800807a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800807e:	4611      	mov	r1, r2
 8008080:	f7ff bdc8 	b.w	8007c14 <_malloc_r>
 8008084:	b922      	cbnz	r2, 8008090 <_realloc_r+0x20>
 8008086:	f7ff fd75 	bl	8007b74 <_free_r>
 800808a:	4625      	mov	r5, r4
 800808c:	4628      	mov	r0, r5
 800808e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008090:	f000 fc62 	bl	8008958 <_malloc_usable_size_r>
 8008094:	42a0      	cmp	r0, r4
 8008096:	d20f      	bcs.n	80080b8 <_realloc_r+0x48>
 8008098:	4621      	mov	r1, r4
 800809a:	4638      	mov	r0, r7
 800809c:	f7ff fdba 	bl	8007c14 <_malloc_r>
 80080a0:	4605      	mov	r5, r0
 80080a2:	2800      	cmp	r0, #0
 80080a4:	d0f2      	beq.n	800808c <_realloc_r+0x1c>
 80080a6:	4631      	mov	r1, r6
 80080a8:	4622      	mov	r2, r4
 80080aa:	f7fd fe91 	bl	8005dd0 <memcpy>
 80080ae:	4631      	mov	r1, r6
 80080b0:	4638      	mov	r0, r7
 80080b2:	f7ff fd5f 	bl	8007b74 <_free_r>
 80080b6:	e7e9      	b.n	800808c <_realloc_r+0x1c>
 80080b8:	4635      	mov	r5, r6
 80080ba:	e7e7      	b.n	800808c <_realloc_r+0x1c>

080080bc <__sfputc_r>:
 80080bc:	6893      	ldr	r3, [r2, #8]
 80080be:	3b01      	subs	r3, #1
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	b410      	push	{r4}
 80080c4:	6093      	str	r3, [r2, #8]
 80080c6:	da08      	bge.n	80080da <__sfputc_r+0x1e>
 80080c8:	6994      	ldr	r4, [r2, #24]
 80080ca:	42a3      	cmp	r3, r4
 80080cc:	db01      	blt.n	80080d2 <__sfputc_r+0x16>
 80080ce:	290a      	cmp	r1, #10
 80080d0:	d103      	bne.n	80080da <__sfputc_r+0x1e>
 80080d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80080d6:	f000 b94b 	b.w	8008370 <__swbuf_r>
 80080da:	6813      	ldr	r3, [r2, #0]
 80080dc:	1c58      	adds	r0, r3, #1
 80080de:	6010      	str	r0, [r2, #0]
 80080e0:	7019      	strb	r1, [r3, #0]
 80080e2:	4608      	mov	r0, r1
 80080e4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80080e8:	4770      	bx	lr

080080ea <__sfputs_r>:
 80080ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080ec:	4606      	mov	r6, r0
 80080ee:	460f      	mov	r7, r1
 80080f0:	4614      	mov	r4, r2
 80080f2:	18d5      	adds	r5, r2, r3
 80080f4:	42ac      	cmp	r4, r5
 80080f6:	d101      	bne.n	80080fc <__sfputs_r+0x12>
 80080f8:	2000      	movs	r0, #0
 80080fa:	e007      	b.n	800810c <__sfputs_r+0x22>
 80080fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008100:	463a      	mov	r2, r7
 8008102:	4630      	mov	r0, r6
 8008104:	f7ff ffda 	bl	80080bc <__sfputc_r>
 8008108:	1c43      	adds	r3, r0, #1
 800810a:	d1f3      	bne.n	80080f4 <__sfputs_r+0xa>
 800810c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008110 <_vfiprintf_r>:
 8008110:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008114:	460d      	mov	r5, r1
 8008116:	b09d      	sub	sp, #116	; 0x74
 8008118:	4614      	mov	r4, r2
 800811a:	4698      	mov	r8, r3
 800811c:	4606      	mov	r6, r0
 800811e:	b118      	cbz	r0, 8008128 <_vfiprintf_r+0x18>
 8008120:	6983      	ldr	r3, [r0, #24]
 8008122:	b90b      	cbnz	r3, 8008128 <_vfiprintf_r+0x18>
 8008124:	f000 fb14 	bl	8008750 <__sinit>
 8008128:	4b89      	ldr	r3, [pc, #548]	; (8008350 <_vfiprintf_r+0x240>)
 800812a:	429d      	cmp	r5, r3
 800812c:	d11b      	bne.n	8008166 <_vfiprintf_r+0x56>
 800812e:	6875      	ldr	r5, [r6, #4]
 8008130:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008132:	07d9      	lsls	r1, r3, #31
 8008134:	d405      	bmi.n	8008142 <_vfiprintf_r+0x32>
 8008136:	89ab      	ldrh	r3, [r5, #12]
 8008138:	059a      	lsls	r2, r3, #22
 800813a:	d402      	bmi.n	8008142 <_vfiprintf_r+0x32>
 800813c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800813e:	f000 fba5 	bl	800888c <__retarget_lock_acquire_recursive>
 8008142:	89ab      	ldrh	r3, [r5, #12]
 8008144:	071b      	lsls	r3, r3, #28
 8008146:	d501      	bpl.n	800814c <_vfiprintf_r+0x3c>
 8008148:	692b      	ldr	r3, [r5, #16]
 800814a:	b9eb      	cbnz	r3, 8008188 <_vfiprintf_r+0x78>
 800814c:	4629      	mov	r1, r5
 800814e:	4630      	mov	r0, r6
 8008150:	f000 f96e 	bl	8008430 <__swsetup_r>
 8008154:	b1c0      	cbz	r0, 8008188 <_vfiprintf_r+0x78>
 8008156:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008158:	07dc      	lsls	r4, r3, #31
 800815a:	d50e      	bpl.n	800817a <_vfiprintf_r+0x6a>
 800815c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008160:	b01d      	add	sp, #116	; 0x74
 8008162:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008166:	4b7b      	ldr	r3, [pc, #492]	; (8008354 <_vfiprintf_r+0x244>)
 8008168:	429d      	cmp	r5, r3
 800816a:	d101      	bne.n	8008170 <_vfiprintf_r+0x60>
 800816c:	68b5      	ldr	r5, [r6, #8]
 800816e:	e7df      	b.n	8008130 <_vfiprintf_r+0x20>
 8008170:	4b79      	ldr	r3, [pc, #484]	; (8008358 <_vfiprintf_r+0x248>)
 8008172:	429d      	cmp	r5, r3
 8008174:	bf08      	it	eq
 8008176:	68f5      	ldreq	r5, [r6, #12]
 8008178:	e7da      	b.n	8008130 <_vfiprintf_r+0x20>
 800817a:	89ab      	ldrh	r3, [r5, #12]
 800817c:	0598      	lsls	r0, r3, #22
 800817e:	d4ed      	bmi.n	800815c <_vfiprintf_r+0x4c>
 8008180:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008182:	f000 fb84 	bl	800888e <__retarget_lock_release_recursive>
 8008186:	e7e9      	b.n	800815c <_vfiprintf_r+0x4c>
 8008188:	2300      	movs	r3, #0
 800818a:	9309      	str	r3, [sp, #36]	; 0x24
 800818c:	2320      	movs	r3, #32
 800818e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008192:	f8cd 800c 	str.w	r8, [sp, #12]
 8008196:	2330      	movs	r3, #48	; 0x30
 8008198:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800835c <_vfiprintf_r+0x24c>
 800819c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80081a0:	f04f 0901 	mov.w	r9, #1
 80081a4:	4623      	mov	r3, r4
 80081a6:	469a      	mov	sl, r3
 80081a8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80081ac:	b10a      	cbz	r2, 80081b2 <_vfiprintf_r+0xa2>
 80081ae:	2a25      	cmp	r2, #37	; 0x25
 80081b0:	d1f9      	bne.n	80081a6 <_vfiprintf_r+0x96>
 80081b2:	ebba 0b04 	subs.w	fp, sl, r4
 80081b6:	d00b      	beq.n	80081d0 <_vfiprintf_r+0xc0>
 80081b8:	465b      	mov	r3, fp
 80081ba:	4622      	mov	r2, r4
 80081bc:	4629      	mov	r1, r5
 80081be:	4630      	mov	r0, r6
 80081c0:	f7ff ff93 	bl	80080ea <__sfputs_r>
 80081c4:	3001      	adds	r0, #1
 80081c6:	f000 80aa 	beq.w	800831e <_vfiprintf_r+0x20e>
 80081ca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80081cc:	445a      	add	r2, fp
 80081ce:	9209      	str	r2, [sp, #36]	; 0x24
 80081d0:	f89a 3000 	ldrb.w	r3, [sl]
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	f000 80a2 	beq.w	800831e <_vfiprintf_r+0x20e>
 80081da:	2300      	movs	r3, #0
 80081dc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80081e0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80081e4:	f10a 0a01 	add.w	sl, sl, #1
 80081e8:	9304      	str	r3, [sp, #16]
 80081ea:	9307      	str	r3, [sp, #28]
 80081ec:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80081f0:	931a      	str	r3, [sp, #104]	; 0x68
 80081f2:	4654      	mov	r4, sl
 80081f4:	2205      	movs	r2, #5
 80081f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80081fa:	4858      	ldr	r0, [pc, #352]	; (800835c <_vfiprintf_r+0x24c>)
 80081fc:	f7f7 fff8 	bl	80001f0 <memchr>
 8008200:	9a04      	ldr	r2, [sp, #16]
 8008202:	b9d8      	cbnz	r0, 800823c <_vfiprintf_r+0x12c>
 8008204:	06d1      	lsls	r1, r2, #27
 8008206:	bf44      	itt	mi
 8008208:	2320      	movmi	r3, #32
 800820a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800820e:	0713      	lsls	r3, r2, #28
 8008210:	bf44      	itt	mi
 8008212:	232b      	movmi	r3, #43	; 0x2b
 8008214:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008218:	f89a 3000 	ldrb.w	r3, [sl]
 800821c:	2b2a      	cmp	r3, #42	; 0x2a
 800821e:	d015      	beq.n	800824c <_vfiprintf_r+0x13c>
 8008220:	9a07      	ldr	r2, [sp, #28]
 8008222:	4654      	mov	r4, sl
 8008224:	2000      	movs	r0, #0
 8008226:	f04f 0c0a 	mov.w	ip, #10
 800822a:	4621      	mov	r1, r4
 800822c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008230:	3b30      	subs	r3, #48	; 0x30
 8008232:	2b09      	cmp	r3, #9
 8008234:	d94e      	bls.n	80082d4 <_vfiprintf_r+0x1c4>
 8008236:	b1b0      	cbz	r0, 8008266 <_vfiprintf_r+0x156>
 8008238:	9207      	str	r2, [sp, #28]
 800823a:	e014      	b.n	8008266 <_vfiprintf_r+0x156>
 800823c:	eba0 0308 	sub.w	r3, r0, r8
 8008240:	fa09 f303 	lsl.w	r3, r9, r3
 8008244:	4313      	orrs	r3, r2
 8008246:	9304      	str	r3, [sp, #16]
 8008248:	46a2      	mov	sl, r4
 800824a:	e7d2      	b.n	80081f2 <_vfiprintf_r+0xe2>
 800824c:	9b03      	ldr	r3, [sp, #12]
 800824e:	1d19      	adds	r1, r3, #4
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	9103      	str	r1, [sp, #12]
 8008254:	2b00      	cmp	r3, #0
 8008256:	bfbb      	ittet	lt
 8008258:	425b      	neglt	r3, r3
 800825a:	f042 0202 	orrlt.w	r2, r2, #2
 800825e:	9307      	strge	r3, [sp, #28]
 8008260:	9307      	strlt	r3, [sp, #28]
 8008262:	bfb8      	it	lt
 8008264:	9204      	strlt	r2, [sp, #16]
 8008266:	7823      	ldrb	r3, [r4, #0]
 8008268:	2b2e      	cmp	r3, #46	; 0x2e
 800826a:	d10c      	bne.n	8008286 <_vfiprintf_r+0x176>
 800826c:	7863      	ldrb	r3, [r4, #1]
 800826e:	2b2a      	cmp	r3, #42	; 0x2a
 8008270:	d135      	bne.n	80082de <_vfiprintf_r+0x1ce>
 8008272:	9b03      	ldr	r3, [sp, #12]
 8008274:	1d1a      	adds	r2, r3, #4
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	9203      	str	r2, [sp, #12]
 800827a:	2b00      	cmp	r3, #0
 800827c:	bfb8      	it	lt
 800827e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008282:	3402      	adds	r4, #2
 8008284:	9305      	str	r3, [sp, #20]
 8008286:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800836c <_vfiprintf_r+0x25c>
 800828a:	7821      	ldrb	r1, [r4, #0]
 800828c:	2203      	movs	r2, #3
 800828e:	4650      	mov	r0, sl
 8008290:	f7f7 ffae 	bl	80001f0 <memchr>
 8008294:	b140      	cbz	r0, 80082a8 <_vfiprintf_r+0x198>
 8008296:	2340      	movs	r3, #64	; 0x40
 8008298:	eba0 000a 	sub.w	r0, r0, sl
 800829c:	fa03 f000 	lsl.w	r0, r3, r0
 80082a0:	9b04      	ldr	r3, [sp, #16]
 80082a2:	4303      	orrs	r3, r0
 80082a4:	3401      	adds	r4, #1
 80082a6:	9304      	str	r3, [sp, #16]
 80082a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80082ac:	482c      	ldr	r0, [pc, #176]	; (8008360 <_vfiprintf_r+0x250>)
 80082ae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80082b2:	2206      	movs	r2, #6
 80082b4:	f7f7 ff9c 	bl	80001f0 <memchr>
 80082b8:	2800      	cmp	r0, #0
 80082ba:	d03f      	beq.n	800833c <_vfiprintf_r+0x22c>
 80082bc:	4b29      	ldr	r3, [pc, #164]	; (8008364 <_vfiprintf_r+0x254>)
 80082be:	bb1b      	cbnz	r3, 8008308 <_vfiprintf_r+0x1f8>
 80082c0:	9b03      	ldr	r3, [sp, #12]
 80082c2:	3307      	adds	r3, #7
 80082c4:	f023 0307 	bic.w	r3, r3, #7
 80082c8:	3308      	adds	r3, #8
 80082ca:	9303      	str	r3, [sp, #12]
 80082cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80082ce:	443b      	add	r3, r7
 80082d0:	9309      	str	r3, [sp, #36]	; 0x24
 80082d2:	e767      	b.n	80081a4 <_vfiprintf_r+0x94>
 80082d4:	fb0c 3202 	mla	r2, ip, r2, r3
 80082d8:	460c      	mov	r4, r1
 80082da:	2001      	movs	r0, #1
 80082dc:	e7a5      	b.n	800822a <_vfiprintf_r+0x11a>
 80082de:	2300      	movs	r3, #0
 80082e0:	3401      	adds	r4, #1
 80082e2:	9305      	str	r3, [sp, #20]
 80082e4:	4619      	mov	r1, r3
 80082e6:	f04f 0c0a 	mov.w	ip, #10
 80082ea:	4620      	mov	r0, r4
 80082ec:	f810 2b01 	ldrb.w	r2, [r0], #1
 80082f0:	3a30      	subs	r2, #48	; 0x30
 80082f2:	2a09      	cmp	r2, #9
 80082f4:	d903      	bls.n	80082fe <_vfiprintf_r+0x1ee>
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d0c5      	beq.n	8008286 <_vfiprintf_r+0x176>
 80082fa:	9105      	str	r1, [sp, #20]
 80082fc:	e7c3      	b.n	8008286 <_vfiprintf_r+0x176>
 80082fe:	fb0c 2101 	mla	r1, ip, r1, r2
 8008302:	4604      	mov	r4, r0
 8008304:	2301      	movs	r3, #1
 8008306:	e7f0      	b.n	80082ea <_vfiprintf_r+0x1da>
 8008308:	ab03      	add	r3, sp, #12
 800830a:	9300      	str	r3, [sp, #0]
 800830c:	462a      	mov	r2, r5
 800830e:	4b16      	ldr	r3, [pc, #88]	; (8008368 <_vfiprintf_r+0x258>)
 8008310:	a904      	add	r1, sp, #16
 8008312:	4630      	mov	r0, r6
 8008314:	f7fd fe12 	bl	8005f3c <_printf_float>
 8008318:	4607      	mov	r7, r0
 800831a:	1c78      	adds	r0, r7, #1
 800831c:	d1d6      	bne.n	80082cc <_vfiprintf_r+0x1bc>
 800831e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008320:	07d9      	lsls	r1, r3, #31
 8008322:	d405      	bmi.n	8008330 <_vfiprintf_r+0x220>
 8008324:	89ab      	ldrh	r3, [r5, #12]
 8008326:	059a      	lsls	r2, r3, #22
 8008328:	d402      	bmi.n	8008330 <_vfiprintf_r+0x220>
 800832a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800832c:	f000 faaf 	bl	800888e <__retarget_lock_release_recursive>
 8008330:	89ab      	ldrh	r3, [r5, #12]
 8008332:	065b      	lsls	r3, r3, #25
 8008334:	f53f af12 	bmi.w	800815c <_vfiprintf_r+0x4c>
 8008338:	9809      	ldr	r0, [sp, #36]	; 0x24
 800833a:	e711      	b.n	8008160 <_vfiprintf_r+0x50>
 800833c:	ab03      	add	r3, sp, #12
 800833e:	9300      	str	r3, [sp, #0]
 8008340:	462a      	mov	r2, r5
 8008342:	4b09      	ldr	r3, [pc, #36]	; (8008368 <_vfiprintf_r+0x258>)
 8008344:	a904      	add	r1, sp, #16
 8008346:	4630      	mov	r0, r6
 8008348:	f7fe f89c 	bl	8006484 <_printf_i>
 800834c:	e7e4      	b.n	8008318 <_vfiprintf_r+0x208>
 800834e:	bf00      	nop
 8008350:	0800a764 	.word	0x0800a764
 8008354:	0800a784 	.word	0x0800a784
 8008358:	0800a744 	.word	0x0800a744
 800835c:	0800a5ec 	.word	0x0800a5ec
 8008360:	0800a5f6 	.word	0x0800a5f6
 8008364:	08005f3d 	.word	0x08005f3d
 8008368:	080080eb 	.word	0x080080eb
 800836c:	0800a5f2 	.word	0x0800a5f2

08008370 <__swbuf_r>:
 8008370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008372:	460e      	mov	r6, r1
 8008374:	4614      	mov	r4, r2
 8008376:	4605      	mov	r5, r0
 8008378:	b118      	cbz	r0, 8008382 <__swbuf_r+0x12>
 800837a:	6983      	ldr	r3, [r0, #24]
 800837c:	b90b      	cbnz	r3, 8008382 <__swbuf_r+0x12>
 800837e:	f000 f9e7 	bl	8008750 <__sinit>
 8008382:	4b21      	ldr	r3, [pc, #132]	; (8008408 <__swbuf_r+0x98>)
 8008384:	429c      	cmp	r4, r3
 8008386:	d12b      	bne.n	80083e0 <__swbuf_r+0x70>
 8008388:	686c      	ldr	r4, [r5, #4]
 800838a:	69a3      	ldr	r3, [r4, #24]
 800838c:	60a3      	str	r3, [r4, #8]
 800838e:	89a3      	ldrh	r3, [r4, #12]
 8008390:	071a      	lsls	r2, r3, #28
 8008392:	d52f      	bpl.n	80083f4 <__swbuf_r+0x84>
 8008394:	6923      	ldr	r3, [r4, #16]
 8008396:	b36b      	cbz	r3, 80083f4 <__swbuf_r+0x84>
 8008398:	6923      	ldr	r3, [r4, #16]
 800839a:	6820      	ldr	r0, [r4, #0]
 800839c:	1ac0      	subs	r0, r0, r3
 800839e:	6963      	ldr	r3, [r4, #20]
 80083a0:	b2f6      	uxtb	r6, r6
 80083a2:	4283      	cmp	r3, r0
 80083a4:	4637      	mov	r7, r6
 80083a6:	dc04      	bgt.n	80083b2 <__swbuf_r+0x42>
 80083a8:	4621      	mov	r1, r4
 80083aa:	4628      	mov	r0, r5
 80083ac:	f000 f93c 	bl	8008628 <_fflush_r>
 80083b0:	bb30      	cbnz	r0, 8008400 <__swbuf_r+0x90>
 80083b2:	68a3      	ldr	r3, [r4, #8]
 80083b4:	3b01      	subs	r3, #1
 80083b6:	60a3      	str	r3, [r4, #8]
 80083b8:	6823      	ldr	r3, [r4, #0]
 80083ba:	1c5a      	adds	r2, r3, #1
 80083bc:	6022      	str	r2, [r4, #0]
 80083be:	701e      	strb	r6, [r3, #0]
 80083c0:	6963      	ldr	r3, [r4, #20]
 80083c2:	3001      	adds	r0, #1
 80083c4:	4283      	cmp	r3, r0
 80083c6:	d004      	beq.n	80083d2 <__swbuf_r+0x62>
 80083c8:	89a3      	ldrh	r3, [r4, #12]
 80083ca:	07db      	lsls	r3, r3, #31
 80083cc:	d506      	bpl.n	80083dc <__swbuf_r+0x6c>
 80083ce:	2e0a      	cmp	r6, #10
 80083d0:	d104      	bne.n	80083dc <__swbuf_r+0x6c>
 80083d2:	4621      	mov	r1, r4
 80083d4:	4628      	mov	r0, r5
 80083d6:	f000 f927 	bl	8008628 <_fflush_r>
 80083da:	b988      	cbnz	r0, 8008400 <__swbuf_r+0x90>
 80083dc:	4638      	mov	r0, r7
 80083de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80083e0:	4b0a      	ldr	r3, [pc, #40]	; (800840c <__swbuf_r+0x9c>)
 80083e2:	429c      	cmp	r4, r3
 80083e4:	d101      	bne.n	80083ea <__swbuf_r+0x7a>
 80083e6:	68ac      	ldr	r4, [r5, #8]
 80083e8:	e7cf      	b.n	800838a <__swbuf_r+0x1a>
 80083ea:	4b09      	ldr	r3, [pc, #36]	; (8008410 <__swbuf_r+0xa0>)
 80083ec:	429c      	cmp	r4, r3
 80083ee:	bf08      	it	eq
 80083f0:	68ec      	ldreq	r4, [r5, #12]
 80083f2:	e7ca      	b.n	800838a <__swbuf_r+0x1a>
 80083f4:	4621      	mov	r1, r4
 80083f6:	4628      	mov	r0, r5
 80083f8:	f000 f81a 	bl	8008430 <__swsetup_r>
 80083fc:	2800      	cmp	r0, #0
 80083fe:	d0cb      	beq.n	8008398 <__swbuf_r+0x28>
 8008400:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8008404:	e7ea      	b.n	80083dc <__swbuf_r+0x6c>
 8008406:	bf00      	nop
 8008408:	0800a764 	.word	0x0800a764
 800840c:	0800a784 	.word	0x0800a784
 8008410:	0800a744 	.word	0x0800a744

08008414 <__ascii_wctomb>:
 8008414:	b149      	cbz	r1, 800842a <__ascii_wctomb+0x16>
 8008416:	2aff      	cmp	r2, #255	; 0xff
 8008418:	bf85      	ittet	hi
 800841a:	238a      	movhi	r3, #138	; 0x8a
 800841c:	6003      	strhi	r3, [r0, #0]
 800841e:	700a      	strbls	r2, [r1, #0]
 8008420:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8008424:	bf98      	it	ls
 8008426:	2001      	movls	r0, #1
 8008428:	4770      	bx	lr
 800842a:	4608      	mov	r0, r1
 800842c:	4770      	bx	lr
	...

08008430 <__swsetup_r>:
 8008430:	4b32      	ldr	r3, [pc, #200]	; (80084fc <__swsetup_r+0xcc>)
 8008432:	b570      	push	{r4, r5, r6, lr}
 8008434:	681d      	ldr	r5, [r3, #0]
 8008436:	4606      	mov	r6, r0
 8008438:	460c      	mov	r4, r1
 800843a:	b125      	cbz	r5, 8008446 <__swsetup_r+0x16>
 800843c:	69ab      	ldr	r3, [r5, #24]
 800843e:	b913      	cbnz	r3, 8008446 <__swsetup_r+0x16>
 8008440:	4628      	mov	r0, r5
 8008442:	f000 f985 	bl	8008750 <__sinit>
 8008446:	4b2e      	ldr	r3, [pc, #184]	; (8008500 <__swsetup_r+0xd0>)
 8008448:	429c      	cmp	r4, r3
 800844a:	d10f      	bne.n	800846c <__swsetup_r+0x3c>
 800844c:	686c      	ldr	r4, [r5, #4]
 800844e:	89a3      	ldrh	r3, [r4, #12]
 8008450:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008454:	0719      	lsls	r1, r3, #28
 8008456:	d42c      	bmi.n	80084b2 <__swsetup_r+0x82>
 8008458:	06dd      	lsls	r5, r3, #27
 800845a:	d411      	bmi.n	8008480 <__swsetup_r+0x50>
 800845c:	2309      	movs	r3, #9
 800845e:	6033      	str	r3, [r6, #0]
 8008460:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008464:	81a3      	strh	r3, [r4, #12]
 8008466:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800846a:	e03e      	b.n	80084ea <__swsetup_r+0xba>
 800846c:	4b25      	ldr	r3, [pc, #148]	; (8008504 <__swsetup_r+0xd4>)
 800846e:	429c      	cmp	r4, r3
 8008470:	d101      	bne.n	8008476 <__swsetup_r+0x46>
 8008472:	68ac      	ldr	r4, [r5, #8]
 8008474:	e7eb      	b.n	800844e <__swsetup_r+0x1e>
 8008476:	4b24      	ldr	r3, [pc, #144]	; (8008508 <__swsetup_r+0xd8>)
 8008478:	429c      	cmp	r4, r3
 800847a:	bf08      	it	eq
 800847c:	68ec      	ldreq	r4, [r5, #12]
 800847e:	e7e6      	b.n	800844e <__swsetup_r+0x1e>
 8008480:	0758      	lsls	r0, r3, #29
 8008482:	d512      	bpl.n	80084aa <__swsetup_r+0x7a>
 8008484:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008486:	b141      	cbz	r1, 800849a <__swsetup_r+0x6a>
 8008488:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800848c:	4299      	cmp	r1, r3
 800848e:	d002      	beq.n	8008496 <__swsetup_r+0x66>
 8008490:	4630      	mov	r0, r6
 8008492:	f7ff fb6f 	bl	8007b74 <_free_r>
 8008496:	2300      	movs	r3, #0
 8008498:	6363      	str	r3, [r4, #52]	; 0x34
 800849a:	89a3      	ldrh	r3, [r4, #12]
 800849c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80084a0:	81a3      	strh	r3, [r4, #12]
 80084a2:	2300      	movs	r3, #0
 80084a4:	6063      	str	r3, [r4, #4]
 80084a6:	6923      	ldr	r3, [r4, #16]
 80084a8:	6023      	str	r3, [r4, #0]
 80084aa:	89a3      	ldrh	r3, [r4, #12]
 80084ac:	f043 0308 	orr.w	r3, r3, #8
 80084b0:	81a3      	strh	r3, [r4, #12]
 80084b2:	6923      	ldr	r3, [r4, #16]
 80084b4:	b94b      	cbnz	r3, 80084ca <__swsetup_r+0x9a>
 80084b6:	89a3      	ldrh	r3, [r4, #12]
 80084b8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80084bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80084c0:	d003      	beq.n	80084ca <__swsetup_r+0x9a>
 80084c2:	4621      	mov	r1, r4
 80084c4:	4630      	mov	r0, r6
 80084c6:	f000 fa07 	bl	80088d8 <__smakebuf_r>
 80084ca:	89a0      	ldrh	r0, [r4, #12]
 80084cc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80084d0:	f010 0301 	ands.w	r3, r0, #1
 80084d4:	d00a      	beq.n	80084ec <__swsetup_r+0xbc>
 80084d6:	2300      	movs	r3, #0
 80084d8:	60a3      	str	r3, [r4, #8]
 80084da:	6963      	ldr	r3, [r4, #20]
 80084dc:	425b      	negs	r3, r3
 80084de:	61a3      	str	r3, [r4, #24]
 80084e0:	6923      	ldr	r3, [r4, #16]
 80084e2:	b943      	cbnz	r3, 80084f6 <__swsetup_r+0xc6>
 80084e4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80084e8:	d1ba      	bne.n	8008460 <__swsetup_r+0x30>
 80084ea:	bd70      	pop	{r4, r5, r6, pc}
 80084ec:	0781      	lsls	r1, r0, #30
 80084ee:	bf58      	it	pl
 80084f0:	6963      	ldrpl	r3, [r4, #20]
 80084f2:	60a3      	str	r3, [r4, #8]
 80084f4:	e7f4      	b.n	80084e0 <__swsetup_r+0xb0>
 80084f6:	2000      	movs	r0, #0
 80084f8:	e7f7      	b.n	80084ea <__swsetup_r+0xba>
 80084fa:	bf00      	nop
 80084fc:	2000001c 	.word	0x2000001c
 8008500:	0800a764 	.word	0x0800a764
 8008504:	0800a784 	.word	0x0800a784
 8008508:	0800a744 	.word	0x0800a744

0800850c <abort>:
 800850c:	b508      	push	{r3, lr}
 800850e:	2006      	movs	r0, #6
 8008510:	f000 fa52 	bl	80089b8 <raise>
 8008514:	2001      	movs	r0, #1
 8008516:	f7fa fb01 	bl	8002b1c <_exit>
	...

0800851c <__sflush_r>:
 800851c:	898a      	ldrh	r2, [r1, #12]
 800851e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008522:	4605      	mov	r5, r0
 8008524:	0710      	lsls	r0, r2, #28
 8008526:	460c      	mov	r4, r1
 8008528:	d458      	bmi.n	80085dc <__sflush_r+0xc0>
 800852a:	684b      	ldr	r3, [r1, #4]
 800852c:	2b00      	cmp	r3, #0
 800852e:	dc05      	bgt.n	800853c <__sflush_r+0x20>
 8008530:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008532:	2b00      	cmp	r3, #0
 8008534:	dc02      	bgt.n	800853c <__sflush_r+0x20>
 8008536:	2000      	movs	r0, #0
 8008538:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800853c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800853e:	2e00      	cmp	r6, #0
 8008540:	d0f9      	beq.n	8008536 <__sflush_r+0x1a>
 8008542:	2300      	movs	r3, #0
 8008544:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008548:	682f      	ldr	r7, [r5, #0]
 800854a:	602b      	str	r3, [r5, #0]
 800854c:	d032      	beq.n	80085b4 <__sflush_r+0x98>
 800854e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008550:	89a3      	ldrh	r3, [r4, #12]
 8008552:	075a      	lsls	r2, r3, #29
 8008554:	d505      	bpl.n	8008562 <__sflush_r+0x46>
 8008556:	6863      	ldr	r3, [r4, #4]
 8008558:	1ac0      	subs	r0, r0, r3
 800855a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800855c:	b10b      	cbz	r3, 8008562 <__sflush_r+0x46>
 800855e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008560:	1ac0      	subs	r0, r0, r3
 8008562:	2300      	movs	r3, #0
 8008564:	4602      	mov	r2, r0
 8008566:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008568:	6a21      	ldr	r1, [r4, #32]
 800856a:	4628      	mov	r0, r5
 800856c:	47b0      	blx	r6
 800856e:	1c43      	adds	r3, r0, #1
 8008570:	89a3      	ldrh	r3, [r4, #12]
 8008572:	d106      	bne.n	8008582 <__sflush_r+0x66>
 8008574:	6829      	ldr	r1, [r5, #0]
 8008576:	291d      	cmp	r1, #29
 8008578:	d82c      	bhi.n	80085d4 <__sflush_r+0xb8>
 800857a:	4a2a      	ldr	r2, [pc, #168]	; (8008624 <__sflush_r+0x108>)
 800857c:	40ca      	lsrs	r2, r1
 800857e:	07d6      	lsls	r6, r2, #31
 8008580:	d528      	bpl.n	80085d4 <__sflush_r+0xb8>
 8008582:	2200      	movs	r2, #0
 8008584:	6062      	str	r2, [r4, #4]
 8008586:	04d9      	lsls	r1, r3, #19
 8008588:	6922      	ldr	r2, [r4, #16]
 800858a:	6022      	str	r2, [r4, #0]
 800858c:	d504      	bpl.n	8008598 <__sflush_r+0x7c>
 800858e:	1c42      	adds	r2, r0, #1
 8008590:	d101      	bne.n	8008596 <__sflush_r+0x7a>
 8008592:	682b      	ldr	r3, [r5, #0]
 8008594:	b903      	cbnz	r3, 8008598 <__sflush_r+0x7c>
 8008596:	6560      	str	r0, [r4, #84]	; 0x54
 8008598:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800859a:	602f      	str	r7, [r5, #0]
 800859c:	2900      	cmp	r1, #0
 800859e:	d0ca      	beq.n	8008536 <__sflush_r+0x1a>
 80085a0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80085a4:	4299      	cmp	r1, r3
 80085a6:	d002      	beq.n	80085ae <__sflush_r+0x92>
 80085a8:	4628      	mov	r0, r5
 80085aa:	f7ff fae3 	bl	8007b74 <_free_r>
 80085ae:	2000      	movs	r0, #0
 80085b0:	6360      	str	r0, [r4, #52]	; 0x34
 80085b2:	e7c1      	b.n	8008538 <__sflush_r+0x1c>
 80085b4:	6a21      	ldr	r1, [r4, #32]
 80085b6:	2301      	movs	r3, #1
 80085b8:	4628      	mov	r0, r5
 80085ba:	47b0      	blx	r6
 80085bc:	1c41      	adds	r1, r0, #1
 80085be:	d1c7      	bne.n	8008550 <__sflush_r+0x34>
 80085c0:	682b      	ldr	r3, [r5, #0]
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d0c4      	beq.n	8008550 <__sflush_r+0x34>
 80085c6:	2b1d      	cmp	r3, #29
 80085c8:	d001      	beq.n	80085ce <__sflush_r+0xb2>
 80085ca:	2b16      	cmp	r3, #22
 80085cc:	d101      	bne.n	80085d2 <__sflush_r+0xb6>
 80085ce:	602f      	str	r7, [r5, #0]
 80085d0:	e7b1      	b.n	8008536 <__sflush_r+0x1a>
 80085d2:	89a3      	ldrh	r3, [r4, #12]
 80085d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80085d8:	81a3      	strh	r3, [r4, #12]
 80085da:	e7ad      	b.n	8008538 <__sflush_r+0x1c>
 80085dc:	690f      	ldr	r7, [r1, #16]
 80085de:	2f00      	cmp	r7, #0
 80085e0:	d0a9      	beq.n	8008536 <__sflush_r+0x1a>
 80085e2:	0793      	lsls	r3, r2, #30
 80085e4:	680e      	ldr	r6, [r1, #0]
 80085e6:	bf08      	it	eq
 80085e8:	694b      	ldreq	r3, [r1, #20]
 80085ea:	600f      	str	r7, [r1, #0]
 80085ec:	bf18      	it	ne
 80085ee:	2300      	movne	r3, #0
 80085f0:	eba6 0807 	sub.w	r8, r6, r7
 80085f4:	608b      	str	r3, [r1, #8]
 80085f6:	f1b8 0f00 	cmp.w	r8, #0
 80085fa:	dd9c      	ble.n	8008536 <__sflush_r+0x1a>
 80085fc:	6a21      	ldr	r1, [r4, #32]
 80085fe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008600:	4643      	mov	r3, r8
 8008602:	463a      	mov	r2, r7
 8008604:	4628      	mov	r0, r5
 8008606:	47b0      	blx	r6
 8008608:	2800      	cmp	r0, #0
 800860a:	dc06      	bgt.n	800861a <__sflush_r+0xfe>
 800860c:	89a3      	ldrh	r3, [r4, #12]
 800860e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008612:	81a3      	strh	r3, [r4, #12]
 8008614:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008618:	e78e      	b.n	8008538 <__sflush_r+0x1c>
 800861a:	4407      	add	r7, r0
 800861c:	eba8 0800 	sub.w	r8, r8, r0
 8008620:	e7e9      	b.n	80085f6 <__sflush_r+0xda>
 8008622:	bf00      	nop
 8008624:	20400001 	.word	0x20400001

08008628 <_fflush_r>:
 8008628:	b538      	push	{r3, r4, r5, lr}
 800862a:	690b      	ldr	r3, [r1, #16]
 800862c:	4605      	mov	r5, r0
 800862e:	460c      	mov	r4, r1
 8008630:	b913      	cbnz	r3, 8008638 <_fflush_r+0x10>
 8008632:	2500      	movs	r5, #0
 8008634:	4628      	mov	r0, r5
 8008636:	bd38      	pop	{r3, r4, r5, pc}
 8008638:	b118      	cbz	r0, 8008642 <_fflush_r+0x1a>
 800863a:	6983      	ldr	r3, [r0, #24]
 800863c:	b90b      	cbnz	r3, 8008642 <_fflush_r+0x1a>
 800863e:	f000 f887 	bl	8008750 <__sinit>
 8008642:	4b14      	ldr	r3, [pc, #80]	; (8008694 <_fflush_r+0x6c>)
 8008644:	429c      	cmp	r4, r3
 8008646:	d11b      	bne.n	8008680 <_fflush_r+0x58>
 8008648:	686c      	ldr	r4, [r5, #4]
 800864a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800864e:	2b00      	cmp	r3, #0
 8008650:	d0ef      	beq.n	8008632 <_fflush_r+0xa>
 8008652:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008654:	07d0      	lsls	r0, r2, #31
 8008656:	d404      	bmi.n	8008662 <_fflush_r+0x3a>
 8008658:	0599      	lsls	r1, r3, #22
 800865a:	d402      	bmi.n	8008662 <_fflush_r+0x3a>
 800865c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800865e:	f000 f915 	bl	800888c <__retarget_lock_acquire_recursive>
 8008662:	4628      	mov	r0, r5
 8008664:	4621      	mov	r1, r4
 8008666:	f7ff ff59 	bl	800851c <__sflush_r>
 800866a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800866c:	07da      	lsls	r2, r3, #31
 800866e:	4605      	mov	r5, r0
 8008670:	d4e0      	bmi.n	8008634 <_fflush_r+0xc>
 8008672:	89a3      	ldrh	r3, [r4, #12]
 8008674:	059b      	lsls	r3, r3, #22
 8008676:	d4dd      	bmi.n	8008634 <_fflush_r+0xc>
 8008678:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800867a:	f000 f908 	bl	800888e <__retarget_lock_release_recursive>
 800867e:	e7d9      	b.n	8008634 <_fflush_r+0xc>
 8008680:	4b05      	ldr	r3, [pc, #20]	; (8008698 <_fflush_r+0x70>)
 8008682:	429c      	cmp	r4, r3
 8008684:	d101      	bne.n	800868a <_fflush_r+0x62>
 8008686:	68ac      	ldr	r4, [r5, #8]
 8008688:	e7df      	b.n	800864a <_fflush_r+0x22>
 800868a:	4b04      	ldr	r3, [pc, #16]	; (800869c <_fflush_r+0x74>)
 800868c:	429c      	cmp	r4, r3
 800868e:	bf08      	it	eq
 8008690:	68ec      	ldreq	r4, [r5, #12]
 8008692:	e7da      	b.n	800864a <_fflush_r+0x22>
 8008694:	0800a764 	.word	0x0800a764
 8008698:	0800a784 	.word	0x0800a784
 800869c:	0800a744 	.word	0x0800a744

080086a0 <std>:
 80086a0:	2300      	movs	r3, #0
 80086a2:	b510      	push	{r4, lr}
 80086a4:	4604      	mov	r4, r0
 80086a6:	e9c0 3300 	strd	r3, r3, [r0]
 80086aa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80086ae:	6083      	str	r3, [r0, #8]
 80086b0:	8181      	strh	r1, [r0, #12]
 80086b2:	6643      	str	r3, [r0, #100]	; 0x64
 80086b4:	81c2      	strh	r2, [r0, #14]
 80086b6:	6183      	str	r3, [r0, #24]
 80086b8:	4619      	mov	r1, r3
 80086ba:	2208      	movs	r2, #8
 80086bc:	305c      	adds	r0, #92	; 0x5c
 80086be:	f7fd fb95 	bl	8005dec <memset>
 80086c2:	4b05      	ldr	r3, [pc, #20]	; (80086d8 <std+0x38>)
 80086c4:	6263      	str	r3, [r4, #36]	; 0x24
 80086c6:	4b05      	ldr	r3, [pc, #20]	; (80086dc <std+0x3c>)
 80086c8:	62a3      	str	r3, [r4, #40]	; 0x28
 80086ca:	4b05      	ldr	r3, [pc, #20]	; (80086e0 <std+0x40>)
 80086cc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80086ce:	4b05      	ldr	r3, [pc, #20]	; (80086e4 <std+0x44>)
 80086d0:	6224      	str	r4, [r4, #32]
 80086d2:	6323      	str	r3, [r4, #48]	; 0x30
 80086d4:	bd10      	pop	{r4, pc}
 80086d6:	bf00      	nop
 80086d8:	080089f1 	.word	0x080089f1
 80086dc:	08008a13 	.word	0x08008a13
 80086e0:	08008a4b 	.word	0x08008a4b
 80086e4:	08008a6f 	.word	0x08008a6f

080086e8 <_cleanup_r>:
 80086e8:	4901      	ldr	r1, [pc, #4]	; (80086f0 <_cleanup_r+0x8>)
 80086ea:	f000 b8af 	b.w	800884c <_fwalk_reent>
 80086ee:	bf00      	nop
 80086f0:	08008629 	.word	0x08008629

080086f4 <__sfmoreglue>:
 80086f4:	b570      	push	{r4, r5, r6, lr}
 80086f6:	1e4a      	subs	r2, r1, #1
 80086f8:	2568      	movs	r5, #104	; 0x68
 80086fa:	4355      	muls	r5, r2
 80086fc:	460e      	mov	r6, r1
 80086fe:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008702:	f7ff fa87 	bl	8007c14 <_malloc_r>
 8008706:	4604      	mov	r4, r0
 8008708:	b140      	cbz	r0, 800871c <__sfmoreglue+0x28>
 800870a:	2100      	movs	r1, #0
 800870c:	e9c0 1600 	strd	r1, r6, [r0]
 8008710:	300c      	adds	r0, #12
 8008712:	60a0      	str	r0, [r4, #8]
 8008714:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008718:	f7fd fb68 	bl	8005dec <memset>
 800871c:	4620      	mov	r0, r4
 800871e:	bd70      	pop	{r4, r5, r6, pc}

08008720 <__sfp_lock_acquire>:
 8008720:	4801      	ldr	r0, [pc, #4]	; (8008728 <__sfp_lock_acquire+0x8>)
 8008722:	f000 b8b3 	b.w	800888c <__retarget_lock_acquire_recursive>
 8008726:	bf00      	nop
 8008728:	20000758 	.word	0x20000758

0800872c <__sfp_lock_release>:
 800872c:	4801      	ldr	r0, [pc, #4]	; (8008734 <__sfp_lock_release+0x8>)
 800872e:	f000 b8ae 	b.w	800888e <__retarget_lock_release_recursive>
 8008732:	bf00      	nop
 8008734:	20000758 	.word	0x20000758

08008738 <__sinit_lock_acquire>:
 8008738:	4801      	ldr	r0, [pc, #4]	; (8008740 <__sinit_lock_acquire+0x8>)
 800873a:	f000 b8a7 	b.w	800888c <__retarget_lock_acquire_recursive>
 800873e:	bf00      	nop
 8008740:	20000753 	.word	0x20000753

08008744 <__sinit_lock_release>:
 8008744:	4801      	ldr	r0, [pc, #4]	; (800874c <__sinit_lock_release+0x8>)
 8008746:	f000 b8a2 	b.w	800888e <__retarget_lock_release_recursive>
 800874a:	bf00      	nop
 800874c:	20000753 	.word	0x20000753

08008750 <__sinit>:
 8008750:	b510      	push	{r4, lr}
 8008752:	4604      	mov	r4, r0
 8008754:	f7ff fff0 	bl	8008738 <__sinit_lock_acquire>
 8008758:	69a3      	ldr	r3, [r4, #24]
 800875a:	b11b      	cbz	r3, 8008764 <__sinit+0x14>
 800875c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008760:	f7ff bff0 	b.w	8008744 <__sinit_lock_release>
 8008764:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008768:	6523      	str	r3, [r4, #80]	; 0x50
 800876a:	4b13      	ldr	r3, [pc, #76]	; (80087b8 <__sinit+0x68>)
 800876c:	4a13      	ldr	r2, [pc, #76]	; (80087bc <__sinit+0x6c>)
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	62a2      	str	r2, [r4, #40]	; 0x28
 8008772:	42a3      	cmp	r3, r4
 8008774:	bf04      	itt	eq
 8008776:	2301      	moveq	r3, #1
 8008778:	61a3      	streq	r3, [r4, #24]
 800877a:	4620      	mov	r0, r4
 800877c:	f000 f820 	bl	80087c0 <__sfp>
 8008780:	6060      	str	r0, [r4, #4]
 8008782:	4620      	mov	r0, r4
 8008784:	f000 f81c 	bl	80087c0 <__sfp>
 8008788:	60a0      	str	r0, [r4, #8]
 800878a:	4620      	mov	r0, r4
 800878c:	f000 f818 	bl	80087c0 <__sfp>
 8008790:	2200      	movs	r2, #0
 8008792:	60e0      	str	r0, [r4, #12]
 8008794:	2104      	movs	r1, #4
 8008796:	6860      	ldr	r0, [r4, #4]
 8008798:	f7ff ff82 	bl	80086a0 <std>
 800879c:	68a0      	ldr	r0, [r4, #8]
 800879e:	2201      	movs	r2, #1
 80087a0:	2109      	movs	r1, #9
 80087a2:	f7ff ff7d 	bl	80086a0 <std>
 80087a6:	68e0      	ldr	r0, [r4, #12]
 80087a8:	2202      	movs	r2, #2
 80087aa:	2112      	movs	r1, #18
 80087ac:	f7ff ff78 	bl	80086a0 <std>
 80087b0:	2301      	movs	r3, #1
 80087b2:	61a3      	str	r3, [r4, #24]
 80087b4:	e7d2      	b.n	800875c <__sinit+0xc>
 80087b6:	bf00      	nop
 80087b8:	0800a3c4 	.word	0x0800a3c4
 80087bc:	080086e9 	.word	0x080086e9

080087c0 <__sfp>:
 80087c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087c2:	4607      	mov	r7, r0
 80087c4:	f7ff ffac 	bl	8008720 <__sfp_lock_acquire>
 80087c8:	4b1e      	ldr	r3, [pc, #120]	; (8008844 <__sfp+0x84>)
 80087ca:	681e      	ldr	r6, [r3, #0]
 80087cc:	69b3      	ldr	r3, [r6, #24]
 80087ce:	b913      	cbnz	r3, 80087d6 <__sfp+0x16>
 80087d0:	4630      	mov	r0, r6
 80087d2:	f7ff ffbd 	bl	8008750 <__sinit>
 80087d6:	3648      	adds	r6, #72	; 0x48
 80087d8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80087dc:	3b01      	subs	r3, #1
 80087de:	d503      	bpl.n	80087e8 <__sfp+0x28>
 80087e0:	6833      	ldr	r3, [r6, #0]
 80087e2:	b30b      	cbz	r3, 8008828 <__sfp+0x68>
 80087e4:	6836      	ldr	r6, [r6, #0]
 80087e6:	e7f7      	b.n	80087d8 <__sfp+0x18>
 80087e8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80087ec:	b9d5      	cbnz	r5, 8008824 <__sfp+0x64>
 80087ee:	4b16      	ldr	r3, [pc, #88]	; (8008848 <__sfp+0x88>)
 80087f0:	60e3      	str	r3, [r4, #12]
 80087f2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80087f6:	6665      	str	r5, [r4, #100]	; 0x64
 80087f8:	f000 f847 	bl	800888a <__retarget_lock_init_recursive>
 80087fc:	f7ff ff96 	bl	800872c <__sfp_lock_release>
 8008800:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008804:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008808:	6025      	str	r5, [r4, #0]
 800880a:	61a5      	str	r5, [r4, #24]
 800880c:	2208      	movs	r2, #8
 800880e:	4629      	mov	r1, r5
 8008810:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008814:	f7fd faea 	bl	8005dec <memset>
 8008818:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800881c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008820:	4620      	mov	r0, r4
 8008822:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008824:	3468      	adds	r4, #104	; 0x68
 8008826:	e7d9      	b.n	80087dc <__sfp+0x1c>
 8008828:	2104      	movs	r1, #4
 800882a:	4638      	mov	r0, r7
 800882c:	f7ff ff62 	bl	80086f4 <__sfmoreglue>
 8008830:	4604      	mov	r4, r0
 8008832:	6030      	str	r0, [r6, #0]
 8008834:	2800      	cmp	r0, #0
 8008836:	d1d5      	bne.n	80087e4 <__sfp+0x24>
 8008838:	f7ff ff78 	bl	800872c <__sfp_lock_release>
 800883c:	230c      	movs	r3, #12
 800883e:	603b      	str	r3, [r7, #0]
 8008840:	e7ee      	b.n	8008820 <__sfp+0x60>
 8008842:	bf00      	nop
 8008844:	0800a3c4 	.word	0x0800a3c4
 8008848:	ffff0001 	.word	0xffff0001

0800884c <_fwalk_reent>:
 800884c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008850:	4606      	mov	r6, r0
 8008852:	4688      	mov	r8, r1
 8008854:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008858:	2700      	movs	r7, #0
 800885a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800885e:	f1b9 0901 	subs.w	r9, r9, #1
 8008862:	d505      	bpl.n	8008870 <_fwalk_reent+0x24>
 8008864:	6824      	ldr	r4, [r4, #0]
 8008866:	2c00      	cmp	r4, #0
 8008868:	d1f7      	bne.n	800885a <_fwalk_reent+0xe>
 800886a:	4638      	mov	r0, r7
 800886c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008870:	89ab      	ldrh	r3, [r5, #12]
 8008872:	2b01      	cmp	r3, #1
 8008874:	d907      	bls.n	8008886 <_fwalk_reent+0x3a>
 8008876:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800887a:	3301      	adds	r3, #1
 800887c:	d003      	beq.n	8008886 <_fwalk_reent+0x3a>
 800887e:	4629      	mov	r1, r5
 8008880:	4630      	mov	r0, r6
 8008882:	47c0      	blx	r8
 8008884:	4307      	orrs	r7, r0
 8008886:	3568      	adds	r5, #104	; 0x68
 8008888:	e7e9      	b.n	800885e <_fwalk_reent+0x12>

0800888a <__retarget_lock_init_recursive>:
 800888a:	4770      	bx	lr

0800888c <__retarget_lock_acquire_recursive>:
 800888c:	4770      	bx	lr

0800888e <__retarget_lock_release_recursive>:
 800888e:	4770      	bx	lr

08008890 <__swhatbuf_r>:
 8008890:	b570      	push	{r4, r5, r6, lr}
 8008892:	460e      	mov	r6, r1
 8008894:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008898:	2900      	cmp	r1, #0
 800889a:	b096      	sub	sp, #88	; 0x58
 800889c:	4614      	mov	r4, r2
 800889e:	461d      	mov	r5, r3
 80088a0:	da07      	bge.n	80088b2 <__swhatbuf_r+0x22>
 80088a2:	2300      	movs	r3, #0
 80088a4:	602b      	str	r3, [r5, #0]
 80088a6:	89b3      	ldrh	r3, [r6, #12]
 80088a8:	061a      	lsls	r2, r3, #24
 80088aa:	d410      	bmi.n	80088ce <__swhatbuf_r+0x3e>
 80088ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80088b0:	e00e      	b.n	80088d0 <__swhatbuf_r+0x40>
 80088b2:	466a      	mov	r2, sp
 80088b4:	f000 f902 	bl	8008abc <_fstat_r>
 80088b8:	2800      	cmp	r0, #0
 80088ba:	dbf2      	blt.n	80088a2 <__swhatbuf_r+0x12>
 80088bc:	9a01      	ldr	r2, [sp, #4]
 80088be:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80088c2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80088c6:	425a      	negs	r2, r3
 80088c8:	415a      	adcs	r2, r3
 80088ca:	602a      	str	r2, [r5, #0]
 80088cc:	e7ee      	b.n	80088ac <__swhatbuf_r+0x1c>
 80088ce:	2340      	movs	r3, #64	; 0x40
 80088d0:	2000      	movs	r0, #0
 80088d2:	6023      	str	r3, [r4, #0]
 80088d4:	b016      	add	sp, #88	; 0x58
 80088d6:	bd70      	pop	{r4, r5, r6, pc}

080088d8 <__smakebuf_r>:
 80088d8:	898b      	ldrh	r3, [r1, #12]
 80088da:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80088dc:	079d      	lsls	r5, r3, #30
 80088de:	4606      	mov	r6, r0
 80088e0:	460c      	mov	r4, r1
 80088e2:	d507      	bpl.n	80088f4 <__smakebuf_r+0x1c>
 80088e4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80088e8:	6023      	str	r3, [r4, #0]
 80088ea:	6123      	str	r3, [r4, #16]
 80088ec:	2301      	movs	r3, #1
 80088ee:	6163      	str	r3, [r4, #20]
 80088f0:	b002      	add	sp, #8
 80088f2:	bd70      	pop	{r4, r5, r6, pc}
 80088f4:	ab01      	add	r3, sp, #4
 80088f6:	466a      	mov	r2, sp
 80088f8:	f7ff ffca 	bl	8008890 <__swhatbuf_r>
 80088fc:	9900      	ldr	r1, [sp, #0]
 80088fe:	4605      	mov	r5, r0
 8008900:	4630      	mov	r0, r6
 8008902:	f7ff f987 	bl	8007c14 <_malloc_r>
 8008906:	b948      	cbnz	r0, 800891c <__smakebuf_r+0x44>
 8008908:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800890c:	059a      	lsls	r2, r3, #22
 800890e:	d4ef      	bmi.n	80088f0 <__smakebuf_r+0x18>
 8008910:	f023 0303 	bic.w	r3, r3, #3
 8008914:	f043 0302 	orr.w	r3, r3, #2
 8008918:	81a3      	strh	r3, [r4, #12]
 800891a:	e7e3      	b.n	80088e4 <__smakebuf_r+0xc>
 800891c:	4b0d      	ldr	r3, [pc, #52]	; (8008954 <__smakebuf_r+0x7c>)
 800891e:	62b3      	str	r3, [r6, #40]	; 0x28
 8008920:	89a3      	ldrh	r3, [r4, #12]
 8008922:	6020      	str	r0, [r4, #0]
 8008924:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008928:	81a3      	strh	r3, [r4, #12]
 800892a:	9b00      	ldr	r3, [sp, #0]
 800892c:	6163      	str	r3, [r4, #20]
 800892e:	9b01      	ldr	r3, [sp, #4]
 8008930:	6120      	str	r0, [r4, #16]
 8008932:	b15b      	cbz	r3, 800894c <__smakebuf_r+0x74>
 8008934:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008938:	4630      	mov	r0, r6
 800893a:	f000 f8d1 	bl	8008ae0 <_isatty_r>
 800893e:	b128      	cbz	r0, 800894c <__smakebuf_r+0x74>
 8008940:	89a3      	ldrh	r3, [r4, #12]
 8008942:	f023 0303 	bic.w	r3, r3, #3
 8008946:	f043 0301 	orr.w	r3, r3, #1
 800894a:	81a3      	strh	r3, [r4, #12]
 800894c:	89a0      	ldrh	r0, [r4, #12]
 800894e:	4305      	orrs	r5, r0
 8008950:	81a5      	strh	r5, [r4, #12]
 8008952:	e7cd      	b.n	80088f0 <__smakebuf_r+0x18>
 8008954:	080086e9 	.word	0x080086e9

08008958 <_malloc_usable_size_r>:
 8008958:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800895c:	1f18      	subs	r0, r3, #4
 800895e:	2b00      	cmp	r3, #0
 8008960:	bfbc      	itt	lt
 8008962:	580b      	ldrlt	r3, [r1, r0]
 8008964:	18c0      	addlt	r0, r0, r3
 8008966:	4770      	bx	lr

08008968 <_raise_r>:
 8008968:	291f      	cmp	r1, #31
 800896a:	b538      	push	{r3, r4, r5, lr}
 800896c:	4604      	mov	r4, r0
 800896e:	460d      	mov	r5, r1
 8008970:	d904      	bls.n	800897c <_raise_r+0x14>
 8008972:	2316      	movs	r3, #22
 8008974:	6003      	str	r3, [r0, #0]
 8008976:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800897a:	bd38      	pop	{r3, r4, r5, pc}
 800897c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800897e:	b112      	cbz	r2, 8008986 <_raise_r+0x1e>
 8008980:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008984:	b94b      	cbnz	r3, 800899a <_raise_r+0x32>
 8008986:	4620      	mov	r0, r4
 8008988:	f000 f830 	bl	80089ec <_getpid_r>
 800898c:	462a      	mov	r2, r5
 800898e:	4601      	mov	r1, r0
 8008990:	4620      	mov	r0, r4
 8008992:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008996:	f000 b817 	b.w	80089c8 <_kill_r>
 800899a:	2b01      	cmp	r3, #1
 800899c:	d00a      	beq.n	80089b4 <_raise_r+0x4c>
 800899e:	1c59      	adds	r1, r3, #1
 80089a0:	d103      	bne.n	80089aa <_raise_r+0x42>
 80089a2:	2316      	movs	r3, #22
 80089a4:	6003      	str	r3, [r0, #0]
 80089a6:	2001      	movs	r0, #1
 80089a8:	e7e7      	b.n	800897a <_raise_r+0x12>
 80089aa:	2400      	movs	r4, #0
 80089ac:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80089b0:	4628      	mov	r0, r5
 80089b2:	4798      	blx	r3
 80089b4:	2000      	movs	r0, #0
 80089b6:	e7e0      	b.n	800897a <_raise_r+0x12>

080089b8 <raise>:
 80089b8:	4b02      	ldr	r3, [pc, #8]	; (80089c4 <raise+0xc>)
 80089ba:	4601      	mov	r1, r0
 80089bc:	6818      	ldr	r0, [r3, #0]
 80089be:	f7ff bfd3 	b.w	8008968 <_raise_r>
 80089c2:	bf00      	nop
 80089c4:	2000001c 	.word	0x2000001c

080089c8 <_kill_r>:
 80089c8:	b538      	push	{r3, r4, r5, lr}
 80089ca:	4d07      	ldr	r5, [pc, #28]	; (80089e8 <_kill_r+0x20>)
 80089cc:	2300      	movs	r3, #0
 80089ce:	4604      	mov	r4, r0
 80089d0:	4608      	mov	r0, r1
 80089d2:	4611      	mov	r1, r2
 80089d4:	602b      	str	r3, [r5, #0]
 80089d6:	f7fa f891 	bl	8002afc <_kill>
 80089da:	1c43      	adds	r3, r0, #1
 80089dc:	d102      	bne.n	80089e4 <_kill_r+0x1c>
 80089de:	682b      	ldr	r3, [r5, #0]
 80089e0:	b103      	cbz	r3, 80089e4 <_kill_r+0x1c>
 80089e2:	6023      	str	r3, [r4, #0]
 80089e4:	bd38      	pop	{r3, r4, r5, pc}
 80089e6:	bf00      	nop
 80089e8:	2000074c 	.word	0x2000074c

080089ec <_getpid_r>:
 80089ec:	f7fa b87e 	b.w	8002aec <_getpid>

080089f0 <__sread>:
 80089f0:	b510      	push	{r4, lr}
 80089f2:	460c      	mov	r4, r1
 80089f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80089f8:	f000 f894 	bl	8008b24 <_read_r>
 80089fc:	2800      	cmp	r0, #0
 80089fe:	bfab      	itete	ge
 8008a00:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008a02:	89a3      	ldrhlt	r3, [r4, #12]
 8008a04:	181b      	addge	r3, r3, r0
 8008a06:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008a0a:	bfac      	ite	ge
 8008a0c:	6563      	strge	r3, [r4, #84]	; 0x54
 8008a0e:	81a3      	strhlt	r3, [r4, #12]
 8008a10:	bd10      	pop	{r4, pc}

08008a12 <__swrite>:
 8008a12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a16:	461f      	mov	r7, r3
 8008a18:	898b      	ldrh	r3, [r1, #12]
 8008a1a:	05db      	lsls	r3, r3, #23
 8008a1c:	4605      	mov	r5, r0
 8008a1e:	460c      	mov	r4, r1
 8008a20:	4616      	mov	r6, r2
 8008a22:	d505      	bpl.n	8008a30 <__swrite+0x1e>
 8008a24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a28:	2302      	movs	r3, #2
 8008a2a:	2200      	movs	r2, #0
 8008a2c:	f000 f868 	bl	8008b00 <_lseek_r>
 8008a30:	89a3      	ldrh	r3, [r4, #12]
 8008a32:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008a36:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008a3a:	81a3      	strh	r3, [r4, #12]
 8008a3c:	4632      	mov	r2, r6
 8008a3e:	463b      	mov	r3, r7
 8008a40:	4628      	mov	r0, r5
 8008a42:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008a46:	f000 b817 	b.w	8008a78 <_write_r>

08008a4a <__sseek>:
 8008a4a:	b510      	push	{r4, lr}
 8008a4c:	460c      	mov	r4, r1
 8008a4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a52:	f000 f855 	bl	8008b00 <_lseek_r>
 8008a56:	1c43      	adds	r3, r0, #1
 8008a58:	89a3      	ldrh	r3, [r4, #12]
 8008a5a:	bf15      	itete	ne
 8008a5c:	6560      	strne	r0, [r4, #84]	; 0x54
 8008a5e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008a62:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008a66:	81a3      	strheq	r3, [r4, #12]
 8008a68:	bf18      	it	ne
 8008a6a:	81a3      	strhne	r3, [r4, #12]
 8008a6c:	bd10      	pop	{r4, pc}

08008a6e <__sclose>:
 8008a6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a72:	f000 b813 	b.w	8008a9c <_close_r>
	...

08008a78 <_write_r>:
 8008a78:	b538      	push	{r3, r4, r5, lr}
 8008a7a:	4d07      	ldr	r5, [pc, #28]	; (8008a98 <_write_r+0x20>)
 8008a7c:	4604      	mov	r4, r0
 8008a7e:	4608      	mov	r0, r1
 8008a80:	4611      	mov	r1, r2
 8008a82:	2200      	movs	r2, #0
 8008a84:	602a      	str	r2, [r5, #0]
 8008a86:	461a      	mov	r2, r3
 8008a88:	f7fa f86f 	bl	8002b6a <_write>
 8008a8c:	1c43      	adds	r3, r0, #1
 8008a8e:	d102      	bne.n	8008a96 <_write_r+0x1e>
 8008a90:	682b      	ldr	r3, [r5, #0]
 8008a92:	b103      	cbz	r3, 8008a96 <_write_r+0x1e>
 8008a94:	6023      	str	r3, [r4, #0]
 8008a96:	bd38      	pop	{r3, r4, r5, pc}
 8008a98:	2000074c 	.word	0x2000074c

08008a9c <_close_r>:
 8008a9c:	b538      	push	{r3, r4, r5, lr}
 8008a9e:	4d06      	ldr	r5, [pc, #24]	; (8008ab8 <_close_r+0x1c>)
 8008aa0:	2300      	movs	r3, #0
 8008aa2:	4604      	mov	r4, r0
 8008aa4:	4608      	mov	r0, r1
 8008aa6:	602b      	str	r3, [r5, #0]
 8008aa8:	f7fa f87b 	bl	8002ba2 <_close>
 8008aac:	1c43      	adds	r3, r0, #1
 8008aae:	d102      	bne.n	8008ab6 <_close_r+0x1a>
 8008ab0:	682b      	ldr	r3, [r5, #0]
 8008ab2:	b103      	cbz	r3, 8008ab6 <_close_r+0x1a>
 8008ab4:	6023      	str	r3, [r4, #0]
 8008ab6:	bd38      	pop	{r3, r4, r5, pc}
 8008ab8:	2000074c 	.word	0x2000074c

08008abc <_fstat_r>:
 8008abc:	b538      	push	{r3, r4, r5, lr}
 8008abe:	4d07      	ldr	r5, [pc, #28]	; (8008adc <_fstat_r+0x20>)
 8008ac0:	2300      	movs	r3, #0
 8008ac2:	4604      	mov	r4, r0
 8008ac4:	4608      	mov	r0, r1
 8008ac6:	4611      	mov	r1, r2
 8008ac8:	602b      	str	r3, [r5, #0]
 8008aca:	f7fa f876 	bl	8002bba <_fstat>
 8008ace:	1c43      	adds	r3, r0, #1
 8008ad0:	d102      	bne.n	8008ad8 <_fstat_r+0x1c>
 8008ad2:	682b      	ldr	r3, [r5, #0]
 8008ad4:	b103      	cbz	r3, 8008ad8 <_fstat_r+0x1c>
 8008ad6:	6023      	str	r3, [r4, #0]
 8008ad8:	bd38      	pop	{r3, r4, r5, pc}
 8008ada:	bf00      	nop
 8008adc:	2000074c 	.word	0x2000074c

08008ae0 <_isatty_r>:
 8008ae0:	b538      	push	{r3, r4, r5, lr}
 8008ae2:	4d06      	ldr	r5, [pc, #24]	; (8008afc <_isatty_r+0x1c>)
 8008ae4:	2300      	movs	r3, #0
 8008ae6:	4604      	mov	r4, r0
 8008ae8:	4608      	mov	r0, r1
 8008aea:	602b      	str	r3, [r5, #0]
 8008aec:	f7fa f875 	bl	8002bda <_isatty>
 8008af0:	1c43      	adds	r3, r0, #1
 8008af2:	d102      	bne.n	8008afa <_isatty_r+0x1a>
 8008af4:	682b      	ldr	r3, [r5, #0]
 8008af6:	b103      	cbz	r3, 8008afa <_isatty_r+0x1a>
 8008af8:	6023      	str	r3, [r4, #0]
 8008afa:	bd38      	pop	{r3, r4, r5, pc}
 8008afc:	2000074c 	.word	0x2000074c

08008b00 <_lseek_r>:
 8008b00:	b538      	push	{r3, r4, r5, lr}
 8008b02:	4d07      	ldr	r5, [pc, #28]	; (8008b20 <_lseek_r+0x20>)
 8008b04:	4604      	mov	r4, r0
 8008b06:	4608      	mov	r0, r1
 8008b08:	4611      	mov	r1, r2
 8008b0a:	2200      	movs	r2, #0
 8008b0c:	602a      	str	r2, [r5, #0]
 8008b0e:	461a      	mov	r2, r3
 8008b10:	f7fa f86e 	bl	8002bf0 <_lseek>
 8008b14:	1c43      	adds	r3, r0, #1
 8008b16:	d102      	bne.n	8008b1e <_lseek_r+0x1e>
 8008b18:	682b      	ldr	r3, [r5, #0]
 8008b1a:	b103      	cbz	r3, 8008b1e <_lseek_r+0x1e>
 8008b1c:	6023      	str	r3, [r4, #0]
 8008b1e:	bd38      	pop	{r3, r4, r5, pc}
 8008b20:	2000074c 	.word	0x2000074c

08008b24 <_read_r>:
 8008b24:	b538      	push	{r3, r4, r5, lr}
 8008b26:	4d07      	ldr	r5, [pc, #28]	; (8008b44 <_read_r+0x20>)
 8008b28:	4604      	mov	r4, r0
 8008b2a:	4608      	mov	r0, r1
 8008b2c:	4611      	mov	r1, r2
 8008b2e:	2200      	movs	r2, #0
 8008b30:	602a      	str	r2, [r5, #0]
 8008b32:	461a      	mov	r2, r3
 8008b34:	f7f9 fffc 	bl	8002b30 <_read>
 8008b38:	1c43      	adds	r3, r0, #1
 8008b3a:	d102      	bne.n	8008b42 <_read_r+0x1e>
 8008b3c:	682b      	ldr	r3, [r5, #0]
 8008b3e:	b103      	cbz	r3, 8008b42 <_read_r+0x1e>
 8008b40:	6023      	str	r3, [r4, #0]
 8008b42:	bd38      	pop	{r3, r4, r5, pc}
 8008b44:	2000074c 	.word	0x2000074c

08008b48 <_init>:
 8008b48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b4a:	bf00      	nop
 8008b4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b4e:	bc08      	pop	{r3}
 8008b50:	469e      	mov	lr, r3
 8008b52:	4770      	bx	lr

08008b54 <_fini>:
 8008b54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b56:	bf00      	nop
 8008b58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b5a:	bc08      	pop	{r3}
 8008b5c:	469e      	mov	lr, r3
 8008b5e:	4770      	bx	lr
