
PSU_FW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004288  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002e0  08004428  08004428  00014428  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004708  08004708  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004708  08004708  00014708  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004710  08004710  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004710  08004710  00014710  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004714  08004714  00014714  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004718  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000514  20000070  08004788  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000584  08004788  00020584  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d0ef  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001cc3  00000000  00000000  0002d18f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ab8  00000000  00000000  0002ee58  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000009f8  00000000  00000000  0002f910  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00016f9f  00000000  00000000  00030308  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000099a0  00000000  00000000  000472a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008cb8d  00000000  00000000  00050c47  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000dd7d4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002f4c  00000000  00000000  000dd850  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004410 	.word	0x08004410

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	08004410 	.word	0x08004410

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002a4:	f000 b972 	b.w	800058c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	4688      	mov	r8, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14b      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4615      	mov	r5, r2
 80002d2:	d967      	bls.n	80003a4 <__udivmoddi4+0xe4>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0720 	rsb	r7, r2, #32
 80002de:	fa01 f302 	lsl.w	r3, r1, r2
 80002e2:	fa20 f707 	lsr.w	r7, r0, r7
 80002e6:	4095      	lsls	r5, r2
 80002e8:	ea47 0803 	orr.w	r8, r7, r3
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002f8:	fa1f fc85 	uxth.w	ip, r5
 80002fc:	fb0e 8817 	mls	r8, lr, r7, r8
 8000300:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000304:	fb07 f10c 	mul.w	r1, r7, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000312:	f080 811b 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8118 	bls.w	800054c <__udivmoddi4+0x28c>
 800031c:	3f02      	subs	r7, #2
 800031e:	442b      	add	r3, r5
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0fe 	udiv	r0, r3, lr
 8000328:	fb0e 3310 	mls	r3, lr, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fc0c 	mul.w	ip, r0, ip
 8000334:	45a4      	cmp	ip, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	192c      	adds	r4, r5, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800033e:	f080 8107 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000342:	45a4      	cmp	ip, r4
 8000344:	f240 8104 	bls.w	8000550 <__udivmoddi4+0x290>
 8000348:	3802      	subs	r0, #2
 800034a:	442c      	add	r4, r5
 800034c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000350:	eba4 040c 	sub.w	r4, r4, ip
 8000354:	2700      	movs	r7, #0
 8000356:	b11e      	cbz	r6, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c6 4300 	strd	r4, r3, [r6]
 8000360:	4639      	mov	r1, r7
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0xbe>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80eb 	beq.w	8000546 <__udivmoddi4+0x286>
 8000370:	2700      	movs	r7, #0
 8000372:	e9c6 0100 	strd	r0, r1, [r6]
 8000376:	4638      	mov	r0, r7
 8000378:	4639      	mov	r1, r7
 800037a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037e:	fab3 f783 	clz	r7, r3
 8000382:	2f00      	cmp	r7, #0
 8000384:	d147      	bne.n	8000416 <__udivmoddi4+0x156>
 8000386:	428b      	cmp	r3, r1
 8000388:	d302      	bcc.n	8000390 <__udivmoddi4+0xd0>
 800038a:	4282      	cmp	r2, r0
 800038c:	f200 80fa 	bhi.w	8000584 <__udivmoddi4+0x2c4>
 8000390:	1a84      	subs	r4, r0, r2
 8000392:	eb61 0303 	sbc.w	r3, r1, r3
 8000396:	2001      	movs	r0, #1
 8000398:	4698      	mov	r8, r3
 800039a:	2e00      	cmp	r6, #0
 800039c:	d0e0      	beq.n	8000360 <__udivmoddi4+0xa0>
 800039e:	e9c6 4800 	strd	r4, r8, [r6]
 80003a2:	e7dd      	b.n	8000360 <__udivmoddi4+0xa0>
 80003a4:	b902      	cbnz	r2, 80003a8 <__udivmoddi4+0xe8>
 80003a6:	deff      	udf	#255	; 0xff
 80003a8:	fab2 f282 	clz	r2, r2
 80003ac:	2a00      	cmp	r2, #0
 80003ae:	f040 808f 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b2:	1b49      	subs	r1, r1, r5
 80003b4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003b8:	fa1f f885 	uxth.w	r8, r5
 80003bc:	2701      	movs	r7, #1
 80003be:	fbb1 fcfe 	udiv	ip, r1, lr
 80003c2:	0c23      	lsrs	r3, r4, #16
 80003c4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003cc:	fb08 f10c 	mul.w	r1, r8, ip
 80003d0:	4299      	cmp	r1, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d4:	18eb      	adds	r3, r5, r3
 80003d6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4299      	cmp	r1, r3
 80003de:	f200 80cd 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003e2:	4684      	mov	ip, r0
 80003e4:	1a59      	subs	r1, r3, r1
 80003e6:	b2a3      	uxth	r3, r4
 80003e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ec:	fb0e 1410 	mls	r4, lr, r0, r1
 80003f0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003f4:	fb08 f800 	mul.w	r8, r8, r0
 80003f8:	45a0      	cmp	r8, r4
 80003fa:	d907      	bls.n	800040c <__udivmoddi4+0x14c>
 80003fc:	192c      	adds	r4, r5, r4
 80003fe:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x14a>
 8000404:	45a0      	cmp	r8, r4
 8000406:	f200 80b6 	bhi.w	8000576 <__udivmoddi4+0x2b6>
 800040a:	4618      	mov	r0, r3
 800040c:	eba4 0408 	sub.w	r4, r4, r8
 8000410:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000414:	e79f      	b.n	8000356 <__udivmoddi4+0x96>
 8000416:	f1c7 0c20 	rsb	ip, r7, #32
 800041a:	40bb      	lsls	r3, r7
 800041c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000420:	ea4e 0e03 	orr.w	lr, lr, r3
 8000424:	fa01 f407 	lsl.w	r4, r1, r7
 8000428:	fa20 f50c 	lsr.w	r5, r0, ip
 800042c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000430:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000434:	4325      	orrs	r5, r4
 8000436:	fbb3 f9f8 	udiv	r9, r3, r8
 800043a:	0c2c      	lsrs	r4, r5, #16
 800043c:	fb08 3319 	mls	r3, r8, r9, r3
 8000440:	fa1f fa8e 	uxth.w	sl, lr
 8000444:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000448:	fb09 f40a 	mul.w	r4, r9, sl
 800044c:	429c      	cmp	r4, r3
 800044e:	fa02 f207 	lsl.w	r2, r2, r7
 8000452:	fa00 f107 	lsl.w	r1, r0, r7
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1e 0303 	adds.w	r3, lr, r3
 800045c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000460:	f080 8087 	bcs.w	8000572 <__udivmoddi4+0x2b2>
 8000464:	429c      	cmp	r4, r3
 8000466:	f240 8084 	bls.w	8000572 <__udivmoddi4+0x2b2>
 800046a:	f1a9 0902 	sub.w	r9, r9, #2
 800046e:	4473      	add	r3, lr
 8000470:	1b1b      	subs	r3, r3, r4
 8000472:	b2ad      	uxth	r5, r5
 8000474:	fbb3 f0f8 	udiv	r0, r3, r8
 8000478:	fb08 3310 	mls	r3, r8, r0, r3
 800047c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000480:	fb00 fa0a 	mul.w	sl, r0, sl
 8000484:	45a2      	cmp	sl, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1e 0404 	adds.w	r4, lr, r4
 800048c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000490:	d26b      	bcs.n	800056a <__udivmoddi4+0x2aa>
 8000492:	45a2      	cmp	sl, r4
 8000494:	d969      	bls.n	800056a <__udivmoddi4+0x2aa>
 8000496:	3802      	subs	r0, #2
 8000498:	4474      	add	r4, lr
 800049a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800049e:	fba0 8902 	umull	r8, r9, r0, r2
 80004a2:	eba4 040a 	sub.w	r4, r4, sl
 80004a6:	454c      	cmp	r4, r9
 80004a8:	46c2      	mov	sl, r8
 80004aa:	464b      	mov	r3, r9
 80004ac:	d354      	bcc.n	8000558 <__udivmoddi4+0x298>
 80004ae:	d051      	beq.n	8000554 <__udivmoddi4+0x294>
 80004b0:	2e00      	cmp	r6, #0
 80004b2:	d069      	beq.n	8000588 <__udivmoddi4+0x2c8>
 80004b4:	ebb1 050a 	subs.w	r5, r1, sl
 80004b8:	eb64 0403 	sbc.w	r4, r4, r3
 80004bc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004c0:	40fd      	lsrs	r5, r7
 80004c2:	40fc      	lsrs	r4, r7
 80004c4:	ea4c 0505 	orr.w	r5, ip, r5
 80004c8:	e9c6 5400 	strd	r5, r4, [r6]
 80004cc:	2700      	movs	r7, #0
 80004ce:	e747      	b.n	8000360 <__udivmoddi4+0xa0>
 80004d0:	f1c2 0320 	rsb	r3, r2, #32
 80004d4:	fa20 f703 	lsr.w	r7, r0, r3
 80004d8:	4095      	lsls	r5, r2
 80004da:	fa01 f002 	lsl.w	r0, r1, r2
 80004de:	fa21 f303 	lsr.w	r3, r1, r3
 80004e2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004e6:	4338      	orrs	r0, r7
 80004e8:	0c01      	lsrs	r1, r0, #16
 80004ea:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ee:	fa1f f885 	uxth.w	r8, r5
 80004f2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb07 f308 	mul.w	r3, r7, r8
 80004fe:	428b      	cmp	r3, r1
 8000500:	fa04 f402 	lsl.w	r4, r4, r2
 8000504:	d907      	bls.n	8000516 <__udivmoddi4+0x256>
 8000506:	1869      	adds	r1, r5, r1
 8000508:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 800050c:	d22f      	bcs.n	800056e <__udivmoddi4+0x2ae>
 800050e:	428b      	cmp	r3, r1
 8000510:	d92d      	bls.n	800056e <__udivmoddi4+0x2ae>
 8000512:	3f02      	subs	r7, #2
 8000514:	4429      	add	r1, r5
 8000516:	1acb      	subs	r3, r1, r3
 8000518:	b281      	uxth	r1, r0
 800051a:	fbb3 f0fe 	udiv	r0, r3, lr
 800051e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000522:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000526:	fb00 f308 	mul.w	r3, r0, r8
 800052a:	428b      	cmp	r3, r1
 800052c:	d907      	bls.n	800053e <__udivmoddi4+0x27e>
 800052e:	1869      	adds	r1, r5, r1
 8000530:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000534:	d217      	bcs.n	8000566 <__udivmoddi4+0x2a6>
 8000536:	428b      	cmp	r3, r1
 8000538:	d915      	bls.n	8000566 <__udivmoddi4+0x2a6>
 800053a:	3802      	subs	r0, #2
 800053c:	4429      	add	r1, r5
 800053e:	1ac9      	subs	r1, r1, r3
 8000540:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000544:	e73b      	b.n	80003be <__udivmoddi4+0xfe>
 8000546:	4637      	mov	r7, r6
 8000548:	4630      	mov	r0, r6
 800054a:	e709      	b.n	8000360 <__udivmoddi4+0xa0>
 800054c:	4607      	mov	r7, r0
 800054e:	e6e7      	b.n	8000320 <__udivmoddi4+0x60>
 8000550:	4618      	mov	r0, r3
 8000552:	e6fb      	b.n	800034c <__udivmoddi4+0x8c>
 8000554:	4541      	cmp	r1, r8
 8000556:	d2ab      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 8000558:	ebb8 0a02 	subs.w	sl, r8, r2
 800055c:	eb69 020e 	sbc.w	r2, r9, lr
 8000560:	3801      	subs	r0, #1
 8000562:	4613      	mov	r3, r2
 8000564:	e7a4      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000566:	4660      	mov	r0, ip
 8000568:	e7e9      	b.n	800053e <__udivmoddi4+0x27e>
 800056a:	4618      	mov	r0, r3
 800056c:	e795      	b.n	800049a <__udivmoddi4+0x1da>
 800056e:	4667      	mov	r7, ip
 8000570:	e7d1      	b.n	8000516 <__udivmoddi4+0x256>
 8000572:	4681      	mov	r9, r0
 8000574:	e77c      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000576:	3802      	subs	r0, #2
 8000578:	442c      	add	r4, r5
 800057a:	e747      	b.n	800040c <__udivmoddi4+0x14c>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	442b      	add	r3, r5
 8000582:	e72f      	b.n	80003e4 <__udivmoddi4+0x124>
 8000584:	4638      	mov	r0, r7
 8000586:	e708      	b.n	800039a <__udivmoddi4+0xda>
 8000588:	4637      	mov	r7, r6
 800058a:	e6e9      	b.n	8000360 <__udivmoddi4+0xa0>

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <printMsg>:
#include "debug.h"
#include "stm32f4xx_hal.h"
#include "stm32f4xx_hal_gpio.h"

void printMsg(char *format, ...)
{
 8000590:	b40f      	push	{r0, r1, r2, r3}
 8000592:	b580      	push	{r7, lr}
 8000594:	b096      	sub	sp, #88	; 0x58
 8000596:	af00      	add	r7, sp, #0
	char str[80];

	/*Extract the the argument list using VA apis */
	va_list args;
	va_start(args, format);
 8000598:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800059c:	607b      	str	r3, [r7, #4]
	vsprintf(str, format, args);
 800059e:	f107 0308 	add.w	r3, r7, #8
 80005a2:	687a      	ldr	r2, [r7, #4]
 80005a4:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80005a6:	4618      	mov	r0, r3
 80005a8:	f003 fb66 	bl	8003c78 <vsiprintf>
	HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen(str), HAL_MAX_DELAY);
 80005ac:	f107 0308 	add.w	r3, r7, #8
 80005b0:	4618      	mov	r0, r3
 80005b2:	f7ff fe15 	bl	80001e0 <strlen>
 80005b6:	4603      	mov	r3, r0
 80005b8:	b29a      	uxth	r2, r3
 80005ba:	f107 0108 	add.w	r1, r7, #8
 80005be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80005c2:	4805      	ldr	r0, [pc, #20]	; (80005d8 <printMsg+0x48>)
 80005c4:	f002 fe8d 	bl	80032e2 <HAL_UART_Transmit>
	va_end(args);
}
 80005c8:	bf00      	nop
 80005ca:	3758      	adds	r7, #88	; 0x58
 80005cc:	46bd      	mov	sp, r7
 80005ce:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80005d2:	b004      	add	sp, #16
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop
 80005d8:	2000053c 	.word	0x2000053c

080005dc <i2cScan>:

uint8_t i2cScan(void)
{
 80005dc:	b5b0      	push	{r4, r5, r7, lr}
 80005de:	b088      	sub	sp, #32
 80005e0:	af00      	add	r7, sp, #0
	char info[] = "Scanning I2C bus...\r\n";
 80005e2:	4b31      	ldr	r3, [pc, #196]	; (80006a8 <i2cScan+0xcc>)
 80005e4:	1d3c      	adds	r4, r7, #4
 80005e6:	461d      	mov	r5, r3
 80005e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005ec:	e895 0003 	ldmia.w	r5, {r0, r1}
 80005f0:	6020      	str	r0, [r4, #0]
 80005f2:	3404      	adds	r4, #4
 80005f4:	8021      	strh	r1, [r4, #0]
	printMsg(info);
 80005f6:	1d3b      	adds	r3, r7, #4
 80005f8:	4618      	mov	r0, r3
 80005fa:	f7ff ffc9 	bl	8000590 <printMsg>

	uint8_t devices = 0;
 80005fe:	2300      	movs	r3, #0
 8000600:	77fb      	strb	r3, [r7, #31]

	HAL_StatusTypeDef res;

	for (uint16_t i = 0; i < 128; i++)
 8000602:	2300      	movs	r3, #0
 8000604:	83bb      	strh	r3, [r7, #28]
 8000606:	e042      	b.n	800068e <i2cScan+0xb2>
	{
		res = HAL_I2C_IsDeviceReady(&hi2c1, i << 1, 1, 10);
 8000608:	8bbb      	ldrh	r3, [r7, #28]
 800060a:	005b      	lsls	r3, r3, #1
 800060c:	b299      	uxth	r1, r3
 800060e:	230a      	movs	r3, #10
 8000610:	2201      	movs	r2, #1
 8000612:	4826      	ldr	r0, [pc, #152]	; (80006ac <i2cScan+0xd0>)
 8000614:	f001 fe90 	bl	8002338 <HAL_I2C_IsDeviceReady>
 8000618:	4603      	mov	r3, r0
 800061a:	76fb      	strb	r3, [r7, #27]
		if (res == HAL_OK && (i<<1) == SSD1306_I2C_ADDR )
 800061c:	7efb      	ldrb	r3, [r7, #27]
 800061e:	2b00      	cmp	r3, #0
 8000620:	d10d      	bne.n	800063e <i2cScan+0x62>
 8000622:	8bbb      	ldrh	r3, [r7, #28]
 8000624:	005b      	lsls	r3, r3, #1
 8000626:	2b78      	cmp	r3, #120	; 0x78
 8000628:	d109      	bne.n	800063e <i2cScan+0x62>
		{
			devices |= OLED_FOUND;
 800062a:	7ffb      	ldrb	r3, [r7, #31]
 800062c:	f043 0301 	orr.w	r3, r3, #1
 8000630:	77fb      	strb	r3, [r7, #31]
			printMsg("OLED found at 0x%02X\n", i);
 8000632:	8bbb      	ldrh	r3, [r7, #28]
 8000634:	4619      	mov	r1, r3
 8000636:	481e      	ldr	r0, [pc, #120]	; (80006b0 <i2cScan+0xd4>)
 8000638:	f7ff ffaa 	bl	8000590 <printMsg>
 800063c:	e024      	b.n	8000688 <i2cScan+0xac>
		}
		else if (res == HAL_OK && (i<<1) == MCP4018_ADDR)
 800063e:	7efb      	ldrb	r3, [r7, #27]
 8000640:	2b00      	cmp	r3, #0
 8000642:	d10d      	bne.n	8000660 <i2cScan+0x84>
 8000644:	8bbb      	ldrh	r3, [r7, #28]
 8000646:	005b      	lsls	r3, r3, #1
 8000648:	2b5e      	cmp	r3, #94	; 0x5e
 800064a:	d109      	bne.n	8000660 <i2cScan+0x84>
		{
			devices |= POT_FOUND;
 800064c:	7ffb      	ldrb	r3, [r7, #31]
 800064e:	f043 0302 	orr.w	r3, r3, #2
 8000652:	77fb      	strb	r3, [r7, #31]
			printMsg("MCP4018 found at 0x%02X\n", i);
 8000654:	8bbb      	ldrh	r3, [r7, #28]
 8000656:	4619      	mov	r1, r3
 8000658:	4816      	ldr	r0, [pc, #88]	; (80006b4 <i2cScan+0xd8>)
 800065a:	f7ff ff99 	bl	8000590 <printMsg>
 800065e:	e013      	b.n	8000688 <i2cScan+0xac>
		}
		else if (res == HAL_OK)
 8000660:	7efb      	ldrb	r3, [r7, #27]
 8000662:	2b00      	cmp	r3, #0
 8000664:	d105      	bne.n	8000672 <i2cScan+0x96>
		{
			printMsg("Unknown device found at 0x%02X\n", i);
 8000666:	8bbb      	ldrh	r3, [r7, #28]
 8000668:	4619      	mov	r1, r3
 800066a:	4813      	ldr	r0, [pc, #76]	; (80006b8 <i2cScan+0xdc>)
 800066c:	f7ff ff90 	bl	8000590 <printMsg>
 8000670:	e00a      	b.n	8000688 <i2cScan+0xac>
		}
		else if (res == HAL_OK)
 8000672:	7efb      	ldrb	r3, [r7, #27]
 8000674:	2b00      	cmp	r3, #0
 8000676:	d107      	bne.n	8000688 <i2cScan+0xac>
		{
			printMsg("Unknown device found at 0x%02X\n", i);
 8000678:	8bbb      	ldrh	r3, [r7, #28]
 800067a:	4619      	mov	r1, r3
 800067c:	480e      	ldr	r0, [pc, #56]	; (80006b8 <i2cScan+0xdc>)
 800067e:	f7ff ff87 	bl	8000590 <printMsg>
			HAL_Delay(10);
 8000682:	200a      	movs	r0, #10
 8000684:	f000 feb6 	bl	80013f4 <HAL_Delay>
	for (uint16_t i = 0; i < 128; i++)
 8000688:	8bbb      	ldrh	r3, [r7, #28]
 800068a:	3301      	adds	r3, #1
 800068c:	83bb      	strh	r3, [r7, #28]
 800068e:	8bbb      	ldrh	r3, [r7, #28]
 8000690:	2b7f      	cmp	r3, #127	; 0x7f
 8000692:	d9b9      	bls.n	8000608 <i2cScan+0x2c>
		}

	}
	printMsg("returning from scan %02X\n", devices);
 8000694:	7ffb      	ldrb	r3, [r7, #31]
 8000696:	4619      	mov	r1, r3
 8000698:	4808      	ldr	r0, [pc, #32]	; (80006bc <i2cScan+0xe0>)
 800069a:	f7ff ff79 	bl	8000590 <printMsg>
	return devices;
 800069e:	7ffb      	ldrb	r3, [r7, #31]
}
 80006a0:	4618      	mov	r0, r3
 80006a2:	3720      	adds	r7, #32
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bdb0      	pop	{r4, r5, r7, pc}
 80006a8:	08004498 	.word	0x08004498
 80006ac:	200004a0 	.word	0x200004a0
 80006b0:	08004428 	.word	0x08004428
 80006b4:	08004440 	.word	0x08004440
 80006b8:	0800445c 	.word	0x0800445c
 80006bc:	0800447c 	.word	0x0800447c

080006c0 <errorLEDs>:

void errorLEDs(uint8_t error)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b082      	sub	sp, #8
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	4603      	mov	r3, r0
 80006c8:	71fb      	strb	r3, [r7, #7]
	while (1)
	{
		if (error == OLED_FOUND)
 80006ca:	79fb      	ldrb	r3, [r7, #7]
 80006cc:	2b01      	cmp	r3, #1
 80006ce:	d114      	bne.n	80006fa <errorLEDs+0x3a>
		{
			HAL_GPIO_TogglePin(CC_LED_PORT, CC_LED_PIN);
 80006d0:	2120      	movs	r1, #32
 80006d2:	4826      	ldr	r0, [pc, #152]	; (800076c <errorLEDs+0xac>)
 80006d4:	f001 fbbf 	bl	8001e56 <HAL_GPIO_TogglePin>
			HAL_Delay(FLASH_FREQ);
 80006d8:	2064      	movs	r0, #100	; 0x64
 80006da:	f000 fe8b 	bl	80013f4 <HAL_Delay>
			HAL_GPIO_TogglePin(OE_LED_PORT, OE_LED_PIN);
 80006de:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80006e2:	4822      	ldr	r0, [pc, #136]	; (800076c <errorLEDs+0xac>)
 80006e4:	f001 fbb7 	bl	8001e56 <HAL_GPIO_TogglePin>
			HAL_Delay(FLASH_FREQ >> 1);
 80006e8:	2032      	movs	r0, #50	; 0x32
 80006ea:	f000 fe83 	bl	80013f4 <HAL_Delay>
			HAL_GPIO_TogglePin(OE_LED_PORT, OE_LED_PIN);
 80006ee:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80006f2:	481e      	ldr	r0, [pc, #120]	; (800076c <errorLEDs+0xac>)
 80006f4:	f001 fbaf 	bl	8001e56 <HAL_GPIO_TogglePin>
 80006f8:	e7e7      	b.n	80006ca <errorLEDs+0xa>
		}
		else if (error == POT_FOUND)
 80006fa:	79fb      	ldrb	r3, [r7, #7]
 80006fc:	2b02      	cmp	r3, #2
 80006fe:	d113      	bne.n	8000728 <errorLEDs+0x68>
		{
			HAL_GPIO_TogglePin(OE_LED_PORT, OE_LED_PIN);
 8000700:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000704:	4819      	ldr	r0, [pc, #100]	; (800076c <errorLEDs+0xac>)
 8000706:	f001 fba6 	bl	8001e56 <HAL_GPIO_TogglePin>
			HAL_Delay(FLASH_FREQ);
 800070a:	2064      	movs	r0, #100	; 0x64
 800070c:	f000 fe72 	bl	80013f4 <HAL_Delay>
			HAL_GPIO_TogglePin(CC_LED_PORT, CC_LED_PIN);
 8000710:	2120      	movs	r1, #32
 8000712:	4816      	ldr	r0, [pc, #88]	; (800076c <errorLEDs+0xac>)
 8000714:	f001 fb9f 	bl	8001e56 <HAL_GPIO_TogglePin>
			HAL_Delay(FLASH_FREQ >> 1);
 8000718:	2032      	movs	r0, #50	; 0x32
 800071a:	f000 fe6b 	bl	80013f4 <HAL_Delay>
			HAL_GPIO_TogglePin(CC_LED_PORT, CC_LED_PIN);
 800071e:	2120      	movs	r1, #32
 8000720:	4812      	ldr	r0, [pc, #72]	; (800076c <errorLEDs+0xac>)
 8000722:	f001 fb98 	bl	8001e56 <HAL_GPIO_TogglePin>
 8000726:	e7d0      	b.n	80006ca <errorLEDs+0xa>
		}
		else if (error == 0)
 8000728:	79fb      	ldrb	r3, [r7, #7]
 800072a:	2b00      	cmp	r3, #0
 800072c:	d118      	bne.n	8000760 <errorLEDs+0xa0>
		{
			HAL_GPIO_TogglePin(OE_LED_PORT, OE_LED_PIN);
 800072e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000732:	480e      	ldr	r0, [pc, #56]	; (800076c <errorLEDs+0xac>)
 8000734:	f001 fb8f 	bl	8001e56 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(CC_LED_PORT, CC_LED_PIN);
 8000738:	2120      	movs	r1, #32
 800073a:	480c      	ldr	r0, [pc, #48]	; (800076c <errorLEDs+0xac>)
 800073c:	f001 fb8b 	bl	8001e56 <HAL_GPIO_TogglePin>
			HAL_Delay(FLASH_FREQ >> 1);
 8000740:	2032      	movs	r0, #50	; 0x32
 8000742:	f000 fe57 	bl	80013f4 <HAL_Delay>
			HAL_GPIO_TogglePin(OE_LED_PORT, OE_LED_PIN);
 8000746:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800074a:	4808      	ldr	r0, [pc, #32]	; (800076c <errorLEDs+0xac>)
 800074c:	f001 fb83 	bl	8001e56 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(CC_LED_PORT, CC_LED_PIN);
 8000750:	2120      	movs	r1, #32
 8000752:	4806      	ldr	r0, [pc, #24]	; (800076c <errorLEDs+0xac>)
 8000754:	f001 fb7f 	bl	8001e56 <HAL_GPIO_TogglePin>
			HAL_Delay(FLASH_FREQ >> 1);
 8000758:	2032      	movs	r0, #50	; 0x32
 800075a:	f000 fe4b 	bl	80013f4 <HAL_Delay>
		if (error == OLED_FOUND)
 800075e:	e7b4      	b.n	80006ca <errorLEDs+0xa>
		}
		else
		{
			break;
 8000760:	bf00      	nop
		}
	}
}
 8000762:	bf00      	nop
 8000764:	3708      	adds	r7, #8
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	40020000 	.word	0x40020000

08000770 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b082      	sub	sp, #8
 8000774:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000776:	f000 fdcb 	bl	8001310 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800077a:	f000 f821 	bl	80007c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800077e:	f000 f929 	bl	80009d4 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000782:	f000 f87d 	bl	8000880 <MX_ADC1_Init>
  MX_I2C1_Init();
 8000786:	f000 f8cd 	bl	8000924 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 800078a:	f000 f8f9 	bl	8000980 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  uint8_t i2cScanRet = i2cScan();
 800078e:	f7ff ff25 	bl	80005dc <i2cScan>
 8000792:	4603      	mov	r3, r0
 8000794:	71fb      	strb	r3, [r7, #7]
  if (!i2cScanRet)
 8000796:	79fb      	ldrb	r3, [r7, #7]
 8000798:	2b00      	cmp	r3, #0
 800079a:	d103      	bne.n	80007a4 <main+0x34>
  {
    errorLEDs(i2cScanRet);
 800079c:	79fb      	ldrb	r3, [r7, #7]
 800079e:	4618      	mov	r0, r3
 80007a0:	f7ff ff8e 	bl	80006c0 <errorLEDs>
  }
  printMsg("no error");
 80007a4:	4805      	ldr	r0, [pc, #20]	; (80007bc <main+0x4c>)
 80007a6:	f7ff fef3 	bl	8000590 <printMsg>
  ssd1306_Init();
 80007aa:	f000 fa41 	bl	8000c30 <ssd1306_Init>
//  ssd1306_TestAll();
  ssd1306_Fill(Black);
 80007ae:	2000      	movs	r0, #0
 80007b0:	f000 faa8 	bl	8000d04 <ssd1306_Fill>
  showStartup();
 80007b4:	f000 f9d8 	bl	8000b68 <showStartup>
  //  ssd1306_TestAll();
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80007b8:	e7fe      	b.n	80007b8 <main+0x48>
 80007ba:	bf00      	nop
 80007bc:	080044b0 	.word	0x080044b0

080007c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b094      	sub	sp, #80	; 0x50
 80007c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007c6:	f107 0320 	add.w	r3, r7, #32
 80007ca:	2230      	movs	r2, #48	; 0x30
 80007cc:	2100      	movs	r1, #0
 80007ce:	4618      	mov	r0, r3
 80007d0:	f003 fa34 	bl	8003c3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007d4:	f107 030c 	add.w	r3, r7, #12
 80007d8:	2200      	movs	r2, #0
 80007da:	601a      	str	r2, [r3, #0]
 80007dc:	605a      	str	r2, [r3, #4]
 80007de:	609a      	str	r2, [r3, #8]
 80007e0:	60da      	str	r2, [r3, #12]
 80007e2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007e4:	2300      	movs	r3, #0
 80007e6:	60bb      	str	r3, [r7, #8]
 80007e8:	4b23      	ldr	r3, [pc, #140]	; (8000878 <SystemClock_Config+0xb8>)
 80007ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007ec:	4a22      	ldr	r2, [pc, #136]	; (8000878 <SystemClock_Config+0xb8>)
 80007ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007f2:	6413      	str	r3, [r2, #64]	; 0x40
 80007f4:	4b20      	ldr	r3, [pc, #128]	; (8000878 <SystemClock_Config+0xb8>)
 80007f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007fc:	60bb      	str	r3, [r7, #8]
 80007fe:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000800:	2300      	movs	r3, #0
 8000802:	607b      	str	r3, [r7, #4]
 8000804:	4b1d      	ldr	r3, [pc, #116]	; (800087c <SystemClock_Config+0xbc>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800080c:	4a1b      	ldr	r2, [pc, #108]	; (800087c <SystemClock_Config+0xbc>)
 800080e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000812:	6013      	str	r3, [r2, #0]
 8000814:	4b19      	ldr	r3, [pc, #100]	; (800087c <SystemClock_Config+0xbc>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800081c:	607b      	str	r3, [r7, #4]
 800081e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000820:	2302      	movs	r3, #2
 8000822:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000824:	2301      	movs	r3, #1
 8000826:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000828:	2310      	movs	r3, #16
 800082a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800082c:	2300      	movs	r3, #0
 800082e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000830:	f107 0320 	add.w	r3, r7, #32
 8000834:	4618      	mov	r0, r3
 8000836:	f002 f8cb 	bl	80029d0 <HAL_RCC_OscConfig>
 800083a:	4603      	mov	r3, r0
 800083c:	2b00      	cmp	r3, #0
 800083e:	d001      	beq.n	8000844 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000840:	f000 f9a8 	bl	8000b94 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000844:	230f      	movs	r3, #15
 8000846:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000848:	2300      	movs	r3, #0
 800084a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800084c:	2300      	movs	r3, #0
 800084e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000850:	2300      	movs	r3, #0
 8000852:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000854:	2300      	movs	r3, #0
 8000856:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000858:	f107 030c 	add.w	r3, r7, #12
 800085c:	2100      	movs	r1, #0
 800085e:	4618      	mov	r0, r3
 8000860:	f002 fb26 	bl	8002eb0 <HAL_RCC_ClockConfig>
 8000864:	4603      	mov	r3, r0
 8000866:	2b00      	cmp	r3, #0
 8000868:	d001      	beq.n	800086e <SystemClock_Config+0xae>
  {
    Error_Handler();
 800086a:	f000 f993 	bl	8000b94 <Error_Handler>
  }
}
 800086e:	bf00      	nop
 8000870:	3750      	adds	r7, #80	; 0x50
 8000872:	46bd      	mov	sp, r7
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	40023800 	.word	0x40023800
 800087c:	40007000 	.word	0x40007000

08000880 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b084      	sub	sp, #16
 8000884:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000886:	463b      	mov	r3, r7
 8000888:	2200      	movs	r2, #0
 800088a:	601a      	str	r2, [r3, #0]
 800088c:	605a      	str	r2, [r3, #4]
 800088e:	609a      	str	r2, [r3, #8]
 8000890:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000892:	4b21      	ldr	r3, [pc, #132]	; (8000918 <MX_ADC1_Init+0x98>)
 8000894:	4a21      	ldr	r2, [pc, #132]	; (800091c <MX_ADC1_Init+0x9c>)
 8000896:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000898:	4b1f      	ldr	r3, [pc, #124]	; (8000918 <MX_ADC1_Init+0x98>)
 800089a:	2200      	movs	r2, #0
 800089c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800089e:	4b1e      	ldr	r3, [pc, #120]	; (8000918 <MX_ADC1_Init+0x98>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80008a4:	4b1c      	ldr	r3, [pc, #112]	; (8000918 <MX_ADC1_Init+0x98>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80008aa:	4b1b      	ldr	r3, [pc, #108]	; (8000918 <MX_ADC1_Init+0x98>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80008b0:	4b19      	ldr	r3, [pc, #100]	; (8000918 <MX_ADC1_Init+0x98>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80008b8:	4b17      	ldr	r3, [pc, #92]	; (8000918 <MX_ADC1_Init+0x98>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008be:	4b16      	ldr	r3, [pc, #88]	; (8000918 <MX_ADC1_Init+0x98>)
 80008c0:	4a17      	ldr	r2, [pc, #92]	; (8000920 <MX_ADC1_Init+0xa0>)
 80008c2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80008c4:	4b14      	ldr	r3, [pc, #80]	; (8000918 <MX_ADC1_Init+0x98>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80008ca:	4b13      	ldr	r3, [pc, #76]	; (8000918 <MX_ADC1_Init+0x98>)
 80008cc:	2201      	movs	r2, #1
 80008ce:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80008d0:	4b11      	ldr	r3, [pc, #68]	; (8000918 <MX_ADC1_Init+0x98>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80008d8:	4b0f      	ldr	r3, [pc, #60]	; (8000918 <MX_ADC1_Init+0x98>)
 80008da:	2201      	movs	r2, #1
 80008dc:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80008de:	480e      	ldr	r0, [pc, #56]	; (8000918 <MX_ADC1_Init+0x98>)
 80008e0:	f000 fdaa 	bl	8001438 <HAL_ADC_Init>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d001      	beq.n	80008ee <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80008ea:	f000 f953 	bl	8000b94 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 80008ee:	230d      	movs	r3, #13
 80008f0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80008f2:	2301      	movs	r3, #1
 80008f4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80008f6:	2300      	movs	r3, #0
 80008f8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008fa:	463b      	mov	r3, r7
 80008fc:	4619      	mov	r1, r3
 80008fe:	4806      	ldr	r0, [pc, #24]	; (8000918 <MX_ADC1_Init+0x98>)
 8000900:	f000 fdde 	bl	80014c0 <HAL_ADC_ConfigChannel>
 8000904:	4603      	mov	r3, r0
 8000906:	2b00      	cmp	r3, #0
 8000908:	d001      	beq.n	800090e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800090a:	f000 f943 	bl	8000b94 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800090e:	bf00      	nop
 8000910:	3710      	adds	r7, #16
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	200004f4 	.word	0x200004f4
 800091c:	40012000 	.word	0x40012000
 8000920:	0f000001 	.word	0x0f000001

08000924 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000928:	4b12      	ldr	r3, [pc, #72]	; (8000974 <MX_I2C1_Init+0x50>)
 800092a:	4a13      	ldr	r2, [pc, #76]	; (8000978 <MX_I2C1_Init+0x54>)
 800092c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800092e:	4b11      	ldr	r3, [pc, #68]	; (8000974 <MX_I2C1_Init+0x50>)
 8000930:	4a12      	ldr	r2, [pc, #72]	; (800097c <MX_I2C1_Init+0x58>)
 8000932:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000934:	4b0f      	ldr	r3, [pc, #60]	; (8000974 <MX_I2C1_Init+0x50>)
 8000936:	2200      	movs	r2, #0
 8000938:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800093a:	4b0e      	ldr	r3, [pc, #56]	; (8000974 <MX_I2C1_Init+0x50>)
 800093c:	2200      	movs	r2, #0
 800093e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000940:	4b0c      	ldr	r3, [pc, #48]	; (8000974 <MX_I2C1_Init+0x50>)
 8000942:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000946:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000948:	4b0a      	ldr	r3, [pc, #40]	; (8000974 <MX_I2C1_Init+0x50>)
 800094a:	2200      	movs	r2, #0
 800094c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800094e:	4b09      	ldr	r3, [pc, #36]	; (8000974 <MX_I2C1_Init+0x50>)
 8000950:	2200      	movs	r2, #0
 8000952:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000954:	4b07      	ldr	r3, [pc, #28]	; (8000974 <MX_I2C1_Init+0x50>)
 8000956:	2200      	movs	r2, #0
 8000958:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800095a:	4b06      	ldr	r3, [pc, #24]	; (8000974 <MX_I2C1_Init+0x50>)
 800095c:	2200      	movs	r2, #0
 800095e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000960:	4804      	ldr	r0, [pc, #16]	; (8000974 <MX_I2C1_Init+0x50>)
 8000962:	f001 fab7 	bl	8001ed4 <HAL_I2C_Init>
 8000966:	4603      	mov	r3, r0
 8000968:	2b00      	cmp	r3, #0
 800096a:	d001      	beq.n	8000970 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800096c:	f000 f912 	bl	8000b94 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */
  /* USER CODE END I2C1_Init 2 */

}
 8000970:	bf00      	nop
 8000972:	bd80      	pop	{r7, pc}
 8000974:	200004a0 	.word	0x200004a0
 8000978:	40005400 	.word	0x40005400
 800097c:	00061a80 	.word	0x00061a80

08000980 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000984:	4b11      	ldr	r3, [pc, #68]	; (80009cc <MX_USART2_UART_Init+0x4c>)
 8000986:	4a12      	ldr	r2, [pc, #72]	; (80009d0 <MX_USART2_UART_Init+0x50>)
 8000988:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800098a:	4b10      	ldr	r3, [pc, #64]	; (80009cc <MX_USART2_UART_Init+0x4c>)
 800098c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000990:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000992:	4b0e      	ldr	r3, [pc, #56]	; (80009cc <MX_USART2_UART_Init+0x4c>)
 8000994:	2200      	movs	r2, #0
 8000996:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000998:	4b0c      	ldr	r3, [pc, #48]	; (80009cc <MX_USART2_UART_Init+0x4c>)
 800099a:	2200      	movs	r2, #0
 800099c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800099e:	4b0b      	ldr	r3, [pc, #44]	; (80009cc <MX_USART2_UART_Init+0x4c>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009a4:	4b09      	ldr	r3, [pc, #36]	; (80009cc <MX_USART2_UART_Init+0x4c>)
 80009a6:	220c      	movs	r2, #12
 80009a8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009aa:	4b08      	ldr	r3, [pc, #32]	; (80009cc <MX_USART2_UART_Init+0x4c>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009b0:	4b06      	ldr	r3, [pc, #24]	; (80009cc <MX_USART2_UART_Init+0x4c>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009b6:	4805      	ldr	r0, [pc, #20]	; (80009cc <MX_USART2_UART_Init+0x4c>)
 80009b8:	f002 fc46 	bl	8003248 <HAL_UART_Init>
 80009bc:	4603      	mov	r3, r0
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d001      	beq.n	80009c6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80009c2:	f000 f8e7 	bl	8000b94 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009c6:	bf00      	nop
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	2000053c 	.word	0x2000053c
 80009d0:	40004400 	.word	0x40004400

080009d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b08a      	sub	sp, #40	; 0x28
 80009d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009da:	f107 0314 	add.w	r3, r7, #20
 80009de:	2200      	movs	r2, #0
 80009e0:	601a      	str	r2, [r3, #0]
 80009e2:	605a      	str	r2, [r3, #4]
 80009e4:	609a      	str	r2, [r3, #8]
 80009e6:	60da      	str	r2, [r3, #12]
 80009e8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009ea:	2300      	movs	r3, #0
 80009ec:	613b      	str	r3, [r7, #16]
 80009ee:	4b58      	ldr	r3, [pc, #352]	; (8000b50 <MX_GPIO_Init+0x17c>)
 80009f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f2:	4a57      	ldr	r2, [pc, #348]	; (8000b50 <MX_GPIO_Init+0x17c>)
 80009f4:	f043 0304 	orr.w	r3, r3, #4
 80009f8:	6313      	str	r3, [r2, #48]	; 0x30
 80009fa:	4b55      	ldr	r3, [pc, #340]	; (8000b50 <MX_GPIO_Init+0x17c>)
 80009fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fe:	f003 0304 	and.w	r3, r3, #4
 8000a02:	613b      	str	r3, [r7, #16]
 8000a04:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a06:	2300      	movs	r3, #0
 8000a08:	60fb      	str	r3, [r7, #12]
 8000a0a:	4b51      	ldr	r3, [pc, #324]	; (8000b50 <MX_GPIO_Init+0x17c>)
 8000a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0e:	4a50      	ldr	r2, [pc, #320]	; (8000b50 <MX_GPIO_Init+0x17c>)
 8000a10:	f043 0301 	orr.w	r3, r3, #1
 8000a14:	6313      	str	r3, [r2, #48]	; 0x30
 8000a16:	4b4e      	ldr	r3, [pc, #312]	; (8000b50 <MX_GPIO_Init+0x17c>)
 8000a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1a:	f003 0301 	and.w	r3, r3, #1
 8000a1e:	60fb      	str	r3, [r7, #12]
 8000a20:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a22:	2300      	movs	r3, #0
 8000a24:	60bb      	str	r3, [r7, #8]
 8000a26:	4b4a      	ldr	r3, [pc, #296]	; (8000b50 <MX_GPIO_Init+0x17c>)
 8000a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2a:	4a49      	ldr	r2, [pc, #292]	; (8000b50 <MX_GPIO_Init+0x17c>)
 8000a2c:	f043 0308 	orr.w	r3, r3, #8
 8000a30:	6313      	str	r3, [r2, #48]	; 0x30
 8000a32:	4b47      	ldr	r3, [pc, #284]	; (8000b50 <MX_GPIO_Init+0x17c>)
 8000a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a36:	f003 0308 	and.w	r3, r3, #8
 8000a3a:	60bb      	str	r3, [r7, #8]
 8000a3c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a3e:	2300      	movs	r3, #0
 8000a40:	607b      	str	r3, [r7, #4]
 8000a42:	4b43      	ldr	r3, [pc, #268]	; (8000b50 <MX_GPIO_Init+0x17c>)
 8000a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a46:	4a42      	ldr	r2, [pc, #264]	; (8000b50 <MX_GPIO_Init+0x17c>)
 8000a48:	f043 0302 	orr.w	r3, r3, #2
 8000a4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a4e:	4b40      	ldr	r3, [pc, #256]	; (8000b50 <MX_GPIO_Init+0x17c>)
 8000a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a52:	f003 0302 	and.w	r3, r3, #2
 8000a56:	607b      	str	r3, [r7, #4]
 8000a58:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, REG_EN_Pin|CC_LED_Pin, GPIO_PIN_RESET);
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	f240 4102 	movw	r1, #1026	; 0x402
 8000a60:	483c      	ldr	r0, [pc, #240]	; (8000b54 <MX_GPIO_Init+0x180>)
 8000a62:	f001 f9df 	bl	8001e24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|OE_LED_Pin, GPIO_PIN_RESET);
 8000a66:	2200      	movs	r2, #0
 8000a68:	f248 0120 	movw	r1, #32800	; 0x8020
 8000a6c:	483a      	ldr	r0, [pc, #232]	; (8000b58 <MX_GPIO_Init+0x184>)
 8000a6e:	f001 f9d9 	bl	8001e24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(nSW_UP_GPIO_Port, nSW_UP_Pin, GPIO_PIN_RESET);
 8000a72:	2200      	movs	r2, #0
 8000a74:	2110      	movs	r1, #16
 8000a76:	4839      	ldr	r0, [pc, #228]	; (8000b5c <MX_GPIO_Init+0x188>)
 8000a78:	f001 f9d4 	bl	8001e24 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : REG_EN_Pin CC_LED_Pin */
  GPIO_InitStruct.Pin = REG_EN_Pin|CC_LED_Pin;
 8000a7c:	f240 4302 	movw	r3, #1026	; 0x402
 8000a80:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a82:	2301      	movs	r3, #1
 8000a84:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a86:	2300      	movs	r3, #0
 8000a88:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a8e:	f107 0314 	add.w	r3, r7, #20
 8000a92:	4619      	mov	r1, r3
 8000a94:	482f      	ldr	r0, [pc, #188]	; (8000b54 <MX_GPIO_Init+0x180>)
 8000a96:	f001 f843 	bl	8001b20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 OE_LED_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_5|OE_LED_Pin;
 8000a9a:	f248 0320 	movw	r3, #32800	; 0x8020
 8000a9e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aa0:	2301      	movs	r3, #1
 8000aa2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aac:	f107 0314 	add.w	r3, r7, #20
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4829      	ldr	r0, [pc, #164]	; (8000b58 <MX_GPIO_Init+0x184>)
 8000ab4:	f001 f834 	bl	8001b20 <HAL_GPIO_Init>

  /*Configure GPIO pin : nSW_INT_Pin */
  GPIO_InitStruct.Pin = nSW_INT_Pin;
 8000ab8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000abc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000abe:	4b28      	ldr	r3, [pc, #160]	; (8000b60 <MX_GPIO_Init+0x18c>)
 8000ac0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(nSW_INT_GPIO_Port, &GPIO_InitStruct);
 8000ac6:	f107 0314 	add.w	r3, r7, #20
 8000aca:	4619      	mov	r1, r3
 8000acc:	4821      	ldr	r0, [pc, #132]	; (8000b54 <MX_GPIO_Init+0x180>)
 8000ace:	f001 f827 	bl	8001b20 <HAL_GPIO_Init>

  /*Configure GPIO pin : nSW_VI_Pin */
  GPIO_InitStruct.Pin = nSW_VI_Pin;
 8000ad2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ad6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000adc:	2300      	movs	r3, #0
 8000ade:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(nSW_VI_GPIO_Port, &GPIO_InitStruct);
 8000ae0:	f107 0314 	add.w	r3, r7, #20
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	481b      	ldr	r0, [pc, #108]	; (8000b54 <MX_GPIO_Init+0x180>)
 8000ae8:	f001 f81a 	bl	8001b20 <HAL_GPIO_Init>

  /*Configure GPIO pin : nSW_DW_Pin */
  GPIO_InitStruct.Pin = nSW_DW_Pin;
 8000aec:	2304      	movs	r3, #4
 8000aee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000af0:	2300      	movs	r3, #0
 8000af2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af4:	2300      	movs	r3, #0
 8000af6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(nSW_DW_GPIO_Port, &GPIO_InitStruct);
 8000af8:	f107 0314 	add.w	r3, r7, #20
 8000afc:	4619      	mov	r1, r3
 8000afe:	4819      	ldr	r0, [pc, #100]	; (8000b64 <MX_GPIO_Init+0x190>)
 8000b00:	f001 f80e 	bl	8001b20 <HAL_GPIO_Init>

  /*Configure GPIO pin : nSW_UP_Pin */
  GPIO_InitStruct.Pin = nSW_UP_Pin;
 8000b04:	2310      	movs	r3, #16
 8000b06:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b08:	2301      	movs	r3, #1
 8000b0a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b10:	2300      	movs	r3, #0
 8000b12:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(nSW_UP_GPIO_Port, &GPIO_InitStruct);
 8000b14:	f107 0314 	add.w	r3, r7, #20
 8000b18:	4619      	mov	r1, r3
 8000b1a:	4810      	ldr	r0, [pc, #64]	; (8000b5c <MX_GPIO_Init+0x188>)
 8000b1c:	f001 f800 	bl	8001b20 <HAL_GPIO_Init>

  /*Configure GPIO pin : nSW_OE_Pin */
  GPIO_InitStruct.Pin = nSW_OE_Pin;
 8000b20:	2320      	movs	r3, #32
 8000b22:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b24:	2300      	movs	r3, #0
 8000b26:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(nSW_OE_GPIO_Port, &GPIO_InitStruct);
 8000b2c:	f107 0314 	add.w	r3, r7, #20
 8000b30:	4619      	mov	r1, r3
 8000b32:	480a      	ldr	r0, [pc, #40]	; (8000b5c <MX_GPIO_Init+0x188>)
 8000b34:	f000 fff4 	bl	8001b20 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000b38:	2200      	movs	r2, #0
 8000b3a:	2100      	movs	r1, #0
 8000b3c:	2028      	movs	r0, #40	; 0x28
 8000b3e:	f000 ffb8 	bl	8001ab2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000b42:	2028      	movs	r0, #40	; 0x28
 8000b44:	f000 ffd1 	bl	8001aea <HAL_NVIC_EnableIRQ>

}
 8000b48:	bf00      	nop
 8000b4a:	3728      	adds	r7, #40	; 0x28
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bd80      	pop	{r7, pc}
 8000b50:	40023800 	.word	0x40023800
 8000b54:	40020800 	.word	0x40020800
 8000b58:	40020000 	.word	0x40020000
 8000b5c:	40020400 	.word	0x40020400
 8000b60:	10210000 	.word	0x10210000
 8000b64:	40020c00 	.word	0x40020c00

08000b68 <showStartup>:

/* USER CODE BEGIN 4 */
void showStartup(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b082      	sub	sp, #8
 8000b6c:	af02      	add	r7, sp, #8
	ssd1306_DrawBitMap(0, 0, BOOTSCREEN, 128, 32, White);
 8000b6e:	2301      	movs	r3, #1
 8000b70:	9301      	str	r3, [sp, #4]
 8000b72:	2320      	movs	r3, #32
 8000b74:	9300      	str	r3, [sp, #0]
 8000b76:	2380      	movs	r3, #128	; 0x80
 8000b78:	4a05      	ldr	r2, [pc, #20]	; (8000b90 <showStartup+0x28>)
 8000b7a:	2100      	movs	r1, #0
 8000b7c:	2000      	movs	r0, #0
 8000b7e:	f000 f99b 	bl	8000eb8 <ssd1306_DrawBitMap>
//  ssd1306_FillBuffer((uint8_t *)&BOOTSCREEN, sizeof(BOOTSCREEN));
  HAL_Delay(2000);
 8000b82:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000b86:	f000 fc35 	bl	80013f4 <HAL_Delay>
}
 8000b8a:	bf00      	nop
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bd80      	pop	{r7, pc}
 8000b90:	080044bc 	.word	0x080044bc

08000b94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b98:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b9a:	e7fe      	b.n	8000b9a <Error_Handler+0x6>

08000b9c <ssd1306_Reset>:
#include <math.h>
#include <stdlib.h>
#include <string.h> // For memcpy

void ssd1306_Reset(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(SSD1306_Reset_Port, SSD1306_Reset_Pin, GPIO_PIN_RESET);
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ba6:	4808      	ldr	r0, [pc, #32]	; (8000bc8 <ssd1306_Reset+0x2c>)
 8000ba8:	f001 f93c 	bl	8001e24 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 8000bac:	200a      	movs	r0, #10
 8000bae:	f000 fc21 	bl	80013f4 <HAL_Delay>
    HAL_GPIO_WritePin(SSD1306_Reset_Port, SSD1306_Reset_Pin, GPIO_PIN_SET);
 8000bb2:	2201      	movs	r2, #1
 8000bb4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000bb8:	4803      	ldr	r0, [pc, #12]	; (8000bc8 <ssd1306_Reset+0x2c>)
 8000bba:	f001 f933 	bl	8001e24 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 8000bbe:	200a      	movs	r0, #10
 8000bc0:	f000 fc18 	bl	80013f4 <HAL_Delay>
}
 8000bc4:	bf00      	nop
 8000bc6:	bd80      	pop	{r7, pc}
 8000bc8:	40020400 	.word	0x40020400

08000bcc <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b086      	sub	sp, #24
 8000bd0:	af04      	add	r7, sp, #16
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8000bd6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000bda:	9302      	str	r3, [sp, #8]
 8000bdc:	2301      	movs	r3, #1
 8000bde:	9301      	str	r3, [sp, #4]
 8000be0:	1dfb      	adds	r3, r7, #7
 8000be2:	9300      	str	r3, [sp, #0]
 8000be4:	2301      	movs	r3, #1
 8000be6:	2200      	movs	r2, #0
 8000be8:	2178      	movs	r1, #120	; 0x78
 8000bea:	4803      	ldr	r0, [pc, #12]	; (8000bf8 <ssd1306_WriteCommand+0x2c>)
 8000bec:	f001 faaa 	bl	8002144 <HAL_I2C_Mem_Write>
}
 8000bf0:	bf00      	nop
 8000bf2:	3708      	adds	r7, #8
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	200004a0 	.word	0x200004a0

08000bfc <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t *buffer, size_t buff_size)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b086      	sub	sp, #24
 8000c00:	af04      	add	r7, sp, #16
 8000c02:	6078      	str	r0, [r7, #4]
 8000c04:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8000c06:	683b      	ldr	r3, [r7, #0]
 8000c08:	b29b      	uxth	r3, r3
 8000c0a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000c0e:	9202      	str	r2, [sp, #8]
 8000c10:	9301      	str	r3, [sp, #4]
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	9300      	str	r3, [sp, #0]
 8000c16:	2301      	movs	r3, #1
 8000c18:	2240      	movs	r2, #64	; 0x40
 8000c1a:	2178      	movs	r1, #120	; 0x78
 8000c1c:	4803      	ldr	r0, [pc, #12]	; (8000c2c <ssd1306_WriteData+0x30>)
 8000c1e:	f001 fa91 	bl	8002144 <HAL_I2C_Mem_Write>
}
 8000c22:	bf00      	nop
 8000c24:	3708      	adds	r7, #8
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	200004a0 	.word	0x200004a0

08000c30 <ssd1306_Init>:
    return ret;
}

// Initialize the oled screen
void ssd1306_Init(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8000c34:	f7ff ffb2 	bl	8000b9c <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8000c38:	2064      	movs	r0, #100	; 0x64
 8000c3a:	f000 fbdb 	bl	80013f4 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8000c3e:	2000      	movs	r0, #0
 8000c40:	f000 f91c 	bl	8000e7c <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8000c44:	2020      	movs	r0, #32
 8000c46:	f7ff ffc1 	bl	8000bcc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8000c4a:	2000      	movs	r0, #0
 8000c4c:	f7ff ffbe 	bl	8000bcc <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000c50:	20b0      	movs	r0, #176	; 0xb0
 8000c52:	f7ff ffbb 	bl	8000bcc <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8000c56:	20c8      	movs	r0, #200	; 0xc8
 8000c58:	f7ff ffb8 	bl	8000bcc <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8000c5c:	2000      	movs	r0, #0
 8000c5e:	f7ff ffb5 	bl	8000bcc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8000c62:	2010      	movs	r0, #16
 8000c64:	f7ff ffb2 	bl	8000bcc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8000c68:	2040      	movs	r0, #64	; 0x40
 8000c6a:	f7ff ffaf 	bl	8000bcc <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8000c6e:	20ff      	movs	r0, #255	; 0xff
 8000c70:	f000 f8f0 	bl	8000e54 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8000c74:	20a1      	movs	r0, #161	; 0xa1
 8000c76:	f7ff ffa9 	bl	8000bcc <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8000c7a:	20a6      	movs	r0, #166	; 0xa6
 8000c7c:	f7ff ffa6 	bl	8000bcc <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8000c80:	20a8      	movs	r0, #168	; 0xa8
 8000c82:	f7ff ffa3 	bl	8000bcc <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8000c86:	203f      	movs	r0, #63	; 0x3f
 8000c88:	f7ff ffa0 	bl	8000bcc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000c8c:	20a4      	movs	r0, #164	; 0xa4
 8000c8e:	f7ff ff9d 	bl	8000bcc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8000c92:	20d3      	movs	r0, #211	; 0xd3
 8000c94:	f7ff ff9a 	bl	8000bcc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8000c98:	2000      	movs	r0, #0
 8000c9a:	f7ff ff97 	bl	8000bcc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8000c9e:	20d5      	movs	r0, #213	; 0xd5
 8000ca0:	f7ff ff94 	bl	8000bcc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8000ca4:	20f0      	movs	r0, #240	; 0xf0
 8000ca6:	f7ff ff91 	bl	8000bcc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8000caa:	20d9      	movs	r0, #217	; 0xd9
 8000cac:	f7ff ff8e 	bl	8000bcc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8000cb0:	2022      	movs	r0, #34	; 0x22
 8000cb2:	f7ff ff8b 	bl	8000bcc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8000cb6:	20da      	movs	r0, #218	; 0xda
 8000cb8:	f7ff ff88 	bl	8000bcc <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8000cbc:	2012      	movs	r0, #18
 8000cbe:	f7ff ff85 	bl	8000bcc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8000cc2:	20db      	movs	r0, #219	; 0xdb
 8000cc4:	f7ff ff82 	bl	8000bcc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8000cc8:	2020      	movs	r0, #32
 8000cca:	f7ff ff7f 	bl	8000bcc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8000cce:	208d      	movs	r0, #141	; 0x8d
 8000cd0:	f7ff ff7c 	bl	8000bcc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8000cd4:	2014      	movs	r0, #20
 8000cd6:	f7ff ff79 	bl	8000bcc <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1);    //--turn on SSD1306 panel
 8000cda:	2001      	movs	r0, #1
 8000cdc:	f000 f8ce 	bl	8000e7c <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8000ce0:	2000      	movs	r0, #0
 8000ce2:	f000 f80f 	bl	8000d04 <ssd1306_Fill>

    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8000ce6:	f000 f82f 	bl	8000d48 <ssd1306_UpdateScreen>

    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8000cea:	4b05      	ldr	r3, [pc, #20]	; (8000d00 <ssd1306_Init+0xd0>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8000cf0:	4b03      	ldr	r3, [pc, #12]	; (8000d00 <ssd1306_Init+0xd0>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	805a      	strh	r2, [r3, #2]

    SSD1306.Initialized = 1;
 8000cf6:	4b02      	ldr	r3, [pc, #8]	; (8000d00 <ssd1306_Init+0xd0>)
 8000cf8:	2201      	movs	r2, #1
 8000cfa:	715a      	strb	r2, [r3, #5]
}
 8000cfc:	bf00      	nop
 8000cfe:	bd80      	pop	{r7, pc}
 8000d00:	2000048c 	.word	0x2000048c

08000d04 <ssd1306_Fill>:

// Fill the whole screen with the given color
void ssd1306_Fill(SSD1306_COLOR color)
{
 8000d04:	b480      	push	{r7}
 8000d06:	b085      	sub	sp, #20
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	71fb      	strb	r3, [r7, #7]
    /* Set memory */
    uint32_t i;

    for (i = 0; i < sizeof(SSD1306_Buffer); i++)
 8000d0e:	2300      	movs	r3, #0
 8000d10:	60fb      	str	r3, [r7, #12]
 8000d12:	e00d      	b.n	8000d30 <ssd1306_Fill+0x2c>
    {
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8000d14:	79fb      	ldrb	r3, [r7, #7]
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d101      	bne.n	8000d1e <ssd1306_Fill+0x1a>
 8000d1a:	2100      	movs	r1, #0
 8000d1c:	e000      	b.n	8000d20 <ssd1306_Fill+0x1c>
 8000d1e:	21ff      	movs	r1, #255	; 0xff
 8000d20:	4a08      	ldr	r2, [pc, #32]	; (8000d44 <ssd1306_Fill+0x40>)
 8000d22:	68fb      	ldr	r3, [r7, #12]
 8000d24:	4413      	add	r3, r2
 8000d26:	460a      	mov	r2, r1
 8000d28:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < sizeof(SSD1306_Buffer); i++)
 8000d2a:	68fb      	ldr	r3, [r7, #12]
 8000d2c:	3301      	adds	r3, #1
 8000d2e:	60fb      	str	r3, [r7, #12]
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000d36:	d3ed      	bcc.n	8000d14 <ssd1306_Fill+0x10>
    }
}
 8000d38:	bf00      	nop
 8000d3a:	3714      	adds	r7, #20
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d42:	4770      	bx	lr
 8000d44:	2000008c 	.word	0x2000008c

08000d48 <ssd1306_UpdateScreen>:

// Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b082      	sub	sp, #8
 8000d4c:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for (uint8_t i = 0; i < SSD1306_HEIGHT / 8; i++)
 8000d4e:	2300      	movs	r3, #0
 8000d50:	71fb      	strb	r3, [r7, #7]
 8000d52:	e016      	b.n	8000d82 <ssd1306_UpdateScreen+0x3a>
    {
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8000d54:	79fb      	ldrb	r3, [r7, #7]
 8000d56:	3b50      	subs	r3, #80	; 0x50
 8000d58:	b2db      	uxtb	r3, r3
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	f7ff ff36 	bl	8000bcc <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00);
 8000d60:	2000      	movs	r0, #0
 8000d62:	f7ff ff33 	bl	8000bcc <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10);
 8000d66:	2010      	movs	r0, #16
 8000d68:	f7ff ff30 	bl	8000bcc <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH * i], SSD1306_WIDTH);
 8000d6c:	79fb      	ldrb	r3, [r7, #7]
 8000d6e:	01db      	lsls	r3, r3, #7
 8000d70:	4a07      	ldr	r2, [pc, #28]	; (8000d90 <ssd1306_UpdateScreen+0x48>)
 8000d72:	4413      	add	r3, r2
 8000d74:	2180      	movs	r1, #128	; 0x80
 8000d76:	4618      	mov	r0, r3
 8000d78:	f7ff ff40 	bl	8000bfc <ssd1306_WriteData>
    for (uint8_t i = 0; i < SSD1306_HEIGHT / 8; i++)
 8000d7c:	79fb      	ldrb	r3, [r7, #7]
 8000d7e:	3301      	adds	r3, #1
 8000d80:	71fb      	strb	r3, [r7, #7]
 8000d82:	79fb      	ldrb	r3, [r7, #7]
 8000d84:	2b07      	cmp	r3, #7
 8000d86:	d9e5      	bls.n	8000d54 <ssd1306_UpdateScreen+0xc>
    }
}
 8000d88:	bf00      	nop
 8000d8a:	3708      	adds	r7, #8
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd80      	pop	{r7, pc}
 8000d90:	2000008c 	.word	0x2000008c

08000d94 <ssd1306_DrawPixel>:
//    Draw one pixel in the screenbuffer
//    X => X Coordinate
//    Y => Y Coordinate
//    color => Pixel color
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color)
{
 8000d94:	b480      	push	{r7}
 8000d96:	b083      	sub	sp, #12
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	71fb      	strb	r3, [r7, #7]
 8000d9e:	460b      	mov	r3, r1
 8000da0:	71bb      	strb	r3, [r7, #6]
 8000da2:	4613      	mov	r3, r2
 8000da4:	717b      	strb	r3, [r7, #5]
    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT)
 8000da6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	db48      	blt.n	8000e40 <ssd1306_DrawPixel+0xac>
 8000dae:	79bb      	ldrb	r3, [r7, #6]
 8000db0:	2b3f      	cmp	r3, #63	; 0x3f
 8000db2:	d845      	bhi.n	8000e40 <ssd1306_DrawPixel+0xac>
        // Don't write outside the buffer
        return;
    }

    // Check if pixel should be inverted
    if (SSD1306.Inverted)
 8000db4:	4b25      	ldr	r3, [pc, #148]	; (8000e4c <ssd1306_DrawPixel+0xb8>)
 8000db6:	791b      	ldrb	r3, [r3, #4]
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d006      	beq.n	8000dca <ssd1306_DrawPixel+0x36>
    {
        color = (SSD1306_COLOR)!color;
 8000dbc:	797b      	ldrb	r3, [r7, #5]
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	bf0c      	ite	eq
 8000dc2:	2301      	moveq	r3, #1
 8000dc4:	2300      	movne	r3, #0
 8000dc6:	b2db      	uxtb	r3, r3
 8000dc8:	717b      	strb	r3, [r7, #5]
    }

    // Draw in the right color
    if (color == White)
 8000dca:	797b      	ldrb	r3, [r7, #5]
 8000dcc:	2b01      	cmp	r3, #1
 8000dce:	d11a      	bne.n	8000e06 <ssd1306_DrawPixel+0x72>
    {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8000dd0:	79fa      	ldrb	r2, [r7, #7]
 8000dd2:	79bb      	ldrb	r3, [r7, #6]
 8000dd4:	08db      	lsrs	r3, r3, #3
 8000dd6:	b2d8      	uxtb	r0, r3
 8000dd8:	4603      	mov	r3, r0
 8000dda:	01db      	lsls	r3, r3, #7
 8000ddc:	4413      	add	r3, r2
 8000dde:	4a1c      	ldr	r2, [pc, #112]	; (8000e50 <ssd1306_DrawPixel+0xbc>)
 8000de0:	5cd3      	ldrb	r3, [r2, r3]
 8000de2:	b25a      	sxtb	r2, r3
 8000de4:	79bb      	ldrb	r3, [r7, #6]
 8000de6:	f003 0307 	and.w	r3, r3, #7
 8000dea:	2101      	movs	r1, #1
 8000dec:	fa01 f303 	lsl.w	r3, r1, r3
 8000df0:	b25b      	sxtb	r3, r3
 8000df2:	4313      	orrs	r3, r2
 8000df4:	b259      	sxtb	r1, r3
 8000df6:	79fa      	ldrb	r2, [r7, #7]
 8000df8:	4603      	mov	r3, r0
 8000dfa:	01db      	lsls	r3, r3, #7
 8000dfc:	4413      	add	r3, r2
 8000dfe:	b2c9      	uxtb	r1, r1
 8000e00:	4a13      	ldr	r2, [pc, #76]	; (8000e50 <ssd1306_DrawPixel+0xbc>)
 8000e02:	54d1      	strb	r1, [r2, r3]
 8000e04:	e01d      	b.n	8000e42 <ssd1306_DrawPixel+0xae>
    }
    else
    {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000e06:	79fa      	ldrb	r2, [r7, #7]
 8000e08:	79bb      	ldrb	r3, [r7, #6]
 8000e0a:	08db      	lsrs	r3, r3, #3
 8000e0c:	b2d8      	uxtb	r0, r3
 8000e0e:	4603      	mov	r3, r0
 8000e10:	01db      	lsls	r3, r3, #7
 8000e12:	4413      	add	r3, r2
 8000e14:	4a0e      	ldr	r2, [pc, #56]	; (8000e50 <ssd1306_DrawPixel+0xbc>)
 8000e16:	5cd3      	ldrb	r3, [r2, r3]
 8000e18:	b25a      	sxtb	r2, r3
 8000e1a:	79bb      	ldrb	r3, [r7, #6]
 8000e1c:	f003 0307 	and.w	r3, r3, #7
 8000e20:	2101      	movs	r1, #1
 8000e22:	fa01 f303 	lsl.w	r3, r1, r3
 8000e26:	b25b      	sxtb	r3, r3
 8000e28:	43db      	mvns	r3, r3
 8000e2a:	b25b      	sxtb	r3, r3
 8000e2c:	4013      	ands	r3, r2
 8000e2e:	b259      	sxtb	r1, r3
 8000e30:	79fa      	ldrb	r2, [r7, #7]
 8000e32:	4603      	mov	r3, r0
 8000e34:	01db      	lsls	r3, r3, #7
 8000e36:	4413      	add	r3, r2
 8000e38:	b2c9      	uxtb	r1, r1
 8000e3a:	4a05      	ldr	r2, [pc, #20]	; (8000e50 <ssd1306_DrawPixel+0xbc>)
 8000e3c:	54d1      	strb	r1, [r2, r3]
 8000e3e:	e000      	b.n	8000e42 <ssd1306_DrawPixel+0xae>
        return;
 8000e40:	bf00      	nop
    }
}
 8000e42:	370c      	adds	r7, #12
 8000e44:	46bd      	mov	sp, r7
 8000e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4a:	4770      	bx	lr
 8000e4c:	2000048c 	.word	0x2000048c
 8000e50:	2000008c 	.word	0x2000008c

08000e54 <ssd1306_SetContrast>:

    return;
}

void ssd1306_SetContrast(const uint8_t value)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b084      	sub	sp, #16
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8000e5e:	2381      	movs	r3, #129	; 0x81
 8000e60:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8000e62:	7bfb      	ldrb	r3, [r7, #15]
 8000e64:	4618      	mov	r0, r3
 8000e66:	f7ff feb1 	bl	8000bcc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8000e6a:	79fb      	ldrb	r3, [r7, #7]
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f7ff fead 	bl	8000bcc <ssd1306_WriteCommand>
}
 8000e72:	bf00      	nop
 8000e74:	3710      	adds	r7, #16
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}
	...

08000e7c <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b084      	sub	sp, #16
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	4603      	mov	r3, r0
 8000e84:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on)
 8000e86:	79fb      	ldrb	r3, [r7, #7]
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d005      	beq.n	8000e98 <ssd1306_SetDisplayOn+0x1c>
    {
        value = 0xAF; // Display on
 8000e8c:	23af      	movs	r3, #175	; 0xaf
 8000e8e:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8000e90:	4b08      	ldr	r3, [pc, #32]	; (8000eb4 <ssd1306_SetDisplayOn+0x38>)
 8000e92:	2201      	movs	r2, #1
 8000e94:	719a      	strb	r2, [r3, #6]
 8000e96:	e004      	b.n	8000ea2 <ssd1306_SetDisplayOn+0x26>
    }
    else
    {
        value = 0xAE; // Display off
 8000e98:	23ae      	movs	r3, #174	; 0xae
 8000e9a:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8000e9c:	4b05      	ldr	r3, [pc, #20]	; (8000eb4 <ssd1306_SetDisplayOn+0x38>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	719a      	strb	r2, [r3, #6]
    }
    ssd1306_WriteCommand(value);
 8000ea2:	7bfb      	ldrb	r3, [r7, #15]
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f7ff fe91 	bl	8000bcc <ssd1306_WriteCommand>
}
 8000eaa:	bf00      	nop
 8000eac:	3710      	adds	r7, #16
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	2000048c 	.word	0x2000048c

08000eb8 <ssd1306_DrawBitMap>:
uint8_t ssd1306_GetDisplayOn()
{
    return SSD1306.DisplayOn;
}

void ssd1306_DrawBitMap(int16_t x, int16_t y, const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color){
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b086      	sub	sp, #24
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	60ba      	str	r2, [r7, #8]
 8000ec0:	461a      	mov	r2, r3
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	81fb      	strh	r3, [r7, #14]
 8000ec6:	460b      	mov	r3, r1
 8000ec8:	81bb      	strh	r3, [r7, #12]
 8000eca:	4613      	mov	r3, r2
 8000ecc:	80fb      	strh	r3, [r7, #6]
	int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 8000ece:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000ed2:	3307      	adds	r3, #7
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	da00      	bge.n	8000eda <ssd1306_DrawBitMap+0x22>
 8000ed8:	3307      	adds	r3, #7
 8000eda:	10db      	asrs	r3, r3, #3
 8000edc:	823b      	strh	r3, [r7, #16]
	uint8_t byte = 0;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	75fb      	strb	r3, [r7, #23]

	for (int16_t j = 0; j < h; j++, y++) {
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	82bb      	strh	r3, [r7, #20]
 8000ee6:	e047      	b.n	8000f78 <ssd1306_DrawBitMap+0xc0>
		for (int16_t i = 0; i < w; i++) {
 8000ee8:	2300      	movs	r3, #0
 8000eea:	827b      	strh	r3, [r7, #18]
 8000eec:	e032      	b.n	8000f54 <ssd1306_DrawBitMap+0x9c>
			if (i & 7)
 8000eee:	8a7b      	ldrh	r3, [r7, #18]
 8000ef0:	f003 0307 	and.w	r3, r3, #7
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d003      	beq.n	8000f00 <ssd1306_DrawBitMap+0x48>
				byte <<= 1;
 8000ef8:	7dfb      	ldrb	r3, [r7, #23]
 8000efa:	005b      	lsls	r3, r3, #1
 8000efc:	75fb      	strb	r3, [r7, #23]
 8000efe:	e012      	b.n	8000f26 <ssd1306_DrawBitMap+0x6e>
			else
				byte = bitmap[j * byteWidth + i / 8];
 8000f00:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000f04:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8000f08:	fb02 f203 	mul.w	r2, r2, r3
 8000f0c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	da00      	bge.n	8000f16 <ssd1306_DrawBitMap+0x5e>
 8000f14:	3307      	adds	r3, #7
 8000f16:	10db      	asrs	r3, r3, #3
 8000f18:	b21b      	sxth	r3, r3
 8000f1a:	4413      	add	r3, r2
 8000f1c:	461a      	mov	r2, r3
 8000f1e:	68bb      	ldr	r3, [r7, #8]
 8000f20:	4413      	add	r3, r2
 8000f22:	781b      	ldrb	r3, [r3, #0]
 8000f24:	75fb      	strb	r3, [r7, #23]
			if (byte & 0x80)
 8000f26:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	da0c      	bge.n	8000f48 <ssd1306_DrawBitMap+0x90>
				ssd1306_DrawPixel(x + i, y, color);
 8000f2e:	89fb      	ldrh	r3, [r7, #14]
 8000f30:	b2da      	uxtb	r2, r3
 8000f32:	8a7b      	ldrh	r3, [r7, #18]
 8000f34:	b2db      	uxtb	r3, r3
 8000f36:	4413      	add	r3, r2
 8000f38:	b2db      	uxtb	r3, r3
 8000f3a:	89ba      	ldrh	r2, [r7, #12]
 8000f3c:	b2d1      	uxtb	r1, r2
 8000f3e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8000f40:	b2d2      	uxtb	r2, r2
 8000f42:	4618      	mov	r0, r3
 8000f44:	f7ff ff26 	bl	8000d94 <ssd1306_DrawPixel>
		for (int16_t i = 0; i < w; i++) {
 8000f48:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000f4c:	b29b      	uxth	r3, r3
 8000f4e:	3301      	adds	r3, #1
 8000f50:	b29b      	uxth	r3, r3
 8000f52:	827b      	strh	r3, [r7, #18]
 8000f54:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8000f58:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f5c:	429a      	cmp	r2, r3
 8000f5e:	dbc6      	blt.n	8000eee <ssd1306_DrawBitMap+0x36>
	for (int16_t j = 0; j < h; j++, y++) {
 8000f60:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000f64:	b29b      	uxth	r3, r3
 8000f66:	3301      	adds	r3, #1
 8000f68:	b29b      	uxth	r3, r3
 8000f6a:	82bb      	strh	r3, [r7, #20]
 8000f6c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000f70:	b29b      	uxth	r3, r3
 8000f72:	3301      	adds	r3, #1
 8000f74:	b29b      	uxth	r3, r3
 8000f76:	81bb      	strh	r3, [r7, #12]
 8000f78:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8000f7c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8000f80:	429a      	cmp	r2, r3
 8000f82:	dbb1      	blt.n	8000ee8 <ssd1306_DrawBitMap+0x30>
		}
	}
	ssd1306_UpdateScreen();
 8000f84:	f7ff fee0 	bl	8000d48 <ssd1306_UpdateScreen>
}
 8000f88:	bf00      	nop
 8000f8a:	3718      	adds	r7, #24
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}

08000f90 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	b083      	sub	sp, #12
 8000f94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f96:	2300      	movs	r3, #0
 8000f98:	607b      	str	r3, [r7, #4]
 8000f9a:	4b10      	ldr	r3, [pc, #64]	; (8000fdc <HAL_MspInit+0x4c>)
 8000f9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f9e:	4a0f      	ldr	r2, [pc, #60]	; (8000fdc <HAL_MspInit+0x4c>)
 8000fa0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fa4:	6453      	str	r3, [r2, #68]	; 0x44
 8000fa6:	4b0d      	ldr	r3, [pc, #52]	; (8000fdc <HAL_MspInit+0x4c>)
 8000fa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000faa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fae:	607b      	str	r3, [r7, #4]
 8000fb0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	603b      	str	r3, [r7, #0]
 8000fb6:	4b09      	ldr	r3, [pc, #36]	; (8000fdc <HAL_MspInit+0x4c>)
 8000fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fba:	4a08      	ldr	r2, [pc, #32]	; (8000fdc <HAL_MspInit+0x4c>)
 8000fbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fc0:	6413      	str	r3, [r2, #64]	; 0x40
 8000fc2:	4b06      	ldr	r3, [pc, #24]	; (8000fdc <HAL_MspInit+0x4c>)
 8000fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fca:	603b      	str	r3, [r7, #0]
 8000fcc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fce:	bf00      	nop
 8000fd0:	370c      	adds	r7, #12
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd8:	4770      	bx	lr
 8000fda:	bf00      	nop
 8000fdc:	40023800 	.word	0x40023800

08000fe0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b08a      	sub	sp, #40	; 0x28
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fe8:	f107 0314 	add.w	r3, r7, #20
 8000fec:	2200      	movs	r2, #0
 8000fee:	601a      	str	r2, [r3, #0]
 8000ff0:	605a      	str	r2, [r3, #4]
 8000ff2:	609a      	str	r2, [r3, #8]
 8000ff4:	60da      	str	r2, [r3, #12]
 8000ff6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	4a24      	ldr	r2, [pc, #144]	; (8001090 <HAL_ADC_MspInit+0xb0>)
 8000ffe:	4293      	cmp	r3, r2
 8001000:	d141      	bne.n	8001086 <HAL_ADC_MspInit+0xa6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001002:	2300      	movs	r3, #0
 8001004:	613b      	str	r3, [r7, #16]
 8001006:	4b23      	ldr	r3, [pc, #140]	; (8001094 <HAL_ADC_MspInit+0xb4>)
 8001008:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800100a:	4a22      	ldr	r2, [pc, #136]	; (8001094 <HAL_ADC_MspInit+0xb4>)
 800100c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001010:	6453      	str	r3, [r2, #68]	; 0x44
 8001012:	4b20      	ldr	r3, [pc, #128]	; (8001094 <HAL_ADC_MspInit+0xb4>)
 8001014:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001016:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800101a:	613b      	str	r3, [r7, #16]
 800101c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800101e:	2300      	movs	r3, #0
 8001020:	60fb      	str	r3, [r7, #12]
 8001022:	4b1c      	ldr	r3, [pc, #112]	; (8001094 <HAL_ADC_MspInit+0xb4>)
 8001024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001026:	4a1b      	ldr	r2, [pc, #108]	; (8001094 <HAL_ADC_MspInit+0xb4>)
 8001028:	f043 0304 	orr.w	r3, r3, #4
 800102c:	6313      	str	r3, [r2, #48]	; 0x30
 800102e:	4b19      	ldr	r3, [pc, #100]	; (8001094 <HAL_ADC_MspInit+0xb4>)
 8001030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001032:	f003 0304 	and.w	r3, r3, #4
 8001036:	60fb      	str	r3, [r7, #12]
 8001038:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800103a:	2300      	movs	r3, #0
 800103c:	60bb      	str	r3, [r7, #8]
 800103e:	4b15      	ldr	r3, [pc, #84]	; (8001094 <HAL_ADC_MspInit+0xb4>)
 8001040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001042:	4a14      	ldr	r2, [pc, #80]	; (8001094 <HAL_ADC_MspInit+0xb4>)
 8001044:	f043 0301 	orr.w	r3, r3, #1
 8001048:	6313      	str	r3, [r2, #48]	; 0x30
 800104a:	4b12      	ldr	r3, [pc, #72]	; (8001094 <HAL_ADC_MspInit+0xb4>)
 800104c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800104e:	f003 0301 	and.w	r3, r3, #1
 8001052:	60bb      	str	r3, [r7, #8]
 8001054:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC3     ------> ADC1_IN13
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = I_SENSE_Pin;
 8001056:	2308      	movs	r3, #8
 8001058:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800105a:	2303      	movs	r3, #3
 800105c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105e:	2300      	movs	r3, #0
 8001060:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(I_SENSE_GPIO_Port, &GPIO_InitStruct);
 8001062:	f107 0314 	add.w	r3, r7, #20
 8001066:	4619      	mov	r1, r3
 8001068:	480b      	ldr	r0, [pc, #44]	; (8001098 <HAL_ADC_MspInit+0xb8>)
 800106a:	f000 fd59 	bl	8001b20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VO_SENSE_Pin|VI_SENSE_Pin;
 800106e:	2303      	movs	r3, #3
 8001070:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001072:	2303      	movs	r3, #3
 8001074:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001076:	2300      	movs	r3, #0
 8001078:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800107a:	f107 0314 	add.w	r3, r7, #20
 800107e:	4619      	mov	r1, r3
 8001080:	4806      	ldr	r0, [pc, #24]	; (800109c <HAL_ADC_MspInit+0xbc>)
 8001082:	f000 fd4d 	bl	8001b20 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001086:	bf00      	nop
 8001088:	3728      	adds	r7, #40	; 0x28
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	40012000 	.word	0x40012000
 8001094:	40023800 	.word	0x40023800
 8001098:	40020800 	.word	0x40020800
 800109c:	40020000 	.word	0x40020000

080010a0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b08a      	sub	sp, #40	; 0x28
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010a8:	f107 0314 	add.w	r3, r7, #20
 80010ac:	2200      	movs	r2, #0
 80010ae:	601a      	str	r2, [r3, #0]
 80010b0:	605a      	str	r2, [r3, #4]
 80010b2:	609a      	str	r2, [r3, #8]
 80010b4:	60da      	str	r2, [r3, #12]
 80010b6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	4a19      	ldr	r2, [pc, #100]	; (8001124 <HAL_I2C_MspInit+0x84>)
 80010be:	4293      	cmp	r3, r2
 80010c0:	d12b      	bne.n	800111a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010c2:	2300      	movs	r3, #0
 80010c4:	613b      	str	r3, [r7, #16]
 80010c6:	4b18      	ldr	r3, [pc, #96]	; (8001128 <HAL_I2C_MspInit+0x88>)
 80010c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ca:	4a17      	ldr	r2, [pc, #92]	; (8001128 <HAL_I2C_MspInit+0x88>)
 80010cc:	f043 0302 	orr.w	r3, r3, #2
 80010d0:	6313      	str	r3, [r2, #48]	; 0x30
 80010d2:	4b15      	ldr	r3, [pc, #84]	; (8001128 <HAL_I2C_MspInit+0x88>)
 80010d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d6:	f003 0302 	and.w	r3, r3, #2
 80010da:	613b      	str	r3, [r7, #16]
 80010dc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80010de:	23c0      	movs	r3, #192	; 0xc0
 80010e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010e2:	2312      	movs	r3, #18
 80010e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010e6:	2301      	movs	r3, #1
 80010e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010ea:	2303      	movs	r3, #3
 80010ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80010ee:	2304      	movs	r3, #4
 80010f0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010f2:	f107 0314 	add.w	r3, r7, #20
 80010f6:	4619      	mov	r1, r3
 80010f8:	480c      	ldr	r0, [pc, #48]	; (800112c <HAL_I2C_MspInit+0x8c>)
 80010fa:	f000 fd11 	bl	8001b20 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80010fe:	2300      	movs	r3, #0
 8001100:	60fb      	str	r3, [r7, #12]
 8001102:	4b09      	ldr	r3, [pc, #36]	; (8001128 <HAL_I2C_MspInit+0x88>)
 8001104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001106:	4a08      	ldr	r2, [pc, #32]	; (8001128 <HAL_I2C_MspInit+0x88>)
 8001108:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800110c:	6413      	str	r3, [r2, #64]	; 0x40
 800110e:	4b06      	ldr	r3, [pc, #24]	; (8001128 <HAL_I2C_MspInit+0x88>)
 8001110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001112:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001116:	60fb      	str	r3, [r7, #12]
 8001118:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800111a:	bf00      	nop
 800111c:	3728      	adds	r7, #40	; 0x28
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	40005400 	.word	0x40005400
 8001128:	40023800 	.word	0x40023800
 800112c:	40020400 	.word	0x40020400

08001130 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b08a      	sub	sp, #40	; 0x28
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001138:	f107 0314 	add.w	r3, r7, #20
 800113c:	2200      	movs	r2, #0
 800113e:	601a      	str	r2, [r3, #0]
 8001140:	605a      	str	r2, [r3, #4]
 8001142:	609a      	str	r2, [r3, #8]
 8001144:	60da      	str	r2, [r3, #12]
 8001146:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	4a19      	ldr	r2, [pc, #100]	; (80011b4 <HAL_UART_MspInit+0x84>)
 800114e:	4293      	cmp	r3, r2
 8001150:	d12b      	bne.n	80011aa <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001152:	2300      	movs	r3, #0
 8001154:	613b      	str	r3, [r7, #16]
 8001156:	4b18      	ldr	r3, [pc, #96]	; (80011b8 <HAL_UART_MspInit+0x88>)
 8001158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800115a:	4a17      	ldr	r2, [pc, #92]	; (80011b8 <HAL_UART_MspInit+0x88>)
 800115c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001160:	6413      	str	r3, [r2, #64]	; 0x40
 8001162:	4b15      	ldr	r3, [pc, #84]	; (80011b8 <HAL_UART_MspInit+0x88>)
 8001164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001166:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800116a:	613b      	str	r3, [r7, #16]
 800116c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800116e:	2300      	movs	r3, #0
 8001170:	60fb      	str	r3, [r7, #12]
 8001172:	4b11      	ldr	r3, [pc, #68]	; (80011b8 <HAL_UART_MspInit+0x88>)
 8001174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001176:	4a10      	ldr	r2, [pc, #64]	; (80011b8 <HAL_UART_MspInit+0x88>)
 8001178:	f043 0301 	orr.w	r3, r3, #1
 800117c:	6313      	str	r3, [r2, #48]	; 0x30
 800117e:	4b0e      	ldr	r3, [pc, #56]	; (80011b8 <HAL_UART_MspInit+0x88>)
 8001180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001182:	f003 0301 	and.w	r3, r3, #1
 8001186:	60fb      	str	r3, [r7, #12]
 8001188:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800118a:	230c      	movs	r3, #12
 800118c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800118e:	2302      	movs	r3, #2
 8001190:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001192:	2300      	movs	r3, #0
 8001194:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001196:	2303      	movs	r3, #3
 8001198:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800119a:	2307      	movs	r3, #7
 800119c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800119e:	f107 0314 	add.w	r3, r7, #20
 80011a2:	4619      	mov	r1, r3
 80011a4:	4805      	ldr	r0, [pc, #20]	; (80011bc <HAL_UART_MspInit+0x8c>)
 80011a6:	f000 fcbb 	bl	8001b20 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80011aa:	bf00      	nop
 80011ac:	3728      	adds	r7, #40	; 0x28
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	40004400 	.word	0x40004400
 80011b8:	40023800 	.word	0x40023800
 80011bc:	40020000 	.word	0x40020000

080011c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011c0:	b480      	push	{r7}
 80011c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011c4:	e7fe      	b.n	80011c4 <NMI_Handler+0x4>

080011c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011c6:	b480      	push	{r7}
 80011c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011ca:	e7fe      	b.n	80011ca <HardFault_Handler+0x4>

080011cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011cc:	b480      	push	{r7}
 80011ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011d0:	e7fe      	b.n	80011d0 <MemManage_Handler+0x4>

080011d2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011d2:	b480      	push	{r7}
 80011d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011d6:	e7fe      	b.n	80011d6 <BusFault_Handler+0x4>

080011d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011d8:	b480      	push	{r7}
 80011da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011dc:	e7fe      	b.n	80011dc <UsageFault_Handler+0x4>

080011de <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011de:	b480      	push	{r7}
 80011e0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011e2:	bf00      	nop
 80011e4:	46bd      	mov	sp, r7
 80011e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ea:	4770      	bx	lr

080011ec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011ec:	b480      	push	{r7}
 80011ee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011f0:	bf00      	nop
 80011f2:	46bd      	mov	sp, r7
 80011f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f8:	4770      	bx	lr

080011fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011fa:	b480      	push	{r7}
 80011fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011fe:	bf00      	nop
 8001200:	46bd      	mov	sp, r7
 8001202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001206:	4770      	bx	lr

08001208 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800120c:	f000 f8d2 	bl	80013b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001210:	bf00      	nop
 8001212:	bd80      	pop	{r7, pc}

08001214 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8001218:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800121c:	f000 fe36 	bl	8001e8c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001220:	bf00      	nop
 8001222:	bd80      	pop	{r7, pc}

08001224 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b086      	sub	sp, #24
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800122c:	4a14      	ldr	r2, [pc, #80]	; (8001280 <_sbrk+0x5c>)
 800122e:	4b15      	ldr	r3, [pc, #84]	; (8001284 <_sbrk+0x60>)
 8001230:	1ad3      	subs	r3, r2, r3
 8001232:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001234:	697b      	ldr	r3, [r7, #20]
 8001236:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001238:	4b13      	ldr	r3, [pc, #76]	; (8001288 <_sbrk+0x64>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	2b00      	cmp	r3, #0
 800123e:	d102      	bne.n	8001246 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001240:	4b11      	ldr	r3, [pc, #68]	; (8001288 <_sbrk+0x64>)
 8001242:	4a12      	ldr	r2, [pc, #72]	; (800128c <_sbrk+0x68>)
 8001244:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001246:	4b10      	ldr	r3, [pc, #64]	; (8001288 <_sbrk+0x64>)
 8001248:	681a      	ldr	r2, [r3, #0]
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	4413      	add	r3, r2
 800124e:	693a      	ldr	r2, [r7, #16]
 8001250:	429a      	cmp	r2, r3
 8001252:	d207      	bcs.n	8001264 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001254:	f002 fca4 	bl	8003ba0 <__errno>
 8001258:	4602      	mov	r2, r0
 800125a:	230c      	movs	r3, #12
 800125c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800125e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001262:	e009      	b.n	8001278 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001264:	4b08      	ldr	r3, [pc, #32]	; (8001288 <_sbrk+0x64>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800126a:	4b07      	ldr	r3, [pc, #28]	; (8001288 <_sbrk+0x64>)
 800126c:	681a      	ldr	r2, [r3, #0]
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	4413      	add	r3, r2
 8001272:	4a05      	ldr	r2, [pc, #20]	; (8001288 <_sbrk+0x64>)
 8001274:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001276:	68fb      	ldr	r3, [r7, #12]
}
 8001278:	4618      	mov	r0, r3
 800127a:	3718      	adds	r7, #24
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}
 8001280:	20018000 	.word	0x20018000
 8001284:	00000400 	.word	0x00000400
 8001288:	20000494 	.word	0x20000494
 800128c:	20000588 	.word	0x20000588

08001290 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001290:	b480      	push	{r7}
 8001292:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001294:	4b08      	ldr	r3, [pc, #32]	; (80012b8 <SystemInit+0x28>)
 8001296:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800129a:	4a07      	ldr	r2, [pc, #28]	; (80012b8 <SystemInit+0x28>)
 800129c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80012a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80012a4:	4b04      	ldr	r3, [pc, #16]	; (80012b8 <SystemInit+0x28>)
 80012a6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80012aa:	609a      	str	r2, [r3, #8]
#endif
}
 80012ac:	bf00      	nop
 80012ae:	46bd      	mov	sp, r7
 80012b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b4:	4770      	bx	lr
 80012b6:	bf00      	nop
 80012b8:	e000ed00 	.word	0xe000ed00

080012bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80012bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012f4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80012c0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80012c2:	e003      	b.n	80012cc <LoopCopyDataInit>

080012c4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80012c4:	4b0c      	ldr	r3, [pc, #48]	; (80012f8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80012c6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80012c8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80012ca:	3104      	adds	r1, #4

080012cc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80012cc:	480b      	ldr	r0, [pc, #44]	; (80012fc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80012ce:	4b0c      	ldr	r3, [pc, #48]	; (8001300 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80012d0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80012d2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80012d4:	d3f6      	bcc.n	80012c4 <CopyDataInit>
  ldr  r2, =_sbss
 80012d6:	4a0b      	ldr	r2, [pc, #44]	; (8001304 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80012d8:	e002      	b.n	80012e0 <LoopFillZerobss>

080012da <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80012da:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80012dc:	f842 3b04 	str.w	r3, [r2], #4

080012e0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80012e0:	4b09      	ldr	r3, [pc, #36]	; (8001308 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80012e2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80012e4:	d3f9      	bcc.n	80012da <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80012e6:	f7ff ffd3 	bl	8001290 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80012ea:	f002 fc5f 	bl	8003bac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80012ee:	f7ff fa3f 	bl	8000770 <main>
  bx  lr    
 80012f2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80012f4:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 80012f8:	08004718 	.word	0x08004718
  ldr  r0, =_sdata
 80012fc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001300:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 8001304:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 8001308:	20000584 	.word	0x20000584

0800130c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800130c:	e7fe      	b.n	800130c <ADC_IRQHandler>
	...

08001310 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001314:	4b0e      	ldr	r3, [pc, #56]	; (8001350 <HAL_Init+0x40>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	4a0d      	ldr	r2, [pc, #52]	; (8001350 <HAL_Init+0x40>)
 800131a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800131e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001320:	4b0b      	ldr	r3, [pc, #44]	; (8001350 <HAL_Init+0x40>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4a0a      	ldr	r2, [pc, #40]	; (8001350 <HAL_Init+0x40>)
 8001326:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800132a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800132c:	4b08      	ldr	r3, [pc, #32]	; (8001350 <HAL_Init+0x40>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	4a07      	ldr	r2, [pc, #28]	; (8001350 <HAL_Init+0x40>)
 8001332:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001336:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001338:	2003      	movs	r0, #3
 800133a:	f000 fbaf 	bl	8001a9c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800133e:	2000      	movs	r0, #0
 8001340:	f000 f808 	bl	8001354 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001344:	f7ff fe24 	bl	8000f90 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001348:	2300      	movs	r3, #0
}
 800134a:	4618      	mov	r0, r3
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	40023c00 	.word	0x40023c00

08001354 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b082      	sub	sp, #8
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800135c:	4b12      	ldr	r3, [pc, #72]	; (80013a8 <HAL_InitTick+0x54>)
 800135e:	681a      	ldr	r2, [r3, #0]
 8001360:	4b12      	ldr	r3, [pc, #72]	; (80013ac <HAL_InitTick+0x58>)
 8001362:	781b      	ldrb	r3, [r3, #0]
 8001364:	4619      	mov	r1, r3
 8001366:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800136a:	fbb3 f3f1 	udiv	r3, r3, r1
 800136e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001372:	4618      	mov	r0, r3
 8001374:	f000 fbc7 	bl	8001b06 <HAL_SYSTICK_Config>
 8001378:	4603      	mov	r3, r0
 800137a:	2b00      	cmp	r3, #0
 800137c:	d001      	beq.n	8001382 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800137e:	2301      	movs	r3, #1
 8001380:	e00e      	b.n	80013a0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	2b0f      	cmp	r3, #15
 8001386:	d80a      	bhi.n	800139e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001388:	2200      	movs	r2, #0
 800138a:	6879      	ldr	r1, [r7, #4]
 800138c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001390:	f000 fb8f 	bl	8001ab2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001394:	4a06      	ldr	r2, [pc, #24]	; (80013b0 <HAL_InitTick+0x5c>)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800139a:	2300      	movs	r3, #0
 800139c:	e000      	b.n	80013a0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800139e:	2301      	movs	r3, #1
}
 80013a0:	4618      	mov	r0, r3
 80013a2:	3708      	adds	r7, #8
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bd80      	pop	{r7, pc}
 80013a8:	20000000 	.word	0x20000000
 80013ac:	20000008 	.word	0x20000008
 80013b0:	20000004 	.word	0x20000004

080013b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013b4:	b480      	push	{r7}
 80013b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013b8:	4b06      	ldr	r3, [pc, #24]	; (80013d4 <HAL_IncTick+0x20>)
 80013ba:	781b      	ldrb	r3, [r3, #0]
 80013bc:	461a      	mov	r2, r3
 80013be:	4b06      	ldr	r3, [pc, #24]	; (80013d8 <HAL_IncTick+0x24>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	4413      	add	r3, r2
 80013c4:	4a04      	ldr	r2, [pc, #16]	; (80013d8 <HAL_IncTick+0x24>)
 80013c6:	6013      	str	r3, [r2, #0]
}
 80013c8:	bf00      	nop
 80013ca:	46bd      	mov	sp, r7
 80013cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d0:	4770      	bx	lr
 80013d2:	bf00      	nop
 80013d4:	20000008 	.word	0x20000008
 80013d8:	2000057c 	.word	0x2000057c

080013dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013dc:	b480      	push	{r7}
 80013de:	af00      	add	r7, sp, #0
  return uwTick;
 80013e0:	4b03      	ldr	r3, [pc, #12]	; (80013f0 <HAL_GetTick+0x14>)
 80013e2:	681b      	ldr	r3, [r3, #0]
}
 80013e4:	4618      	mov	r0, r3
 80013e6:	46bd      	mov	sp, r7
 80013e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ec:	4770      	bx	lr
 80013ee:	bf00      	nop
 80013f0:	2000057c 	.word	0x2000057c

080013f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b084      	sub	sp, #16
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013fc:	f7ff ffee 	bl	80013dc <HAL_GetTick>
 8001400:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800140c:	d005      	beq.n	800141a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800140e:	4b09      	ldr	r3, [pc, #36]	; (8001434 <HAL_Delay+0x40>)
 8001410:	781b      	ldrb	r3, [r3, #0]
 8001412:	461a      	mov	r2, r3
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	4413      	add	r3, r2
 8001418:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800141a:	bf00      	nop
 800141c:	f7ff ffde 	bl	80013dc <HAL_GetTick>
 8001420:	4602      	mov	r2, r0
 8001422:	68bb      	ldr	r3, [r7, #8]
 8001424:	1ad3      	subs	r3, r2, r3
 8001426:	68fa      	ldr	r2, [r7, #12]
 8001428:	429a      	cmp	r2, r3
 800142a:	d8f7      	bhi.n	800141c <HAL_Delay+0x28>
  {
  }
}
 800142c:	bf00      	nop
 800142e:	3710      	adds	r7, #16
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}
 8001434:	20000008 	.word	0x20000008

08001438 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b084      	sub	sp, #16
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001440:	2300      	movs	r3, #0
 8001442:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	2b00      	cmp	r3, #0
 8001448:	d101      	bne.n	800144e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800144a:	2301      	movs	r3, #1
 800144c:	e033      	b.n	80014b6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001452:	2b00      	cmp	r3, #0
 8001454:	d109      	bne.n	800146a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001456:	6878      	ldr	r0, [r7, #4]
 8001458:	f7ff fdc2 	bl	8000fe0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	2200      	movs	r2, #0
 8001460:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	2200      	movs	r2, #0
 8001466:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800146e:	f003 0310 	and.w	r3, r3, #16
 8001472:	2b00      	cmp	r3, #0
 8001474:	d118      	bne.n	80014a8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800147a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800147e:	f023 0302 	bic.w	r3, r3, #2
 8001482:	f043 0202 	orr.w	r2, r3, #2
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800148a:	6878      	ldr	r0, [r7, #4]
 800148c:	f000 f93a 	bl	8001704 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	2200      	movs	r2, #0
 8001494:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800149a:	f023 0303 	bic.w	r3, r3, #3
 800149e:	f043 0201 	orr.w	r2, r3, #1
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	641a      	str	r2, [r3, #64]	; 0x40
 80014a6:	e001      	b.n	80014ac <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80014a8:	2301      	movs	r3, #1
 80014aa:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	2200      	movs	r2, #0
 80014b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80014b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80014b6:	4618      	mov	r0, r3
 80014b8:	3710      	adds	r7, #16
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}
	...

080014c0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80014c0:	b480      	push	{r7}
 80014c2:	b085      	sub	sp, #20
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
 80014c8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80014ca:	2300      	movs	r3, #0
 80014cc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80014d4:	2b01      	cmp	r3, #1
 80014d6:	d101      	bne.n	80014dc <HAL_ADC_ConfigChannel+0x1c>
 80014d8:	2302      	movs	r3, #2
 80014da:	e105      	b.n	80016e8 <HAL_ADC_ConfigChannel+0x228>
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	2201      	movs	r2, #1
 80014e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	2b09      	cmp	r3, #9
 80014ea:	d925      	bls.n	8001538 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	68d9      	ldr	r1, [r3, #12]
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	b29b      	uxth	r3, r3
 80014f8:	461a      	mov	r2, r3
 80014fa:	4613      	mov	r3, r2
 80014fc:	005b      	lsls	r3, r3, #1
 80014fe:	4413      	add	r3, r2
 8001500:	3b1e      	subs	r3, #30
 8001502:	2207      	movs	r2, #7
 8001504:	fa02 f303 	lsl.w	r3, r2, r3
 8001508:	43da      	mvns	r2, r3
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	400a      	ands	r2, r1
 8001510:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	68d9      	ldr	r1, [r3, #12]
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	689a      	ldr	r2, [r3, #8]
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	b29b      	uxth	r3, r3
 8001522:	4618      	mov	r0, r3
 8001524:	4603      	mov	r3, r0
 8001526:	005b      	lsls	r3, r3, #1
 8001528:	4403      	add	r3, r0
 800152a:	3b1e      	subs	r3, #30
 800152c:	409a      	lsls	r2, r3
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	430a      	orrs	r2, r1
 8001534:	60da      	str	r2, [r3, #12]
 8001536:	e022      	b.n	800157e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	6919      	ldr	r1, [r3, #16]
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	b29b      	uxth	r3, r3
 8001544:	461a      	mov	r2, r3
 8001546:	4613      	mov	r3, r2
 8001548:	005b      	lsls	r3, r3, #1
 800154a:	4413      	add	r3, r2
 800154c:	2207      	movs	r2, #7
 800154e:	fa02 f303 	lsl.w	r3, r2, r3
 8001552:	43da      	mvns	r2, r3
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	400a      	ands	r2, r1
 800155a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	6919      	ldr	r1, [r3, #16]
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	689a      	ldr	r2, [r3, #8]
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	b29b      	uxth	r3, r3
 800156c:	4618      	mov	r0, r3
 800156e:	4603      	mov	r3, r0
 8001570:	005b      	lsls	r3, r3, #1
 8001572:	4403      	add	r3, r0
 8001574:	409a      	lsls	r2, r3
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	430a      	orrs	r2, r1
 800157c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	2b06      	cmp	r3, #6
 8001584:	d824      	bhi.n	80015d0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	685a      	ldr	r2, [r3, #4]
 8001590:	4613      	mov	r3, r2
 8001592:	009b      	lsls	r3, r3, #2
 8001594:	4413      	add	r3, r2
 8001596:	3b05      	subs	r3, #5
 8001598:	221f      	movs	r2, #31
 800159a:	fa02 f303 	lsl.w	r3, r2, r3
 800159e:	43da      	mvns	r2, r3
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	400a      	ands	r2, r1
 80015a6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	b29b      	uxth	r3, r3
 80015b4:	4618      	mov	r0, r3
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	685a      	ldr	r2, [r3, #4]
 80015ba:	4613      	mov	r3, r2
 80015bc:	009b      	lsls	r3, r3, #2
 80015be:	4413      	add	r3, r2
 80015c0:	3b05      	subs	r3, #5
 80015c2:	fa00 f203 	lsl.w	r2, r0, r3
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	430a      	orrs	r2, r1
 80015cc:	635a      	str	r2, [r3, #52]	; 0x34
 80015ce:	e04c      	b.n	800166a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	2b0c      	cmp	r3, #12
 80015d6:	d824      	bhi.n	8001622 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	685a      	ldr	r2, [r3, #4]
 80015e2:	4613      	mov	r3, r2
 80015e4:	009b      	lsls	r3, r3, #2
 80015e6:	4413      	add	r3, r2
 80015e8:	3b23      	subs	r3, #35	; 0x23
 80015ea:	221f      	movs	r2, #31
 80015ec:	fa02 f303 	lsl.w	r3, r2, r3
 80015f0:	43da      	mvns	r2, r3
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	400a      	ands	r2, r1
 80015f8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	b29b      	uxth	r3, r3
 8001606:	4618      	mov	r0, r3
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	685a      	ldr	r2, [r3, #4]
 800160c:	4613      	mov	r3, r2
 800160e:	009b      	lsls	r3, r3, #2
 8001610:	4413      	add	r3, r2
 8001612:	3b23      	subs	r3, #35	; 0x23
 8001614:	fa00 f203 	lsl.w	r2, r0, r3
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	430a      	orrs	r2, r1
 800161e:	631a      	str	r2, [r3, #48]	; 0x30
 8001620:	e023      	b.n	800166a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	685a      	ldr	r2, [r3, #4]
 800162c:	4613      	mov	r3, r2
 800162e:	009b      	lsls	r3, r3, #2
 8001630:	4413      	add	r3, r2
 8001632:	3b41      	subs	r3, #65	; 0x41
 8001634:	221f      	movs	r2, #31
 8001636:	fa02 f303 	lsl.w	r3, r2, r3
 800163a:	43da      	mvns	r2, r3
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	400a      	ands	r2, r1
 8001642:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	b29b      	uxth	r3, r3
 8001650:	4618      	mov	r0, r3
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	685a      	ldr	r2, [r3, #4]
 8001656:	4613      	mov	r3, r2
 8001658:	009b      	lsls	r3, r3, #2
 800165a:	4413      	add	r3, r2
 800165c:	3b41      	subs	r3, #65	; 0x41
 800165e:	fa00 f203 	lsl.w	r2, r0, r3
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	430a      	orrs	r2, r1
 8001668:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800166a:	4b22      	ldr	r3, [pc, #136]	; (80016f4 <HAL_ADC_ConfigChannel+0x234>)
 800166c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	4a21      	ldr	r2, [pc, #132]	; (80016f8 <HAL_ADC_ConfigChannel+0x238>)
 8001674:	4293      	cmp	r3, r2
 8001676:	d109      	bne.n	800168c <HAL_ADC_ConfigChannel+0x1cc>
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	2b12      	cmp	r3, #18
 800167e:	d105      	bne.n	800168c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	4a19      	ldr	r2, [pc, #100]	; (80016f8 <HAL_ADC_ConfigChannel+0x238>)
 8001692:	4293      	cmp	r3, r2
 8001694:	d123      	bne.n	80016de <HAL_ADC_ConfigChannel+0x21e>
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	2b10      	cmp	r3, #16
 800169c:	d003      	beq.n	80016a6 <HAL_ADC_ConfigChannel+0x1e6>
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	2b11      	cmp	r3, #17
 80016a4:	d11b      	bne.n	80016de <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	2b10      	cmp	r3, #16
 80016b8:	d111      	bne.n	80016de <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80016ba:	4b10      	ldr	r3, [pc, #64]	; (80016fc <HAL_ADC_ConfigChannel+0x23c>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	4a10      	ldr	r2, [pc, #64]	; (8001700 <HAL_ADC_ConfigChannel+0x240>)
 80016c0:	fba2 2303 	umull	r2, r3, r2, r3
 80016c4:	0c9a      	lsrs	r2, r3, #18
 80016c6:	4613      	mov	r3, r2
 80016c8:	009b      	lsls	r3, r3, #2
 80016ca:	4413      	add	r3, r2
 80016cc:	005b      	lsls	r3, r3, #1
 80016ce:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80016d0:	e002      	b.n	80016d8 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80016d2:	68bb      	ldr	r3, [r7, #8]
 80016d4:	3b01      	subs	r3, #1
 80016d6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80016d8:	68bb      	ldr	r3, [r7, #8]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d1f9      	bne.n	80016d2 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	2200      	movs	r2, #0
 80016e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80016e6:	2300      	movs	r3, #0
}
 80016e8:	4618      	mov	r0, r3
 80016ea:	3714      	adds	r7, #20
 80016ec:	46bd      	mov	sp, r7
 80016ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f2:	4770      	bx	lr
 80016f4:	40012300 	.word	0x40012300
 80016f8:	40012000 	.word	0x40012000
 80016fc:	20000000 	.word	0x20000000
 8001700:	431bde83 	.word	0x431bde83

08001704 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001704:	b480      	push	{r7}
 8001706:	b085      	sub	sp, #20
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800170c:	4b79      	ldr	r3, [pc, #484]	; (80018f4 <ADC_Init+0x1f0>)
 800170e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	685b      	ldr	r3, [r3, #4]
 8001714:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	685a      	ldr	r2, [r3, #4]
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	431a      	orrs	r2, r3
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	685a      	ldr	r2, [r3, #4]
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001738:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	6859      	ldr	r1, [r3, #4]
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	691b      	ldr	r3, [r3, #16]
 8001744:	021a      	lsls	r2, r3, #8
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	430a      	orrs	r2, r1
 800174c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	685a      	ldr	r2, [r3, #4]
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800175c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	6859      	ldr	r1, [r3, #4]
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	689a      	ldr	r2, [r3, #8]
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	430a      	orrs	r2, r1
 800176e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	689a      	ldr	r2, [r3, #8]
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800177e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	6899      	ldr	r1, [r3, #8]
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	68da      	ldr	r2, [r3, #12]
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	430a      	orrs	r2, r1
 8001790:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001796:	4a58      	ldr	r2, [pc, #352]	; (80018f8 <ADC_Init+0x1f4>)
 8001798:	4293      	cmp	r3, r2
 800179a:	d022      	beq.n	80017e2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	689a      	ldr	r2, [r3, #8]
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80017aa:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	6899      	ldr	r1, [r3, #8]
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	430a      	orrs	r2, r1
 80017bc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	689a      	ldr	r2, [r3, #8]
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80017cc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	6899      	ldr	r1, [r3, #8]
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	430a      	orrs	r2, r1
 80017de:	609a      	str	r2, [r3, #8]
 80017e0:	e00f      	b.n	8001802 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	689a      	ldr	r2, [r3, #8]
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80017f0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	689a      	ldr	r2, [r3, #8]
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001800:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	689a      	ldr	r2, [r3, #8]
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f022 0202 	bic.w	r2, r2, #2
 8001810:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	6899      	ldr	r1, [r3, #8]
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	7e1b      	ldrb	r3, [r3, #24]
 800181c:	005a      	lsls	r2, r3, #1
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	430a      	orrs	r2, r1
 8001824:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	f893 3020 	ldrb.w	r3, [r3, #32]
 800182c:	2b00      	cmp	r3, #0
 800182e:	d01b      	beq.n	8001868 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	685a      	ldr	r2, [r3, #4]
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800183e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	685a      	ldr	r2, [r3, #4]
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800184e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	6859      	ldr	r1, [r3, #4]
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800185a:	3b01      	subs	r3, #1
 800185c:	035a      	lsls	r2, r3, #13
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	430a      	orrs	r2, r1
 8001864:	605a      	str	r2, [r3, #4]
 8001866:	e007      	b.n	8001878 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	685a      	ldr	r2, [r3, #4]
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001876:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001886:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	69db      	ldr	r3, [r3, #28]
 8001892:	3b01      	subs	r3, #1
 8001894:	051a      	lsls	r2, r3, #20
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	430a      	orrs	r2, r1
 800189c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	689a      	ldr	r2, [r3, #8]
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80018ac:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	6899      	ldr	r1, [r3, #8]
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80018ba:	025a      	lsls	r2, r3, #9
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	430a      	orrs	r2, r1
 80018c2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	689a      	ldr	r2, [r3, #8]
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80018d2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	6899      	ldr	r1, [r3, #8]
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	695b      	ldr	r3, [r3, #20]
 80018de:	029a      	lsls	r2, r3, #10
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	430a      	orrs	r2, r1
 80018e6:	609a      	str	r2, [r3, #8]
}
 80018e8:	bf00      	nop
 80018ea:	3714      	adds	r7, #20
 80018ec:	46bd      	mov	sp, r7
 80018ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f2:	4770      	bx	lr
 80018f4:	40012300 	.word	0x40012300
 80018f8:	0f000001 	.word	0x0f000001

080018fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018fc:	b480      	push	{r7}
 80018fe:	b085      	sub	sp, #20
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	f003 0307 	and.w	r3, r3, #7
 800190a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800190c:	4b0c      	ldr	r3, [pc, #48]	; (8001940 <__NVIC_SetPriorityGrouping+0x44>)
 800190e:	68db      	ldr	r3, [r3, #12]
 8001910:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001912:	68ba      	ldr	r2, [r7, #8]
 8001914:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001918:	4013      	ands	r3, r2
 800191a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001920:	68bb      	ldr	r3, [r7, #8]
 8001922:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001924:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001928:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800192c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800192e:	4a04      	ldr	r2, [pc, #16]	; (8001940 <__NVIC_SetPriorityGrouping+0x44>)
 8001930:	68bb      	ldr	r3, [r7, #8]
 8001932:	60d3      	str	r3, [r2, #12]
}
 8001934:	bf00      	nop
 8001936:	3714      	adds	r7, #20
 8001938:	46bd      	mov	sp, r7
 800193a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193e:	4770      	bx	lr
 8001940:	e000ed00 	.word	0xe000ed00

08001944 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001944:	b480      	push	{r7}
 8001946:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001948:	4b04      	ldr	r3, [pc, #16]	; (800195c <__NVIC_GetPriorityGrouping+0x18>)
 800194a:	68db      	ldr	r3, [r3, #12]
 800194c:	0a1b      	lsrs	r3, r3, #8
 800194e:	f003 0307 	and.w	r3, r3, #7
}
 8001952:	4618      	mov	r0, r3
 8001954:	46bd      	mov	sp, r7
 8001956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195a:	4770      	bx	lr
 800195c:	e000ed00 	.word	0xe000ed00

08001960 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001960:	b480      	push	{r7}
 8001962:	b083      	sub	sp, #12
 8001964:	af00      	add	r7, sp, #0
 8001966:	4603      	mov	r3, r0
 8001968:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800196a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800196e:	2b00      	cmp	r3, #0
 8001970:	db0b      	blt.n	800198a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001972:	79fb      	ldrb	r3, [r7, #7]
 8001974:	f003 021f 	and.w	r2, r3, #31
 8001978:	4907      	ldr	r1, [pc, #28]	; (8001998 <__NVIC_EnableIRQ+0x38>)
 800197a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800197e:	095b      	lsrs	r3, r3, #5
 8001980:	2001      	movs	r0, #1
 8001982:	fa00 f202 	lsl.w	r2, r0, r2
 8001986:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800198a:	bf00      	nop
 800198c:	370c      	adds	r7, #12
 800198e:	46bd      	mov	sp, r7
 8001990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001994:	4770      	bx	lr
 8001996:	bf00      	nop
 8001998:	e000e100 	.word	0xe000e100

0800199c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800199c:	b480      	push	{r7}
 800199e:	b083      	sub	sp, #12
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	4603      	mov	r3, r0
 80019a4:	6039      	str	r1, [r7, #0]
 80019a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	db0a      	blt.n	80019c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	b2da      	uxtb	r2, r3
 80019b4:	490c      	ldr	r1, [pc, #48]	; (80019e8 <__NVIC_SetPriority+0x4c>)
 80019b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ba:	0112      	lsls	r2, r2, #4
 80019bc:	b2d2      	uxtb	r2, r2
 80019be:	440b      	add	r3, r1
 80019c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019c4:	e00a      	b.n	80019dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	b2da      	uxtb	r2, r3
 80019ca:	4908      	ldr	r1, [pc, #32]	; (80019ec <__NVIC_SetPriority+0x50>)
 80019cc:	79fb      	ldrb	r3, [r7, #7]
 80019ce:	f003 030f 	and.w	r3, r3, #15
 80019d2:	3b04      	subs	r3, #4
 80019d4:	0112      	lsls	r2, r2, #4
 80019d6:	b2d2      	uxtb	r2, r2
 80019d8:	440b      	add	r3, r1
 80019da:	761a      	strb	r2, [r3, #24]
}
 80019dc:	bf00      	nop
 80019de:	370c      	adds	r7, #12
 80019e0:	46bd      	mov	sp, r7
 80019e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e6:	4770      	bx	lr
 80019e8:	e000e100 	.word	0xe000e100
 80019ec:	e000ed00 	.word	0xe000ed00

080019f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019f0:	b480      	push	{r7}
 80019f2:	b089      	sub	sp, #36	; 0x24
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	60f8      	str	r0, [r7, #12]
 80019f8:	60b9      	str	r1, [r7, #8]
 80019fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	f003 0307 	and.w	r3, r3, #7
 8001a02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a04:	69fb      	ldr	r3, [r7, #28]
 8001a06:	f1c3 0307 	rsb	r3, r3, #7
 8001a0a:	2b04      	cmp	r3, #4
 8001a0c:	bf28      	it	cs
 8001a0e:	2304      	movcs	r3, #4
 8001a10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a12:	69fb      	ldr	r3, [r7, #28]
 8001a14:	3304      	adds	r3, #4
 8001a16:	2b06      	cmp	r3, #6
 8001a18:	d902      	bls.n	8001a20 <NVIC_EncodePriority+0x30>
 8001a1a:	69fb      	ldr	r3, [r7, #28]
 8001a1c:	3b03      	subs	r3, #3
 8001a1e:	e000      	b.n	8001a22 <NVIC_EncodePriority+0x32>
 8001a20:	2300      	movs	r3, #0
 8001a22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a24:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001a28:	69bb      	ldr	r3, [r7, #24]
 8001a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2e:	43da      	mvns	r2, r3
 8001a30:	68bb      	ldr	r3, [r7, #8]
 8001a32:	401a      	ands	r2, r3
 8001a34:	697b      	ldr	r3, [r7, #20]
 8001a36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a38:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001a3c:	697b      	ldr	r3, [r7, #20]
 8001a3e:	fa01 f303 	lsl.w	r3, r1, r3
 8001a42:	43d9      	mvns	r1, r3
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a48:	4313      	orrs	r3, r2
         );
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	3724      	adds	r7, #36	; 0x24
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a54:	4770      	bx	lr
	...

08001a58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b082      	sub	sp, #8
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	3b01      	subs	r3, #1
 8001a64:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a68:	d301      	bcc.n	8001a6e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	e00f      	b.n	8001a8e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a6e:	4a0a      	ldr	r2, [pc, #40]	; (8001a98 <SysTick_Config+0x40>)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	3b01      	subs	r3, #1
 8001a74:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a76:	210f      	movs	r1, #15
 8001a78:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001a7c:	f7ff ff8e 	bl	800199c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a80:	4b05      	ldr	r3, [pc, #20]	; (8001a98 <SysTick_Config+0x40>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a86:	4b04      	ldr	r3, [pc, #16]	; (8001a98 <SysTick_Config+0x40>)
 8001a88:	2207      	movs	r2, #7
 8001a8a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a8c:	2300      	movs	r3, #0
}
 8001a8e:	4618      	mov	r0, r3
 8001a90:	3708      	adds	r7, #8
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	bf00      	nop
 8001a98:	e000e010 	.word	0xe000e010

08001a9c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b082      	sub	sp, #8
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001aa4:	6878      	ldr	r0, [r7, #4]
 8001aa6:	f7ff ff29 	bl	80018fc <__NVIC_SetPriorityGrouping>
}
 8001aaa:	bf00      	nop
 8001aac:	3708      	adds	r7, #8
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}

08001ab2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ab2:	b580      	push	{r7, lr}
 8001ab4:	b086      	sub	sp, #24
 8001ab6:	af00      	add	r7, sp, #0
 8001ab8:	4603      	mov	r3, r0
 8001aba:	60b9      	str	r1, [r7, #8]
 8001abc:	607a      	str	r2, [r7, #4]
 8001abe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ac4:	f7ff ff3e 	bl	8001944 <__NVIC_GetPriorityGrouping>
 8001ac8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001aca:	687a      	ldr	r2, [r7, #4]
 8001acc:	68b9      	ldr	r1, [r7, #8]
 8001ace:	6978      	ldr	r0, [r7, #20]
 8001ad0:	f7ff ff8e 	bl	80019f0 <NVIC_EncodePriority>
 8001ad4:	4602      	mov	r2, r0
 8001ad6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ada:	4611      	mov	r1, r2
 8001adc:	4618      	mov	r0, r3
 8001ade:	f7ff ff5d 	bl	800199c <__NVIC_SetPriority>
}
 8001ae2:	bf00      	nop
 8001ae4:	3718      	adds	r7, #24
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}

08001aea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001aea:	b580      	push	{r7, lr}
 8001aec:	b082      	sub	sp, #8
 8001aee:	af00      	add	r7, sp, #0
 8001af0:	4603      	mov	r3, r0
 8001af2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001af4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001af8:	4618      	mov	r0, r3
 8001afa:	f7ff ff31 	bl	8001960 <__NVIC_EnableIRQ>
}
 8001afe:	bf00      	nop
 8001b00:	3708      	adds	r7, #8
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}

08001b06 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b06:	b580      	push	{r7, lr}
 8001b08:	b082      	sub	sp, #8
 8001b0a:	af00      	add	r7, sp, #0
 8001b0c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b0e:	6878      	ldr	r0, [r7, #4]
 8001b10:	f7ff ffa2 	bl	8001a58 <SysTick_Config>
 8001b14:	4603      	mov	r3, r0
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	3708      	adds	r7, #8
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}
	...

08001b20 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b20:	b480      	push	{r7}
 8001b22:	b089      	sub	sp, #36	; 0x24
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
 8001b28:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001b32:	2300      	movs	r3, #0
 8001b34:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b36:	2300      	movs	r3, #0
 8001b38:	61fb      	str	r3, [r7, #28]
 8001b3a:	e159      	b.n	8001df0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001b3c:	2201      	movs	r2, #1
 8001b3e:	69fb      	ldr	r3, [r7, #28]
 8001b40:	fa02 f303 	lsl.w	r3, r2, r3
 8001b44:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	697a      	ldr	r2, [r7, #20]
 8001b4c:	4013      	ands	r3, r2
 8001b4e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001b50:	693a      	ldr	r2, [r7, #16]
 8001b52:	697b      	ldr	r3, [r7, #20]
 8001b54:	429a      	cmp	r2, r3
 8001b56:	f040 8148 	bne.w	8001dea <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	2b01      	cmp	r3, #1
 8001b60:	d00b      	beq.n	8001b7a <HAL_GPIO_Init+0x5a>
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	2b02      	cmp	r3, #2
 8001b68:	d007      	beq.n	8001b7a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001b6e:	2b11      	cmp	r3, #17
 8001b70:	d003      	beq.n	8001b7a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	2b12      	cmp	r3, #18
 8001b78:	d130      	bne.n	8001bdc <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	689b      	ldr	r3, [r3, #8]
 8001b7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001b80:	69fb      	ldr	r3, [r7, #28]
 8001b82:	005b      	lsls	r3, r3, #1
 8001b84:	2203      	movs	r2, #3
 8001b86:	fa02 f303 	lsl.w	r3, r2, r3
 8001b8a:	43db      	mvns	r3, r3
 8001b8c:	69ba      	ldr	r2, [r7, #24]
 8001b8e:	4013      	ands	r3, r2
 8001b90:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	68da      	ldr	r2, [r3, #12]
 8001b96:	69fb      	ldr	r3, [r7, #28]
 8001b98:	005b      	lsls	r3, r3, #1
 8001b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9e:	69ba      	ldr	r2, [r7, #24]
 8001ba0:	4313      	orrs	r3, r2
 8001ba2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	69ba      	ldr	r2, [r7, #24]
 8001ba8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001bb0:	2201      	movs	r2, #1
 8001bb2:	69fb      	ldr	r3, [r7, #28]
 8001bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb8:	43db      	mvns	r3, r3
 8001bba:	69ba      	ldr	r2, [r7, #24]
 8001bbc:	4013      	ands	r3, r2
 8001bbe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	091b      	lsrs	r3, r3, #4
 8001bc6:	f003 0201 	and.w	r2, r3, #1
 8001bca:	69fb      	ldr	r3, [r7, #28]
 8001bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd0:	69ba      	ldr	r2, [r7, #24]
 8001bd2:	4313      	orrs	r3, r2
 8001bd4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	69ba      	ldr	r2, [r7, #24]
 8001bda:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	68db      	ldr	r3, [r3, #12]
 8001be0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001be2:	69fb      	ldr	r3, [r7, #28]
 8001be4:	005b      	lsls	r3, r3, #1
 8001be6:	2203      	movs	r2, #3
 8001be8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bec:	43db      	mvns	r3, r3
 8001bee:	69ba      	ldr	r2, [r7, #24]
 8001bf0:	4013      	ands	r3, r2
 8001bf2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	689a      	ldr	r2, [r3, #8]
 8001bf8:	69fb      	ldr	r3, [r7, #28]
 8001bfa:	005b      	lsls	r3, r3, #1
 8001bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001c00:	69ba      	ldr	r2, [r7, #24]
 8001c02:	4313      	orrs	r3, r2
 8001c04:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	69ba      	ldr	r2, [r7, #24]
 8001c0a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	2b02      	cmp	r3, #2
 8001c12:	d003      	beq.n	8001c1c <HAL_GPIO_Init+0xfc>
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	2b12      	cmp	r3, #18
 8001c1a:	d123      	bne.n	8001c64 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c1c:	69fb      	ldr	r3, [r7, #28]
 8001c1e:	08da      	lsrs	r2, r3, #3
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	3208      	adds	r2, #8
 8001c24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c28:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001c2a:	69fb      	ldr	r3, [r7, #28]
 8001c2c:	f003 0307 	and.w	r3, r3, #7
 8001c30:	009b      	lsls	r3, r3, #2
 8001c32:	220f      	movs	r2, #15
 8001c34:	fa02 f303 	lsl.w	r3, r2, r3
 8001c38:	43db      	mvns	r3, r3
 8001c3a:	69ba      	ldr	r2, [r7, #24]
 8001c3c:	4013      	ands	r3, r2
 8001c3e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	691a      	ldr	r2, [r3, #16]
 8001c44:	69fb      	ldr	r3, [r7, #28]
 8001c46:	f003 0307 	and.w	r3, r3, #7
 8001c4a:	009b      	lsls	r3, r3, #2
 8001c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c50:	69ba      	ldr	r2, [r7, #24]
 8001c52:	4313      	orrs	r3, r2
 8001c54:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001c56:	69fb      	ldr	r3, [r7, #28]
 8001c58:	08da      	lsrs	r2, r3, #3
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	3208      	adds	r2, #8
 8001c5e:	69b9      	ldr	r1, [r7, #24]
 8001c60:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001c6a:	69fb      	ldr	r3, [r7, #28]
 8001c6c:	005b      	lsls	r3, r3, #1
 8001c6e:	2203      	movs	r2, #3
 8001c70:	fa02 f303 	lsl.w	r3, r2, r3
 8001c74:	43db      	mvns	r3, r3
 8001c76:	69ba      	ldr	r2, [r7, #24]
 8001c78:	4013      	ands	r3, r2
 8001c7a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	f003 0203 	and.w	r2, r3, #3
 8001c84:	69fb      	ldr	r3, [r7, #28]
 8001c86:	005b      	lsls	r3, r3, #1
 8001c88:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8c:	69ba      	ldr	r2, [r7, #24]
 8001c8e:	4313      	orrs	r3, r2
 8001c90:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	69ba      	ldr	r2, [r7, #24]
 8001c96:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	f000 80a2 	beq.w	8001dea <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	60fb      	str	r3, [r7, #12]
 8001caa:	4b56      	ldr	r3, [pc, #344]	; (8001e04 <HAL_GPIO_Init+0x2e4>)
 8001cac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cae:	4a55      	ldr	r2, [pc, #340]	; (8001e04 <HAL_GPIO_Init+0x2e4>)
 8001cb0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cb4:	6453      	str	r3, [r2, #68]	; 0x44
 8001cb6:	4b53      	ldr	r3, [pc, #332]	; (8001e04 <HAL_GPIO_Init+0x2e4>)
 8001cb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cbe:	60fb      	str	r3, [r7, #12]
 8001cc0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001cc2:	4a51      	ldr	r2, [pc, #324]	; (8001e08 <HAL_GPIO_Init+0x2e8>)
 8001cc4:	69fb      	ldr	r3, [r7, #28]
 8001cc6:	089b      	lsrs	r3, r3, #2
 8001cc8:	3302      	adds	r3, #2
 8001cca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001cd0:	69fb      	ldr	r3, [r7, #28]
 8001cd2:	f003 0303 	and.w	r3, r3, #3
 8001cd6:	009b      	lsls	r3, r3, #2
 8001cd8:	220f      	movs	r2, #15
 8001cda:	fa02 f303 	lsl.w	r3, r2, r3
 8001cde:	43db      	mvns	r3, r3
 8001ce0:	69ba      	ldr	r2, [r7, #24]
 8001ce2:	4013      	ands	r3, r2
 8001ce4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	4a48      	ldr	r2, [pc, #288]	; (8001e0c <HAL_GPIO_Init+0x2ec>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d019      	beq.n	8001d22 <HAL_GPIO_Init+0x202>
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	4a47      	ldr	r2, [pc, #284]	; (8001e10 <HAL_GPIO_Init+0x2f0>)
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d013      	beq.n	8001d1e <HAL_GPIO_Init+0x1fe>
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	4a46      	ldr	r2, [pc, #280]	; (8001e14 <HAL_GPIO_Init+0x2f4>)
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d00d      	beq.n	8001d1a <HAL_GPIO_Init+0x1fa>
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	4a45      	ldr	r2, [pc, #276]	; (8001e18 <HAL_GPIO_Init+0x2f8>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d007      	beq.n	8001d16 <HAL_GPIO_Init+0x1f6>
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	4a44      	ldr	r2, [pc, #272]	; (8001e1c <HAL_GPIO_Init+0x2fc>)
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d101      	bne.n	8001d12 <HAL_GPIO_Init+0x1f2>
 8001d0e:	2304      	movs	r3, #4
 8001d10:	e008      	b.n	8001d24 <HAL_GPIO_Init+0x204>
 8001d12:	2307      	movs	r3, #7
 8001d14:	e006      	b.n	8001d24 <HAL_GPIO_Init+0x204>
 8001d16:	2303      	movs	r3, #3
 8001d18:	e004      	b.n	8001d24 <HAL_GPIO_Init+0x204>
 8001d1a:	2302      	movs	r3, #2
 8001d1c:	e002      	b.n	8001d24 <HAL_GPIO_Init+0x204>
 8001d1e:	2301      	movs	r3, #1
 8001d20:	e000      	b.n	8001d24 <HAL_GPIO_Init+0x204>
 8001d22:	2300      	movs	r3, #0
 8001d24:	69fa      	ldr	r2, [r7, #28]
 8001d26:	f002 0203 	and.w	r2, r2, #3
 8001d2a:	0092      	lsls	r2, r2, #2
 8001d2c:	4093      	lsls	r3, r2
 8001d2e:	69ba      	ldr	r2, [r7, #24]
 8001d30:	4313      	orrs	r3, r2
 8001d32:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d34:	4934      	ldr	r1, [pc, #208]	; (8001e08 <HAL_GPIO_Init+0x2e8>)
 8001d36:	69fb      	ldr	r3, [r7, #28]
 8001d38:	089b      	lsrs	r3, r3, #2
 8001d3a:	3302      	adds	r3, #2
 8001d3c:	69ba      	ldr	r2, [r7, #24]
 8001d3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d42:	4b37      	ldr	r3, [pc, #220]	; (8001e20 <HAL_GPIO_Init+0x300>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d48:	693b      	ldr	r3, [r7, #16]
 8001d4a:	43db      	mvns	r3, r3
 8001d4c:	69ba      	ldr	r2, [r7, #24]
 8001d4e:	4013      	ands	r3, r2
 8001d50:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d003      	beq.n	8001d66 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001d5e:	69ba      	ldr	r2, [r7, #24]
 8001d60:	693b      	ldr	r3, [r7, #16]
 8001d62:	4313      	orrs	r3, r2
 8001d64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d66:	4a2e      	ldr	r2, [pc, #184]	; (8001e20 <HAL_GPIO_Init+0x300>)
 8001d68:	69bb      	ldr	r3, [r7, #24]
 8001d6a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001d6c:	4b2c      	ldr	r3, [pc, #176]	; (8001e20 <HAL_GPIO_Init+0x300>)
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d72:	693b      	ldr	r3, [r7, #16]
 8001d74:	43db      	mvns	r3, r3
 8001d76:	69ba      	ldr	r2, [r7, #24]
 8001d78:	4013      	ands	r3, r2
 8001d7a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d003      	beq.n	8001d90 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001d88:	69ba      	ldr	r2, [r7, #24]
 8001d8a:	693b      	ldr	r3, [r7, #16]
 8001d8c:	4313      	orrs	r3, r2
 8001d8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d90:	4a23      	ldr	r2, [pc, #140]	; (8001e20 <HAL_GPIO_Init+0x300>)
 8001d92:	69bb      	ldr	r3, [r7, #24]
 8001d94:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d96:	4b22      	ldr	r3, [pc, #136]	; (8001e20 <HAL_GPIO_Init+0x300>)
 8001d98:	689b      	ldr	r3, [r3, #8]
 8001d9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d9c:	693b      	ldr	r3, [r7, #16]
 8001d9e:	43db      	mvns	r3, r3
 8001da0:	69ba      	ldr	r2, [r7, #24]
 8001da2:	4013      	ands	r3, r2
 8001da4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d003      	beq.n	8001dba <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001db2:	69ba      	ldr	r2, [r7, #24]
 8001db4:	693b      	ldr	r3, [r7, #16]
 8001db6:	4313      	orrs	r3, r2
 8001db8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001dba:	4a19      	ldr	r2, [pc, #100]	; (8001e20 <HAL_GPIO_Init+0x300>)
 8001dbc:	69bb      	ldr	r3, [r7, #24]
 8001dbe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001dc0:	4b17      	ldr	r3, [pc, #92]	; (8001e20 <HAL_GPIO_Init+0x300>)
 8001dc2:	68db      	ldr	r3, [r3, #12]
 8001dc4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dc6:	693b      	ldr	r3, [r7, #16]
 8001dc8:	43db      	mvns	r3, r3
 8001dca:	69ba      	ldr	r2, [r7, #24]
 8001dcc:	4013      	ands	r3, r2
 8001dce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d003      	beq.n	8001de4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001ddc:	69ba      	ldr	r2, [r7, #24]
 8001dde:	693b      	ldr	r3, [r7, #16]
 8001de0:	4313      	orrs	r3, r2
 8001de2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001de4:	4a0e      	ldr	r2, [pc, #56]	; (8001e20 <HAL_GPIO_Init+0x300>)
 8001de6:	69bb      	ldr	r3, [r7, #24]
 8001de8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001dea:	69fb      	ldr	r3, [r7, #28]
 8001dec:	3301      	adds	r3, #1
 8001dee:	61fb      	str	r3, [r7, #28]
 8001df0:	69fb      	ldr	r3, [r7, #28]
 8001df2:	2b0f      	cmp	r3, #15
 8001df4:	f67f aea2 	bls.w	8001b3c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001df8:	bf00      	nop
 8001dfa:	3724      	adds	r7, #36	; 0x24
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e02:	4770      	bx	lr
 8001e04:	40023800 	.word	0x40023800
 8001e08:	40013800 	.word	0x40013800
 8001e0c:	40020000 	.word	0x40020000
 8001e10:	40020400 	.word	0x40020400
 8001e14:	40020800 	.word	0x40020800
 8001e18:	40020c00 	.word	0x40020c00
 8001e1c:	40021000 	.word	0x40021000
 8001e20:	40013c00 	.word	0x40013c00

08001e24 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e24:	b480      	push	{r7}
 8001e26:	b083      	sub	sp, #12
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
 8001e2c:	460b      	mov	r3, r1
 8001e2e:	807b      	strh	r3, [r7, #2]
 8001e30:	4613      	mov	r3, r2
 8001e32:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e34:	787b      	ldrb	r3, [r7, #1]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d003      	beq.n	8001e42 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e3a:	887a      	ldrh	r2, [r7, #2]
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001e40:	e003      	b.n	8001e4a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001e42:	887b      	ldrh	r3, [r7, #2]
 8001e44:	041a      	lsls	r2, r3, #16
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	619a      	str	r2, [r3, #24]
}
 8001e4a:	bf00      	nop
 8001e4c:	370c      	adds	r7, #12
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e54:	4770      	bx	lr

08001e56 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001e56:	b480      	push	{r7}
 8001e58:	b083      	sub	sp, #12
 8001e5a:	af00      	add	r7, sp, #0
 8001e5c:	6078      	str	r0, [r7, #4]
 8001e5e:	460b      	mov	r3, r1
 8001e60:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	695a      	ldr	r2, [r3, #20]
 8001e66:	887b      	ldrh	r3, [r7, #2]
 8001e68:	401a      	ands	r2, r3
 8001e6a:	887b      	ldrh	r3, [r7, #2]
 8001e6c:	429a      	cmp	r2, r3
 8001e6e:	d104      	bne.n	8001e7a <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001e70:	887b      	ldrh	r3, [r7, #2]
 8001e72:	041a      	lsls	r2, r3, #16
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8001e78:	e002      	b.n	8001e80 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8001e7a:	887a      	ldrh	r2, [r7, #2]
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	619a      	str	r2, [r3, #24]
}
 8001e80:	bf00      	nop
 8001e82:	370c      	adds	r7, #12
 8001e84:	46bd      	mov	sp, r7
 8001e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8a:	4770      	bx	lr

08001e8c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b082      	sub	sp, #8
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	4603      	mov	r3, r0
 8001e94:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001e96:	4b08      	ldr	r3, [pc, #32]	; (8001eb8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001e98:	695a      	ldr	r2, [r3, #20]
 8001e9a:	88fb      	ldrh	r3, [r7, #6]
 8001e9c:	4013      	ands	r3, r2
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d006      	beq.n	8001eb0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001ea2:	4a05      	ldr	r2, [pc, #20]	; (8001eb8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001ea4:	88fb      	ldrh	r3, [r7, #6]
 8001ea6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001ea8:	88fb      	ldrh	r3, [r7, #6]
 8001eaa:	4618      	mov	r0, r3
 8001eac:	f000 f806 	bl	8001ebc <HAL_GPIO_EXTI_Callback>
  }
}
 8001eb0:	bf00      	nop
 8001eb2:	3708      	adds	r7, #8
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bd80      	pop	{r7, pc}
 8001eb8:	40013c00 	.word	0x40013c00

08001ebc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	b083      	sub	sp, #12
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001ec6:	bf00      	nop
 8001ec8:	370c      	adds	r7, #12
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed0:	4770      	bx	lr
	...

08001ed4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b084      	sub	sp, #16
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d101      	bne.n	8001ee6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	e11f      	b.n	8002126 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001eec:	b2db      	uxtb	r3, r3
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d106      	bne.n	8001f00 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001efa:	6878      	ldr	r0, [r7, #4]
 8001efc:	f7ff f8d0 	bl	80010a0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2224      	movs	r2, #36	; 0x24
 8001f04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	681a      	ldr	r2, [r3, #0]
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f022 0201 	bic.w	r2, r2, #1
 8001f16:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	681a      	ldr	r2, [r3, #0]
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001f26:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	681a      	ldr	r2, [r3, #0]
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001f36:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001f38:	f001 f95e 	bl	80031f8 <HAL_RCC_GetPCLK1Freq>
 8001f3c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	4a7b      	ldr	r2, [pc, #492]	; (8002130 <HAL_I2C_Init+0x25c>)
 8001f44:	4293      	cmp	r3, r2
 8001f46:	d807      	bhi.n	8001f58 <HAL_I2C_Init+0x84>
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	4a7a      	ldr	r2, [pc, #488]	; (8002134 <HAL_I2C_Init+0x260>)
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	bf94      	ite	ls
 8001f50:	2301      	movls	r3, #1
 8001f52:	2300      	movhi	r3, #0
 8001f54:	b2db      	uxtb	r3, r3
 8001f56:	e006      	b.n	8001f66 <HAL_I2C_Init+0x92>
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	4a77      	ldr	r2, [pc, #476]	; (8002138 <HAL_I2C_Init+0x264>)
 8001f5c:	4293      	cmp	r3, r2
 8001f5e:	bf94      	ite	ls
 8001f60:	2301      	movls	r3, #1
 8001f62:	2300      	movhi	r3, #0
 8001f64:	b2db      	uxtb	r3, r3
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d001      	beq.n	8001f6e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	e0db      	b.n	8002126 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	4a72      	ldr	r2, [pc, #456]	; (800213c <HAL_I2C_Init+0x268>)
 8001f72:	fba2 2303 	umull	r2, r3, r2, r3
 8001f76:	0c9b      	lsrs	r3, r3, #18
 8001f78:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	68ba      	ldr	r2, [r7, #8]
 8001f8a:	430a      	orrs	r2, r1
 8001f8c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	6a1b      	ldr	r3, [r3, #32]
 8001f94:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	4a64      	ldr	r2, [pc, #400]	; (8002130 <HAL_I2C_Init+0x25c>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d802      	bhi.n	8001fa8 <HAL_I2C_Init+0xd4>
 8001fa2:	68bb      	ldr	r3, [r7, #8]
 8001fa4:	3301      	adds	r3, #1
 8001fa6:	e009      	b.n	8001fbc <HAL_I2C_Init+0xe8>
 8001fa8:	68bb      	ldr	r3, [r7, #8]
 8001faa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001fae:	fb02 f303 	mul.w	r3, r2, r3
 8001fb2:	4a63      	ldr	r2, [pc, #396]	; (8002140 <HAL_I2C_Init+0x26c>)
 8001fb4:	fba2 2303 	umull	r2, r3, r2, r3
 8001fb8:	099b      	lsrs	r3, r3, #6
 8001fba:	3301      	adds	r3, #1
 8001fbc:	687a      	ldr	r2, [r7, #4]
 8001fbe:	6812      	ldr	r2, [r2, #0]
 8001fc0:	430b      	orrs	r3, r1
 8001fc2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	69db      	ldr	r3, [r3, #28]
 8001fca:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001fce:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	4956      	ldr	r1, [pc, #344]	; (8002130 <HAL_I2C_Init+0x25c>)
 8001fd8:	428b      	cmp	r3, r1
 8001fda:	d80d      	bhi.n	8001ff8 <HAL_I2C_Init+0x124>
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	1e59      	subs	r1, r3, #1
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	005b      	lsls	r3, r3, #1
 8001fe6:	fbb1 f3f3 	udiv	r3, r1, r3
 8001fea:	3301      	adds	r3, #1
 8001fec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ff0:	2b04      	cmp	r3, #4
 8001ff2:	bf38      	it	cc
 8001ff4:	2304      	movcc	r3, #4
 8001ff6:	e04f      	b.n	8002098 <HAL_I2C_Init+0x1c4>
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	689b      	ldr	r3, [r3, #8]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d111      	bne.n	8002024 <HAL_I2C_Init+0x150>
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	1e58      	subs	r0, r3, #1
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6859      	ldr	r1, [r3, #4]
 8002008:	460b      	mov	r3, r1
 800200a:	005b      	lsls	r3, r3, #1
 800200c:	440b      	add	r3, r1
 800200e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002012:	3301      	adds	r3, #1
 8002014:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002018:	2b00      	cmp	r3, #0
 800201a:	bf0c      	ite	eq
 800201c:	2301      	moveq	r3, #1
 800201e:	2300      	movne	r3, #0
 8002020:	b2db      	uxtb	r3, r3
 8002022:	e012      	b.n	800204a <HAL_I2C_Init+0x176>
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	1e58      	subs	r0, r3, #1
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6859      	ldr	r1, [r3, #4]
 800202c:	460b      	mov	r3, r1
 800202e:	009b      	lsls	r3, r3, #2
 8002030:	440b      	add	r3, r1
 8002032:	0099      	lsls	r1, r3, #2
 8002034:	440b      	add	r3, r1
 8002036:	fbb0 f3f3 	udiv	r3, r0, r3
 800203a:	3301      	adds	r3, #1
 800203c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002040:	2b00      	cmp	r3, #0
 8002042:	bf0c      	ite	eq
 8002044:	2301      	moveq	r3, #1
 8002046:	2300      	movne	r3, #0
 8002048:	b2db      	uxtb	r3, r3
 800204a:	2b00      	cmp	r3, #0
 800204c:	d001      	beq.n	8002052 <HAL_I2C_Init+0x17e>
 800204e:	2301      	movs	r3, #1
 8002050:	e022      	b.n	8002098 <HAL_I2C_Init+0x1c4>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	689b      	ldr	r3, [r3, #8]
 8002056:	2b00      	cmp	r3, #0
 8002058:	d10e      	bne.n	8002078 <HAL_I2C_Init+0x1a4>
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	1e58      	subs	r0, r3, #1
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6859      	ldr	r1, [r3, #4]
 8002062:	460b      	mov	r3, r1
 8002064:	005b      	lsls	r3, r3, #1
 8002066:	440b      	add	r3, r1
 8002068:	fbb0 f3f3 	udiv	r3, r0, r3
 800206c:	3301      	adds	r3, #1
 800206e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002072:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002076:	e00f      	b.n	8002098 <HAL_I2C_Init+0x1c4>
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	1e58      	subs	r0, r3, #1
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6859      	ldr	r1, [r3, #4]
 8002080:	460b      	mov	r3, r1
 8002082:	009b      	lsls	r3, r3, #2
 8002084:	440b      	add	r3, r1
 8002086:	0099      	lsls	r1, r3, #2
 8002088:	440b      	add	r3, r1
 800208a:	fbb0 f3f3 	udiv	r3, r0, r3
 800208e:	3301      	adds	r3, #1
 8002090:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002094:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002098:	6879      	ldr	r1, [r7, #4]
 800209a:	6809      	ldr	r1, [r1, #0]
 800209c:	4313      	orrs	r3, r2
 800209e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	69da      	ldr	r2, [r3, #28]
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6a1b      	ldr	r3, [r3, #32]
 80020b2:	431a      	orrs	r2, r3
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	430a      	orrs	r2, r1
 80020ba:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	689b      	ldr	r3, [r3, #8]
 80020c2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80020c6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80020ca:	687a      	ldr	r2, [r7, #4]
 80020cc:	6911      	ldr	r1, [r2, #16]
 80020ce:	687a      	ldr	r2, [r7, #4]
 80020d0:	68d2      	ldr	r2, [r2, #12]
 80020d2:	4311      	orrs	r1, r2
 80020d4:	687a      	ldr	r2, [r7, #4]
 80020d6:	6812      	ldr	r2, [r2, #0]
 80020d8:	430b      	orrs	r3, r1
 80020da:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	68db      	ldr	r3, [r3, #12]
 80020e2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	695a      	ldr	r2, [r3, #20]
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	699b      	ldr	r3, [r3, #24]
 80020ee:	431a      	orrs	r2, r3
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	430a      	orrs	r2, r1
 80020f6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	681a      	ldr	r2, [r3, #0]
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f042 0201 	orr.w	r2, r2, #1
 8002106:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2200      	movs	r2, #0
 800210c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2220      	movs	r2, #32
 8002112:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	2200      	movs	r2, #0
 800211a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2200      	movs	r2, #0
 8002120:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002124:	2300      	movs	r3, #0
}
 8002126:	4618      	mov	r0, r3
 8002128:	3710      	adds	r7, #16
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}
 800212e:	bf00      	nop
 8002130:	000186a0 	.word	0x000186a0
 8002134:	001e847f 	.word	0x001e847f
 8002138:	003d08ff 	.word	0x003d08ff
 800213c:	431bde83 	.word	0x431bde83
 8002140:	10624dd3 	.word	0x10624dd3

08002144 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b088      	sub	sp, #32
 8002148:	af02      	add	r7, sp, #8
 800214a:	60f8      	str	r0, [r7, #12]
 800214c:	4608      	mov	r0, r1
 800214e:	4611      	mov	r1, r2
 8002150:	461a      	mov	r2, r3
 8002152:	4603      	mov	r3, r0
 8002154:	817b      	strh	r3, [r7, #10]
 8002156:	460b      	mov	r3, r1
 8002158:	813b      	strh	r3, [r7, #8]
 800215a:	4613      	mov	r3, r2
 800215c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800215e:	f7ff f93d 	bl	80013dc <HAL_GetTick>
 8002162:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800216a:	b2db      	uxtb	r3, r3
 800216c:	2b20      	cmp	r3, #32
 800216e:	f040 80d9 	bne.w	8002324 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002172:	697b      	ldr	r3, [r7, #20]
 8002174:	9300      	str	r3, [sp, #0]
 8002176:	2319      	movs	r3, #25
 8002178:	2201      	movs	r2, #1
 800217a:	496d      	ldr	r1, [pc, #436]	; (8002330 <HAL_I2C_Mem_Write+0x1ec>)
 800217c:	68f8      	ldr	r0, [r7, #12]
 800217e:	f000 fa9f 	bl	80026c0 <I2C_WaitOnFlagUntilTimeout>
 8002182:	4603      	mov	r3, r0
 8002184:	2b00      	cmp	r3, #0
 8002186:	d001      	beq.n	800218c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002188:	2302      	movs	r3, #2
 800218a:	e0cc      	b.n	8002326 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002192:	2b01      	cmp	r3, #1
 8002194:	d101      	bne.n	800219a <HAL_I2C_Mem_Write+0x56>
 8002196:	2302      	movs	r3, #2
 8002198:	e0c5      	b.n	8002326 <HAL_I2C_Mem_Write+0x1e2>
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	2201      	movs	r2, #1
 800219e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f003 0301 	and.w	r3, r3, #1
 80021ac:	2b01      	cmp	r3, #1
 80021ae:	d007      	beq.n	80021c0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	681a      	ldr	r2, [r3, #0]
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f042 0201 	orr.w	r2, r2, #1
 80021be:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	681a      	ldr	r2, [r3, #0]
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80021ce:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	2221      	movs	r2, #33	; 0x21
 80021d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	2240      	movs	r2, #64	; 0x40
 80021dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	2200      	movs	r2, #0
 80021e4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	6a3a      	ldr	r2, [r7, #32]
 80021ea:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80021f0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021f6:	b29a      	uxth	r2, r3
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	4a4d      	ldr	r2, [pc, #308]	; (8002334 <HAL_I2C_Mem_Write+0x1f0>)
 8002200:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002202:	88f8      	ldrh	r0, [r7, #6]
 8002204:	893a      	ldrh	r2, [r7, #8]
 8002206:	8979      	ldrh	r1, [r7, #10]
 8002208:	697b      	ldr	r3, [r7, #20]
 800220a:	9301      	str	r3, [sp, #4]
 800220c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800220e:	9300      	str	r3, [sp, #0]
 8002210:	4603      	mov	r3, r0
 8002212:	68f8      	ldr	r0, [r7, #12]
 8002214:	f000 f9be 	bl	8002594 <I2C_RequestMemoryWrite>
 8002218:	4603      	mov	r3, r0
 800221a:	2b00      	cmp	r3, #0
 800221c:	d052      	beq.n	80022c4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800221e:	2301      	movs	r3, #1
 8002220:	e081      	b.n	8002326 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002222:	697a      	ldr	r2, [r7, #20]
 8002224:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002226:	68f8      	ldr	r0, [r7, #12]
 8002228:	f000 fb20 	bl	800286c <I2C_WaitOnTXEFlagUntilTimeout>
 800222c:	4603      	mov	r3, r0
 800222e:	2b00      	cmp	r3, #0
 8002230:	d00d      	beq.n	800224e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002236:	2b04      	cmp	r3, #4
 8002238:	d107      	bne.n	800224a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	681a      	ldr	r2, [r3, #0]
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002248:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800224a:	2301      	movs	r3, #1
 800224c:	e06b      	b.n	8002326 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002252:	781a      	ldrb	r2, [r3, #0]
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800225e:	1c5a      	adds	r2, r3, #1
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002268:	3b01      	subs	r3, #1
 800226a:	b29a      	uxth	r2, r3
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002274:	b29b      	uxth	r3, r3
 8002276:	3b01      	subs	r3, #1
 8002278:	b29a      	uxth	r2, r3
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	695b      	ldr	r3, [r3, #20]
 8002284:	f003 0304 	and.w	r3, r3, #4
 8002288:	2b04      	cmp	r3, #4
 800228a:	d11b      	bne.n	80022c4 <HAL_I2C_Mem_Write+0x180>
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002290:	2b00      	cmp	r3, #0
 8002292:	d017      	beq.n	80022c4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002298:	781a      	ldrb	r2, [r3, #0]
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022a4:	1c5a      	adds	r2, r3, #1
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022ae:	3b01      	subs	r3, #1
 80022b0:	b29a      	uxth	r2, r3
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022ba:	b29b      	uxth	r3, r3
 80022bc:	3b01      	subs	r3, #1
 80022be:	b29a      	uxth	r2, r3
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d1aa      	bne.n	8002222 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80022cc:	697a      	ldr	r2, [r7, #20]
 80022ce:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80022d0:	68f8      	ldr	r0, [r7, #12]
 80022d2:	f000 fb0c 	bl	80028ee <I2C_WaitOnBTFFlagUntilTimeout>
 80022d6:	4603      	mov	r3, r0
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d00d      	beq.n	80022f8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e0:	2b04      	cmp	r3, #4
 80022e2:	d107      	bne.n	80022f4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	681a      	ldr	r2, [r3, #0]
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022f2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80022f4:	2301      	movs	r3, #1
 80022f6:	e016      	b.n	8002326 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	681a      	ldr	r2, [r3, #0]
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002306:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	2220      	movs	r2, #32
 800230c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	2200      	movs	r2, #0
 8002314:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	2200      	movs	r2, #0
 800231c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002320:	2300      	movs	r3, #0
 8002322:	e000      	b.n	8002326 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002324:	2302      	movs	r3, #2
  }
}
 8002326:	4618      	mov	r0, r3
 8002328:	3718      	adds	r7, #24
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}
 800232e:	bf00      	nop
 8002330:	00100002 	.word	0x00100002
 8002334:	ffff0000 	.word	0xffff0000

08002338 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b08a      	sub	sp, #40	; 0x28
 800233c:	af02      	add	r7, sp, #8
 800233e:	60f8      	str	r0, [r7, #12]
 8002340:	607a      	str	r2, [r7, #4]
 8002342:	603b      	str	r3, [r7, #0]
 8002344:	460b      	mov	r3, r1
 8002346:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002348:	f7ff f848 	bl	80013dc <HAL_GetTick>
 800234c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 800234e:	2301      	movs	r3, #1
 8002350:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002358:	b2db      	uxtb	r3, r3
 800235a:	2b20      	cmp	r3, #32
 800235c:	f040 8111 	bne.w	8002582 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002360:	69fb      	ldr	r3, [r7, #28]
 8002362:	9300      	str	r3, [sp, #0]
 8002364:	2319      	movs	r3, #25
 8002366:	2201      	movs	r2, #1
 8002368:	4988      	ldr	r1, [pc, #544]	; (800258c <HAL_I2C_IsDeviceReady+0x254>)
 800236a:	68f8      	ldr	r0, [r7, #12]
 800236c:	f000 f9a8 	bl	80026c0 <I2C_WaitOnFlagUntilTimeout>
 8002370:	4603      	mov	r3, r0
 8002372:	2b00      	cmp	r3, #0
 8002374:	d001      	beq.n	800237a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002376:	2302      	movs	r3, #2
 8002378:	e104      	b.n	8002584 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002380:	2b01      	cmp	r3, #1
 8002382:	d101      	bne.n	8002388 <HAL_I2C_IsDeviceReady+0x50>
 8002384:	2302      	movs	r3, #2
 8002386:	e0fd      	b.n	8002584 <HAL_I2C_IsDeviceReady+0x24c>
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	2201      	movs	r2, #1
 800238c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f003 0301 	and.w	r3, r3, #1
 800239a:	2b01      	cmp	r3, #1
 800239c:	d007      	beq.n	80023ae <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	681a      	ldr	r2, [r3, #0]
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f042 0201 	orr.w	r2, r2, #1
 80023ac:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	681a      	ldr	r2, [r3, #0]
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80023bc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	2224      	movs	r2, #36	; 0x24
 80023c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	2200      	movs	r2, #0
 80023ca:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	4a70      	ldr	r2, [pc, #448]	; (8002590 <HAL_I2C_IsDeviceReady+0x258>)
 80023d0:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	681a      	ldr	r2, [r3, #0]
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80023e0:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80023e2:	69fb      	ldr	r3, [r7, #28]
 80023e4:	9300      	str	r3, [sp, #0]
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	2200      	movs	r2, #0
 80023ea:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80023ee:	68f8      	ldr	r0, [r7, #12]
 80023f0:	f000 f966 	bl	80026c0 <I2C_WaitOnFlagUntilTimeout>
 80023f4:	4603      	mov	r3, r0
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d00d      	beq.n	8002416 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002404:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002408:	d103      	bne.n	8002412 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002410:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8002412:	2303      	movs	r3, #3
 8002414:	e0b6      	b.n	8002584 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002416:	897b      	ldrh	r3, [r7, #10]
 8002418:	b2db      	uxtb	r3, r3
 800241a:	461a      	mov	r2, r3
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002424:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002426:	f7fe ffd9 	bl	80013dc <HAL_GetTick>
 800242a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	695b      	ldr	r3, [r3, #20]
 8002432:	f003 0302 	and.w	r3, r3, #2
 8002436:	2b02      	cmp	r3, #2
 8002438:	bf0c      	ite	eq
 800243a:	2301      	moveq	r3, #1
 800243c:	2300      	movne	r3, #0
 800243e:	b2db      	uxtb	r3, r3
 8002440:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	695b      	ldr	r3, [r3, #20]
 8002448:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800244c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002450:	bf0c      	ite	eq
 8002452:	2301      	moveq	r3, #1
 8002454:	2300      	movne	r3, #0
 8002456:	b2db      	uxtb	r3, r3
 8002458:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800245a:	e025      	b.n	80024a8 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800245c:	f7fe ffbe 	bl	80013dc <HAL_GetTick>
 8002460:	4602      	mov	r2, r0
 8002462:	69fb      	ldr	r3, [r7, #28]
 8002464:	1ad3      	subs	r3, r2, r3
 8002466:	683a      	ldr	r2, [r7, #0]
 8002468:	429a      	cmp	r2, r3
 800246a:	d302      	bcc.n	8002472 <HAL_I2C_IsDeviceReady+0x13a>
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d103      	bne.n	800247a <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	22a0      	movs	r2, #160	; 0xa0
 8002476:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	695b      	ldr	r3, [r3, #20]
 8002480:	f003 0302 	and.w	r3, r3, #2
 8002484:	2b02      	cmp	r3, #2
 8002486:	bf0c      	ite	eq
 8002488:	2301      	moveq	r3, #1
 800248a:	2300      	movne	r3, #0
 800248c:	b2db      	uxtb	r3, r3
 800248e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	695b      	ldr	r3, [r3, #20]
 8002496:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800249a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800249e:	bf0c      	ite	eq
 80024a0:	2301      	moveq	r3, #1
 80024a2:	2300      	movne	r3, #0
 80024a4:	b2db      	uxtb	r3, r3
 80024a6:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024ae:	b2db      	uxtb	r3, r3
 80024b0:	2ba0      	cmp	r3, #160	; 0xa0
 80024b2:	d005      	beq.n	80024c0 <HAL_I2C_IsDeviceReady+0x188>
 80024b4:	7dfb      	ldrb	r3, [r7, #23]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d102      	bne.n	80024c0 <HAL_I2C_IsDeviceReady+0x188>
 80024ba:	7dbb      	ldrb	r3, [r7, #22]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d0cd      	beq.n	800245c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	2220      	movs	r2, #32
 80024c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	695b      	ldr	r3, [r3, #20]
 80024ce:	f003 0302 	and.w	r3, r3, #2
 80024d2:	2b02      	cmp	r3, #2
 80024d4:	d129      	bne.n	800252a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	681a      	ldr	r2, [r3, #0]
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024e4:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80024e6:	2300      	movs	r3, #0
 80024e8:	613b      	str	r3, [r7, #16]
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	695b      	ldr	r3, [r3, #20]
 80024f0:	613b      	str	r3, [r7, #16]
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	699b      	ldr	r3, [r3, #24]
 80024f8:	613b      	str	r3, [r7, #16]
 80024fa:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80024fc:	69fb      	ldr	r3, [r7, #28]
 80024fe:	9300      	str	r3, [sp, #0]
 8002500:	2319      	movs	r3, #25
 8002502:	2201      	movs	r2, #1
 8002504:	4921      	ldr	r1, [pc, #132]	; (800258c <HAL_I2C_IsDeviceReady+0x254>)
 8002506:	68f8      	ldr	r0, [r7, #12]
 8002508:	f000 f8da 	bl	80026c0 <I2C_WaitOnFlagUntilTimeout>
 800250c:	4603      	mov	r3, r0
 800250e:	2b00      	cmp	r3, #0
 8002510:	d001      	beq.n	8002516 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8002512:	2301      	movs	r3, #1
 8002514:	e036      	b.n	8002584 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	2220      	movs	r2, #32
 800251a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	2200      	movs	r2, #0
 8002522:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8002526:	2300      	movs	r3, #0
 8002528:	e02c      	b.n	8002584 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	681a      	ldr	r2, [r3, #0]
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002538:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002542:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002544:	69fb      	ldr	r3, [r7, #28]
 8002546:	9300      	str	r3, [sp, #0]
 8002548:	2319      	movs	r3, #25
 800254a:	2201      	movs	r2, #1
 800254c:	490f      	ldr	r1, [pc, #60]	; (800258c <HAL_I2C_IsDeviceReady+0x254>)
 800254e:	68f8      	ldr	r0, [r7, #12]
 8002550:	f000 f8b6 	bl	80026c0 <I2C_WaitOnFlagUntilTimeout>
 8002554:	4603      	mov	r3, r0
 8002556:	2b00      	cmp	r3, #0
 8002558:	d001      	beq.n	800255e <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800255a:	2301      	movs	r3, #1
 800255c:	e012      	b.n	8002584 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800255e:	69bb      	ldr	r3, [r7, #24]
 8002560:	3301      	adds	r3, #1
 8002562:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002564:	69ba      	ldr	r2, [r7, #24]
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	429a      	cmp	r2, r3
 800256a:	f4ff af32 	bcc.w	80023d2 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	2220      	movs	r2, #32
 8002572:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	2200      	movs	r2, #0
 800257a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800257e:	2301      	movs	r3, #1
 8002580:	e000      	b.n	8002584 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8002582:	2302      	movs	r3, #2
  }
}
 8002584:	4618      	mov	r0, r3
 8002586:	3720      	adds	r7, #32
 8002588:	46bd      	mov	sp, r7
 800258a:	bd80      	pop	{r7, pc}
 800258c:	00100002 	.word	0x00100002
 8002590:	ffff0000 	.word	0xffff0000

08002594 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b088      	sub	sp, #32
 8002598:	af02      	add	r7, sp, #8
 800259a:	60f8      	str	r0, [r7, #12]
 800259c:	4608      	mov	r0, r1
 800259e:	4611      	mov	r1, r2
 80025a0:	461a      	mov	r2, r3
 80025a2:	4603      	mov	r3, r0
 80025a4:	817b      	strh	r3, [r7, #10]
 80025a6:	460b      	mov	r3, r1
 80025a8:	813b      	strh	r3, [r7, #8]
 80025aa:	4613      	mov	r3, r2
 80025ac:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	681a      	ldr	r2, [r3, #0]
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80025bc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80025be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c0:	9300      	str	r3, [sp, #0]
 80025c2:	6a3b      	ldr	r3, [r7, #32]
 80025c4:	2200      	movs	r2, #0
 80025c6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80025ca:	68f8      	ldr	r0, [r7, #12]
 80025cc:	f000 f878 	bl	80026c0 <I2C_WaitOnFlagUntilTimeout>
 80025d0:	4603      	mov	r3, r0
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d00d      	beq.n	80025f2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80025e4:	d103      	bne.n	80025ee <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80025ec:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80025ee:	2303      	movs	r3, #3
 80025f0:	e05f      	b.n	80026b2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80025f2:	897b      	ldrh	r3, [r7, #10]
 80025f4:	b2db      	uxtb	r3, r3
 80025f6:	461a      	mov	r2, r3
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002600:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002604:	6a3a      	ldr	r2, [r7, #32]
 8002606:	492d      	ldr	r1, [pc, #180]	; (80026bc <I2C_RequestMemoryWrite+0x128>)
 8002608:	68f8      	ldr	r0, [r7, #12]
 800260a:	f000 f8b0 	bl	800276e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800260e:	4603      	mov	r3, r0
 8002610:	2b00      	cmp	r3, #0
 8002612:	d001      	beq.n	8002618 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002614:	2301      	movs	r3, #1
 8002616:	e04c      	b.n	80026b2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002618:	2300      	movs	r3, #0
 800261a:	617b      	str	r3, [r7, #20]
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	695b      	ldr	r3, [r3, #20]
 8002622:	617b      	str	r3, [r7, #20]
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	699b      	ldr	r3, [r3, #24]
 800262a:	617b      	str	r3, [r7, #20]
 800262c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800262e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002630:	6a39      	ldr	r1, [r7, #32]
 8002632:	68f8      	ldr	r0, [r7, #12]
 8002634:	f000 f91a 	bl	800286c <I2C_WaitOnTXEFlagUntilTimeout>
 8002638:	4603      	mov	r3, r0
 800263a:	2b00      	cmp	r3, #0
 800263c:	d00d      	beq.n	800265a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002642:	2b04      	cmp	r3, #4
 8002644:	d107      	bne.n	8002656 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	681a      	ldr	r2, [r3, #0]
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002654:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002656:	2301      	movs	r3, #1
 8002658:	e02b      	b.n	80026b2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800265a:	88fb      	ldrh	r3, [r7, #6]
 800265c:	2b01      	cmp	r3, #1
 800265e:	d105      	bne.n	800266c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002660:	893b      	ldrh	r3, [r7, #8]
 8002662:	b2da      	uxtb	r2, r3
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	611a      	str	r2, [r3, #16]
 800266a:	e021      	b.n	80026b0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800266c:	893b      	ldrh	r3, [r7, #8]
 800266e:	0a1b      	lsrs	r3, r3, #8
 8002670:	b29b      	uxth	r3, r3
 8002672:	b2da      	uxtb	r2, r3
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800267a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800267c:	6a39      	ldr	r1, [r7, #32]
 800267e:	68f8      	ldr	r0, [r7, #12]
 8002680:	f000 f8f4 	bl	800286c <I2C_WaitOnTXEFlagUntilTimeout>
 8002684:	4603      	mov	r3, r0
 8002686:	2b00      	cmp	r3, #0
 8002688:	d00d      	beq.n	80026a6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800268e:	2b04      	cmp	r3, #4
 8002690:	d107      	bne.n	80026a2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	681a      	ldr	r2, [r3, #0]
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026a0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80026a2:	2301      	movs	r3, #1
 80026a4:	e005      	b.n	80026b2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80026a6:	893b      	ldrh	r3, [r7, #8]
 80026a8:	b2da      	uxtb	r2, r3
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80026b0:	2300      	movs	r3, #0
}
 80026b2:	4618      	mov	r0, r3
 80026b4:	3718      	adds	r7, #24
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd80      	pop	{r7, pc}
 80026ba:	bf00      	nop
 80026bc:	00010002 	.word	0x00010002

080026c0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b084      	sub	sp, #16
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	60f8      	str	r0, [r7, #12]
 80026c8:	60b9      	str	r1, [r7, #8]
 80026ca:	603b      	str	r3, [r7, #0]
 80026cc:	4613      	mov	r3, r2
 80026ce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80026d0:	e025      	b.n	800271e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80026d8:	d021      	beq.n	800271e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026da:	f7fe fe7f 	bl	80013dc <HAL_GetTick>
 80026de:	4602      	mov	r2, r0
 80026e0:	69bb      	ldr	r3, [r7, #24]
 80026e2:	1ad3      	subs	r3, r2, r3
 80026e4:	683a      	ldr	r2, [r7, #0]
 80026e6:	429a      	cmp	r2, r3
 80026e8:	d302      	bcc.n	80026f0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d116      	bne.n	800271e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	2200      	movs	r2, #0
 80026f4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	2220      	movs	r2, #32
 80026fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	2200      	movs	r2, #0
 8002702:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800270a:	f043 0220 	orr.w	r2, r3, #32
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	2200      	movs	r2, #0
 8002716:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800271a:	2301      	movs	r3, #1
 800271c:	e023      	b.n	8002766 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800271e:	68bb      	ldr	r3, [r7, #8]
 8002720:	0c1b      	lsrs	r3, r3, #16
 8002722:	b2db      	uxtb	r3, r3
 8002724:	2b01      	cmp	r3, #1
 8002726:	d10d      	bne.n	8002744 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	695b      	ldr	r3, [r3, #20]
 800272e:	43da      	mvns	r2, r3
 8002730:	68bb      	ldr	r3, [r7, #8]
 8002732:	4013      	ands	r3, r2
 8002734:	b29b      	uxth	r3, r3
 8002736:	2b00      	cmp	r3, #0
 8002738:	bf0c      	ite	eq
 800273a:	2301      	moveq	r3, #1
 800273c:	2300      	movne	r3, #0
 800273e:	b2db      	uxtb	r3, r3
 8002740:	461a      	mov	r2, r3
 8002742:	e00c      	b.n	800275e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	699b      	ldr	r3, [r3, #24]
 800274a:	43da      	mvns	r2, r3
 800274c:	68bb      	ldr	r3, [r7, #8]
 800274e:	4013      	ands	r3, r2
 8002750:	b29b      	uxth	r3, r3
 8002752:	2b00      	cmp	r3, #0
 8002754:	bf0c      	ite	eq
 8002756:	2301      	moveq	r3, #1
 8002758:	2300      	movne	r3, #0
 800275a:	b2db      	uxtb	r3, r3
 800275c:	461a      	mov	r2, r3
 800275e:	79fb      	ldrb	r3, [r7, #7]
 8002760:	429a      	cmp	r2, r3
 8002762:	d0b6      	beq.n	80026d2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002764:	2300      	movs	r3, #0
}
 8002766:	4618      	mov	r0, r3
 8002768:	3710      	adds	r7, #16
 800276a:	46bd      	mov	sp, r7
 800276c:	bd80      	pop	{r7, pc}

0800276e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800276e:	b580      	push	{r7, lr}
 8002770:	b084      	sub	sp, #16
 8002772:	af00      	add	r7, sp, #0
 8002774:	60f8      	str	r0, [r7, #12]
 8002776:	60b9      	str	r1, [r7, #8]
 8002778:	607a      	str	r2, [r7, #4]
 800277a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800277c:	e051      	b.n	8002822 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	695b      	ldr	r3, [r3, #20]
 8002784:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002788:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800278c:	d123      	bne.n	80027d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	681a      	ldr	r2, [r3, #0]
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800279c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80027a6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	2200      	movs	r2, #0
 80027ac:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	2220      	movs	r2, #32
 80027b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	2200      	movs	r2, #0
 80027ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027c2:	f043 0204 	orr.w	r2, r3, #4
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	2200      	movs	r2, #0
 80027ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80027d2:	2301      	movs	r3, #1
 80027d4:	e046      	b.n	8002864 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80027dc:	d021      	beq.n	8002822 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027de:	f7fe fdfd 	bl	80013dc <HAL_GetTick>
 80027e2:	4602      	mov	r2, r0
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	1ad3      	subs	r3, r2, r3
 80027e8:	687a      	ldr	r2, [r7, #4]
 80027ea:	429a      	cmp	r2, r3
 80027ec:	d302      	bcc.n	80027f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d116      	bne.n	8002822 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	2200      	movs	r2, #0
 80027f8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	2220      	movs	r2, #32
 80027fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	2200      	movs	r2, #0
 8002806:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800280e:	f043 0220 	orr.w	r2, r3, #32
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	2200      	movs	r2, #0
 800281a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800281e:	2301      	movs	r3, #1
 8002820:	e020      	b.n	8002864 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002822:	68bb      	ldr	r3, [r7, #8]
 8002824:	0c1b      	lsrs	r3, r3, #16
 8002826:	b2db      	uxtb	r3, r3
 8002828:	2b01      	cmp	r3, #1
 800282a:	d10c      	bne.n	8002846 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	695b      	ldr	r3, [r3, #20]
 8002832:	43da      	mvns	r2, r3
 8002834:	68bb      	ldr	r3, [r7, #8]
 8002836:	4013      	ands	r3, r2
 8002838:	b29b      	uxth	r3, r3
 800283a:	2b00      	cmp	r3, #0
 800283c:	bf14      	ite	ne
 800283e:	2301      	movne	r3, #1
 8002840:	2300      	moveq	r3, #0
 8002842:	b2db      	uxtb	r3, r3
 8002844:	e00b      	b.n	800285e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	699b      	ldr	r3, [r3, #24]
 800284c:	43da      	mvns	r2, r3
 800284e:	68bb      	ldr	r3, [r7, #8]
 8002850:	4013      	ands	r3, r2
 8002852:	b29b      	uxth	r3, r3
 8002854:	2b00      	cmp	r3, #0
 8002856:	bf14      	ite	ne
 8002858:	2301      	movne	r3, #1
 800285a:	2300      	moveq	r3, #0
 800285c:	b2db      	uxtb	r3, r3
 800285e:	2b00      	cmp	r3, #0
 8002860:	d18d      	bne.n	800277e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002862:	2300      	movs	r3, #0
}
 8002864:	4618      	mov	r0, r3
 8002866:	3710      	adds	r7, #16
 8002868:	46bd      	mov	sp, r7
 800286a:	bd80      	pop	{r7, pc}

0800286c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b084      	sub	sp, #16
 8002870:	af00      	add	r7, sp, #0
 8002872:	60f8      	str	r0, [r7, #12]
 8002874:	60b9      	str	r1, [r7, #8]
 8002876:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002878:	e02d      	b.n	80028d6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800287a:	68f8      	ldr	r0, [r7, #12]
 800287c:	f000 f878 	bl	8002970 <I2C_IsAcknowledgeFailed>
 8002880:	4603      	mov	r3, r0
 8002882:	2b00      	cmp	r3, #0
 8002884:	d001      	beq.n	800288a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002886:	2301      	movs	r3, #1
 8002888:	e02d      	b.n	80028e6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800288a:	68bb      	ldr	r3, [r7, #8]
 800288c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002890:	d021      	beq.n	80028d6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002892:	f7fe fda3 	bl	80013dc <HAL_GetTick>
 8002896:	4602      	mov	r2, r0
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	1ad3      	subs	r3, r2, r3
 800289c:	68ba      	ldr	r2, [r7, #8]
 800289e:	429a      	cmp	r2, r3
 80028a0:	d302      	bcc.n	80028a8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80028a2:	68bb      	ldr	r3, [r7, #8]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d116      	bne.n	80028d6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	2200      	movs	r2, #0
 80028ac:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	2220      	movs	r2, #32
 80028b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	2200      	movs	r2, #0
 80028ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028c2:	f043 0220 	orr.w	r2, r3, #32
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	2200      	movs	r2, #0
 80028ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80028d2:	2301      	movs	r3, #1
 80028d4:	e007      	b.n	80028e6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	695b      	ldr	r3, [r3, #20]
 80028dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028e0:	2b80      	cmp	r3, #128	; 0x80
 80028e2:	d1ca      	bne.n	800287a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80028e4:	2300      	movs	r3, #0
}
 80028e6:	4618      	mov	r0, r3
 80028e8:	3710      	adds	r7, #16
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bd80      	pop	{r7, pc}

080028ee <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80028ee:	b580      	push	{r7, lr}
 80028f0:	b084      	sub	sp, #16
 80028f2:	af00      	add	r7, sp, #0
 80028f4:	60f8      	str	r0, [r7, #12]
 80028f6:	60b9      	str	r1, [r7, #8]
 80028f8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80028fa:	e02d      	b.n	8002958 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80028fc:	68f8      	ldr	r0, [r7, #12]
 80028fe:	f000 f837 	bl	8002970 <I2C_IsAcknowledgeFailed>
 8002902:	4603      	mov	r3, r0
 8002904:	2b00      	cmp	r3, #0
 8002906:	d001      	beq.n	800290c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002908:	2301      	movs	r3, #1
 800290a:	e02d      	b.n	8002968 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800290c:	68bb      	ldr	r3, [r7, #8]
 800290e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002912:	d021      	beq.n	8002958 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002914:	f7fe fd62 	bl	80013dc <HAL_GetTick>
 8002918:	4602      	mov	r2, r0
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	1ad3      	subs	r3, r2, r3
 800291e:	68ba      	ldr	r2, [r7, #8]
 8002920:	429a      	cmp	r2, r3
 8002922:	d302      	bcc.n	800292a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002924:	68bb      	ldr	r3, [r7, #8]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d116      	bne.n	8002958 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	2200      	movs	r2, #0
 800292e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	2220      	movs	r2, #32
 8002934:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	2200      	movs	r2, #0
 800293c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002944:	f043 0220 	orr.w	r2, r3, #32
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	2200      	movs	r2, #0
 8002950:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002954:	2301      	movs	r3, #1
 8002956:	e007      	b.n	8002968 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	695b      	ldr	r3, [r3, #20]
 800295e:	f003 0304 	and.w	r3, r3, #4
 8002962:	2b04      	cmp	r3, #4
 8002964:	d1ca      	bne.n	80028fc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002966:	2300      	movs	r3, #0
}
 8002968:	4618      	mov	r0, r3
 800296a:	3710      	adds	r7, #16
 800296c:	46bd      	mov	sp, r7
 800296e:	bd80      	pop	{r7, pc}

08002970 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002970:	b480      	push	{r7}
 8002972:	b083      	sub	sp, #12
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	695b      	ldr	r3, [r3, #20]
 800297e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002982:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002986:	d11b      	bne.n	80029c0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002990:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2200      	movs	r2, #0
 8002996:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2220      	movs	r2, #32
 800299c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2200      	movs	r2, #0
 80029a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ac:	f043 0204 	orr.w	r2, r3, #4
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2200      	movs	r2, #0
 80029b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80029bc:	2301      	movs	r3, #1
 80029be:	e000      	b.n	80029c2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80029c0:	2300      	movs	r3, #0
}
 80029c2:	4618      	mov	r0, r3
 80029c4:	370c      	adds	r7, #12
 80029c6:	46bd      	mov	sp, r7
 80029c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029cc:	4770      	bx	lr
	...

080029d0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b086      	sub	sp, #24
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d101      	bne.n	80029e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80029de:	2301      	movs	r3, #1
 80029e0:	e25b      	b.n	8002e9a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f003 0301 	and.w	r3, r3, #1
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d075      	beq.n	8002ada <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80029ee:	4ba3      	ldr	r3, [pc, #652]	; (8002c7c <HAL_RCC_OscConfig+0x2ac>)
 80029f0:	689b      	ldr	r3, [r3, #8]
 80029f2:	f003 030c 	and.w	r3, r3, #12
 80029f6:	2b04      	cmp	r3, #4
 80029f8:	d00c      	beq.n	8002a14 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80029fa:	4ba0      	ldr	r3, [pc, #640]	; (8002c7c <HAL_RCC_OscConfig+0x2ac>)
 80029fc:	689b      	ldr	r3, [r3, #8]
 80029fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002a02:	2b08      	cmp	r3, #8
 8002a04:	d112      	bne.n	8002a2c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a06:	4b9d      	ldr	r3, [pc, #628]	; (8002c7c <HAL_RCC_OscConfig+0x2ac>)
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a0e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a12:	d10b      	bne.n	8002a2c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a14:	4b99      	ldr	r3, [pc, #612]	; (8002c7c <HAL_RCC_OscConfig+0x2ac>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d05b      	beq.n	8002ad8 <HAL_RCC_OscConfig+0x108>
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d157      	bne.n	8002ad8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002a28:	2301      	movs	r3, #1
 8002a2a:	e236      	b.n	8002e9a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a34:	d106      	bne.n	8002a44 <HAL_RCC_OscConfig+0x74>
 8002a36:	4b91      	ldr	r3, [pc, #580]	; (8002c7c <HAL_RCC_OscConfig+0x2ac>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4a90      	ldr	r2, [pc, #576]	; (8002c7c <HAL_RCC_OscConfig+0x2ac>)
 8002a3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a40:	6013      	str	r3, [r2, #0]
 8002a42:	e01d      	b.n	8002a80 <HAL_RCC_OscConfig+0xb0>
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a4c:	d10c      	bne.n	8002a68 <HAL_RCC_OscConfig+0x98>
 8002a4e:	4b8b      	ldr	r3, [pc, #556]	; (8002c7c <HAL_RCC_OscConfig+0x2ac>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4a8a      	ldr	r2, [pc, #552]	; (8002c7c <HAL_RCC_OscConfig+0x2ac>)
 8002a54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a58:	6013      	str	r3, [r2, #0]
 8002a5a:	4b88      	ldr	r3, [pc, #544]	; (8002c7c <HAL_RCC_OscConfig+0x2ac>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4a87      	ldr	r2, [pc, #540]	; (8002c7c <HAL_RCC_OscConfig+0x2ac>)
 8002a60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a64:	6013      	str	r3, [r2, #0]
 8002a66:	e00b      	b.n	8002a80 <HAL_RCC_OscConfig+0xb0>
 8002a68:	4b84      	ldr	r3, [pc, #528]	; (8002c7c <HAL_RCC_OscConfig+0x2ac>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4a83      	ldr	r2, [pc, #524]	; (8002c7c <HAL_RCC_OscConfig+0x2ac>)
 8002a6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a72:	6013      	str	r3, [r2, #0]
 8002a74:	4b81      	ldr	r3, [pc, #516]	; (8002c7c <HAL_RCC_OscConfig+0x2ac>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4a80      	ldr	r2, [pc, #512]	; (8002c7c <HAL_RCC_OscConfig+0x2ac>)
 8002a7a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a7e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d013      	beq.n	8002ab0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a88:	f7fe fca8 	bl	80013dc <HAL_GetTick>
 8002a8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a8e:	e008      	b.n	8002aa2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a90:	f7fe fca4 	bl	80013dc <HAL_GetTick>
 8002a94:	4602      	mov	r2, r0
 8002a96:	693b      	ldr	r3, [r7, #16]
 8002a98:	1ad3      	subs	r3, r2, r3
 8002a9a:	2b64      	cmp	r3, #100	; 0x64
 8002a9c:	d901      	bls.n	8002aa2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002a9e:	2303      	movs	r3, #3
 8002aa0:	e1fb      	b.n	8002e9a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002aa2:	4b76      	ldr	r3, [pc, #472]	; (8002c7c <HAL_RCC_OscConfig+0x2ac>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d0f0      	beq.n	8002a90 <HAL_RCC_OscConfig+0xc0>
 8002aae:	e014      	b.n	8002ada <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ab0:	f7fe fc94 	bl	80013dc <HAL_GetTick>
 8002ab4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ab6:	e008      	b.n	8002aca <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ab8:	f7fe fc90 	bl	80013dc <HAL_GetTick>
 8002abc:	4602      	mov	r2, r0
 8002abe:	693b      	ldr	r3, [r7, #16]
 8002ac0:	1ad3      	subs	r3, r2, r3
 8002ac2:	2b64      	cmp	r3, #100	; 0x64
 8002ac4:	d901      	bls.n	8002aca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002ac6:	2303      	movs	r3, #3
 8002ac8:	e1e7      	b.n	8002e9a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002aca:	4b6c      	ldr	r3, [pc, #432]	; (8002c7c <HAL_RCC_OscConfig+0x2ac>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d1f0      	bne.n	8002ab8 <HAL_RCC_OscConfig+0xe8>
 8002ad6:	e000      	b.n	8002ada <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ad8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f003 0302 	and.w	r3, r3, #2
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d063      	beq.n	8002bae <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002ae6:	4b65      	ldr	r3, [pc, #404]	; (8002c7c <HAL_RCC_OscConfig+0x2ac>)
 8002ae8:	689b      	ldr	r3, [r3, #8]
 8002aea:	f003 030c 	and.w	r3, r3, #12
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d00b      	beq.n	8002b0a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002af2:	4b62      	ldr	r3, [pc, #392]	; (8002c7c <HAL_RCC_OscConfig+0x2ac>)
 8002af4:	689b      	ldr	r3, [r3, #8]
 8002af6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002afa:	2b08      	cmp	r3, #8
 8002afc:	d11c      	bne.n	8002b38 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002afe:	4b5f      	ldr	r3, [pc, #380]	; (8002c7c <HAL_RCC_OscConfig+0x2ac>)
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d116      	bne.n	8002b38 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b0a:	4b5c      	ldr	r3, [pc, #368]	; (8002c7c <HAL_RCC_OscConfig+0x2ac>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f003 0302 	and.w	r3, r3, #2
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d005      	beq.n	8002b22 <HAL_RCC_OscConfig+0x152>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	68db      	ldr	r3, [r3, #12]
 8002b1a:	2b01      	cmp	r3, #1
 8002b1c:	d001      	beq.n	8002b22 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002b1e:	2301      	movs	r3, #1
 8002b20:	e1bb      	b.n	8002e9a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b22:	4b56      	ldr	r3, [pc, #344]	; (8002c7c <HAL_RCC_OscConfig+0x2ac>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	691b      	ldr	r3, [r3, #16]
 8002b2e:	00db      	lsls	r3, r3, #3
 8002b30:	4952      	ldr	r1, [pc, #328]	; (8002c7c <HAL_RCC_OscConfig+0x2ac>)
 8002b32:	4313      	orrs	r3, r2
 8002b34:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b36:	e03a      	b.n	8002bae <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	68db      	ldr	r3, [r3, #12]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d020      	beq.n	8002b82 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b40:	4b4f      	ldr	r3, [pc, #316]	; (8002c80 <HAL_RCC_OscConfig+0x2b0>)
 8002b42:	2201      	movs	r2, #1
 8002b44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b46:	f7fe fc49 	bl	80013dc <HAL_GetTick>
 8002b4a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b4c:	e008      	b.n	8002b60 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b4e:	f7fe fc45 	bl	80013dc <HAL_GetTick>
 8002b52:	4602      	mov	r2, r0
 8002b54:	693b      	ldr	r3, [r7, #16]
 8002b56:	1ad3      	subs	r3, r2, r3
 8002b58:	2b02      	cmp	r3, #2
 8002b5a:	d901      	bls.n	8002b60 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002b5c:	2303      	movs	r3, #3
 8002b5e:	e19c      	b.n	8002e9a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b60:	4b46      	ldr	r3, [pc, #280]	; (8002c7c <HAL_RCC_OscConfig+0x2ac>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f003 0302 	and.w	r3, r3, #2
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d0f0      	beq.n	8002b4e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b6c:	4b43      	ldr	r3, [pc, #268]	; (8002c7c <HAL_RCC_OscConfig+0x2ac>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	691b      	ldr	r3, [r3, #16]
 8002b78:	00db      	lsls	r3, r3, #3
 8002b7a:	4940      	ldr	r1, [pc, #256]	; (8002c7c <HAL_RCC_OscConfig+0x2ac>)
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	600b      	str	r3, [r1, #0]
 8002b80:	e015      	b.n	8002bae <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b82:	4b3f      	ldr	r3, [pc, #252]	; (8002c80 <HAL_RCC_OscConfig+0x2b0>)
 8002b84:	2200      	movs	r2, #0
 8002b86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b88:	f7fe fc28 	bl	80013dc <HAL_GetTick>
 8002b8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b8e:	e008      	b.n	8002ba2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b90:	f7fe fc24 	bl	80013dc <HAL_GetTick>
 8002b94:	4602      	mov	r2, r0
 8002b96:	693b      	ldr	r3, [r7, #16]
 8002b98:	1ad3      	subs	r3, r2, r3
 8002b9a:	2b02      	cmp	r3, #2
 8002b9c:	d901      	bls.n	8002ba2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002b9e:	2303      	movs	r3, #3
 8002ba0:	e17b      	b.n	8002e9a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ba2:	4b36      	ldr	r3, [pc, #216]	; (8002c7c <HAL_RCC_OscConfig+0x2ac>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f003 0302 	and.w	r3, r3, #2
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d1f0      	bne.n	8002b90 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f003 0308 	and.w	r3, r3, #8
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d030      	beq.n	8002c1c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	695b      	ldr	r3, [r3, #20]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d016      	beq.n	8002bf0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002bc2:	4b30      	ldr	r3, [pc, #192]	; (8002c84 <HAL_RCC_OscConfig+0x2b4>)
 8002bc4:	2201      	movs	r2, #1
 8002bc6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bc8:	f7fe fc08 	bl	80013dc <HAL_GetTick>
 8002bcc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bce:	e008      	b.n	8002be2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002bd0:	f7fe fc04 	bl	80013dc <HAL_GetTick>
 8002bd4:	4602      	mov	r2, r0
 8002bd6:	693b      	ldr	r3, [r7, #16]
 8002bd8:	1ad3      	subs	r3, r2, r3
 8002bda:	2b02      	cmp	r3, #2
 8002bdc:	d901      	bls.n	8002be2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002bde:	2303      	movs	r3, #3
 8002be0:	e15b      	b.n	8002e9a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002be2:	4b26      	ldr	r3, [pc, #152]	; (8002c7c <HAL_RCC_OscConfig+0x2ac>)
 8002be4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002be6:	f003 0302 	and.w	r3, r3, #2
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d0f0      	beq.n	8002bd0 <HAL_RCC_OscConfig+0x200>
 8002bee:	e015      	b.n	8002c1c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002bf0:	4b24      	ldr	r3, [pc, #144]	; (8002c84 <HAL_RCC_OscConfig+0x2b4>)
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bf6:	f7fe fbf1 	bl	80013dc <HAL_GetTick>
 8002bfa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bfc:	e008      	b.n	8002c10 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002bfe:	f7fe fbed 	bl	80013dc <HAL_GetTick>
 8002c02:	4602      	mov	r2, r0
 8002c04:	693b      	ldr	r3, [r7, #16]
 8002c06:	1ad3      	subs	r3, r2, r3
 8002c08:	2b02      	cmp	r3, #2
 8002c0a:	d901      	bls.n	8002c10 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002c0c:	2303      	movs	r3, #3
 8002c0e:	e144      	b.n	8002e9a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c10:	4b1a      	ldr	r3, [pc, #104]	; (8002c7c <HAL_RCC_OscConfig+0x2ac>)
 8002c12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c14:	f003 0302 	and.w	r3, r3, #2
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d1f0      	bne.n	8002bfe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f003 0304 	and.w	r3, r3, #4
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	f000 80a0 	beq.w	8002d6a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c2e:	4b13      	ldr	r3, [pc, #76]	; (8002c7c <HAL_RCC_OscConfig+0x2ac>)
 8002c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d10f      	bne.n	8002c5a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	60bb      	str	r3, [r7, #8]
 8002c3e:	4b0f      	ldr	r3, [pc, #60]	; (8002c7c <HAL_RCC_OscConfig+0x2ac>)
 8002c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c42:	4a0e      	ldr	r2, [pc, #56]	; (8002c7c <HAL_RCC_OscConfig+0x2ac>)
 8002c44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c48:	6413      	str	r3, [r2, #64]	; 0x40
 8002c4a:	4b0c      	ldr	r3, [pc, #48]	; (8002c7c <HAL_RCC_OscConfig+0x2ac>)
 8002c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c52:	60bb      	str	r3, [r7, #8]
 8002c54:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c56:	2301      	movs	r3, #1
 8002c58:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c5a:	4b0b      	ldr	r3, [pc, #44]	; (8002c88 <HAL_RCC_OscConfig+0x2b8>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d121      	bne.n	8002caa <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c66:	4b08      	ldr	r3, [pc, #32]	; (8002c88 <HAL_RCC_OscConfig+0x2b8>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4a07      	ldr	r2, [pc, #28]	; (8002c88 <HAL_RCC_OscConfig+0x2b8>)
 8002c6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c70:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c72:	f7fe fbb3 	bl	80013dc <HAL_GetTick>
 8002c76:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c78:	e011      	b.n	8002c9e <HAL_RCC_OscConfig+0x2ce>
 8002c7a:	bf00      	nop
 8002c7c:	40023800 	.word	0x40023800
 8002c80:	42470000 	.word	0x42470000
 8002c84:	42470e80 	.word	0x42470e80
 8002c88:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c8c:	f7fe fba6 	bl	80013dc <HAL_GetTick>
 8002c90:	4602      	mov	r2, r0
 8002c92:	693b      	ldr	r3, [r7, #16]
 8002c94:	1ad3      	subs	r3, r2, r3
 8002c96:	2b02      	cmp	r3, #2
 8002c98:	d901      	bls.n	8002c9e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002c9a:	2303      	movs	r3, #3
 8002c9c:	e0fd      	b.n	8002e9a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c9e:	4b81      	ldr	r3, [pc, #516]	; (8002ea4 <HAL_RCC_OscConfig+0x4d4>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d0f0      	beq.n	8002c8c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	689b      	ldr	r3, [r3, #8]
 8002cae:	2b01      	cmp	r3, #1
 8002cb0:	d106      	bne.n	8002cc0 <HAL_RCC_OscConfig+0x2f0>
 8002cb2:	4b7d      	ldr	r3, [pc, #500]	; (8002ea8 <HAL_RCC_OscConfig+0x4d8>)
 8002cb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cb6:	4a7c      	ldr	r2, [pc, #496]	; (8002ea8 <HAL_RCC_OscConfig+0x4d8>)
 8002cb8:	f043 0301 	orr.w	r3, r3, #1
 8002cbc:	6713      	str	r3, [r2, #112]	; 0x70
 8002cbe:	e01c      	b.n	8002cfa <HAL_RCC_OscConfig+0x32a>
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	689b      	ldr	r3, [r3, #8]
 8002cc4:	2b05      	cmp	r3, #5
 8002cc6:	d10c      	bne.n	8002ce2 <HAL_RCC_OscConfig+0x312>
 8002cc8:	4b77      	ldr	r3, [pc, #476]	; (8002ea8 <HAL_RCC_OscConfig+0x4d8>)
 8002cca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ccc:	4a76      	ldr	r2, [pc, #472]	; (8002ea8 <HAL_RCC_OscConfig+0x4d8>)
 8002cce:	f043 0304 	orr.w	r3, r3, #4
 8002cd2:	6713      	str	r3, [r2, #112]	; 0x70
 8002cd4:	4b74      	ldr	r3, [pc, #464]	; (8002ea8 <HAL_RCC_OscConfig+0x4d8>)
 8002cd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cd8:	4a73      	ldr	r2, [pc, #460]	; (8002ea8 <HAL_RCC_OscConfig+0x4d8>)
 8002cda:	f043 0301 	orr.w	r3, r3, #1
 8002cde:	6713      	str	r3, [r2, #112]	; 0x70
 8002ce0:	e00b      	b.n	8002cfa <HAL_RCC_OscConfig+0x32a>
 8002ce2:	4b71      	ldr	r3, [pc, #452]	; (8002ea8 <HAL_RCC_OscConfig+0x4d8>)
 8002ce4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ce6:	4a70      	ldr	r2, [pc, #448]	; (8002ea8 <HAL_RCC_OscConfig+0x4d8>)
 8002ce8:	f023 0301 	bic.w	r3, r3, #1
 8002cec:	6713      	str	r3, [r2, #112]	; 0x70
 8002cee:	4b6e      	ldr	r3, [pc, #440]	; (8002ea8 <HAL_RCC_OscConfig+0x4d8>)
 8002cf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cf2:	4a6d      	ldr	r2, [pc, #436]	; (8002ea8 <HAL_RCC_OscConfig+0x4d8>)
 8002cf4:	f023 0304 	bic.w	r3, r3, #4
 8002cf8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	689b      	ldr	r3, [r3, #8]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d015      	beq.n	8002d2e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d02:	f7fe fb6b 	bl	80013dc <HAL_GetTick>
 8002d06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d08:	e00a      	b.n	8002d20 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d0a:	f7fe fb67 	bl	80013dc <HAL_GetTick>
 8002d0e:	4602      	mov	r2, r0
 8002d10:	693b      	ldr	r3, [r7, #16]
 8002d12:	1ad3      	subs	r3, r2, r3
 8002d14:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d901      	bls.n	8002d20 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002d1c:	2303      	movs	r3, #3
 8002d1e:	e0bc      	b.n	8002e9a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d20:	4b61      	ldr	r3, [pc, #388]	; (8002ea8 <HAL_RCC_OscConfig+0x4d8>)
 8002d22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d24:	f003 0302 	and.w	r3, r3, #2
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d0ee      	beq.n	8002d0a <HAL_RCC_OscConfig+0x33a>
 8002d2c:	e014      	b.n	8002d58 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d2e:	f7fe fb55 	bl	80013dc <HAL_GetTick>
 8002d32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d34:	e00a      	b.n	8002d4c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d36:	f7fe fb51 	bl	80013dc <HAL_GetTick>
 8002d3a:	4602      	mov	r2, r0
 8002d3c:	693b      	ldr	r3, [r7, #16]
 8002d3e:	1ad3      	subs	r3, r2, r3
 8002d40:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d901      	bls.n	8002d4c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002d48:	2303      	movs	r3, #3
 8002d4a:	e0a6      	b.n	8002e9a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d4c:	4b56      	ldr	r3, [pc, #344]	; (8002ea8 <HAL_RCC_OscConfig+0x4d8>)
 8002d4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d50:	f003 0302 	and.w	r3, r3, #2
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d1ee      	bne.n	8002d36 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002d58:	7dfb      	ldrb	r3, [r7, #23]
 8002d5a:	2b01      	cmp	r3, #1
 8002d5c:	d105      	bne.n	8002d6a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d5e:	4b52      	ldr	r3, [pc, #328]	; (8002ea8 <HAL_RCC_OscConfig+0x4d8>)
 8002d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d62:	4a51      	ldr	r2, [pc, #324]	; (8002ea8 <HAL_RCC_OscConfig+0x4d8>)
 8002d64:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d68:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	699b      	ldr	r3, [r3, #24]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	f000 8092 	beq.w	8002e98 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002d74:	4b4c      	ldr	r3, [pc, #304]	; (8002ea8 <HAL_RCC_OscConfig+0x4d8>)
 8002d76:	689b      	ldr	r3, [r3, #8]
 8002d78:	f003 030c 	and.w	r3, r3, #12
 8002d7c:	2b08      	cmp	r3, #8
 8002d7e:	d05c      	beq.n	8002e3a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	699b      	ldr	r3, [r3, #24]
 8002d84:	2b02      	cmp	r3, #2
 8002d86:	d141      	bne.n	8002e0c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d88:	4b48      	ldr	r3, [pc, #288]	; (8002eac <HAL_RCC_OscConfig+0x4dc>)
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d8e:	f7fe fb25 	bl	80013dc <HAL_GetTick>
 8002d92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d94:	e008      	b.n	8002da8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d96:	f7fe fb21 	bl	80013dc <HAL_GetTick>
 8002d9a:	4602      	mov	r2, r0
 8002d9c:	693b      	ldr	r3, [r7, #16]
 8002d9e:	1ad3      	subs	r3, r2, r3
 8002da0:	2b02      	cmp	r3, #2
 8002da2:	d901      	bls.n	8002da8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002da4:	2303      	movs	r3, #3
 8002da6:	e078      	b.n	8002e9a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002da8:	4b3f      	ldr	r3, [pc, #252]	; (8002ea8 <HAL_RCC_OscConfig+0x4d8>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d1f0      	bne.n	8002d96 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	69da      	ldr	r2, [r3, #28]
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6a1b      	ldr	r3, [r3, #32]
 8002dbc:	431a      	orrs	r2, r3
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dc2:	019b      	lsls	r3, r3, #6
 8002dc4:	431a      	orrs	r2, r3
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dca:	085b      	lsrs	r3, r3, #1
 8002dcc:	3b01      	subs	r3, #1
 8002dce:	041b      	lsls	r3, r3, #16
 8002dd0:	431a      	orrs	r2, r3
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dd6:	061b      	lsls	r3, r3, #24
 8002dd8:	4933      	ldr	r1, [pc, #204]	; (8002ea8 <HAL_RCC_OscConfig+0x4d8>)
 8002dda:	4313      	orrs	r3, r2
 8002ddc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002dde:	4b33      	ldr	r3, [pc, #204]	; (8002eac <HAL_RCC_OscConfig+0x4dc>)
 8002de0:	2201      	movs	r2, #1
 8002de2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002de4:	f7fe fafa 	bl	80013dc <HAL_GetTick>
 8002de8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002dea:	e008      	b.n	8002dfe <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002dec:	f7fe faf6 	bl	80013dc <HAL_GetTick>
 8002df0:	4602      	mov	r2, r0
 8002df2:	693b      	ldr	r3, [r7, #16]
 8002df4:	1ad3      	subs	r3, r2, r3
 8002df6:	2b02      	cmp	r3, #2
 8002df8:	d901      	bls.n	8002dfe <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002dfa:	2303      	movs	r3, #3
 8002dfc:	e04d      	b.n	8002e9a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002dfe:	4b2a      	ldr	r3, [pc, #168]	; (8002ea8 <HAL_RCC_OscConfig+0x4d8>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d0f0      	beq.n	8002dec <HAL_RCC_OscConfig+0x41c>
 8002e0a:	e045      	b.n	8002e98 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e0c:	4b27      	ldr	r3, [pc, #156]	; (8002eac <HAL_RCC_OscConfig+0x4dc>)
 8002e0e:	2200      	movs	r2, #0
 8002e10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e12:	f7fe fae3 	bl	80013dc <HAL_GetTick>
 8002e16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e18:	e008      	b.n	8002e2c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e1a:	f7fe fadf 	bl	80013dc <HAL_GetTick>
 8002e1e:	4602      	mov	r2, r0
 8002e20:	693b      	ldr	r3, [r7, #16]
 8002e22:	1ad3      	subs	r3, r2, r3
 8002e24:	2b02      	cmp	r3, #2
 8002e26:	d901      	bls.n	8002e2c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002e28:	2303      	movs	r3, #3
 8002e2a:	e036      	b.n	8002e9a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e2c:	4b1e      	ldr	r3, [pc, #120]	; (8002ea8 <HAL_RCC_OscConfig+0x4d8>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d1f0      	bne.n	8002e1a <HAL_RCC_OscConfig+0x44a>
 8002e38:	e02e      	b.n	8002e98 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	699b      	ldr	r3, [r3, #24]
 8002e3e:	2b01      	cmp	r3, #1
 8002e40:	d101      	bne.n	8002e46 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002e42:	2301      	movs	r3, #1
 8002e44:	e029      	b.n	8002e9a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002e46:	4b18      	ldr	r3, [pc, #96]	; (8002ea8 <HAL_RCC_OscConfig+0x4d8>)
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	69db      	ldr	r3, [r3, #28]
 8002e56:	429a      	cmp	r2, r3
 8002e58:	d11c      	bne.n	8002e94 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e64:	429a      	cmp	r2, r3
 8002e66:	d115      	bne.n	8002e94 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002e68:	68fa      	ldr	r2, [r7, #12]
 8002e6a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002e6e:	4013      	ands	r3, r2
 8002e70:	687a      	ldr	r2, [r7, #4]
 8002e72:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d10d      	bne.n	8002e94 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002e82:	429a      	cmp	r2, r3
 8002e84:	d106      	bne.n	8002e94 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002e90:	429a      	cmp	r2, r3
 8002e92:	d001      	beq.n	8002e98 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8002e94:	2301      	movs	r3, #1
 8002e96:	e000      	b.n	8002e9a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8002e98:	2300      	movs	r3, #0
}
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	3718      	adds	r7, #24
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bd80      	pop	{r7, pc}
 8002ea2:	bf00      	nop
 8002ea4:	40007000 	.word	0x40007000
 8002ea8:	40023800 	.word	0x40023800
 8002eac:	42470060 	.word	0x42470060

08002eb0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b084      	sub	sp, #16
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
 8002eb8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d101      	bne.n	8002ec4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	e0cc      	b.n	800305e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ec4:	4b68      	ldr	r3, [pc, #416]	; (8003068 <HAL_RCC_ClockConfig+0x1b8>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f003 030f 	and.w	r3, r3, #15
 8002ecc:	683a      	ldr	r2, [r7, #0]
 8002ece:	429a      	cmp	r2, r3
 8002ed0:	d90c      	bls.n	8002eec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ed2:	4b65      	ldr	r3, [pc, #404]	; (8003068 <HAL_RCC_ClockConfig+0x1b8>)
 8002ed4:	683a      	ldr	r2, [r7, #0]
 8002ed6:	b2d2      	uxtb	r2, r2
 8002ed8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002eda:	4b63      	ldr	r3, [pc, #396]	; (8003068 <HAL_RCC_ClockConfig+0x1b8>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f003 030f 	and.w	r3, r3, #15
 8002ee2:	683a      	ldr	r2, [r7, #0]
 8002ee4:	429a      	cmp	r2, r3
 8002ee6:	d001      	beq.n	8002eec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002ee8:	2301      	movs	r3, #1
 8002eea:	e0b8      	b.n	800305e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f003 0302 	and.w	r3, r3, #2
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d020      	beq.n	8002f3a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f003 0304 	and.w	r3, r3, #4
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d005      	beq.n	8002f10 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f04:	4b59      	ldr	r3, [pc, #356]	; (800306c <HAL_RCC_ClockConfig+0x1bc>)
 8002f06:	689b      	ldr	r3, [r3, #8]
 8002f08:	4a58      	ldr	r2, [pc, #352]	; (800306c <HAL_RCC_ClockConfig+0x1bc>)
 8002f0a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002f0e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f003 0308 	and.w	r3, r3, #8
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d005      	beq.n	8002f28 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f1c:	4b53      	ldr	r3, [pc, #332]	; (800306c <HAL_RCC_ClockConfig+0x1bc>)
 8002f1e:	689b      	ldr	r3, [r3, #8]
 8002f20:	4a52      	ldr	r2, [pc, #328]	; (800306c <HAL_RCC_ClockConfig+0x1bc>)
 8002f22:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002f26:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f28:	4b50      	ldr	r3, [pc, #320]	; (800306c <HAL_RCC_ClockConfig+0x1bc>)
 8002f2a:	689b      	ldr	r3, [r3, #8]
 8002f2c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	689b      	ldr	r3, [r3, #8]
 8002f34:	494d      	ldr	r1, [pc, #308]	; (800306c <HAL_RCC_ClockConfig+0x1bc>)
 8002f36:	4313      	orrs	r3, r2
 8002f38:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f003 0301 	and.w	r3, r3, #1
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d044      	beq.n	8002fd0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	2b01      	cmp	r3, #1
 8002f4c:	d107      	bne.n	8002f5e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f4e:	4b47      	ldr	r3, [pc, #284]	; (800306c <HAL_RCC_ClockConfig+0x1bc>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d119      	bne.n	8002f8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	e07f      	b.n	800305e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	2b02      	cmp	r3, #2
 8002f64:	d003      	beq.n	8002f6e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f6a:	2b03      	cmp	r3, #3
 8002f6c:	d107      	bne.n	8002f7e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f6e:	4b3f      	ldr	r3, [pc, #252]	; (800306c <HAL_RCC_ClockConfig+0x1bc>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d109      	bne.n	8002f8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	e06f      	b.n	800305e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f7e:	4b3b      	ldr	r3, [pc, #236]	; (800306c <HAL_RCC_ClockConfig+0x1bc>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f003 0302 	and.w	r3, r3, #2
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d101      	bne.n	8002f8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	e067      	b.n	800305e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f8e:	4b37      	ldr	r3, [pc, #220]	; (800306c <HAL_RCC_ClockConfig+0x1bc>)
 8002f90:	689b      	ldr	r3, [r3, #8]
 8002f92:	f023 0203 	bic.w	r2, r3, #3
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	4934      	ldr	r1, [pc, #208]	; (800306c <HAL_RCC_ClockConfig+0x1bc>)
 8002f9c:	4313      	orrs	r3, r2
 8002f9e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002fa0:	f7fe fa1c 	bl	80013dc <HAL_GetTick>
 8002fa4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fa6:	e00a      	b.n	8002fbe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fa8:	f7fe fa18 	bl	80013dc <HAL_GetTick>
 8002fac:	4602      	mov	r2, r0
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	1ad3      	subs	r3, r2, r3
 8002fb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d901      	bls.n	8002fbe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002fba:	2303      	movs	r3, #3
 8002fbc:	e04f      	b.n	800305e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fbe:	4b2b      	ldr	r3, [pc, #172]	; (800306c <HAL_RCC_ClockConfig+0x1bc>)
 8002fc0:	689b      	ldr	r3, [r3, #8]
 8002fc2:	f003 020c 	and.w	r2, r3, #12
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	009b      	lsls	r3, r3, #2
 8002fcc:	429a      	cmp	r2, r3
 8002fce:	d1eb      	bne.n	8002fa8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002fd0:	4b25      	ldr	r3, [pc, #148]	; (8003068 <HAL_RCC_ClockConfig+0x1b8>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f003 030f 	and.w	r3, r3, #15
 8002fd8:	683a      	ldr	r2, [r7, #0]
 8002fda:	429a      	cmp	r2, r3
 8002fdc:	d20c      	bcs.n	8002ff8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fde:	4b22      	ldr	r3, [pc, #136]	; (8003068 <HAL_RCC_ClockConfig+0x1b8>)
 8002fe0:	683a      	ldr	r2, [r7, #0]
 8002fe2:	b2d2      	uxtb	r2, r2
 8002fe4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fe6:	4b20      	ldr	r3, [pc, #128]	; (8003068 <HAL_RCC_ClockConfig+0x1b8>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f003 030f 	and.w	r3, r3, #15
 8002fee:	683a      	ldr	r2, [r7, #0]
 8002ff0:	429a      	cmp	r2, r3
 8002ff2:	d001      	beq.n	8002ff8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	e032      	b.n	800305e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f003 0304 	and.w	r3, r3, #4
 8003000:	2b00      	cmp	r3, #0
 8003002:	d008      	beq.n	8003016 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003004:	4b19      	ldr	r3, [pc, #100]	; (800306c <HAL_RCC_ClockConfig+0x1bc>)
 8003006:	689b      	ldr	r3, [r3, #8]
 8003008:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	68db      	ldr	r3, [r3, #12]
 8003010:	4916      	ldr	r1, [pc, #88]	; (800306c <HAL_RCC_ClockConfig+0x1bc>)
 8003012:	4313      	orrs	r3, r2
 8003014:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f003 0308 	and.w	r3, r3, #8
 800301e:	2b00      	cmp	r3, #0
 8003020:	d009      	beq.n	8003036 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003022:	4b12      	ldr	r3, [pc, #72]	; (800306c <HAL_RCC_ClockConfig+0x1bc>)
 8003024:	689b      	ldr	r3, [r3, #8]
 8003026:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	691b      	ldr	r3, [r3, #16]
 800302e:	00db      	lsls	r3, r3, #3
 8003030:	490e      	ldr	r1, [pc, #56]	; (800306c <HAL_RCC_ClockConfig+0x1bc>)
 8003032:	4313      	orrs	r3, r2
 8003034:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003036:	f000 f821 	bl	800307c <HAL_RCC_GetSysClockFreq>
 800303a:	4601      	mov	r1, r0
 800303c:	4b0b      	ldr	r3, [pc, #44]	; (800306c <HAL_RCC_ClockConfig+0x1bc>)
 800303e:	689b      	ldr	r3, [r3, #8]
 8003040:	091b      	lsrs	r3, r3, #4
 8003042:	f003 030f 	and.w	r3, r3, #15
 8003046:	4a0a      	ldr	r2, [pc, #40]	; (8003070 <HAL_RCC_ClockConfig+0x1c0>)
 8003048:	5cd3      	ldrb	r3, [r2, r3]
 800304a:	fa21 f303 	lsr.w	r3, r1, r3
 800304e:	4a09      	ldr	r2, [pc, #36]	; (8003074 <HAL_RCC_ClockConfig+0x1c4>)
 8003050:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003052:	4b09      	ldr	r3, [pc, #36]	; (8003078 <HAL_RCC_ClockConfig+0x1c8>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4618      	mov	r0, r3
 8003058:	f7fe f97c 	bl	8001354 <HAL_InitTick>

  return HAL_OK;
 800305c:	2300      	movs	r3, #0
}
 800305e:	4618      	mov	r0, r3
 8003060:	3710      	adds	r7, #16
 8003062:	46bd      	mov	sp, r7
 8003064:	bd80      	pop	{r7, pc}
 8003066:	bf00      	nop
 8003068:	40023c00 	.word	0x40023c00
 800306c:	40023800 	.word	0x40023800
 8003070:	080046bc 	.word	0x080046bc
 8003074:	20000000 	.word	0x20000000
 8003078:	20000004 	.word	0x20000004

0800307c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800307c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800307e:	b085      	sub	sp, #20
 8003080:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003082:	2300      	movs	r3, #0
 8003084:	607b      	str	r3, [r7, #4]
 8003086:	2300      	movs	r3, #0
 8003088:	60fb      	str	r3, [r7, #12]
 800308a:	2300      	movs	r3, #0
 800308c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800308e:	2300      	movs	r3, #0
 8003090:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003092:	4b50      	ldr	r3, [pc, #320]	; (80031d4 <HAL_RCC_GetSysClockFreq+0x158>)
 8003094:	689b      	ldr	r3, [r3, #8]
 8003096:	f003 030c 	and.w	r3, r3, #12
 800309a:	2b04      	cmp	r3, #4
 800309c:	d007      	beq.n	80030ae <HAL_RCC_GetSysClockFreq+0x32>
 800309e:	2b08      	cmp	r3, #8
 80030a0:	d008      	beq.n	80030b4 <HAL_RCC_GetSysClockFreq+0x38>
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	f040 808d 	bne.w	80031c2 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80030a8:	4b4b      	ldr	r3, [pc, #300]	; (80031d8 <HAL_RCC_GetSysClockFreq+0x15c>)
 80030aa:	60bb      	str	r3, [r7, #8]
       break;
 80030ac:	e08c      	b.n	80031c8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80030ae:	4b4b      	ldr	r3, [pc, #300]	; (80031dc <HAL_RCC_GetSysClockFreq+0x160>)
 80030b0:	60bb      	str	r3, [r7, #8]
      break;
 80030b2:	e089      	b.n	80031c8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80030b4:	4b47      	ldr	r3, [pc, #284]	; (80031d4 <HAL_RCC_GetSysClockFreq+0x158>)
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80030bc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80030be:	4b45      	ldr	r3, [pc, #276]	; (80031d4 <HAL_RCC_GetSysClockFreq+0x158>)
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d023      	beq.n	8003112 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80030ca:	4b42      	ldr	r3, [pc, #264]	; (80031d4 <HAL_RCC_GetSysClockFreq+0x158>)
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	099b      	lsrs	r3, r3, #6
 80030d0:	f04f 0400 	mov.w	r4, #0
 80030d4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80030d8:	f04f 0200 	mov.w	r2, #0
 80030dc:	ea03 0501 	and.w	r5, r3, r1
 80030e0:	ea04 0602 	and.w	r6, r4, r2
 80030e4:	4a3d      	ldr	r2, [pc, #244]	; (80031dc <HAL_RCC_GetSysClockFreq+0x160>)
 80030e6:	fb02 f106 	mul.w	r1, r2, r6
 80030ea:	2200      	movs	r2, #0
 80030ec:	fb02 f205 	mul.w	r2, r2, r5
 80030f0:	440a      	add	r2, r1
 80030f2:	493a      	ldr	r1, [pc, #232]	; (80031dc <HAL_RCC_GetSysClockFreq+0x160>)
 80030f4:	fba5 0101 	umull	r0, r1, r5, r1
 80030f8:	1853      	adds	r3, r2, r1
 80030fa:	4619      	mov	r1, r3
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	f04f 0400 	mov.w	r4, #0
 8003102:	461a      	mov	r2, r3
 8003104:	4623      	mov	r3, r4
 8003106:	f7fd f8c3 	bl	8000290 <__aeabi_uldivmod>
 800310a:	4603      	mov	r3, r0
 800310c:	460c      	mov	r4, r1
 800310e:	60fb      	str	r3, [r7, #12]
 8003110:	e049      	b.n	80031a6 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003112:	4b30      	ldr	r3, [pc, #192]	; (80031d4 <HAL_RCC_GetSysClockFreq+0x158>)
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	099b      	lsrs	r3, r3, #6
 8003118:	f04f 0400 	mov.w	r4, #0
 800311c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003120:	f04f 0200 	mov.w	r2, #0
 8003124:	ea03 0501 	and.w	r5, r3, r1
 8003128:	ea04 0602 	and.w	r6, r4, r2
 800312c:	4629      	mov	r1, r5
 800312e:	4632      	mov	r2, r6
 8003130:	f04f 0300 	mov.w	r3, #0
 8003134:	f04f 0400 	mov.w	r4, #0
 8003138:	0154      	lsls	r4, r2, #5
 800313a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800313e:	014b      	lsls	r3, r1, #5
 8003140:	4619      	mov	r1, r3
 8003142:	4622      	mov	r2, r4
 8003144:	1b49      	subs	r1, r1, r5
 8003146:	eb62 0206 	sbc.w	r2, r2, r6
 800314a:	f04f 0300 	mov.w	r3, #0
 800314e:	f04f 0400 	mov.w	r4, #0
 8003152:	0194      	lsls	r4, r2, #6
 8003154:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003158:	018b      	lsls	r3, r1, #6
 800315a:	1a5b      	subs	r3, r3, r1
 800315c:	eb64 0402 	sbc.w	r4, r4, r2
 8003160:	f04f 0100 	mov.w	r1, #0
 8003164:	f04f 0200 	mov.w	r2, #0
 8003168:	00e2      	lsls	r2, r4, #3
 800316a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800316e:	00d9      	lsls	r1, r3, #3
 8003170:	460b      	mov	r3, r1
 8003172:	4614      	mov	r4, r2
 8003174:	195b      	adds	r3, r3, r5
 8003176:	eb44 0406 	adc.w	r4, r4, r6
 800317a:	f04f 0100 	mov.w	r1, #0
 800317e:	f04f 0200 	mov.w	r2, #0
 8003182:	02a2      	lsls	r2, r4, #10
 8003184:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003188:	0299      	lsls	r1, r3, #10
 800318a:	460b      	mov	r3, r1
 800318c:	4614      	mov	r4, r2
 800318e:	4618      	mov	r0, r3
 8003190:	4621      	mov	r1, r4
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	f04f 0400 	mov.w	r4, #0
 8003198:	461a      	mov	r2, r3
 800319a:	4623      	mov	r3, r4
 800319c:	f7fd f878 	bl	8000290 <__aeabi_uldivmod>
 80031a0:	4603      	mov	r3, r0
 80031a2:	460c      	mov	r4, r1
 80031a4:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80031a6:	4b0b      	ldr	r3, [pc, #44]	; (80031d4 <HAL_RCC_GetSysClockFreq+0x158>)
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	0c1b      	lsrs	r3, r3, #16
 80031ac:	f003 0303 	and.w	r3, r3, #3
 80031b0:	3301      	adds	r3, #1
 80031b2:	005b      	lsls	r3, r3, #1
 80031b4:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80031b6:	68fa      	ldr	r2, [r7, #12]
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80031be:	60bb      	str	r3, [r7, #8]
      break;
 80031c0:	e002      	b.n	80031c8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80031c2:	4b05      	ldr	r3, [pc, #20]	; (80031d8 <HAL_RCC_GetSysClockFreq+0x15c>)
 80031c4:	60bb      	str	r3, [r7, #8]
      break;
 80031c6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80031c8:	68bb      	ldr	r3, [r7, #8]
}
 80031ca:	4618      	mov	r0, r3
 80031cc:	3714      	adds	r7, #20
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80031d2:	bf00      	nop
 80031d4:	40023800 	.word	0x40023800
 80031d8:	00f42400 	.word	0x00f42400
 80031dc:	017d7840 	.word	0x017d7840

080031e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80031e0:	b480      	push	{r7}
 80031e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80031e4:	4b03      	ldr	r3, [pc, #12]	; (80031f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80031e6:	681b      	ldr	r3, [r3, #0]
}
 80031e8:	4618      	mov	r0, r3
 80031ea:	46bd      	mov	sp, r7
 80031ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f0:	4770      	bx	lr
 80031f2:	bf00      	nop
 80031f4:	20000000 	.word	0x20000000

080031f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80031fc:	f7ff fff0 	bl	80031e0 <HAL_RCC_GetHCLKFreq>
 8003200:	4601      	mov	r1, r0
 8003202:	4b05      	ldr	r3, [pc, #20]	; (8003218 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003204:	689b      	ldr	r3, [r3, #8]
 8003206:	0a9b      	lsrs	r3, r3, #10
 8003208:	f003 0307 	and.w	r3, r3, #7
 800320c:	4a03      	ldr	r2, [pc, #12]	; (800321c <HAL_RCC_GetPCLK1Freq+0x24>)
 800320e:	5cd3      	ldrb	r3, [r2, r3]
 8003210:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003214:	4618      	mov	r0, r3
 8003216:	bd80      	pop	{r7, pc}
 8003218:	40023800 	.word	0x40023800
 800321c:	080046cc 	.word	0x080046cc

08003220 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003224:	f7ff ffdc 	bl	80031e0 <HAL_RCC_GetHCLKFreq>
 8003228:	4601      	mov	r1, r0
 800322a:	4b05      	ldr	r3, [pc, #20]	; (8003240 <HAL_RCC_GetPCLK2Freq+0x20>)
 800322c:	689b      	ldr	r3, [r3, #8]
 800322e:	0b5b      	lsrs	r3, r3, #13
 8003230:	f003 0307 	and.w	r3, r3, #7
 8003234:	4a03      	ldr	r2, [pc, #12]	; (8003244 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003236:	5cd3      	ldrb	r3, [r2, r3]
 8003238:	fa21 f303 	lsr.w	r3, r1, r3
}
 800323c:	4618      	mov	r0, r3
 800323e:	bd80      	pop	{r7, pc}
 8003240:	40023800 	.word	0x40023800
 8003244:	080046cc 	.word	0x080046cc

08003248 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b082      	sub	sp, #8
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d101      	bne.n	800325a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003256:	2301      	movs	r3, #1
 8003258:	e03f      	b.n	80032da <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003260:	b2db      	uxtb	r3, r3
 8003262:	2b00      	cmp	r3, #0
 8003264:	d106      	bne.n	8003274 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2200      	movs	r2, #0
 800326a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800326e:	6878      	ldr	r0, [r7, #4]
 8003270:	f7fd ff5e 	bl	8001130 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2224      	movs	r2, #36	; 0x24
 8003278:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	68da      	ldr	r2, [r3, #12]
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800328a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800328c:	6878      	ldr	r0, [r7, #4]
 800328e:	f000 f90b 	bl	80034a8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	691a      	ldr	r2, [r3, #16]
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80032a0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	695a      	ldr	r2, [r3, #20]
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80032b0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	68da      	ldr	r2, [r3, #12]
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80032c0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2200      	movs	r2, #0
 80032c6:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2220      	movs	r2, #32
 80032cc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2220      	movs	r2, #32
 80032d4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80032d8:	2300      	movs	r3, #0
}
 80032da:	4618      	mov	r0, r3
 80032dc:	3708      	adds	r7, #8
 80032de:	46bd      	mov	sp, r7
 80032e0:	bd80      	pop	{r7, pc}

080032e2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80032e2:	b580      	push	{r7, lr}
 80032e4:	b088      	sub	sp, #32
 80032e6:	af02      	add	r7, sp, #8
 80032e8:	60f8      	str	r0, [r7, #12]
 80032ea:	60b9      	str	r1, [r7, #8]
 80032ec:	603b      	str	r3, [r7, #0]
 80032ee:	4613      	mov	r3, r2
 80032f0:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80032f2:	2300      	movs	r3, #0
 80032f4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80032fc:	b2db      	uxtb	r3, r3
 80032fe:	2b20      	cmp	r3, #32
 8003300:	f040 8083 	bne.w	800340a <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8003304:	68bb      	ldr	r3, [r7, #8]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d002      	beq.n	8003310 <HAL_UART_Transmit+0x2e>
 800330a:	88fb      	ldrh	r3, [r7, #6]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d101      	bne.n	8003314 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8003310:	2301      	movs	r3, #1
 8003312:	e07b      	b.n	800340c <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800331a:	2b01      	cmp	r3, #1
 800331c:	d101      	bne.n	8003322 <HAL_UART_Transmit+0x40>
 800331e:	2302      	movs	r3, #2
 8003320:	e074      	b.n	800340c <HAL_UART_Transmit+0x12a>
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	2201      	movs	r2, #1
 8003326:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	2200      	movs	r2, #0
 800332e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	2221      	movs	r2, #33	; 0x21
 8003334:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8003338:	f7fe f850 	bl	80013dc <HAL_GetTick>
 800333c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	88fa      	ldrh	r2, [r7, #6]
 8003342:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	88fa      	ldrh	r2, [r7, #6]
 8003348:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	2200      	movs	r2, #0
 800334e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8003352:	e042      	b.n	80033da <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003358:	b29b      	uxth	r3, r3
 800335a:	3b01      	subs	r3, #1
 800335c:	b29a      	uxth	r2, r3
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	689b      	ldr	r3, [r3, #8]
 8003366:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800336a:	d122      	bne.n	80033b2 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	9300      	str	r3, [sp, #0]
 8003370:	697b      	ldr	r3, [r7, #20]
 8003372:	2200      	movs	r2, #0
 8003374:	2180      	movs	r1, #128	; 0x80
 8003376:	68f8      	ldr	r0, [r7, #12]
 8003378:	f000 f84c 	bl	8003414 <UART_WaitOnFlagUntilTimeout>
 800337c:	4603      	mov	r3, r0
 800337e:	2b00      	cmp	r3, #0
 8003380:	d001      	beq.n	8003386 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8003382:	2303      	movs	r3, #3
 8003384:	e042      	b.n	800340c <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8003386:	68bb      	ldr	r3, [r7, #8]
 8003388:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800338a:	693b      	ldr	r3, [r7, #16]
 800338c:	881b      	ldrh	r3, [r3, #0]
 800338e:	461a      	mov	r2, r3
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003398:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	691b      	ldr	r3, [r3, #16]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d103      	bne.n	80033aa <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 80033a2:	68bb      	ldr	r3, [r7, #8]
 80033a4:	3302      	adds	r3, #2
 80033a6:	60bb      	str	r3, [r7, #8]
 80033a8:	e017      	b.n	80033da <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 80033aa:	68bb      	ldr	r3, [r7, #8]
 80033ac:	3301      	adds	r3, #1
 80033ae:	60bb      	str	r3, [r7, #8]
 80033b0:	e013      	b.n	80033da <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	9300      	str	r3, [sp, #0]
 80033b6:	697b      	ldr	r3, [r7, #20]
 80033b8:	2200      	movs	r2, #0
 80033ba:	2180      	movs	r1, #128	; 0x80
 80033bc:	68f8      	ldr	r0, [r7, #12]
 80033be:	f000 f829 	bl	8003414 <UART_WaitOnFlagUntilTimeout>
 80033c2:	4603      	mov	r3, r0
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d001      	beq.n	80033cc <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 80033c8:	2303      	movs	r3, #3
 80033ca:	e01f      	b.n	800340c <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80033cc:	68bb      	ldr	r3, [r7, #8]
 80033ce:	1c5a      	adds	r2, r3, #1
 80033d0:	60ba      	str	r2, [r7, #8]
 80033d2:	781a      	ldrb	r2, [r3, #0]
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80033de:	b29b      	uxth	r3, r3
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d1b7      	bne.n	8003354 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	9300      	str	r3, [sp, #0]
 80033e8:	697b      	ldr	r3, [r7, #20]
 80033ea:	2200      	movs	r2, #0
 80033ec:	2140      	movs	r1, #64	; 0x40
 80033ee:	68f8      	ldr	r0, [r7, #12]
 80033f0:	f000 f810 	bl	8003414 <UART_WaitOnFlagUntilTimeout>
 80033f4:	4603      	mov	r3, r0
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d001      	beq.n	80033fe <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 80033fa:	2303      	movs	r3, #3
 80033fc:	e006      	b.n	800340c <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	2220      	movs	r2, #32
 8003402:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8003406:	2300      	movs	r3, #0
 8003408:	e000      	b.n	800340c <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800340a:	2302      	movs	r3, #2
  }
}
 800340c:	4618      	mov	r0, r3
 800340e:	3718      	adds	r7, #24
 8003410:	46bd      	mov	sp, r7
 8003412:	bd80      	pop	{r7, pc}

08003414 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b084      	sub	sp, #16
 8003418:	af00      	add	r7, sp, #0
 800341a:	60f8      	str	r0, [r7, #12]
 800341c:	60b9      	str	r1, [r7, #8]
 800341e:	603b      	str	r3, [r7, #0]
 8003420:	4613      	mov	r3, r2
 8003422:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003424:	e02c      	b.n	8003480 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003426:	69bb      	ldr	r3, [r7, #24]
 8003428:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800342c:	d028      	beq.n	8003480 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800342e:	69bb      	ldr	r3, [r7, #24]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d007      	beq.n	8003444 <UART_WaitOnFlagUntilTimeout+0x30>
 8003434:	f7fd ffd2 	bl	80013dc <HAL_GetTick>
 8003438:	4602      	mov	r2, r0
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	1ad3      	subs	r3, r2, r3
 800343e:	69ba      	ldr	r2, [r7, #24]
 8003440:	429a      	cmp	r2, r3
 8003442:	d21d      	bcs.n	8003480 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	68da      	ldr	r2, [r3, #12]
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003452:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	695a      	ldr	r2, [r3, #20]
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f022 0201 	bic.w	r2, r2, #1
 8003462:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	2220      	movs	r2, #32
 8003468:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	2220      	movs	r2, #32
 8003470:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	2200      	movs	r2, #0
 8003478:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800347c:	2303      	movs	r3, #3
 800347e:	e00f      	b.n	80034a0 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	681a      	ldr	r2, [r3, #0]
 8003486:	68bb      	ldr	r3, [r7, #8]
 8003488:	4013      	ands	r3, r2
 800348a:	68ba      	ldr	r2, [r7, #8]
 800348c:	429a      	cmp	r2, r3
 800348e:	bf0c      	ite	eq
 8003490:	2301      	moveq	r3, #1
 8003492:	2300      	movne	r3, #0
 8003494:	b2db      	uxtb	r3, r3
 8003496:	461a      	mov	r2, r3
 8003498:	79fb      	ldrb	r3, [r7, #7]
 800349a:	429a      	cmp	r2, r3
 800349c:	d0c3      	beq.n	8003426 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800349e:	2300      	movs	r3, #0
}
 80034a0:	4618      	mov	r0, r3
 80034a2:	3710      	adds	r7, #16
 80034a4:	46bd      	mov	sp, r7
 80034a6:	bd80      	pop	{r7, pc}

080034a8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80034a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80034ac:	b085      	sub	sp, #20
 80034ae:	af00      	add	r7, sp, #0
 80034b0:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	691b      	ldr	r3, [r3, #16]
 80034b8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	68da      	ldr	r2, [r3, #12]
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	430a      	orrs	r2, r1
 80034c6:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	689a      	ldr	r2, [r3, #8]
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	691b      	ldr	r3, [r3, #16]
 80034d0:	431a      	orrs	r2, r3
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	695b      	ldr	r3, [r3, #20]
 80034d6:	431a      	orrs	r2, r3
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	69db      	ldr	r3, [r3, #28]
 80034dc:	4313      	orrs	r3, r2
 80034de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	68db      	ldr	r3, [r3, #12]
 80034e6:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80034ea:	f023 030c 	bic.w	r3, r3, #12
 80034ee:	687a      	ldr	r2, [r7, #4]
 80034f0:	6812      	ldr	r2, [r2, #0]
 80034f2:	68f9      	ldr	r1, [r7, #12]
 80034f4:	430b      	orrs	r3, r1
 80034f6:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	695b      	ldr	r3, [r3, #20]
 80034fe:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	699a      	ldr	r2, [r3, #24]
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	430a      	orrs	r2, r1
 800350c:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	69db      	ldr	r3, [r3, #28]
 8003512:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003516:	f040 818b 	bne.w	8003830 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4ac1      	ldr	r2, [pc, #772]	; (8003824 <UART_SetConfig+0x37c>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d005      	beq.n	8003530 <UART_SetConfig+0x88>
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4abf      	ldr	r2, [pc, #764]	; (8003828 <UART_SetConfig+0x380>)
 800352a:	4293      	cmp	r3, r2
 800352c:	f040 80bd 	bne.w	80036aa <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003530:	f7ff fe76 	bl	8003220 <HAL_RCC_GetPCLK2Freq>
 8003534:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003536:	68bb      	ldr	r3, [r7, #8]
 8003538:	461d      	mov	r5, r3
 800353a:	f04f 0600 	mov.w	r6, #0
 800353e:	46a8      	mov	r8, r5
 8003540:	46b1      	mov	r9, r6
 8003542:	eb18 0308 	adds.w	r3, r8, r8
 8003546:	eb49 0409 	adc.w	r4, r9, r9
 800354a:	4698      	mov	r8, r3
 800354c:	46a1      	mov	r9, r4
 800354e:	eb18 0805 	adds.w	r8, r8, r5
 8003552:	eb49 0906 	adc.w	r9, r9, r6
 8003556:	f04f 0100 	mov.w	r1, #0
 800355a:	f04f 0200 	mov.w	r2, #0
 800355e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003562:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003566:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800356a:	4688      	mov	r8, r1
 800356c:	4691      	mov	r9, r2
 800356e:	eb18 0005 	adds.w	r0, r8, r5
 8003572:	eb49 0106 	adc.w	r1, r9, r6
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	685b      	ldr	r3, [r3, #4]
 800357a:	461d      	mov	r5, r3
 800357c:	f04f 0600 	mov.w	r6, #0
 8003580:	196b      	adds	r3, r5, r5
 8003582:	eb46 0406 	adc.w	r4, r6, r6
 8003586:	461a      	mov	r2, r3
 8003588:	4623      	mov	r3, r4
 800358a:	f7fc fe81 	bl	8000290 <__aeabi_uldivmod>
 800358e:	4603      	mov	r3, r0
 8003590:	460c      	mov	r4, r1
 8003592:	461a      	mov	r2, r3
 8003594:	4ba5      	ldr	r3, [pc, #660]	; (800382c <UART_SetConfig+0x384>)
 8003596:	fba3 2302 	umull	r2, r3, r3, r2
 800359a:	095b      	lsrs	r3, r3, #5
 800359c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80035a0:	68bb      	ldr	r3, [r7, #8]
 80035a2:	461d      	mov	r5, r3
 80035a4:	f04f 0600 	mov.w	r6, #0
 80035a8:	46a9      	mov	r9, r5
 80035aa:	46b2      	mov	sl, r6
 80035ac:	eb19 0309 	adds.w	r3, r9, r9
 80035b0:	eb4a 040a 	adc.w	r4, sl, sl
 80035b4:	4699      	mov	r9, r3
 80035b6:	46a2      	mov	sl, r4
 80035b8:	eb19 0905 	adds.w	r9, r9, r5
 80035bc:	eb4a 0a06 	adc.w	sl, sl, r6
 80035c0:	f04f 0100 	mov.w	r1, #0
 80035c4:	f04f 0200 	mov.w	r2, #0
 80035c8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80035cc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80035d0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80035d4:	4689      	mov	r9, r1
 80035d6:	4692      	mov	sl, r2
 80035d8:	eb19 0005 	adds.w	r0, r9, r5
 80035dc:	eb4a 0106 	adc.w	r1, sl, r6
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	461d      	mov	r5, r3
 80035e6:	f04f 0600 	mov.w	r6, #0
 80035ea:	196b      	adds	r3, r5, r5
 80035ec:	eb46 0406 	adc.w	r4, r6, r6
 80035f0:	461a      	mov	r2, r3
 80035f2:	4623      	mov	r3, r4
 80035f4:	f7fc fe4c 	bl	8000290 <__aeabi_uldivmod>
 80035f8:	4603      	mov	r3, r0
 80035fa:	460c      	mov	r4, r1
 80035fc:	461a      	mov	r2, r3
 80035fe:	4b8b      	ldr	r3, [pc, #556]	; (800382c <UART_SetConfig+0x384>)
 8003600:	fba3 1302 	umull	r1, r3, r3, r2
 8003604:	095b      	lsrs	r3, r3, #5
 8003606:	2164      	movs	r1, #100	; 0x64
 8003608:	fb01 f303 	mul.w	r3, r1, r3
 800360c:	1ad3      	subs	r3, r2, r3
 800360e:	00db      	lsls	r3, r3, #3
 8003610:	3332      	adds	r3, #50	; 0x32
 8003612:	4a86      	ldr	r2, [pc, #536]	; (800382c <UART_SetConfig+0x384>)
 8003614:	fba2 2303 	umull	r2, r3, r2, r3
 8003618:	095b      	lsrs	r3, r3, #5
 800361a:	005b      	lsls	r3, r3, #1
 800361c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003620:	4498      	add	r8, r3
 8003622:	68bb      	ldr	r3, [r7, #8]
 8003624:	461d      	mov	r5, r3
 8003626:	f04f 0600 	mov.w	r6, #0
 800362a:	46a9      	mov	r9, r5
 800362c:	46b2      	mov	sl, r6
 800362e:	eb19 0309 	adds.w	r3, r9, r9
 8003632:	eb4a 040a 	adc.w	r4, sl, sl
 8003636:	4699      	mov	r9, r3
 8003638:	46a2      	mov	sl, r4
 800363a:	eb19 0905 	adds.w	r9, r9, r5
 800363e:	eb4a 0a06 	adc.w	sl, sl, r6
 8003642:	f04f 0100 	mov.w	r1, #0
 8003646:	f04f 0200 	mov.w	r2, #0
 800364a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800364e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003652:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003656:	4689      	mov	r9, r1
 8003658:	4692      	mov	sl, r2
 800365a:	eb19 0005 	adds.w	r0, r9, r5
 800365e:	eb4a 0106 	adc.w	r1, sl, r6
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	461d      	mov	r5, r3
 8003668:	f04f 0600 	mov.w	r6, #0
 800366c:	196b      	adds	r3, r5, r5
 800366e:	eb46 0406 	adc.w	r4, r6, r6
 8003672:	461a      	mov	r2, r3
 8003674:	4623      	mov	r3, r4
 8003676:	f7fc fe0b 	bl	8000290 <__aeabi_uldivmod>
 800367a:	4603      	mov	r3, r0
 800367c:	460c      	mov	r4, r1
 800367e:	461a      	mov	r2, r3
 8003680:	4b6a      	ldr	r3, [pc, #424]	; (800382c <UART_SetConfig+0x384>)
 8003682:	fba3 1302 	umull	r1, r3, r3, r2
 8003686:	095b      	lsrs	r3, r3, #5
 8003688:	2164      	movs	r1, #100	; 0x64
 800368a:	fb01 f303 	mul.w	r3, r1, r3
 800368e:	1ad3      	subs	r3, r2, r3
 8003690:	00db      	lsls	r3, r3, #3
 8003692:	3332      	adds	r3, #50	; 0x32
 8003694:	4a65      	ldr	r2, [pc, #404]	; (800382c <UART_SetConfig+0x384>)
 8003696:	fba2 2303 	umull	r2, r3, r2, r3
 800369a:	095b      	lsrs	r3, r3, #5
 800369c:	f003 0207 	and.w	r2, r3, #7
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4442      	add	r2, r8
 80036a6:	609a      	str	r2, [r3, #8]
 80036a8:	e26f      	b.n	8003b8a <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80036aa:	f7ff fda5 	bl	80031f8 <HAL_RCC_GetPCLK1Freq>
 80036ae:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80036b0:	68bb      	ldr	r3, [r7, #8]
 80036b2:	461d      	mov	r5, r3
 80036b4:	f04f 0600 	mov.w	r6, #0
 80036b8:	46a8      	mov	r8, r5
 80036ba:	46b1      	mov	r9, r6
 80036bc:	eb18 0308 	adds.w	r3, r8, r8
 80036c0:	eb49 0409 	adc.w	r4, r9, r9
 80036c4:	4698      	mov	r8, r3
 80036c6:	46a1      	mov	r9, r4
 80036c8:	eb18 0805 	adds.w	r8, r8, r5
 80036cc:	eb49 0906 	adc.w	r9, r9, r6
 80036d0:	f04f 0100 	mov.w	r1, #0
 80036d4:	f04f 0200 	mov.w	r2, #0
 80036d8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80036dc:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80036e0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80036e4:	4688      	mov	r8, r1
 80036e6:	4691      	mov	r9, r2
 80036e8:	eb18 0005 	adds.w	r0, r8, r5
 80036ec:	eb49 0106 	adc.w	r1, r9, r6
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	461d      	mov	r5, r3
 80036f6:	f04f 0600 	mov.w	r6, #0
 80036fa:	196b      	adds	r3, r5, r5
 80036fc:	eb46 0406 	adc.w	r4, r6, r6
 8003700:	461a      	mov	r2, r3
 8003702:	4623      	mov	r3, r4
 8003704:	f7fc fdc4 	bl	8000290 <__aeabi_uldivmod>
 8003708:	4603      	mov	r3, r0
 800370a:	460c      	mov	r4, r1
 800370c:	461a      	mov	r2, r3
 800370e:	4b47      	ldr	r3, [pc, #284]	; (800382c <UART_SetConfig+0x384>)
 8003710:	fba3 2302 	umull	r2, r3, r3, r2
 8003714:	095b      	lsrs	r3, r3, #5
 8003716:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800371a:	68bb      	ldr	r3, [r7, #8]
 800371c:	461d      	mov	r5, r3
 800371e:	f04f 0600 	mov.w	r6, #0
 8003722:	46a9      	mov	r9, r5
 8003724:	46b2      	mov	sl, r6
 8003726:	eb19 0309 	adds.w	r3, r9, r9
 800372a:	eb4a 040a 	adc.w	r4, sl, sl
 800372e:	4699      	mov	r9, r3
 8003730:	46a2      	mov	sl, r4
 8003732:	eb19 0905 	adds.w	r9, r9, r5
 8003736:	eb4a 0a06 	adc.w	sl, sl, r6
 800373a:	f04f 0100 	mov.w	r1, #0
 800373e:	f04f 0200 	mov.w	r2, #0
 8003742:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003746:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800374a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800374e:	4689      	mov	r9, r1
 8003750:	4692      	mov	sl, r2
 8003752:	eb19 0005 	adds.w	r0, r9, r5
 8003756:	eb4a 0106 	adc.w	r1, sl, r6
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	685b      	ldr	r3, [r3, #4]
 800375e:	461d      	mov	r5, r3
 8003760:	f04f 0600 	mov.w	r6, #0
 8003764:	196b      	adds	r3, r5, r5
 8003766:	eb46 0406 	adc.w	r4, r6, r6
 800376a:	461a      	mov	r2, r3
 800376c:	4623      	mov	r3, r4
 800376e:	f7fc fd8f 	bl	8000290 <__aeabi_uldivmod>
 8003772:	4603      	mov	r3, r0
 8003774:	460c      	mov	r4, r1
 8003776:	461a      	mov	r2, r3
 8003778:	4b2c      	ldr	r3, [pc, #176]	; (800382c <UART_SetConfig+0x384>)
 800377a:	fba3 1302 	umull	r1, r3, r3, r2
 800377e:	095b      	lsrs	r3, r3, #5
 8003780:	2164      	movs	r1, #100	; 0x64
 8003782:	fb01 f303 	mul.w	r3, r1, r3
 8003786:	1ad3      	subs	r3, r2, r3
 8003788:	00db      	lsls	r3, r3, #3
 800378a:	3332      	adds	r3, #50	; 0x32
 800378c:	4a27      	ldr	r2, [pc, #156]	; (800382c <UART_SetConfig+0x384>)
 800378e:	fba2 2303 	umull	r2, r3, r2, r3
 8003792:	095b      	lsrs	r3, r3, #5
 8003794:	005b      	lsls	r3, r3, #1
 8003796:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800379a:	4498      	add	r8, r3
 800379c:	68bb      	ldr	r3, [r7, #8]
 800379e:	461d      	mov	r5, r3
 80037a0:	f04f 0600 	mov.w	r6, #0
 80037a4:	46a9      	mov	r9, r5
 80037a6:	46b2      	mov	sl, r6
 80037a8:	eb19 0309 	adds.w	r3, r9, r9
 80037ac:	eb4a 040a 	adc.w	r4, sl, sl
 80037b0:	4699      	mov	r9, r3
 80037b2:	46a2      	mov	sl, r4
 80037b4:	eb19 0905 	adds.w	r9, r9, r5
 80037b8:	eb4a 0a06 	adc.w	sl, sl, r6
 80037bc:	f04f 0100 	mov.w	r1, #0
 80037c0:	f04f 0200 	mov.w	r2, #0
 80037c4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80037c8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80037cc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80037d0:	4689      	mov	r9, r1
 80037d2:	4692      	mov	sl, r2
 80037d4:	eb19 0005 	adds.w	r0, r9, r5
 80037d8:	eb4a 0106 	adc.w	r1, sl, r6
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	685b      	ldr	r3, [r3, #4]
 80037e0:	461d      	mov	r5, r3
 80037e2:	f04f 0600 	mov.w	r6, #0
 80037e6:	196b      	adds	r3, r5, r5
 80037e8:	eb46 0406 	adc.w	r4, r6, r6
 80037ec:	461a      	mov	r2, r3
 80037ee:	4623      	mov	r3, r4
 80037f0:	f7fc fd4e 	bl	8000290 <__aeabi_uldivmod>
 80037f4:	4603      	mov	r3, r0
 80037f6:	460c      	mov	r4, r1
 80037f8:	461a      	mov	r2, r3
 80037fa:	4b0c      	ldr	r3, [pc, #48]	; (800382c <UART_SetConfig+0x384>)
 80037fc:	fba3 1302 	umull	r1, r3, r3, r2
 8003800:	095b      	lsrs	r3, r3, #5
 8003802:	2164      	movs	r1, #100	; 0x64
 8003804:	fb01 f303 	mul.w	r3, r1, r3
 8003808:	1ad3      	subs	r3, r2, r3
 800380a:	00db      	lsls	r3, r3, #3
 800380c:	3332      	adds	r3, #50	; 0x32
 800380e:	4a07      	ldr	r2, [pc, #28]	; (800382c <UART_SetConfig+0x384>)
 8003810:	fba2 2303 	umull	r2, r3, r2, r3
 8003814:	095b      	lsrs	r3, r3, #5
 8003816:	f003 0207 	and.w	r2, r3, #7
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	4442      	add	r2, r8
 8003820:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8003822:	e1b2      	b.n	8003b8a <UART_SetConfig+0x6e2>
 8003824:	40011000 	.word	0x40011000
 8003828:	40011400 	.word	0x40011400
 800382c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4ad7      	ldr	r2, [pc, #860]	; (8003b94 <UART_SetConfig+0x6ec>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d005      	beq.n	8003846 <UART_SetConfig+0x39e>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	4ad6      	ldr	r2, [pc, #856]	; (8003b98 <UART_SetConfig+0x6f0>)
 8003840:	4293      	cmp	r3, r2
 8003842:	f040 80d1 	bne.w	80039e8 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8003846:	f7ff fceb 	bl	8003220 <HAL_RCC_GetPCLK2Freq>
 800384a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800384c:	68bb      	ldr	r3, [r7, #8]
 800384e:	469a      	mov	sl, r3
 8003850:	f04f 0b00 	mov.w	fp, #0
 8003854:	46d0      	mov	r8, sl
 8003856:	46d9      	mov	r9, fp
 8003858:	eb18 0308 	adds.w	r3, r8, r8
 800385c:	eb49 0409 	adc.w	r4, r9, r9
 8003860:	4698      	mov	r8, r3
 8003862:	46a1      	mov	r9, r4
 8003864:	eb18 080a 	adds.w	r8, r8, sl
 8003868:	eb49 090b 	adc.w	r9, r9, fp
 800386c:	f04f 0100 	mov.w	r1, #0
 8003870:	f04f 0200 	mov.w	r2, #0
 8003874:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003878:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800387c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003880:	4688      	mov	r8, r1
 8003882:	4691      	mov	r9, r2
 8003884:	eb1a 0508 	adds.w	r5, sl, r8
 8003888:	eb4b 0609 	adc.w	r6, fp, r9
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	685b      	ldr	r3, [r3, #4]
 8003890:	4619      	mov	r1, r3
 8003892:	f04f 0200 	mov.w	r2, #0
 8003896:	f04f 0300 	mov.w	r3, #0
 800389a:	f04f 0400 	mov.w	r4, #0
 800389e:	0094      	lsls	r4, r2, #2
 80038a0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80038a4:	008b      	lsls	r3, r1, #2
 80038a6:	461a      	mov	r2, r3
 80038a8:	4623      	mov	r3, r4
 80038aa:	4628      	mov	r0, r5
 80038ac:	4631      	mov	r1, r6
 80038ae:	f7fc fcef 	bl	8000290 <__aeabi_uldivmod>
 80038b2:	4603      	mov	r3, r0
 80038b4:	460c      	mov	r4, r1
 80038b6:	461a      	mov	r2, r3
 80038b8:	4bb8      	ldr	r3, [pc, #736]	; (8003b9c <UART_SetConfig+0x6f4>)
 80038ba:	fba3 2302 	umull	r2, r3, r3, r2
 80038be:	095b      	lsrs	r3, r3, #5
 80038c0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80038c4:	68bb      	ldr	r3, [r7, #8]
 80038c6:	469b      	mov	fp, r3
 80038c8:	f04f 0c00 	mov.w	ip, #0
 80038cc:	46d9      	mov	r9, fp
 80038ce:	46e2      	mov	sl, ip
 80038d0:	eb19 0309 	adds.w	r3, r9, r9
 80038d4:	eb4a 040a 	adc.w	r4, sl, sl
 80038d8:	4699      	mov	r9, r3
 80038da:	46a2      	mov	sl, r4
 80038dc:	eb19 090b 	adds.w	r9, r9, fp
 80038e0:	eb4a 0a0c 	adc.w	sl, sl, ip
 80038e4:	f04f 0100 	mov.w	r1, #0
 80038e8:	f04f 0200 	mov.w	r2, #0
 80038ec:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80038f0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80038f4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80038f8:	4689      	mov	r9, r1
 80038fa:	4692      	mov	sl, r2
 80038fc:	eb1b 0509 	adds.w	r5, fp, r9
 8003900:	eb4c 060a 	adc.w	r6, ip, sl
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	685b      	ldr	r3, [r3, #4]
 8003908:	4619      	mov	r1, r3
 800390a:	f04f 0200 	mov.w	r2, #0
 800390e:	f04f 0300 	mov.w	r3, #0
 8003912:	f04f 0400 	mov.w	r4, #0
 8003916:	0094      	lsls	r4, r2, #2
 8003918:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800391c:	008b      	lsls	r3, r1, #2
 800391e:	461a      	mov	r2, r3
 8003920:	4623      	mov	r3, r4
 8003922:	4628      	mov	r0, r5
 8003924:	4631      	mov	r1, r6
 8003926:	f7fc fcb3 	bl	8000290 <__aeabi_uldivmod>
 800392a:	4603      	mov	r3, r0
 800392c:	460c      	mov	r4, r1
 800392e:	461a      	mov	r2, r3
 8003930:	4b9a      	ldr	r3, [pc, #616]	; (8003b9c <UART_SetConfig+0x6f4>)
 8003932:	fba3 1302 	umull	r1, r3, r3, r2
 8003936:	095b      	lsrs	r3, r3, #5
 8003938:	2164      	movs	r1, #100	; 0x64
 800393a:	fb01 f303 	mul.w	r3, r1, r3
 800393e:	1ad3      	subs	r3, r2, r3
 8003940:	011b      	lsls	r3, r3, #4
 8003942:	3332      	adds	r3, #50	; 0x32
 8003944:	4a95      	ldr	r2, [pc, #596]	; (8003b9c <UART_SetConfig+0x6f4>)
 8003946:	fba2 2303 	umull	r2, r3, r2, r3
 800394a:	095b      	lsrs	r3, r3, #5
 800394c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003950:	4498      	add	r8, r3
 8003952:	68bb      	ldr	r3, [r7, #8]
 8003954:	469b      	mov	fp, r3
 8003956:	f04f 0c00 	mov.w	ip, #0
 800395a:	46d9      	mov	r9, fp
 800395c:	46e2      	mov	sl, ip
 800395e:	eb19 0309 	adds.w	r3, r9, r9
 8003962:	eb4a 040a 	adc.w	r4, sl, sl
 8003966:	4699      	mov	r9, r3
 8003968:	46a2      	mov	sl, r4
 800396a:	eb19 090b 	adds.w	r9, r9, fp
 800396e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003972:	f04f 0100 	mov.w	r1, #0
 8003976:	f04f 0200 	mov.w	r2, #0
 800397a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800397e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003982:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003986:	4689      	mov	r9, r1
 8003988:	4692      	mov	sl, r2
 800398a:	eb1b 0509 	adds.w	r5, fp, r9
 800398e:	eb4c 060a 	adc.w	r6, ip, sl
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	685b      	ldr	r3, [r3, #4]
 8003996:	4619      	mov	r1, r3
 8003998:	f04f 0200 	mov.w	r2, #0
 800399c:	f04f 0300 	mov.w	r3, #0
 80039a0:	f04f 0400 	mov.w	r4, #0
 80039a4:	0094      	lsls	r4, r2, #2
 80039a6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80039aa:	008b      	lsls	r3, r1, #2
 80039ac:	461a      	mov	r2, r3
 80039ae:	4623      	mov	r3, r4
 80039b0:	4628      	mov	r0, r5
 80039b2:	4631      	mov	r1, r6
 80039b4:	f7fc fc6c 	bl	8000290 <__aeabi_uldivmod>
 80039b8:	4603      	mov	r3, r0
 80039ba:	460c      	mov	r4, r1
 80039bc:	461a      	mov	r2, r3
 80039be:	4b77      	ldr	r3, [pc, #476]	; (8003b9c <UART_SetConfig+0x6f4>)
 80039c0:	fba3 1302 	umull	r1, r3, r3, r2
 80039c4:	095b      	lsrs	r3, r3, #5
 80039c6:	2164      	movs	r1, #100	; 0x64
 80039c8:	fb01 f303 	mul.w	r3, r1, r3
 80039cc:	1ad3      	subs	r3, r2, r3
 80039ce:	011b      	lsls	r3, r3, #4
 80039d0:	3332      	adds	r3, #50	; 0x32
 80039d2:	4a72      	ldr	r2, [pc, #456]	; (8003b9c <UART_SetConfig+0x6f4>)
 80039d4:	fba2 2303 	umull	r2, r3, r2, r3
 80039d8:	095b      	lsrs	r3, r3, #5
 80039da:	f003 020f 	and.w	r2, r3, #15
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4442      	add	r2, r8
 80039e4:	609a      	str	r2, [r3, #8]
 80039e6:	e0d0      	b.n	8003b8a <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80039e8:	f7ff fc06 	bl	80031f8 <HAL_RCC_GetPCLK1Freq>
 80039ec:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80039ee:	68bb      	ldr	r3, [r7, #8]
 80039f0:	469a      	mov	sl, r3
 80039f2:	f04f 0b00 	mov.w	fp, #0
 80039f6:	46d0      	mov	r8, sl
 80039f8:	46d9      	mov	r9, fp
 80039fa:	eb18 0308 	adds.w	r3, r8, r8
 80039fe:	eb49 0409 	adc.w	r4, r9, r9
 8003a02:	4698      	mov	r8, r3
 8003a04:	46a1      	mov	r9, r4
 8003a06:	eb18 080a 	adds.w	r8, r8, sl
 8003a0a:	eb49 090b 	adc.w	r9, r9, fp
 8003a0e:	f04f 0100 	mov.w	r1, #0
 8003a12:	f04f 0200 	mov.w	r2, #0
 8003a16:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003a1a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003a1e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003a22:	4688      	mov	r8, r1
 8003a24:	4691      	mov	r9, r2
 8003a26:	eb1a 0508 	adds.w	r5, sl, r8
 8003a2a:	eb4b 0609 	adc.w	r6, fp, r9
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	685b      	ldr	r3, [r3, #4]
 8003a32:	4619      	mov	r1, r3
 8003a34:	f04f 0200 	mov.w	r2, #0
 8003a38:	f04f 0300 	mov.w	r3, #0
 8003a3c:	f04f 0400 	mov.w	r4, #0
 8003a40:	0094      	lsls	r4, r2, #2
 8003a42:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003a46:	008b      	lsls	r3, r1, #2
 8003a48:	461a      	mov	r2, r3
 8003a4a:	4623      	mov	r3, r4
 8003a4c:	4628      	mov	r0, r5
 8003a4e:	4631      	mov	r1, r6
 8003a50:	f7fc fc1e 	bl	8000290 <__aeabi_uldivmod>
 8003a54:	4603      	mov	r3, r0
 8003a56:	460c      	mov	r4, r1
 8003a58:	461a      	mov	r2, r3
 8003a5a:	4b50      	ldr	r3, [pc, #320]	; (8003b9c <UART_SetConfig+0x6f4>)
 8003a5c:	fba3 2302 	umull	r2, r3, r3, r2
 8003a60:	095b      	lsrs	r3, r3, #5
 8003a62:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003a66:	68bb      	ldr	r3, [r7, #8]
 8003a68:	469b      	mov	fp, r3
 8003a6a:	f04f 0c00 	mov.w	ip, #0
 8003a6e:	46d9      	mov	r9, fp
 8003a70:	46e2      	mov	sl, ip
 8003a72:	eb19 0309 	adds.w	r3, r9, r9
 8003a76:	eb4a 040a 	adc.w	r4, sl, sl
 8003a7a:	4699      	mov	r9, r3
 8003a7c:	46a2      	mov	sl, r4
 8003a7e:	eb19 090b 	adds.w	r9, r9, fp
 8003a82:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003a86:	f04f 0100 	mov.w	r1, #0
 8003a8a:	f04f 0200 	mov.w	r2, #0
 8003a8e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003a92:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003a96:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003a9a:	4689      	mov	r9, r1
 8003a9c:	4692      	mov	sl, r2
 8003a9e:	eb1b 0509 	adds.w	r5, fp, r9
 8003aa2:	eb4c 060a 	adc.w	r6, ip, sl
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	685b      	ldr	r3, [r3, #4]
 8003aaa:	4619      	mov	r1, r3
 8003aac:	f04f 0200 	mov.w	r2, #0
 8003ab0:	f04f 0300 	mov.w	r3, #0
 8003ab4:	f04f 0400 	mov.w	r4, #0
 8003ab8:	0094      	lsls	r4, r2, #2
 8003aba:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003abe:	008b      	lsls	r3, r1, #2
 8003ac0:	461a      	mov	r2, r3
 8003ac2:	4623      	mov	r3, r4
 8003ac4:	4628      	mov	r0, r5
 8003ac6:	4631      	mov	r1, r6
 8003ac8:	f7fc fbe2 	bl	8000290 <__aeabi_uldivmod>
 8003acc:	4603      	mov	r3, r0
 8003ace:	460c      	mov	r4, r1
 8003ad0:	461a      	mov	r2, r3
 8003ad2:	4b32      	ldr	r3, [pc, #200]	; (8003b9c <UART_SetConfig+0x6f4>)
 8003ad4:	fba3 1302 	umull	r1, r3, r3, r2
 8003ad8:	095b      	lsrs	r3, r3, #5
 8003ada:	2164      	movs	r1, #100	; 0x64
 8003adc:	fb01 f303 	mul.w	r3, r1, r3
 8003ae0:	1ad3      	subs	r3, r2, r3
 8003ae2:	011b      	lsls	r3, r3, #4
 8003ae4:	3332      	adds	r3, #50	; 0x32
 8003ae6:	4a2d      	ldr	r2, [pc, #180]	; (8003b9c <UART_SetConfig+0x6f4>)
 8003ae8:	fba2 2303 	umull	r2, r3, r2, r3
 8003aec:	095b      	lsrs	r3, r3, #5
 8003aee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003af2:	4498      	add	r8, r3
 8003af4:	68bb      	ldr	r3, [r7, #8]
 8003af6:	469b      	mov	fp, r3
 8003af8:	f04f 0c00 	mov.w	ip, #0
 8003afc:	46d9      	mov	r9, fp
 8003afe:	46e2      	mov	sl, ip
 8003b00:	eb19 0309 	adds.w	r3, r9, r9
 8003b04:	eb4a 040a 	adc.w	r4, sl, sl
 8003b08:	4699      	mov	r9, r3
 8003b0a:	46a2      	mov	sl, r4
 8003b0c:	eb19 090b 	adds.w	r9, r9, fp
 8003b10:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003b14:	f04f 0100 	mov.w	r1, #0
 8003b18:	f04f 0200 	mov.w	r2, #0
 8003b1c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003b20:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003b24:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003b28:	4689      	mov	r9, r1
 8003b2a:	4692      	mov	sl, r2
 8003b2c:	eb1b 0509 	adds.w	r5, fp, r9
 8003b30:	eb4c 060a 	adc.w	r6, ip, sl
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	685b      	ldr	r3, [r3, #4]
 8003b38:	4619      	mov	r1, r3
 8003b3a:	f04f 0200 	mov.w	r2, #0
 8003b3e:	f04f 0300 	mov.w	r3, #0
 8003b42:	f04f 0400 	mov.w	r4, #0
 8003b46:	0094      	lsls	r4, r2, #2
 8003b48:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003b4c:	008b      	lsls	r3, r1, #2
 8003b4e:	461a      	mov	r2, r3
 8003b50:	4623      	mov	r3, r4
 8003b52:	4628      	mov	r0, r5
 8003b54:	4631      	mov	r1, r6
 8003b56:	f7fc fb9b 	bl	8000290 <__aeabi_uldivmod>
 8003b5a:	4603      	mov	r3, r0
 8003b5c:	460c      	mov	r4, r1
 8003b5e:	461a      	mov	r2, r3
 8003b60:	4b0e      	ldr	r3, [pc, #56]	; (8003b9c <UART_SetConfig+0x6f4>)
 8003b62:	fba3 1302 	umull	r1, r3, r3, r2
 8003b66:	095b      	lsrs	r3, r3, #5
 8003b68:	2164      	movs	r1, #100	; 0x64
 8003b6a:	fb01 f303 	mul.w	r3, r1, r3
 8003b6e:	1ad3      	subs	r3, r2, r3
 8003b70:	011b      	lsls	r3, r3, #4
 8003b72:	3332      	adds	r3, #50	; 0x32
 8003b74:	4a09      	ldr	r2, [pc, #36]	; (8003b9c <UART_SetConfig+0x6f4>)
 8003b76:	fba2 2303 	umull	r2, r3, r2, r3
 8003b7a:	095b      	lsrs	r3, r3, #5
 8003b7c:	f003 020f 	and.w	r2, r3, #15
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	4442      	add	r2, r8
 8003b86:	609a      	str	r2, [r3, #8]
}
 8003b88:	e7ff      	b.n	8003b8a <UART_SetConfig+0x6e2>
 8003b8a:	bf00      	nop
 8003b8c:	3714      	adds	r7, #20
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003b94:	40011000 	.word	0x40011000
 8003b98:	40011400 	.word	0x40011400
 8003b9c:	51eb851f 	.word	0x51eb851f

08003ba0 <__errno>:
 8003ba0:	4b01      	ldr	r3, [pc, #4]	; (8003ba8 <__errno+0x8>)
 8003ba2:	6818      	ldr	r0, [r3, #0]
 8003ba4:	4770      	bx	lr
 8003ba6:	bf00      	nop
 8003ba8:	2000000c 	.word	0x2000000c

08003bac <__libc_init_array>:
 8003bac:	b570      	push	{r4, r5, r6, lr}
 8003bae:	4e0d      	ldr	r6, [pc, #52]	; (8003be4 <__libc_init_array+0x38>)
 8003bb0:	4c0d      	ldr	r4, [pc, #52]	; (8003be8 <__libc_init_array+0x3c>)
 8003bb2:	1ba4      	subs	r4, r4, r6
 8003bb4:	10a4      	asrs	r4, r4, #2
 8003bb6:	2500      	movs	r5, #0
 8003bb8:	42a5      	cmp	r5, r4
 8003bba:	d109      	bne.n	8003bd0 <__libc_init_array+0x24>
 8003bbc:	4e0b      	ldr	r6, [pc, #44]	; (8003bec <__libc_init_array+0x40>)
 8003bbe:	4c0c      	ldr	r4, [pc, #48]	; (8003bf0 <__libc_init_array+0x44>)
 8003bc0:	f000 fc26 	bl	8004410 <_init>
 8003bc4:	1ba4      	subs	r4, r4, r6
 8003bc6:	10a4      	asrs	r4, r4, #2
 8003bc8:	2500      	movs	r5, #0
 8003bca:	42a5      	cmp	r5, r4
 8003bcc:	d105      	bne.n	8003bda <__libc_init_array+0x2e>
 8003bce:	bd70      	pop	{r4, r5, r6, pc}
 8003bd0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003bd4:	4798      	blx	r3
 8003bd6:	3501      	adds	r5, #1
 8003bd8:	e7ee      	b.n	8003bb8 <__libc_init_array+0xc>
 8003bda:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003bde:	4798      	blx	r3
 8003be0:	3501      	adds	r5, #1
 8003be2:	e7f2      	b.n	8003bca <__libc_init_array+0x1e>
 8003be4:	08004710 	.word	0x08004710
 8003be8:	08004710 	.word	0x08004710
 8003bec:	08004710 	.word	0x08004710
 8003bf0:	08004714 	.word	0x08004714

08003bf4 <memcpy>:
 8003bf4:	b510      	push	{r4, lr}
 8003bf6:	1e43      	subs	r3, r0, #1
 8003bf8:	440a      	add	r2, r1
 8003bfa:	4291      	cmp	r1, r2
 8003bfc:	d100      	bne.n	8003c00 <memcpy+0xc>
 8003bfe:	bd10      	pop	{r4, pc}
 8003c00:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003c04:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003c08:	e7f7      	b.n	8003bfa <memcpy+0x6>

08003c0a <memmove>:
 8003c0a:	4288      	cmp	r0, r1
 8003c0c:	b510      	push	{r4, lr}
 8003c0e:	eb01 0302 	add.w	r3, r1, r2
 8003c12:	d807      	bhi.n	8003c24 <memmove+0x1a>
 8003c14:	1e42      	subs	r2, r0, #1
 8003c16:	4299      	cmp	r1, r3
 8003c18:	d00a      	beq.n	8003c30 <memmove+0x26>
 8003c1a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003c1e:	f802 4f01 	strb.w	r4, [r2, #1]!
 8003c22:	e7f8      	b.n	8003c16 <memmove+0xc>
 8003c24:	4283      	cmp	r3, r0
 8003c26:	d9f5      	bls.n	8003c14 <memmove+0xa>
 8003c28:	1881      	adds	r1, r0, r2
 8003c2a:	1ad2      	subs	r2, r2, r3
 8003c2c:	42d3      	cmn	r3, r2
 8003c2e:	d100      	bne.n	8003c32 <memmove+0x28>
 8003c30:	bd10      	pop	{r4, pc}
 8003c32:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003c36:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8003c3a:	e7f7      	b.n	8003c2c <memmove+0x22>

08003c3c <memset>:
 8003c3c:	4402      	add	r2, r0
 8003c3e:	4603      	mov	r3, r0
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d100      	bne.n	8003c46 <memset+0xa>
 8003c44:	4770      	bx	lr
 8003c46:	f803 1b01 	strb.w	r1, [r3], #1
 8003c4a:	e7f9      	b.n	8003c40 <memset+0x4>

08003c4c <_vsiprintf_r>:
 8003c4c:	b500      	push	{lr}
 8003c4e:	b09b      	sub	sp, #108	; 0x6c
 8003c50:	9100      	str	r1, [sp, #0]
 8003c52:	9104      	str	r1, [sp, #16]
 8003c54:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003c58:	9105      	str	r1, [sp, #20]
 8003c5a:	9102      	str	r1, [sp, #8]
 8003c5c:	4905      	ldr	r1, [pc, #20]	; (8003c74 <_vsiprintf_r+0x28>)
 8003c5e:	9103      	str	r1, [sp, #12]
 8003c60:	4669      	mov	r1, sp
 8003c62:	f000 f86d 	bl	8003d40 <_svfiprintf_r>
 8003c66:	9b00      	ldr	r3, [sp, #0]
 8003c68:	2200      	movs	r2, #0
 8003c6a:	701a      	strb	r2, [r3, #0]
 8003c6c:	b01b      	add	sp, #108	; 0x6c
 8003c6e:	f85d fb04 	ldr.w	pc, [sp], #4
 8003c72:	bf00      	nop
 8003c74:	ffff0208 	.word	0xffff0208

08003c78 <vsiprintf>:
 8003c78:	4613      	mov	r3, r2
 8003c7a:	460a      	mov	r2, r1
 8003c7c:	4601      	mov	r1, r0
 8003c7e:	4802      	ldr	r0, [pc, #8]	; (8003c88 <vsiprintf+0x10>)
 8003c80:	6800      	ldr	r0, [r0, #0]
 8003c82:	f7ff bfe3 	b.w	8003c4c <_vsiprintf_r>
 8003c86:	bf00      	nop
 8003c88:	2000000c 	.word	0x2000000c

08003c8c <__ssputs_r>:
 8003c8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003c90:	688e      	ldr	r6, [r1, #8]
 8003c92:	429e      	cmp	r6, r3
 8003c94:	4682      	mov	sl, r0
 8003c96:	460c      	mov	r4, r1
 8003c98:	4690      	mov	r8, r2
 8003c9a:	4699      	mov	r9, r3
 8003c9c:	d837      	bhi.n	8003d0e <__ssputs_r+0x82>
 8003c9e:	898a      	ldrh	r2, [r1, #12]
 8003ca0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003ca4:	d031      	beq.n	8003d0a <__ssputs_r+0x7e>
 8003ca6:	6825      	ldr	r5, [r4, #0]
 8003ca8:	6909      	ldr	r1, [r1, #16]
 8003caa:	1a6f      	subs	r7, r5, r1
 8003cac:	6965      	ldr	r5, [r4, #20]
 8003cae:	2302      	movs	r3, #2
 8003cb0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003cb4:	fb95 f5f3 	sdiv	r5, r5, r3
 8003cb8:	f109 0301 	add.w	r3, r9, #1
 8003cbc:	443b      	add	r3, r7
 8003cbe:	429d      	cmp	r5, r3
 8003cc0:	bf38      	it	cc
 8003cc2:	461d      	movcc	r5, r3
 8003cc4:	0553      	lsls	r3, r2, #21
 8003cc6:	d530      	bpl.n	8003d2a <__ssputs_r+0x9e>
 8003cc8:	4629      	mov	r1, r5
 8003cca:	f000 fb07 	bl	80042dc <_malloc_r>
 8003cce:	4606      	mov	r6, r0
 8003cd0:	b950      	cbnz	r0, 8003ce8 <__ssputs_r+0x5c>
 8003cd2:	230c      	movs	r3, #12
 8003cd4:	f8ca 3000 	str.w	r3, [sl]
 8003cd8:	89a3      	ldrh	r3, [r4, #12]
 8003cda:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003cde:	81a3      	strh	r3, [r4, #12]
 8003ce0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003ce4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ce8:	463a      	mov	r2, r7
 8003cea:	6921      	ldr	r1, [r4, #16]
 8003cec:	f7ff ff82 	bl	8003bf4 <memcpy>
 8003cf0:	89a3      	ldrh	r3, [r4, #12]
 8003cf2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003cf6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003cfa:	81a3      	strh	r3, [r4, #12]
 8003cfc:	6126      	str	r6, [r4, #16]
 8003cfe:	6165      	str	r5, [r4, #20]
 8003d00:	443e      	add	r6, r7
 8003d02:	1bed      	subs	r5, r5, r7
 8003d04:	6026      	str	r6, [r4, #0]
 8003d06:	60a5      	str	r5, [r4, #8]
 8003d08:	464e      	mov	r6, r9
 8003d0a:	454e      	cmp	r6, r9
 8003d0c:	d900      	bls.n	8003d10 <__ssputs_r+0x84>
 8003d0e:	464e      	mov	r6, r9
 8003d10:	4632      	mov	r2, r6
 8003d12:	4641      	mov	r1, r8
 8003d14:	6820      	ldr	r0, [r4, #0]
 8003d16:	f7ff ff78 	bl	8003c0a <memmove>
 8003d1a:	68a3      	ldr	r3, [r4, #8]
 8003d1c:	1b9b      	subs	r3, r3, r6
 8003d1e:	60a3      	str	r3, [r4, #8]
 8003d20:	6823      	ldr	r3, [r4, #0]
 8003d22:	441e      	add	r6, r3
 8003d24:	6026      	str	r6, [r4, #0]
 8003d26:	2000      	movs	r0, #0
 8003d28:	e7dc      	b.n	8003ce4 <__ssputs_r+0x58>
 8003d2a:	462a      	mov	r2, r5
 8003d2c:	f000 fb30 	bl	8004390 <_realloc_r>
 8003d30:	4606      	mov	r6, r0
 8003d32:	2800      	cmp	r0, #0
 8003d34:	d1e2      	bne.n	8003cfc <__ssputs_r+0x70>
 8003d36:	6921      	ldr	r1, [r4, #16]
 8003d38:	4650      	mov	r0, sl
 8003d3a:	f000 fa81 	bl	8004240 <_free_r>
 8003d3e:	e7c8      	b.n	8003cd2 <__ssputs_r+0x46>

08003d40 <_svfiprintf_r>:
 8003d40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d44:	461d      	mov	r5, r3
 8003d46:	898b      	ldrh	r3, [r1, #12]
 8003d48:	061f      	lsls	r7, r3, #24
 8003d4a:	b09d      	sub	sp, #116	; 0x74
 8003d4c:	4680      	mov	r8, r0
 8003d4e:	460c      	mov	r4, r1
 8003d50:	4616      	mov	r6, r2
 8003d52:	d50f      	bpl.n	8003d74 <_svfiprintf_r+0x34>
 8003d54:	690b      	ldr	r3, [r1, #16]
 8003d56:	b96b      	cbnz	r3, 8003d74 <_svfiprintf_r+0x34>
 8003d58:	2140      	movs	r1, #64	; 0x40
 8003d5a:	f000 fabf 	bl	80042dc <_malloc_r>
 8003d5e:	6020      	str	r0, [r4, #0]
 8003d60:	6120      	str	r0, [r4, #16]
 8003d62:	b928      	cbnz	r0, 8003d70 <_svfiprintf_r+0x30>
 8003d64:	230c      	movs	r3, #12
 8003d66:	f8c8 3000 	str.w	r3, [r8]
 8003d6a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003d6e:	e0c8      	b.n	8003f02 <_svfiprintf_r+0x1c2>
 8003d70:	2340      	movs	r3, #64	; 0x40
 8003d72:	6163      	str	r3, [r4, #20]
 8003d74:	2300      	movs	r3, #0
 8003d76:	9309      	str	r3, [sp, #36]	; 0x24
 8003d78:	2320      	movs	r3, #32
 8003d7a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003d7e:	2330      	movs	r3, #48	; 0x30
 8003d80:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003d84:	9503      	str	r5, [sp, #12]
 8003d86:	f04f 0b01 	mov.w	fp, #1
 8003d8a:	4637      	mov	r7, r6
 8003d8c:	463d      	mov	r5, r7
 8003d8e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8003d92:	b10b      	cbz	r3, 8003d98 <_svfiprintf_r+0x58>
 8003d94:	2b25      	cmp	r3, #37	; 0x25
 8003d96:	d13e      	bne.n	8003e16 <_svfiprintf_r+0xd6>
 8003d98:	ebb7 0a06 	subs.w	sl, r7, r6
 8003d9c:	d00b      	beq.n	8003db6 <_svfiprintf_r+0x76>
 8003d9e:	4653      	mov	r3, sl
 8003da0:	4632      	mov	r2, r6
 8003da2:	4621      	mov	r1, r4
 8003da4:	4640      	mov	r0, r8
 8003da6:	f7ff ff71 	bl	8003c8c <__ssputs_r>
 8003daa:	3001      	adds	r0, #1
 8003dac:	f000 80a4 	beq.w	8003ef8 <_svfiprintf_r+0x1b8>
 8003db0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003db2:	4453      	add	r3, sl
 8003db4:	9309      	str	r3, [sp, #36]	; 0x24
 8003db6:	783b      	ldrb	r3, [r7, #0]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	f000 809d 	beq.w	8003ef8 <_svfiprintf_r+0x1b8>
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003dc4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003dc8:	9304      	str	r3, [sp, #16]
 8003dca:	9307      	str	r3, [sp, #28]
 8003dcc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003dd0:	931a      	str	r3, [sp, #104]	; 0x68
 8003dd2:	462f      	mov	r7, r5
 8003dd4:	2205      	movs	r2, #5
 8003dd6:	f817 1b01 	ldrb.w	r1, [r7], #1
 8003dda:	4850      	ldr	r0, [pc, #320]	; (8003f1c <_svfiprintf_r+0x1dc>)
 8003ddc:	f7fc fa08 	bl	80001f0 <memchr>
 8003de0:	9b04      	ldr	r3, [sp, #16]
 8003de2:	b9d0      	cbnz	r0, 8003e1a <_svfiprintf_r+0xda>
 8003de4:	06d9      	lsls	r1, r3, #27
 8003de6:	bf44      	itt	mi
 8003de8:	2220      	movmi	r2, #32
 8003dea:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003dee:	071a      	lsls	r2, r3, #28
 8003df0:	bf44      	itt	mi
 8003df2:	222b      	movmi	r2, #43	; 0x2b
 8003df4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003df8:	782a      	ldrb	r2, [r5, #0]
 8003dfa:	2a2a      	cmp	r2, #42	; 0x2a
 8003dfc:	d015      	beq.n	8003e2a <_svfiprintf_r+0xea>
 8003dfe:	9a07      	ldr	r2, [sp, #28]
 8003e00:	462f      	mov	r7, r5
 8003e02:	2000      	movs	r0, #0
 8003e04:	250a      	movs	r5, #10
 8003e06:	4639      	mov	r1, r7
 8003e08:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003e0c:	3b30      	subs	r3, #48	; 0x30
 8003e0e:	2b09      	cmp	r3, #9
 8003e10:	d94d      	bls.n	8003eae <_svfiprintf_r+0x16e>
 8003e12:	b1b8      	cbz	r0, 8003e44 <_svfiprintf_r+0x104>
 8003e14:	e00f      	b.n	8003e36 <_svfiprintf_r+0xf6>
 8003e16:	462f      	mov	r7, r5
 8003e18:	e7b8      	b.n	8003d8c <_svfiprintf_r+0x4c>
 8003e1a:	4a40      	ldr	r2, [pc, #256]	; (8003f1c <_svfiprintf_r+0x1dc>)
 8003e1c:	1a80      	subs	r0, r0, r2
 8003e1e:	fa0b f000 	lsl.w	r0, fp, r0
 8003e22:	4318      	orrs	r0, r3
 8003e24:	9004      	str	r0, [sp, #16]
 8003e26:	463d      	mov	r5, r7
 8003e28:	e7d3      	b.n	8003dd2 <_svfiprintf_r+0x92>
 8003e2a:	9a03      	ldr	r2, [sp, #12]
 8003e2c:	1d11      	adds	r1, r2, #4
 8003e2e:	6812      	ldr	r2, [r2, #0]
 8003e30:	9103      	str	r1, [sp, #12]
 8003e32:	2a00      	cmp	r2, #0
 8003e34:	db01      	blt.n	8003e3a <_svfiprintf_r+0xfa>
 8003e36:	9207      	str	r2, [sp, #28]
 8003e38:	e004      	b.n	8003e44 <_svfiprintf_r+0x104>
 8003e3a:	4252      	negs	r2, r2
 8003e3c:	f043 0302 	orr.w	r3, r3, #2
 8003e40:	9207      	str	r2, [sp, #28]
 8003e42:	9304      	str	r3, [sp, #16]
 8003e44:	783b      	ldrb	r3, [r7, #0]
 8003e46:	2b2e      	cmp	r3, #46	; 0x2e
 8003e48:	d10c      	bne.n	8003e64 <_svfiprintf_r+0x124>
 8003e4a:	787b      	ldrb	r3, [r7, #1]
 8003e4c:	2b2a      	cmp	r3, #42	; 0x2a
 8003e4e:	d133      	bne.n	8003eb8 <_svfiprintf_r+0x178>
 8003e50:	9b03      	ldr	r3, [sp, #12]
 8003e52:	1d1a      	adds	r2, r3, #4
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	9203      	str	r2, [sp, #12]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	bfb8      	it	lt
 8003e5c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8003e60:	3702      	adds	r7, #2
 8003e62:	9305      	str	r3, [sp, #20]
 8003e64:	4d2e      	ldr	r5, [pc, #184]	; (8003f20 <_svfiprintf_r+0x1e0>)
 8003e66:	7839      	ldrb	r1, [r7, #0]
 8003e68:	2203      	movs	r2, #3
 8003e6a:	4628      	mov	r0, r5
 8003e6c:	f7fc f9c0 	bl	80001f0 <memchr>
 8003e70:	b138      	cbz	r0, 8003e82 <_svfiprintf_r+0x142>
 8003e72:	2340      	movs	r3, #64	; 0x40
 8003e74:	1b40      	subs	r0, r0, r5
 8003e76:	fa03 f000 	lsl.w	r0, r3, r0
 8003e7a:	9b04      	ldr	r3, [sp, #16]
 8003e7c:	4303      	orrs	r3, r0
 8003e7e:	3701      	adds	r7, #1
 8003e80:	9304      	str	r3, [sp, #16]
 8003e82:	7839      	ldrb	r1, [r7, #0]
 8003e84:	4827      	ldr	r0, [pc, #156]	; (8003f24 <_svfiprintf_r+0x1e4>)
 8003e86:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003e8a:	2206      	movs	r2, #6
 8003e8c:	1c7e      	adds	r6, r7, #1
 8003e8e:	f7fc f9af 	bl	80001f0 <memchr>
 8003e92:	2800      	cmp	r0, #0
 8003e94:	d038      	beq.n	8003f08 <_svfiprintf_r+0x1c8>
 8003e96:	4b24      	ldr	r3, [pc, #144]	; (8003f28 <_svfiprintf_r+0x1e8>)
 8003e98:	bb13      	cbnz	r3, 8003ee0 <_svfiprintf_r+0x1a0>
 8003e9a:	9b03      	ldr	r3, [sp, #12]
 8003e9c:	3307      	adds	r3, #7
 8003e9e:	f023 0307 	bic.w	r3, r3, #7
 8003ea2:	3308      	adds	r3, #8
 8003ea4:	9303      	str	r3, [sp, #12]
 8003ea6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003ea8:	444b      	add	r3, r9
 8003eaa:	9309      	str	r3, [sp, #36]	; 0x24
 8003eac:	e76d      	b.n	8003d8a <_svfiprintf_r+0x4a>
 8003eae:	fb05 3202 	mla	r2, r5, r2, r3
 8003eb2:	2001      	movs	r0, #1
 8003eb4:	460f      	mov	r7, r1
 8003eb6:	e7a6      	b.n	8003e06 <_svfiprintf_r+0xc6>
 8003eb8:	2300      	movs	r3, #0
 8003eba:	3701      	adds	r7, #1
 8003ebc:	9305      	str	r3, [sp, #20]
 8003ebe:	4619      	mov	r1, r3
 8003ec0:	250a      	movs	r5, #10
 8003ec2:	4638      	mov	r0, r7
 8003ec4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003ec8:	3a30      	subs	r2, #48	; 0x30
 8003eca:	2a09      	cmp	r2, #9
 8003ecc:	d903      	bls.n	8003ed6 <_svfiprintf_r+0x196>
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d0c8      	beq.n	8003e64 <_svfiprintf_r+0x124>
 8003ed2:	9105      	str	r1, [sp, #20]
 8003ed4:	e7c6      	b.n	8003e64 <_svfiprintf_r+0x124>
 8003ed6:	fb05 2101 	mla	r1, r5, r1, r2
 8003eda:	2301      	movs	r3, #1
 8003edc:	4607      	mov	r7, r0
 8003ede:	e7f0      	b.n	8003ec2 <_svfiprintf_r+0x182>
 8003ee0:	ab03      	add	r3, sp, #12
 8003ee2:	9300      	str	r3, [sp, #0]
 8003ee4:	4622      	mov	r2, r4
 8003ee6:	4b11      	ldr	r3, [pc, #68]	; (8003f2c <_svfiprintf_r+0x1ec>)
 8003ee8:	a904      	add	r1, sp, #16
 8003eea:	4640      	mov	r0, r8
 8003eec:	f3af 8000 	nop.w
 8003ef0:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8003ef4:	4681      	mov	r9, r0
 8003ef6:	d1d6      	bne.n	8003ea6 <_svfiprintf_r+0x166>
 8003ef8:	89a3      	ldrh	r3, [r4, #12]
 8003efa:	065b      	lsls	r3, r3, #25
 8003efc:	f53f af35 	bmi.w	8003d6a <_svfiprintf_r+0x2a>
 8003f00:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003f02:	b01d      	add	sp, #116	; 0x74
 8003f04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f08:	ab03      	add	r3, sp, #12
 8003f0a:	9300      	str	r3, [sp, #0]
 8003f0c:	4622      	mov	r2, r4
 8003f0e:	4b07      	ldr	r3, [pc, #28]	; (8003f2c <_svfiprintf_r+0x1ec>)
 8003f10:	a904      	add	r1, sp, #16
 8003f12:	4640      	mov	r0, r8
 8003f14:	f000 f882 	bl	800401c <_printf_i>
 8003f18:	e7ea      	b.n	8003ef0 <_svfiprintf_r+0x1b0>
 8003f1a:	bf00      	nop
 8003f1c:	080046d4 	.word	0x080046d4
 8003f20:	080046da 	.word	0x080046da
 8003f24:	080046de 	.word	0x080046de
 8003f28:	00000000 	.word	0x00000000
 8003f2c:	08003c8d 	.word	0x08003c8d

08003f30 <_printf_common>:
 8003f30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f34:	4691      	mov	r9, r2
 8003f36:	461f      	mov	r7, r3
 8003f38:	688a      	ldr	r2, [r1, #8]
 8003f3a:	690b      	ldr	r3, [r1, #16]
 8003f3c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003f40:	4293      	cmp	r3, r2
 8003f42:	bfb8      	it	lt
 8003f44:	4613      	movlt	r3, r2
 8003f46:	f8c9 3000 	str.w	r3, [r9]
 8003f4a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003f4e:	4606      	mov	r6, r0
 8003f50:	460c      	mov	r4, r1
 8003f52:	b112      	cbz	r2, 8003f5a <_printf_common+0x2a>
 8003f54:	3301      	adds	r3, #1
 8003f56:	f8c9 3000 	str.w	r3, [r9]
 8003f5a:	6823      	ldr	r3, [r4, #0]
 8003f5c:	0699      	lsls	r1, r3, #26
 8003f5e:	bf42      	ittt	mi
 8003f60:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003f64:	3302      	addmi	r3, #2
 8003f66:	f8c9 3000 	strmi.w	r3, [r9]
 8003f6a:	6825      	ldr	r5, [r4, #0]
 8003f6c:	f015 0506 	ands.w	r5, r5, #6
 8003f70:	d107      	bne.n	8003f82 <_printf_common+0x52>
 8003f72:	f104 0a19 	add.w	sl, r4, #25
 8003f76:	68e3      	ldr	r3, [r4, #12]
 8003f78:	f8d9 2000 	ldr.w	r2, [r9]
 8003f7c:	1a9b      	subs	r3, r3, r2
 8003f7e:	42ab      	cmp	r3, r5
 8003f80:	dc28      	bgt.n	8003fd4 <_printf_common+0xa4>
 8003f82:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003f86:	6822      	ldr	r2, [r4, #0]
 8003f88:	3300      	adds	r3, #0
 8003f8a:	bf18      	it	ne
 8003f8c:	2301      	movne	r3, #1
 8003f8e:	0692      	lsls	r2, r2, #26
 8003f90:	d42d      	bmi.n	8003fee <_printf_common+0xbe>
 8003f92:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003f96:	4639      	mov	r1, r7
 8003f98:	4630      	mov	r0, r6
 8003f9a:	47c0      	blx	r8
 8003f9c:	3001      	adds	r0, #1
 8003f9e:	d020      	beq.n	8003fe2 <_printf_common+0xb2>
 8003fa0:	6823      	ldr	r3, [r4, #0]
 8003fa2:	68e5      	ldr	r5, [r4, #12]
 8003fa4:	f8d9 2000 	ldr.w	r2, [r9]
 8003fa8:	f003 0306 	and.w	r3, r3, #6
 8003fac:	2b04      	cmp	r3, #4
 8003fae:	bf08      	it	eq
 8003fb0:	1aad      	subeq	r5, r5, r2
 8003fb2:	68a3      	ldr	r3, [r4, #8]
 8003fb4:	6922      	ldr	r2, [r4, #16]
 8003fb6:	bf0c      	ite	eq
 8003fb8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003fbc:	2500      	movne	r5, #0
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	bfc4      	itt	gt
 8003fc2:	1a9b      	subgt	r3, r3, r2
 8003fc4:	18ed      	addgt	r5, r5, r3
 8003fc6:	f04f 0900 	mov.w	r9, #0
 8003fca:	341a      	adds	r4, #26
 8003fcc:	454d      	cmp	r5, r9
 8003fce:	d11a      	bne.n	8004006 <_printf_common+0xd6>
 8003fd0:	2000      	movs	r0, #0
 8003fd2:	e008      	b.n	8003fe6 <_printf_common+0xb6>
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	4652      	mov	r2, sl
 8003fd8:	4639      	mov	r1, r7
 8003fda:	4630      	mov	r0, r6
 8003fdc:	47c0      	blx	r8
 8003fde:	3001      	adds	r0, #1
 8003fe0:	d103      	bne.n	8003fea <_printf_common+0xba>
 8003fe2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003fe6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003fea:	3501      	adds	r5, #1
 8003fec:	e7c3      	b.n	8003f76 <_printf_common+0x46>
 8003fee:	18e1      	adds	r1, r4, r3
 8003ff0:	1c5a      	adds	r2, r3, #1
 8003ff2:	2030      	movs	r0, #48	; 0x30
 8003ff4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003ff8:	4422      	add	r2, r4
 8003ffa:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003ffe:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004002:	3302      	adds	r3, #2
 8004004:	e7c5      	b.n	8003f92 <_printf_common+0x62>
 8004006:	2301      	movs	r3, #1
 8004008:	4622      	mov	r2, r4
 800400a:	4639      	mov	r1, r7
 800400c:	4630      	mov	r0, r6
 800400e:	47c0      	blx	r8
 8004010:	3001      	adds	r0, #1
 8004012:	d0e6      	beq.n	8003fe2 <_printf_common+0xb2>
 8004014:	f109 0901 	add.w	r9, r9, #1
 8004018:	e7d8      	b.n	8003fcc <_printf_common+0x9c>
	...

0800401c <_printf_i>:
 800401c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004020:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004024:	460c      	mov	r4, r1
 8004026:	7e09      	ldrb	r1, [r1, #24]
 8004028:	b085      	sub	sp, #20
 800402a:	296e      	cmp	r1, #110	; 0x6e
 800402c:	4617      	mov	r7, r2
 800402e:	4606      	mov	r6, r0
 8004030:	4698      	mov	r8, r3
 8004032:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004034:	f000 80b3 	beq.w	800419e <_printf_i+0x182>
 8004038:	d822      	bhi.n	8004080 <_printf_i+0x64>
 800403a:	2963      	cmp	r1, #99	; 0x63
 800403c:	d036      	beq.n	80040ac <_printf_i+0x90>
 800403e:	d80a      	bhi.n	8004056 <_printf_i+0x3a>
 8004040:	2900      	cmp	r1, #0
 8004042:	f000 80b9 	beq.w	80041b8 <_printf_i+0x19c>
 8004046:	2958      	cmp	r1, #88	; 0x58
 8004048:	f000 8083 	beq.w	8004152 <_printf_i+0x136>
 800404c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004050:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004054:	e032      	b.n	80040bc <_printf_i+0xa0>
 8004056:	2964      	cmp	r1, #100	; 0x64
 8004058:	d001      	beq.n	800405e <_printf_i+0x42>
 800405a:	2969      	cmp	r1, #105	; 0x69
 800405c:	d1f6      	bne.n	800404c <_printf_i+0x30>
 800405e:	6820      	ldr	r0, [r4, #0]
 8004060:	6813      	ldr	r3, [r2, #0]
 8004062:	0605      	lsls	r5, r0, #24
 8004064:	f103 0104 	add.w	r1, r3, #4
 8004068:	d52a      	bpl.n	80040c0 <_printf_i+0xa4>
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	6011      	str	r1, [r2, #0]
 800406e:	2b00      	cmp	r3, #0
 8004070:	da03      	bge.n	800407a <_printf_i+0x5e>
 8004072:	222d      	movs	r2, #45	; 0x2d
 8004074:	425b      	negs	r3, r3
 8004076:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800407a:	486f      	ldr	r0, [pc, #444]	; (8004238 <_printf_i+0x21c>)
 800407c:	220a      	movs	r2, #10
 800407e:	e039      	b.n	80040f4 <_printf_i+0xd8>
 8004080:	2973      	cmp	r1, #115	; 0x73
 8004082:	f000 809d 	beq.w	80041c0 <_printf_i+0x1a4>
 8004086:	d808      	bhi.n	800409a <_printf_i+0x7e>
 8004088:	296f      	cmp	r1, #111	; 0x6f
 800408a:	d020      	beq.n	80040ce <_printf_i+0xb2>
 800408c:	2970      	cmp	r1, #112	; 0x70
 800408e:	d1dd      	bne.n	800404c <_printf_i+0x30>
 8004090:	6823      	ldr	r3, [r4, #0]
 8004092:	f043 0320 	orr.w	r3, r3, #32
 8004096:	6023      	str	r3, [r4, #0]
 8004098:	e003      	b.n	80040a2 <_printf_i+0x86>
 800409a:	2975      	cmp	r1, #117	; 0x75
 800409c:	d017      	beq.n	80040ce <_printf_i+0xb2>
 800409e:	2978      	cmp	r1, #120	; 0x78
 80040a0:	d1d4      	bne.n	800404c <_printf_i+0x30>
 80040a2:	2378      	movs	r3, #120	; 0x78
 80040a4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80040a8:	4864      	ldr	r0, [pc, #400]	; (800423c <_printf_i+0x220>)
 80040aa:	e055      	b.n	8004158 <_printf_i+0x13c>
 80040ac:	6813      	ldr	r3, [r2, #0]
 80040ae:	1d19      	adds	r1, r3, #4
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	6011      	str	r1, [r2, #0]
 80040b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80040b8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80040bc:	2301      	movs	r3, #1
 80040be:	e08c      	b.n	80041da <_printf_i+0x1be>
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	6011      	str	r1, [r2, #0]
 80040c4:	f010 0f40 	tst.w	r0, #64	; 0x40
 80040c8:	bf18      	it	ne
 80040ca:	b21b      	sxthne	r3, r3
 80040cc:	e7cf      	b.n	800406e <_printf_i+0x52>
 80040ce:	6813      	ldr	r3, [r2, #0]
 80040d0:	6825      	ldr	r5, [r4, #0]
 80040d2:	1d18      	adds	r0, r3, #4
 80040d4:	6010      	str	r0, [r2, #0]
 80040d6:	0628      	lsls	r0, r5, #24
 80040d8:	d501      	bpl.n	80040de <_printf_i+0xc2>
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	e002      	b.n	80040e4 <_printf_i+0xc8>
 80040de:	0668      	lsls	r0, r5, #25
 80040e0:	d5fb      	bpl.n	80040da <_printf_i+0xbe>
 80040e2:	881b      	ldrh	r3, [r3, #0]
 80040e4:	4854      	ldr	r0, [pc, #336]	; (8004238 <_printf_i+0x21c>)
 80040e6:	296f      	cmp	r1, #111	; 0x6f
 80040e8:	bf14      	ite	ne
 80040ea:	220a      	movne	r2, #10
 80040ec:	2208      	moveq	r2, #8
 80040ee:	2100      	movs	r1, #0
 80040f0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80040f4:	6865      	ldr	r5, [r4, #4]
 80040f6:	60a5      	str	r5, [r4, #8]
 80040f8:	2d00      	cmp	r5, #0
 80040fa:	f2c0 8095 	blt.w	8004228 <_printf_i+0x20c>
 80040fe:	6821      	ldr	r1, [r4, #0]
 8004100:	f021 0104 	bic.w	r1, r1, #4
 8004104:	6021      	str	r1, [r4, #0]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d13d      	bne.n	8004186 <_printf_i+0x16a>
 800410a:	2d00      	cmp	r5, #0
 800410c:	f040 808e 	bne.w	800422c <_printf_i+0x210>
 8004110:	4665      	mov	r5, ip
 8004112:	2a08      	cmp	r2, #8
 8004114:	d10b      	bne.n	800412e <_printf_i+0x112>
 8004116:	6823      	ldr	r3, [r4, #0]
 8004118:	07db      	lsls	r3, r3, #31
 800411a:	d508      	bpl.n	800412e <_printf_i+0x112>
 800411c:	6923      	ldr	r3, [r4, #16]
 800411e:	6862      	ldr	r2, [r4, #4]
 8004120:	429a      	cmp	r2, r3
 8004122:	bfde      	ittt	le
 8004124:	2330      	movle	r3, #48	; 0x30
 8004126:	f805 3c01 	strble.w	r3, [r5, #-1]
 800412a:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800412e:	ebac 0305 	sub.w	r3, ip, r5
 8004132:	6123      	str	r3, [r4, #16]
 8004134:	f8cd 8000 	str.w	r8, [sp]
 8004138:	463b      	mov	r3, r7
 800413a:	aa03      	add	r2, sp, #12
 800413c:	4621      	mov	r1, r4
 800413e:	4630      	mov	r0, r6
 8004140:	f7ff fef6 	bl	8003f30 <_printf_common>
 8004144:	3001      	adds	r0, #1
 8004146:	d14d      	bne.n	80041e4 <_printf_i+0x1c8>
 8004148:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800414c:	b005      	add	sp, #20
 800414e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004152:	4839      	ldr	r0, [pc, #228]	; (8004238 <_printf_i+0x21c>)
 8004154:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004158:	6813      	ldr	r3, [r2, #0]
 800415a:	6821      	ldr	r1, [r4, #0]
 800415c:	1d1d      	adds	r5, r3, #4
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	6015      	str	r5, [r2, #0]
 8004162:	060a      	lsls	r2, r1, #24
 8004164:	d50b      	bpl.n	800417e <_printf_i+0x162>
 8004166:	07ca      	lsls	r2, r1, #31
 8004168:	bf44      	itt	mi
 800416a:	f041 0120 	orrmi.w	r1, r1, #32
 800416e:	6021      	strmi	r1, [r4, #0]
 8004170:	b91b      	cbnz	r3, 800417a <_printf_i+0x15e>
 8004172:	6822      	ldr	r2, [r4, #0]
 8004174:	f022 0220 	bic.w	r2, r2, #32
 8004178:	6022      	str	r2, [r4, #0]
 800417a:	2210      	movs	r2, #16
 800417c:	e7b7      	b.n	80040ee <_printf_i+0xd2>
 800417e:	064d      	lsls	r5, r1, #25
 8004180:	bf48      	it	mi
 8004182:	b29b      	uxthmi	r3, r3
 8004184:	e7ef      	b.n	8004166 <_printf_i+0x14a>
 8004186:	4665      	mov	r5, ip
 8004188:	fbb3 f1f2 	udiv	r1, r3, r2
 800418c:	fb02 3311 	mls	r3, r2, r1, r3
 8004190:	5cc3      	ldrb	r3, [r0, r3]
 8004192:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004196:	460b      	mov	r3, r1
 8004198:	2900      	cmp	r1, #0
 800419a:	d1f5      	bne.n	8004188 <_printf_i+0x16c>
 800419c:	e7b9      	b.n	8004112 <_printf_i+0xf6>
 800419e:	6813      	ldr	r3, [r2, #0]
 80041a0:	6825      	ldr	r5, [r4, #0]
 80041a2:	6961      	ldr	r1, [r4, #20]
 80041a4:	1d18      	adds	r0, r3, #4
 80041a6:	6010      	str	r0, [r2, #0]
 80041a8:	0628      	lsls	r0, r5, #24
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	d501      	bpl.n	80041b2 <_printf_i+0x196>
 80041ae:	6019      	str	r1, [r3, #0]
 80041b0:	e002      	b.n	80041b8 <_printf_i+0x19c>
 80041b2:	066a      	lsls	r2, r5, #25
 80041b4:	d5fb      	bpl.n	80041ae <_printf_i+0x192>
 80041b6:	8019      	strh	r1, [r3, #0]
 80041b8:	2300      	movs	r3, #0
 80041ba:	6123      	str	r3, [r4, #16]
 80041bc:	4665      	mov	r5, ip
 80041be:	e7b9      	b.n	8004134 <_printf_i+0x118>
 80041c0:	6813      	ldr	r3, [r2, #0]
 80041c2:	1d19      	adds	r1, r3, #4
 80041c4:	6011      	str	r1, [r2, #0]
 80041c6:	681d      	ldr	r5, [r3, #0]
 80041c8:	6862      	ldr	r2, [r4, #4]
 80041ca:	2100      	movs	r1, #0
 80041cc:	4628      	mov	r0, r5
 80041ce:	f7fc f80f 	bl	80001f0 <memchr>
 80041d2:	b108      	cbz	r0, 80041d8 <_printf_i+0x1bc>
 80041d4:	1b40      	subs	r0, r0, r5
 80041d6:	6060      	str	r0, [r4, #4]
 80041d8:	6863      	ldr	r3, [r4, #4]
 80041da:	6123      	str	r3, [r4, #16]
 80041dc:	2300      	movs	r3, #0
 80041de:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80041e2:	e7a7      	b.n	8004134 <_printf_i+0x118>
 80041e4:	6923      	ldr	r3, [r4, #16]
 80041e6:	462a      	mov	r2, r5
 80041e8:	4639      	mov	r1, r7
 80041ea:	4630      	mov	r0, r6
 80041ec:	47c0      	blx	r8
 80041ee:	3001      	adds	r0, #1
 80041f0:	d0aa      	beq.n	8004148 <_printf_i+0x12c>
 80041f2:	6823      	ldr	r3, [r4, #0]
 80041f4:	079b      	lsls	r3, r3, #30
 80041f6:	d413      	bmi.n	8004220 <_printf_i+0x204>
 80041f8:	68e0      	ldr	r0, [r4, #12]
 80041fa:	9b03      	ldr	r3, [sp, #12]
 80041fc:	4298      	cmp	r0, r3
 80041fe:	bfb8      	it	lt
 8004200:	4618      	movlt	r0, r3
 8004202:	e7a3      	b.n	800414c <_printf_i+0x130>
 8004204:	2301      	movs	r3, #1
 8004206:	464a      	mov	r2, r9
 8004208:	4639      	mov	r1, r7
 800420a:	4630      	mov	r0, r6
 800420c:	47c0      	blx	r8
 800420e:	3001      	adds	r0, #1
 8004210:	d09a      	beq.n	8004148 <_printf_i+0x12c>
 8004212:	3501      	adds	r5, #1
 8004214:	68e3      	ldr	r3, [r4, #12]
 8004216:	9a03      	ldr	r2, [sp, #12]
 8004218:	1a9b      	subs	r3, r3, r2
 800421a:	42ab      	cmp	r3, r5
 800421c:	dcf2      	bgt.n	8004204 <_printf_i+0x1e8>
 800421e:	e7eb      	b.n	80041f8 <_printf_i+0x1dc>
 8004220:	2500      	movs	r5, #0
 8004222:	f104 0919 	add.w	r9, r4, #25
 8004226:	e7f5      	b.n	8004214 <_printf_i+0x1f8>
 8004228:	2b00      	cmp	r3, #0
 800422a:	d1ac      	bne.n	8004186 <_printf_i+0x16a>
 800422c:	7803      	ldrb	r3, [r0, #0]
 800422e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004232:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004236:	e76c      	b.n	8004112 <_printf_i+0xf6>
 8004238:	080046e5 	.word	0x080046e5
 800423c:	080046f6 	.word	0x080046f6

08004240 <_free_r>:
 8004240:	b538      	push	{r3, r4, r5, lr}
 8004242:	4605      	mov	r5, r0
 8004244:	2900      	cmp	r1, #0
 8004246:	d045      	beq.n	80042d4 <_free_r+0x94>
 8004248:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800424c:	1f0c      	subs	r4, r1, #4
 800424e:	2b00      	cmp	r3, #0
 8004250:	bfb8      	it	lt
 8004252:	18e4      	addlt	r4, r4, r3
 8004254:	f000 f8d2 	bl	80043fc <__malloc_lock>
 8004258:	4a1f      	ldr	r2, [pc, #124]	; (80042d8 <_free_r+0x98>)
 800425a:	6813      	ldr	r3, [r2, #0]
 800425c:	4610      	mov	r0, r2
 800425e:	b933      	cbnz	r3, 800426e <_free_r+0x2e>
 8004260:	6063      	str	r3, [r4, #4]
 8004262:	6014      	str	r4, [r2, #0]
 8004264:	4628      	mov	r0, r5
 8004266:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800426a:	f000 b8c8 	b.w	80043fe <__malloc_unlock>
 800426e:	42a3      	cmp	r3, r4
 8004270:	d90c      	bls.n	800428c <_free_r+0x4c>
 8004272:	6821      	ldr	r1, [r4, #0]
 8004274:	1862      	adds	r2, r4, r1
 8004276:	4293      	cmp	r3, r2
 8004278:	bf04      	itt	eq
 800427a:	681a      	ldreq	r2, [r3, #0]
 800427c:	685b      	ldreq	r3, [r3, #4]
 800427e:	6063      	str	r3, [r4, #4]
 8004280:	bf04      	itt	eq
 8004282:	1852      	addeq	r2, r2, r1
 8004284:	6022      	streq	r2, [r4, #0]
 8004286:	6004      	str	r4, [r0, #0]
 8004288:	e7ec      	b.n	8004264 <_free_r+0x24>
 800428a:	4613      	mov	r3, r2
 800428c:	685a      	ldr	r2, [r3, #4]
 800428e:	b10a      	cbz	r2, 8004294 <_free_r+0x54>
 8004290:	42a2      	cmp	r2, r4
 8004292:	d9fa      	bls.n	800428a <_free_r+0x4a>
 8004294:	6819      	ldr	r1, [r3, #0]
 8004296:	1858      	adds	r0, r3, r1
 8004298:	42a0      	cmp	r0, r4
 800429a:	d10b      	bne.n	80042b4 <_free_r+0x74>
 800429c:	6820      	ldr	r0, [r4, #0]
 800429e:	4401      	add	r1, r0
 80042a0:	1858      	adds	r0, r3, r1
 80042a2:	4282      	cmp	r2, r0
 80042a4:	6019      	str	r1, [r3, #0]
 80042a6:	d1dd      	bne.n	8004264 <_free_r+0x24>
 80042a8:	6810      	ldr	r0, [r2, #0]
 80042aa:	6852      	ldr	r2, [r2, #4]
 80042ac:	605a      	str	r2, [r3, #4]
 80042ae:	4401      	add	r1, r0
 80042b0:	6019      	str	r1, [r3, #0]
 80042b2:	e7d7      	b.n	8004264 <_free_r+0x24>
 80042b4:	d902      	bls.n	80042bc <_free_r+0x7c>
 80042b6:	230c      	movs	r3, #12
 80042b8:	602b      	str	r3, [r5, #0]
 80042ba:	e7d3      	b.n	8004264 <_free_r+0x24>
 80042bc:	6820      	ldr	r0, [r4, #0]
 80042be:	1821      	adds	r1, r4, r0
 80042c0:	428a      	cmp	r2, r1
 80042c2:	bf04      	itt	eq
 80042c4:	6811      	ldreq	r1, [r2, #0]
 80042c6:	6852      	ldreq	r2, [r2, #4]
 80042c8:	6062      	str	r2, [r4, #4]
 80042ca:	bf04      	itt	eq
 80042cc:	1809      	addeq	r1, r1, r0
 80042ce:	6021      	streq	r1, [r4, #0]
 80042d0:	605c      	str	r4, [r3, #4]
 80042d2:	e7c7      	b.n	8004264 <_free_r+0x24>
 80042d4:	bd38      	pop	{r3, r4, r5, pc}
 80042d6:	bf00      	nop
 80042d8:	20000498 	.word	0x20000498

080042dc <_malloc_r>:
 80042dc:	b570      	push	{r4, r5, r6, lr}
 80042de:	1ccd      	adds	r5, r1, #3
 80042e0:	f025 0503 	bic.w	r5, r5, #3
 80042e4:	3508      	adds	r5, #8
 80042e6:	2d0c      	cmp	r5, #12
 80042e8:	bf38      	it	cc
 80042ea:	250c      	movcc	r5, #12
 80042ec:	2d00      	cmp	r5, #0
 80042ee:	4606      	mov	r6, r0
 80042f0:	db01      	blt.n	80042f6 <_malloc_r+0x1a>
 80042f2:	42a9      	cmp	r1, r5
 80042f4:	d903      	bls.n	80042fe <_malloc_r+0x22>
 80042f6:	230c      	movs	r3, #12
 80042f8:	6033      	str	r3, [r6, #0]
 80042fa:	2000      	movs	r0, #0
 80042fc:	bd70      	pop	{r4, r5, r6, pc}
 80042fe:	f000 f87d 	bl	80043fc <__malloc_lock>
 8004302:	4a21      	ldr	r2, [pc, #132]	; (8004388 <_malloc_r+0xac>)
 8004304:	6814      	ldr	r4, [r2, #0]
 8004306:	4621      	mov	r1, r4
 8004308:	b991      	cbnz	r1, 8004330 <_malloc_r+0x54>
 800430a:	4c20      	ldr	r4, [pc, #128]	; (800438c <_malloc_r+0xb0>)
 800430c:	6823      	ldr	r3, [r4, #0]
 800430e:	b91b      	cbnz	r3, 8004318 <_malloc_r+0x3c>
 8004310:	4630      	mov	r0, r6
 8004312:	f000 f863 	bl	80043dc <_sbrk_r>
 8004316:	6020      	str	r0, [r4, #0]
 8004318:	4629      	mov	r1, r5
 800431a:	4630      	mov	r0, r6
 800431c:	f000 f85e 	bl	80043dc <_sbrk_r>
 8004320:	1c43      	adds	r3, r0, #1
 8004322:	d124      	bne.n	800436e <_malloc_r+0x92>
 8004324:	230c      	movs	r3, #12
 8004326:	6033      	str	r3, [r6, #0]
 8004328:	4630      	mov	r0, r6
 800432a:	f000 f868 	bl	80043fe <__malloc_unlock>
 800432e:	e7e4      	b.n	80042fa <_malloc_r+0x1e>
 8004330:	680b      	ldr	r3, [r1, #0]
 8004332:	1b5b      	subs	r3, r3, r5
 8004334:	d418      	bmi.n	8004368 <_malloc_r+0x8c>
 8004336:	2b0b      	cmp	r3, #11
 8004338:	d90f      	bls.n	800435a <_malloc_r+0x7e>
 800433a:	600b      	str	r3, [r1, #0]
 800433c:	50cd      	str	r5, [r1, r3]
 800433e:	18cc      	adds	r4, r1, r3
 8004340:	4630      	mov	r0, r6
 8004342:	f000 f85c 	bl	80043fe <__malloc_unlock>
 8004346:	f104 000b 	add.w	r0, r4, #11
 800434a:	1d23      	adds	r3, r4, #4
 800434c:	f020 0007 	bic.w	r0, r0, #7
 8004350:	1ac3      	subs	r3, r0, r3
 8004352:	d0d3      	beq.n	80042fc <_malloc_r+0x20>
 8004354:	425a      	negs	r2, r3
 8004356:	50e2      	str	r2, [r4, r3]
 8004358:	e7d0      	b.n	80042fc <_malloc_r+0x20>
 800435a:	428c      	cmp	r4, r1
 800435c:	684b      	ldr	r3, [r1, #4]
 800435e:	bf16      	itet	ne
 8004360:	6063      	strne	r3, [r4, #4]
 8004362:	6013      	streq	r3, [r2, #0]
 8004364:	460c      	movne	r4, r1
 8004366:	e7eb      	b.n	8004340 <_malloc_r+0x64>
 8004368:	460c      	mov	r4, r1
 800436a:	6849      	ldr	r1, [r1, #4]
 800436c:	e7cc      	b.n	8004308 <_malloc_r+0x2c>
 800436e:	1cc4      	adds	r4, r0, #3
 8004370:	f024 0403 	bic.w	r4, r4, #3
 8004374:	42a0      	cmp	r0, r4
 8004376:	d005      	beq.n	8004384 <_malloc_r+0xa8>
 8004378:	1a21      	subs	r1, r4, r0
 800437a:	4630      	mov	r0, r6
 800437c:	f000 f82e 	bl	80043dc <_sbrk_r>
 8004380:	3001      	adds	r0, #1
 8004382:	d0cf      	beq.n	8004324 <_malloc_r+0x48>
 8004384:	6025      	str	r5, [r4, #0]
 8004386:	e7db      	b.n	8004340 <_malloc_r+0x64>
 8004388:	20000498 	.word	0x20000498
 800438c:	2000049c 	.word	0x2000049c

08004390 <_realloc_r>:
 8004390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004392:	4607      	mov	r7, r0
 8004394:	4614      	mov	r4, r2
 8004396:	460e      	mov	r6, r1
 8004398:	b921      	cbnz	r1, 80043a4 <_realloc_r+0x14>
 800439a:	4611      	mov	r1, r2
 800439c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80043a0:	f7ff bf9c 	b.w	80042dc <_malloc_r>
 80043a4:	b922      	cbnz	r2, 80043b0 <_realloc_r+0x20>
 80043a6:	f7ff ff4b 	bl	8004240 <_free_r>
 80043aa:	4625      	mov	r5, r4
 80043ac:	4628      	mov	r0, r5
 80043ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80043b0:	f000 f826 	bl	8004400 <_malloc_usable_size_r>
 80043b4:	42a0      	cmp	r0, r4
 80043b6:	d20f      	bcs.n	80043d8 <_realloc_r+0x48>
 80043b8:	4621      	mov	r1, r4
 80043ba:	4638      	mov	r0, r7
 80043bc:	f7ff ff8e 	bl	80042dc <_malloc_r>
 80043c0:	4605      	mov	r5, r0
 80043c2:	2800      	cmp	r0, #0
 80043c4:	d0f2      	beq.n	80043ac <_realloc_r+0x1c>
 80043c6:	4631      	mov	r1, r6
 80043c8:	4622      	mov	r2, r4
 80043ca:	f7ff fc13 	bl	8003bf4 <memcpy>
 80043ce:	4631      	mov	r1, r6
 80043d0:	4638      	mov	r0, r7
 80043d2:	f7ff ff35 	bl	8004240 <_free_r>
 80043d6:	e7e9      	b.n	80043ac <_realloc_r+0x1c>
 80043d8:	4635      	mov	r5, r6
 80043da:	e7e7      	b.n	80043ac <_realloc_r+0x1c>

080043dc <_sbrk_r>:
 80043dc:	b538      	push	{r3, r4, r5, lr}
 80043de:	4c06      	ldr	r4, [pc, #24]	; (80043f8 <_sbrk_r+0x1c>)
 80043e0:	2300      	movs	r3, #0
 80043e2:	4605      	mov	r5, r0
 80043e4:	4608      	mov	r0, r1
 80043e6:	6023      	str	r3, [r4, #0]
 80043e8:	f7fc ff1c 	bl	8001224 <_sbrk>
 80043ec:	1c43      	adds	r3, r0, #1
 80043ee:	d102      	bne.n	80043f6 <_sbrk_r+0x1a>
 80043f0:	6823      	ldr	r3, [r4, #0]
 80043f2:	b103      	cbz	r3, 80043f6 <_sbrk_r+0x1a>
 80043f4:	602b      	str	r3, [r5, #0]
 80043f6:	bd38      	pop	{r3, r4, r5, pc}
 80043f8:	20000580 	.word	0x20000580

080043fc <__malloc_lock>:
 80043fc:	4770      	bx	lr

080043fe <__malloc_unlock>:
 80043fe:	4770      	bx	lr

08004400 <_malloc_usable_size_r>:
 8004400:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004404:	1f18      	subs	r0, r3, #4
 8004406:	2b00      	cmp	r3, #0
 8004408:	bfbc      	itt	lt
 800440a:	580b      	ldrlt	r3, [r1, r0]
 800440c:	18c0      	addlt	r0, r0, r3
 800440e:	4770      	bx	lr

08004410 <_init>:
 8004410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004412:	bf00      	nop
 8004414:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004416:	bc08      	pop	{r3}
 8004418:	469e      	mov	lr, r3
 800441a:	4770      	bx	lr

0800441c <_fini>:
 800441c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800441e:	bf00      	nop
 8004420:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004422:	bc08      	pop	{r3}
 8004424:	469e      	mov	lr, r3
 8004426:	4770      	bx	lr
